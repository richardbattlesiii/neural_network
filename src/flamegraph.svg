<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="758" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="741.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="741.00"> </text><svg id="frames" x="10" width="1180" total_samples="504689"><g><title>`0x7FF97BF72B54 (62 samples, 0.01%)</title><rect x="0.1238%" y="469" width="0.0123%" height="15" fill="rgb(227,0,7)" fg:x="625" fg:w="62"/><text x="0.3738%" y="479.50"></text></g><g><title>`0x7FF97BF72DBF (61 samples, 0.01%)</title><rect x="0.1773%" y="469" width="0.0121%" height="15" fill="rgb(217,0,24)" fg:x="895" fg:w="61"/><text x="0.4273%" y="479.50"></text></g><g><title>`0x7FF97BF72E4E (84 samples, 0.02%)</title><rect x="0.2344%" y="469" width="0.0166%" height="15" fill="rgb(221,193,54)" fg:x="1183" fg:w="84"/><text x="0.4844%" y="479.50"></text></g><g><title>`0x7FF97E62C324 (160 samples, 0.03%)</title><rect x="0.2510%" y="453" width="0.0317%" height="15" fill="rgb(248,212,6)" fg:x="1267" fg:w="160"/><text x="0.5010%" y="463.50"></text></g><g><title>`0x7FF97E62A10C (160 samples, 0.03%)</title><rect x="0.2510%" y="437" width="0.0317%" height="15" fill="rgb(208,68,35)" fg:x="1267" fg:w="160"/><text x="0.5010%" y="447.50"></text></g><g><title>`0x7FF97E636AC6 (160 samples, 0.03%)</title><rect x="0.2510%" y="421" width="0.0317%" height="15" fill="rgb(232,128,0)" fg:x="1267" fg:w="160"/><text x="0.5010%" y="431.50"></text></g><g><title>`0x7FF97E690364 (160 samples, 0.03%)</title><rect x="0.2510%" y="405" width="0.0317%" height="15" fill="rgb(207,160,47)" fg:x="1267" fg:w="160"/><text x="0.5010%" y="415.50"></text></g><g><title>`0x7FF97E62AFF1 (162 samples, 0.03%)</title><rect x="0.2510%" y="469" width="0.0321%" height="15" fill="rgb(228,23,34)" fg:x="1267" fg:w="162"/><text x="0.5010%" y="479.50"></text></g><g><title>`0x7FF968D5154E (384 samples, 0.08%)</title><rect x="0.3034%" y="453" width="0.0761%" height="15" fill="rgb(218,30,26)" fg:x="1531" fg:w="384"/><text x="0.5534%" y="463.50"></text></g><g><title>`0x7FF968D51556 (245 samples, 0.05%)</title><rect x="0.3794%" y="453" width="0.0485%" height="15" fill="rgb(220,122,19)" fg:x="1915" fg:w="245"/><text x="0.6294%" y="463.50"></text></g><g><title>`0x7FF968D5155E (51 samples, 0.01%)</title><rect x="0.4280%" y="453" width="0.0101%" height="15" fill="rgb(250,228,42)" fg:x="2160" fg:w="51"/><text x="0.6780%" y="463.50"></text></g><g><title>`0x7FF97E62AFF1 (100 samples, 0.02%)</title><rect x="0.4389%" y="453" width="0.0198%" height="15" fill="rgb(240,193,28)" fg:x="2215" fg:w="100"/><text x="0.6889%" y="463.50"></text></g><g><title>`0x7FF97E62C324 (100 samples, 0.02%)</title><rect x="0.4389%" y="437" width="0.0198%" height="15" fill="rgb(216,20,37)" fg:x="2215" fg:w="100"/><text x="0.6889%" y="447.50"></text></g><g><title>`0x7FF97E62A10C (100 samples, 0.02%)</title><rect x="0.4389%" y="421" width="0.0198%" height="15" fill="rgb(206,188,39)" fg:x="2215" fg:w="100"/><text x="0.6889%" y="431.50"></text></g><g><title>`0x7FF97E636AC6 (100 samples, 0.02%)</title><rect x="0.4389%" y="405" width="0.0198%" height="15" fill="rgb(217,207,13)" fg:x="2215" fg:w="100"/><text x="0.6889%" y="415.50"></text></g><g><title>`0x7FF97E690364 (99 samples, 0.02%)</title><rect x="0.4391%" y="389" width="0.0196%" height="15" fill="rgb(231,73,38)" fg:x="2216" fg:w="99"/><text x="0.6891%" y="399.50"></text></g><g><title>neural_network.exe`_ZN14neural_network7helpers20activation_functions11activate_2d17h29a1cef9a054f7dcE (421 samples, 0.08%)</title><rect x="0.4611%" y="437" width="0.0834%" height="15" fill="rgb(225,20,46)" fg:x="2327" fg:w="421"/><text x="0.7111%" y="447.50"></text></g><g><title>neural_network.exe`_ZN14matrixmultiply7packing9pack_avx217h13c2011a146f2013E (367 samples, 0.07%)</title><rect x="0.5457%" y="405" width="0.0727%" height="15" fill="rgb(210,31,41)" fg:x="2754" fg:w="367"/><text x="0.7957%" y="415.50"></text></g><g><title>neural_network.exe`_ZN247_$LT$ndarray..ArrayBase$LT$S$C$ndarray..dimension..dim..Dim$LT$$u5b$usize$u3b$$u20$2$u5d$$GT$$GT$$u20$as$u20$ndarray..linalg..impl_linalg..Dot$LT$ndarray..ArrayBase$LT$S2$C$ndarray..dimension..dim..Dim$LT$$u5b$usize$u3b$$u20$2$u5d$$GT$$GT$$GT$$GT$3dot17h5868e790f09ad45eE (8,662 samples, 1.72%)</title><rect x="0.5445%" y="437" width="1.7163%" height="15" fill="rgb(221,200,47)" fg:x="2748" fg:w="8662"/><text x="0.7945%" y="447.50"></text></g><g><title>neural_network.exe`Unknown (8,659 samples, 1.72%)</title><rect x="0.5451%" y="421" width="1.7157%" height="15" fill="rgb(226,26,5)" fg:x="2751" fg:w="8659"/><text x="0.7951%" y="431.50"></text></g><g><title>neural_network.exe`_ZN14matrixmultiply9threading27RangeChunkParallel$LT$G$GT$8for_each17hd8f2bb866c6244c4E (8,289 samples, 1.64%)</title><rect x="0.6184%" y="405" width="1.6424%" height="15" fill="rgb(249,33,26)" fg:x="3121" fg:w="8289"/><text x="0.8684%" y="415.50"></text></g><g><title>neural_network.exe`_ZN14matrixmultiply12sgemm_kernel17kernel_target_fma17h60f801d0d7a890adE (8,272 samples, 1.64%)</title><rect x="0.6218%" y="389" width="1.6390%" height="15" fill="rgb(235,183,28)" fg:x="3138" fg:w="8272"/><text x="0.8718%" y="399.50"></text></g><g><title>neural_network.exe`_ZN14neural_network6layers11dense_layer10DenseLayer4pass17h31e9cb57b26b93faE (9,101 samples, 1.80%)</title><rect x="0.4609%" y="453" width="1.8033%" height="15" fill="rgb(221,5,38)" fg:x="2326" fg:w="9101"/><text x="0.7109%" y="463.50">n..</text></g><g><title>`0x7FF97E62BFA7 (211 samples, 0.04%)</title><rect x="8.0517%" y="421" width="0.0418%" height="15" fill="rgb(247,18,42)" fg:x="40636" fg:w="211"/><text x="8.3017%" y="431.50"></text></g><g><title>`0x7FF97E62C337 (84 samples, 0.02%)</title><rect x="8.1014%" y="421" width="0.0166%" height="15" fill="rgb(241,131,45)" fg:x="40887" fg:w="84"/><text x="8.3514%" y="431.50"></text></g><g><title>`0x7FF97E62C342 (226 samples, 0.04%)</title><rect x="8.1181%" y="421" width="0.0448%" height="15" fill="rgb(249,31,29)" fg:x="40971" fg:w="226"/><text x="8.3681%" y="431.50"></text></g><g><title>`0x7FF97E62C350 (211 samples, 0.04%)</title><rect x="8.1628%" y="421" width="0.0418%" height="15" fill="rgb(225,111,53)" fg:x="41197" fg:w="211"/><text x="8.4128%" y="431.50"></text></g><g><title>`0x7FF97E62B077 (211 samples, 0.04%)</title><rect x="8.1628%" y="405" width="0.0418%" height="15" fill="rgb(238,160,17)" fg:x="41197" fg:w="211"/><text x="8.4128%" y="415.50"></text></g><g><title>`0x7FF97E69CB9A (415 samples, 0.08%)</title><rect x="8.2330%" y="421" width="0.0822%" height="15" fill="rgb(214,148,48)" fg:x="41551" fg:w="415"/><text x="8.4830%" y="431.50"></text></g><g><title>`0x7FF97E69CB9D (164 samples, 0.03%)</title><rect x="8.3152%" y="421" width="0.0325%" height="15" fill="rgb(232,36,49)" fg:x="41966" fg:w="164"/><text x="8.5652%" y="431.50"></text></g><g><title>`0x7FF97E69CBA1 (392 samples, 0.08%)</title><rect x="8.3477%" y="421" width="0.0777%" height="15" fill="rgb(209,103,24)" fg:x="42130" fg:w="392"/><text x="8.5977%" y="431.50"></text></g><g><title>`0x7FF97E69CBA8 (93 samples, 0.02%)</title><rect x="8.4258%" y="421" width="0.0184%" height="15" fill="rgb(229,88,8)" fg:x="42524" fg:w="93"/><text x="8.6758%" y="431.50"></text></g><g><title>`0x7FF97E69CBBC (253 samples, 0.05%)</title><rect x="8.4607%" y="421" width="0.0501%" height="15" fill="rgb(213,181,19)" fg:x="42700" fg:w="253"/><text x="8.7107%" y="431.50"></text></g><g><title>`0x7FF97E69CBC2 (131 samples, 0.03%)</title><rect x="8.5110%" y="421" width="0.0260%" height="15" fill="rgb(254,191,54)" fg:x="42954" fg:w="131"/><text x="8.7610%" y="431.50"></text></g><g><title>`0x7FF97E69CBF4 (180 samples, 0.04%)</title><rect x="8.5417%" y="421" width="0.0357%" height="15" fill="rgb(241,83,37)" fg:x="43109" fg:w="180"/><text x="8.7917%" y="431.50"></text></g><g><title>`0x7FF97E69CC4F (170 samples, 0.03%)</title><rect x="8.5793%" y="421" width="0.0337%" height="15" fill="rgb(233,36,39)" fg:x="43299" fg:w="170"/><text x="8.8293%" y="431.50"></text></g><g><title>`0x7FF97E69CC6A (146 samples, 0.03%)</title><rect x="8.6134%" y="421" width="0.0289%" height="15" fill="rgb(226,3,54)" fg:x="43471" fg:w="146"/><text x="8.8634%" y="431.50"></text></g><g><title>`0x7FF97E69CC6F (2,887 samples, 0.57%)</title><rect x="8.6424%" y="421" width="0.5720%" height="15" fill="rgb(245,192,40)" fg:x="43617" fg:w="2887"/><text x="8.8924%" y="431.50"></text></g><g><title>`0x7FF97E69CC81 (74 samples, 0.01%)</title><rect x="9.2144%" y="421" width="0.0147%" height="15" fill="rgb(238,167,29)" fg:x="46504" fg:w="74"/><text x="9.4644%" y="431.50"></text></g><g><title>`0x7FF97E69CC88 (146 samples, 0.03%)</title><rect x="9.2290%" y="421" width="0.0289%" height="15" fill="rgb(232,182,51)" fg:x="46578" fg:w="146"/><text x="9.4790%" y="431.50"></text></g><g><title>`0x7FF97E69CCAF (263 samples, 0.05%)</title><rect x="9.2584%" y="421" width="0.0521%" height="15" fill="rgb(231,60,39)" fg:x="46726" fg:w="263"/><text x="9.5084%" y="431.50"></text></g><g><title>`0x7FF97E69CCF4 (127 samples, 0.03%)</title><rect x="9.3105%" y="421" width="0.0252%" height="15" fill="rgb(208,69,12)" fg:x="46989" fg:w="127"/><text x="9.5605%" y="431.50"></text></g><g><title>`0x7FF97E69CD05 (52 samples, 0.01%)</title><rect x="9.3357%" y="421" width="0.0103%" height="15" fill="rgb(235,93,37)" fg:x="47116" fg:w="52"/><text x="9.5857%" y="431.50"></text></g><g><title>`0x7FF97E69CD0E (128 samples, 0.03%)</title><rect x="9.3460%" y="421" width="0.0254%" height="15" fill="rgb(213,116,39)" fg:x="47168" fg:w="128"/><text x="9.5960%" y="431.50"></text></g><g><title>`0x7FF97E69CD30 (69 samples, 0.01%)</title><rect x="9.3719%" y="421" width="0.0137%" height="15" fill="rgb(222,207,29)" fg:x="47299" fg:w="69"/><text x="9.6219%" y="431.50"></text></g><g><title>`0x7FF97E62AFF1 (6,885 samples, 1.36%)</title><rect x="8.0426%" y="437" width="1.3642%" height="15" fill="rgb(206,96,30)" fg:x="40590" fg:w="6885"/><text x="8.2926%" y="447.50"></text></g><g><title>`0x7FF97E69CD3B (107 samples, 0.02%)</title><rect x="9.3856%" y="421" width="0.0212%" height="15" fill="rgb(218,138,4)" fg:x="47368" fg:w="107"/><text x="9.6356%" y="431.50"></text></g><g><title>`0x7FF97E62AFF4 (236 samples, 0.05%)</title><rect x="9.4068%" y="437" width="0.0468%" height="15" fill="rgb(250,191,14)" fg:x="47475" fg:w="236"/><text x="9.6568%" y="447.50"></text></g><g><title>`0x7FF97E62CAFF (119 samples, 0.02%)</title><rect x="47.4639%" y="421" width="0.0236%" height="15" fill="rgb(239,60,40)" fg:x="239545" fg:w="119"/><text x="47.7139%" y="431.50"></text></g><g><title>`0x7FF97E62CB04 (236 samples, 0.05%)</title><rect x="47.4875%" y="421" width="0.0468%" height="15" fill="rgb(206,27,48)" fg:x="239664" fg:w="236"/><text x="47.7375%" y="431.50"></text></g><g><title>`0x7FF97E62CB2B (139 samples, 0.03%)</title><rect x="47.5429%" y="421" width="0.0275%" height="15" fill="rgb(225,35,8)" fg:x="239944" fg:w="139"/><text x="47.7929%" y="431.50"></text></g><g><title>`0x7FF97E62CB7C (59 samples, 0.01%)</title><rect x="47.5725%" y="421" width="0.0117%" height="15" fill="rgb(250,213,24)" fg:x="240093" fg:w="59"/><text x="47.8225%" y="431.50"></text></g><g><title>`0x7FF97E62D609 (118 samples, 0.02%)</title><rect x="47.6482%" y="405" width="0.0234%" height="15" fill="rgb(247,123,22)" fg:x="240475" fg:w="118"/><text x="47.8982%" y="415.50"></text></g><g><title>`0x7FF97E68F916 (52 samples, 0.01%)</title><rect x="47.7314%" y="389" width="0.0103%" height="15" fill="rgb(231,138,38)" fg:x="240895" fg:w="52"/><text x="47.9814%" y="399.50"></text></g><g><title>`0x7FF97E68F921 (112 samples, 0.02%)</title><rect x="47.7437%" y="389" width="0.0222%" height="15" fill="rgb(231,145,46)" fg:x="240957" fg:w="112"/><text x="47.9937%" y="399.50"></text></g><g><title>`0x7FF97E68F938 (179 samples, 0.04%)</title><rect x="47.7797%" y="389" width="0.0355%" height="15" fill="rgb(251,118,11)" fg:x="241139" fg:w="179"/><text x="48.0297%" y="399.50"></text></g><g><title>`0x7FF97E62D68A (680 samples, 0.13%)</title><rect x="47.6900%" y="405" width="0.1347%" height="15" fill="rgb(217,147,25)" fg:x="240686" fg:w="680"/><text x="47.9400%" y="415.50"></text></g><g><title>`0x7FF97E62D691 (174 samples, 0.03%)</title><rect x="47.8247%" y="405" width="0.0345%" height="15" fill="rgb(247,81,37)" fg:x="241366" fg:w="174"/><text x="48.0747%" y="415.50"></text></g><g><title>`0x7FF97E62D6A8 (132 samples, 0.03%)</title><rect x="47.8713%" y="405" width="0.0262%" height="15" fill="rgb(209,12,38)" fg:x="241601" fg:w="132"/><text x="48.1213%" y="415.50"></text></g><g><title>`0x7FF97E62D6C7 (131 samples, 0.03%)</title><rect x="47.9087%" y="405" width="0.0260%" height="15" fill="rgb(227,1,9)" fg:x="241790" fg:w="131"/><text x="48.1587%" y="415.50"></text></g><g><title>`0x7FF97E62D6DB (55 samples, 0.01%)</title><rect x="47.9351%" y="405" width="0.0109%" height="15" fill="rgb(248,47,43)" fg:x="241923" fg:w="55"/><text x="48.1851%" y="415.50"></text></g><g><title>`0x7FF97E62D6FC (148 samples, 0.03%)</title><rect x="47.9489%" y="405" width="0.0293%" height="15" fill="rgb(221,10,30)" fg:x="241993" fg:w="148"/><text x="48.1989%" y="415.50"></text></g><g><title>`0x7FF97E62D71B (120 samples, 0.02%)</title><rect x="47.9888%" y="405" width="0.0238%" height="15" fill="rgb(210,229,1)" fg:x="242194" fg:w="120"/><text x="48.2388%" y="415.50"></text></g><g><title>`0x7FF97E62D722 (54 samples, 0.01%)</title><rect x="48.0131%" y="405" width="0.0107%" height="15" fill="rgb(222,148,37)" fg:x="242317" fg:w="54"/><text x="48.2631%" y="415.50"></text></g><g><title>`0x7FF97E62D7B0 (103 samples, 0.02%)</title><rect x="48.0240%" y="405" width="0.0204%" height="15" fill="rgb(234,67,33)" fg:x="242372" fg:w="103"/><text x="48.2740%" y="415.50"></text></g><g><title>`0x7FF97E696E00 (206 samples, 0.04%)</title><rect x="48.0446%" y="389" width="0.0408%" height="15" fill="rgb(247,98,35)" fg:x="242476" fg:w="206"/><text x="48.2946%" y="399.50"></text></g><g><title>`0x7FF97E696E23 (3,829 samples, 0.76%)</title><rect x="48.0969%" y="389" width="0.7587%" height="15" fill="rgb(247,138,52)" fg:x="242740" fg:w="3829"/><text x="48.3469%" y="399.50"></text></g><g><title>`0x7FF97E696E2C (381 samples, 0.08%)</title><rect x="48.8556%" y="389" width="0.0755%" height="15" fill="rgb(213,79,30)" fg:x="246569" fg:w="381"/><text x="49.1056%" y="399.50"></text></g><g><title>`0x7FF97E696E5D (212 samples, 0.04%)</title><rect x="48.9323%" y="389" width="0.0420%" height="15" fill="rgb(246,177,23)" fg:x="246956" fg:w="212"/><text x="49.1823%" y="399.50"></text></g><g><title>`0x7FF97E696E6D (364 samples, 0.07%)</title><rect x="48.9743%" y="389" width="0.0721%" height="15" fill="rgb(230,62,27)" fg:x="247168" fg:w="364"/><text x="49.2243%" y="399.50"></text></g><g><title>`0x7FF97E696E85 (170 samples, 0.03%)</title><rect x="49.0466%" y="389" width="0.0337%" height="15" fill="rgb(216,154,8)" fg:x="247533" fg:w="170"/><text x="49.2966%" y="399.50"></text></g><g><title>`0x7FF97E696E99 (290 samples, 0.06%)</title><rect x="49.0813%" y="389" width="0.0575%" height="15" fill="rgb(244,35,45)" fg:x="247708" fg:w="290"/><text x="49.3313%" y="399.50"></text></g><g><title>`0x7FF97E696EA8 (157 samples, 0.03%)</title><rect x="49.1392%" y="389" width="0.0311%" height="15" fill="rgb(251,115,12)" fg:x="248000" fg:w="157"/><text x="49.3892%" y="399.50"></text></g><g><title>`0x7FF97E62D7B9 (5,837 samples, 1.16%)</title><rect x="48.0444%" y="405" width="1.1566%" height="15" fill="rgb(240,54,50)" fg:x="242475" fg:w="5837"/><text x="48.2944%" y="415.50"></text></g><g><title>`0x7FF97E696EBC (152 samples, 0.03%)</title><rect x="49.1709%" y="389" width="0.0301%" height="15" fill="rgb(233,84,52)" fg:x="248160" fg:w="152"/><text x="49.4209%" y="399.50"></text></g><g><title>`0x7FF97E62CC9A (8,050 samples, 1.60%)</title><rect x="47.6153%" y="421" width="1.5950%" height="15" fill="rgb(207,117,47)" fg:x="240309" fg:w="8050"/><text x="47.8653%" y="431.50"></text></g><g><title>`0x7FF97E62CCAB (125 samples, 0.02%)</title><rect x="49.2111%" y="421" width="0.0248%" height="15" fill="rgb(249,43,39)" fg:x="248363" fg:w="125"/><text x="49.4611%" y="431.50"></text></g><g><title>`0x7FF97E62CCCF (97 samples, 0.02%)</title><rect x="49.2380%" y="421" width="0.0192%" height="15" fill="rgb(209,38,44)" fg:x="248499" fg:w="97"/><text x="49.4880%" y="431.50"></text></g><g><title>`0x7FF97E62CCF1 (107 samples, 0.02%)</title><rect x="49.2579%" y="421" width="0.0212%" height="15" fill="rgb(236,212,23)" fg:x="248599" fg:w="107"/><text x="49.5079%" y="431.50"></text></g><g><title>`0x7FF97E62CCFC (82 samples, 0.02%)</title><rect x="49.2820%" y="421" width="0.0162%" height="15" fill="rgb(242,79,21)" fg:x="248721" fg:w="82"/><text x="49.5320%" y="431.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_alloc_zeroed (903 samples, 0.18%)</title><rect x="49.3072%" y="421" width="0.1789%" height="15" fill="rgb(211,96,35)" fg:x="248848" fg:w="903"/><text x="49.5572%" y="431.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::alloc_zeroed (463 samples, 0.09%)</title><rect x="49.3944%" y="405" width="0.0917%" height="15" fill="rgb(253,215,40)" fg:x="249288" fg:w="463"/><text x="49.6444%" y="415.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::allocate (463 samples, 0.09%)</title><rect x="49.3944%" y="389" width="0.0917%" height="15" fill="rgb(211,81,21)" fg:x="249288" fg:w="463"/><text x="49.6444%" y="399.50"></text></g><g><title>neural_network.exe`Unknown (202,507 samples, 40.13%)</title><rect x="9.4537%" y="437" width="40.1251%" height="15" fill="rgb(208,190,38)" fg:x="47712" fg:w="202507"/><text x="9.7037%" y="447.50">neural_network.exe`Unknown</text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::process_heap_alloc (468 samples, 0.09%)</title><rect x="49.4861%" y="421" width="0.0927%" height="15" fill="rgb(235,213,38)" fg:x="249751" fg:w="468"/><text x="49.7361%" y="431.50"></text></g><g><title>neural_network.exe`core::sync::atomic::AtomicPtr::load (138 samples, 0.03%)</title><rect x="49.5515%" y="405" width="0.0273%" height="15" fill="rgb(237,122,38)" fg:x="250081" fg:w="138"/><text x="49.8015%" y="415.50"></text></g><g><title>neural_network.exe`core::sync::atomic::atomic_load (138 samples, 0.03%)</title><rect x="49.5515%" y="389" width="0.0273%" height="15" fill="rgb(244,218,35)" fg:x="250081" fg:w="138"/><text x="49.8015%" y="399.50"></text></g><g><title>neural_network.exe`_ZN7ndarray12impl_methods49_$LT$impl$u20$ndarray..ArrayBase$LT$S$C$D$GT$$GT$23zip_mut_with_same_shape17h35221b32882dcef1E (3,951 samples, 0.78%)</title><rect x="49.5788%" y="437" width="0.7829%" height="15" fill="rgb(240,68,47)" fg:x="250219" fg:w="3951"/><text x="49.8288%" y="447.50"></text></g><g><title>neural_network.exe`_ZN14neural_network6layers19convolutional_layer18ConvolutionalLayer29im_ready_to_pass_regular_rick17h707b64384a2f3647E (242,769 samples, 48.10%)</title><rect x="2.2642%" y="453" width="48.1027%" height="15" fill="rgb(210,16,53)" fg:x="11427" fg:w="242769"/><text x="2.5142%" y="463.50">neural_network.exe`_ZN14neural_network6layers19convolutional_layer18Convolution..</text></g><g><title>`0x7FF968D5154E (150 samples, 0.03%)</title><rect x="50.3730%" y="437" width="0.0297%" height="15" fill="rgb(235,124,12)" fg:x="254227" fg:w="150"/><text x="50.6230%" y="447.50"></text></g><g><title>`0x7FF968D51556 (89 samples, 0.02%)</title><rect x="50.4027%" y="437" width="0.0176%" height="15" fill="rgb(224,169,11)" fg:x="254377" fg:w="89"/><text x="50.6527%" y="447.50"></text></g><g><title>neural_network.exe`_ZN7ndarray12impl_methods49_$LT$impl$u20$ndarray..ArrayBase$LT$S$C$D$GT$$GT$8to_owned17h820a4293e6993ee3E (301 samples, 0.06%)</title><rect x="50.3671%" y="453" width="0.0596%" height="15" fill="rgb(250,166,2)" fg:x="254197" fg:w="301"/><text x="50.6171%" y="463.50"></text></g><g><title>`0x7FF968D5154E (91 samples, 0.02%)</title><rect x="50.4344%" y="437" width="0.0180%" height="15" fill="rgb(242,216,29)" fg:x="254537" fg:w="91"/><text x="50.6844%" y="447.50"></text></g><g><title>neural_network.exe`Unknown (253,259 samples, 50.18%)</title><rect x="0.2835%" y="469" width="50.1812%" height="15" fill="rgb(230,116,27)" fg:x="1431" fg:w="253259"/><text x="0.5335%" y="479.50">neural_network.exe`Unknown</text></g><g><title>neural_network.exe`_ZN7ndarray12impl_methods49_$LT$impl$u20$ndarray..ArrayBase$LT$S$C$D$GT$$GT$8to_owned17h95bc372596ee7194E (192 samples, 0.04%)</title><rect x="50.4267%" y="453" width="0.0380%" height="15" fill="rgb(228,99,48)" fg:x="254498" fg:w="192"/><text x="50.6767%" y="463.50"></text></g><g><title>neural_network.exe`Unknown (76 samples, 0.02%)</title><rect x="50.7588%" y="37" width="0.0151%" height="15" fill="rgb(253,11,6)" fg:x="256174" fg:w="76"/><text x="51.0088%" y="47.50"></text></g><g><title>neural_network.exe`Unknown (108 samples, 0.02%)</title><rect x="50.7556%" y="53" width="0.0214%" height="15" fill="rgb(247,143,39)" fg:x="256158" fg:w="108"/><text x="51.0056%" y="63.50"></text></g><g><title>neural_network.exe`Unknown (132 samples, 0.03%)</title><rect x="50.7524%" y="69" width="0.0262%" height="15" fill="rgb(236,97,10)" fg:x="256142" fg:w="132"/><text x="51.0024%" y="79.50"></text></g><g><title>neural_network.exe`Unknown (154 samples, 0.03%)</title><rect x="50.7503%" y="85" width="0.0305%" height="15" fill="rgb(233,208,19)" fg:x="256131" fg:w="154"/><text x="51.0003%" y="95.50"></text></g><g><title>neural_network.exe`Unknown (182 samples, 0.04%)</title><rect x="50.7481%" y="101" width="0.0361%" height="15" fill="rgb(216,164,2)" fg:x="256120" fg:w="182"/><text x="50.9981%" y="111.50"></text></g><g><title>neural_network.exe`Unknown (214 samples, 0.04%)</title><rect x="50.7455%" y="117" width="0.0424%" height="15" fill="rgb(220,129,5)" fg:x="256107" fg:w="214"/><text x="50.9955%" y="127.50"></text></g><g><title>neural_network.exe`Unknown (254 samples, 0.05%)</title><rect x="50.7415%" y="133" width="0.0503%" height="15" fill="rgb(242,17,10)" fg:x="256087" fg:w="254"/><text x="50.9915%" y="143.50"></text></g><g><title>neural_network.exe`Unknown (311 samples, 0.06%)</title><rect x="50.7364%" y="149" width="0.0616%" height="15" fill="rgb(242,107,0)" fg:x="256061" fg:w="311"/><text x="50.9864%" y="159.50"></text></g><g><title>neural_network.exe`Unknown (368 samples, 0.07%)</title><rect x="50.7308%" y="165" width="0.0729%" height="15" fill="rgb(251,28,31)" fg:x="256033" fg:w="368"/><text x="50.9808%" y="175.50"></text></g><g><title>neural_network.exe`Unknown (446 samples, 0.09%)</title><rect x="50.7221%" y="181" width="0.0884%" height="15" fill="rgb(233,223,10)" fg:x="255989" fg:w="446"/><text x="50.9721%" y="191.50"></text></g><g><title>neural_network.exe`Unknown (520 samples, 0.10%)</title><rect x="50.7136%" y="197" width="0.1030%" height="15" fill="rgb(215,21,27)" fg:x="255946" fg:w="520"/><text x="50.9636%" y="207.50"></text></g><g><title>neural_network.exe`Unknown (592 samples, 0.12%)</title><rect x="50.7047%" y="213" width="0.1173%" height="15" fill="rgb(232,23,21)" fg:x="255901" fg:w="592"/><text x="50.9547%" y="223.50"></text></g><g><title>neural_network.exe`Unknown (677 samples, 0.13%)</title><rect x="50.6960%" y="229" width="0.1341%" height="15" fill="rgb(244,5,23)" fg:x="255857" fg:w="677"/><text x="50.9460%" y="239.50"></text></g><g><title>neural_network.exe`Unknown (788 samples, 0.16%)</title><rect x="50.6851%" y="245" width="0.1561%" height="15" fill="rgb(226,81,46)" fg:x="255802" fg:w="788"/><text x="50.9351%" y="255.50"></text></g><g><title>neural_network.exe`Unknown (882 samples, 0.17%)</title><rect x="50.6771%" y="261" width="0.1748%" height="15" fill="rgb(247,70,30)" fg:x="255762" fg:w="882"/><text x="50.9271%" y="271.50"></text></g><g><title>neural_network.exe`Unknown (995 samples, 0.20%)</title><rect x="50.6645%" y="277" width="0.1972%" height="15" fill="rgb(212,68,19)" fg:x="255698" fg:w="995"/><text x="50.9145%" y="287.50"></text></g><g><title>neural_network.exe`Unknown (1,108 samples, 0.22%)</title><rect x="50.6540%" y="293" width="0.2195%" height="15" fill="rgb(240,187,13)" fg:x="255645" fg:w="1108"/><text x="50.9040%" y="303.50"></text></g><g><title>neural_network.exe`Unknown (1,207 samples, 0.24%)</title><rect x="50.6452%" y="309" width="0.2392%" height="15" fill="rgb(223,113,26)" fg:x="255601" fg:w="1207"/><text x="50.8952%" y="319.50"></text></g><g><title>neural_network.exe`Unknown (1,306 samples, 0.26%)</title><rect x="50.6355%" y="325" width="0.2588%" height="15" fill="rgb(206,192,2)" fg:x="255552" fg:w="1306"/><text x="50.8855%" y="335.50"></text></g><g><title>neural_network.exe`Unknown (1,418 samples, 0.28%)</title><rect x="50.6240%" y="341" width="0.2810%" height="15" fill="rgb(241,108,4)" fg:x="255494" fg:w="1418"/><text x="50.8740%" y="351.50"></text></g><g><title>neural_network.exe`Unknown (1,554 samples, 0.31%)</title><rect x="50.6100%" y="357" width="0.3079%" height="15" fill="rgb(247,173,49)" fg:x="255423" fg:w="1554"/><text x="50.8600%" y="367.50"></text></g><g><title>neural_network.exe`_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17h0b6800715a365e9bE (59 samples, 0.01%)</title><rect x="50.9185%" y="357" width="0.0117%" height="15" fill="rgb(224,114,35)" fg:x="256980" fg:w="59"/><text x="51.1685%" y="367.50"></text></g><g><title>neural_network.exe`_ZN5alloc7raw_vec11finish_grow17hcdd8c185bebeaceaE.llvm.9500113943801157902 (58 samples, 0.01%)</title><rect x="50.9187%" y="341" width="0.0115%" height="15" fill="rgb(245,159,27)" fg:x="256981" fg:w="58"/><text x="51.1687%" y="351.50"></text></g><g><title>neural_network.exe`Unknown (1,711 samples, 0.34%)</title><rect x="50.5959%" y="373" width="0.3390%" height="15" fill="rgb(245,172,44)" fg:x="255352" fg:w="1711"/><text x="50.8459%" y="383.50"></text></g><g><title>neural_network.exe`Unknown (1,865 samples, 0.37%)</title><rect x="50.5803%" y="389" width="0.3695%" height="15" fill="rgb(236,23,11)" fg:x="255273" fg:w="1865"/><text x="50.8303%" y="399.50"></text></g><g><title>neural_network.exe`Unknown (1,992 samples, 0.39%)</title><rect x="50.5666%" y="405" width="0.3947%" height="15" fill="rgb(205,117,38)" fg:x="255204" fg:w="1992"/><text x="50.8166%" y="415.50"></text></g><g><title>neural_network.exe`Unknown (2,157 samples, 0.43%)</title><rect x="50.5484%" y="421" width="0.4274%" height="15" fill="rgb(237,72,25)" fg:x="255112" fg:w="2157"/><text x="50.7984%" y="431.50"></text></g><g><title>neural_network.exe`_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17h0b6800715a365e9bE (66 samples, 0.01%)</title><rect x="50.9783%" y="421" width="0.0131%" height="15" fill="rgb(244,70,9)" fg:x="257282" fg:w="66"/><text x="51.2283%" y="431.50"></text></g><g><title>neural_network.exe`_ZN5alloc7raw_vec11finish_grow17hcdd8c185bebeaceaE.llvm.9500113943801157902 (53 samples, 0.01%)</title><rect x="50.9809%" y="405" width="0.0105%" height="15" fill="rgb(217,125,39)" fg:x="257295" fg:w="53"/><text x="51.2309%" y="415.50"></text></g><g><title>neural_network.exe`Unknown (2,361 samples, 0.47%)</title><rect x="50.5307%" y="437" width="0.4678%" height="15" fill="rgb(235,36,10)" fg:x="255023" fg:w="2361"/><text x="50.7807%" y="447.50"></text></g><g><title>`0x7FF97E6322C7 (57 samples, 0.01%)</title><rect x="51.0043%" y="389" width="0.0113%" height="15" fill="rgb(251,123,47)" fg:x="257413" fg:w="57"/><text x="51.2543%" y="399.50"></text></g><g><title>`0x7FF97E63218A (61 samples, 0.01%)</title><rect x="51.0043%" y="405" width="0.0121%" height="15" fill="rgb(221,13,13)" fg:x="257413" fg:w="61"/><text x="51.2543%" y="415.50"></text></g><g><title>neural_network.exe`_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17h0b6800715a365e9bE (89 samples, 0.02%)</title><rect x="50.9989%" y="437" width="0.0176%" height="15" fill="rgb(238,131,9)" fg:x="257386" fg:w="89"/><text x="51.2489%" y="447.50"></text></g><g><title>neural_network.exe`_ZN5alloc7raw_vec11finish_grow17hcdd8c185bebeaceaE.llvm.9500113943801157902 (82 samples, 0.02%)</title><rect x="51.0003%" y="421" width="0.0162%" height="15" fill="rgb(211,50,8)" fg:x="257393" fg:w="82"/><text x="51.2503%" y="431.50"></text></g><g><title>neural_network.exe`Unknown (2,717 samples, 0.54%)</title><rect x="50.4822%" y="453" width="0.5384%" height="15" fill="rgb(245,182,24)" fg:x="254778" fg:w="2717"/><text x="50.7322%" y="463.50"></text></g><g><title>neural_network.exe`_ZN14neural_network4flow7flow_ai19generate_puzzles_3d17h5fb6eff360ee5b8dE (2,883 samples, 0.57%)</title><rect x="50.4647%" y="469" width="0.5712%" height="15" fill="rgb(242,14,37)" fg:x="254690" fg:w="2883"/><text x="50.7147%" y="479.50"></text></g><g><title>neural_network.exe`_ZN14neural_network7helpers20activation_functions24activation_derivative_2d17h58214c8ed4b53d5cE (226 samples, 0.04%)</title><rect x="51.0516%" y="453" width="0.0448%" height="15" fill="rgb(246,228,12)" fg:x="257652" fg:w="226"/><text x="51.3016%" y="463.50"></text></g><g><title>neural_network.exe`_ZN14matrixmultiply7packing9pack_avx217h13c2011a146f2013E (172 samples, 0.03%)</title><rect x="51.0968%" y="421" width="0.0341%" height="15" fill="rgb(213,55,15)" fg:x="257880" fg:w="172"/><text x="51.3468%" y="431.50"></text></g><g><title>neural_network.exe`_ZN247_$LT$ndarray..ArrayBase$LT$S$C$ndarray..dimension..dim..Dim$LT$$u5b$usize$u3b$$u20$2$u5d$$GT$$GT$$u20$as$u20$ndarray..linalg..impl_linalg..Dot$LT$ndarray..ArrayBase$LT$S2$C$ndarray..dimension..dim..Dim$LT$$u5b$usize$u3b$$u20$2$u5d$$GT$$GT$$GT$$GT$3dot17h5868e790f09ad45eE (4,325 samples, 0.86%)</title><rect x="51.0964%" y="453" width="0.8570%" height="15" fill="rgb(209,9,3)" fg:x="257878" fg:w="4325"/><text x="51.3464%" y="463.50"></text></g><g><title>neural_network.exe`Unknown (4,323 samples, 0.86%)</title><rect x="51.0968%" y="437" width="0.8566%" height="15" fill="rgb(230,59,30)" fg:x="257880" fg:w="4323"/><text x="51.3468%" y="447.50"></text></g><g><title>neural_network.exe`_ZN14matrixmultiply9threading27RangeChunkParallel$LT$G$GT$8for_each17hd8f2bb866c6244c4E (4,151 samples, 0.82%)</title><rect x="51.1309%" y="421" width="0.8225%" height="15" fill="rgb(209,121,21)" fg:x="258052" fg:w="4151"/><text x="51.3809%" y="431.50"></text></g><g><title>neural_network.exe`_ZN14matrixmultiply12sgemm_kernel17kernel_target_fma17h60f801d0d7a890adE (4,146 samples, 0.82%)</title><rect x="51.1319%" y="405" width="0.8215%" height="15" fill="rgb(220,109,13)" fg:x="258057" fg:w="4146"/><text x="51.3819%" y="415.50"></text></g><g><title>neural_network.exe`_ZN14matrixmultiply7packing9pack_avx217h13c2011a146f2013E (231 samples, 0.05%)</title><rect x="51.9548%" y="421" width="0.0458%" height="15" fill="rgb(232,18,1)" fg:x="262210" fg:w="231"/><text x="52.2048%" y="431.50"></text></g><g><title>neural_network.exe`_ZN247_$LT$ndarray..ArrayBase$LT$S$C$ndarray..dimension..dim..Dim$LT$$u5b$usize$u3b$$u20$2$u5d$$GT$$GT$$u20$as$u20$ndarray..linalg..impl_linalg..Dot$LT$ndarray..ArrayBase$LT$S2$C$ndarray..dimension..dim..Dim$LT$$u5b$usize$u3b$$u20$2$u5d$$GT$$GT$$GT$$GT$3dot17ha48444b8d47a9be3E (5,188 samples, 1.03%)</title><rect x="51.9534%" y="453" width="1.0280%" height="15" fill="rgb(215,41,42)" fg:x="262203" fg:w="5188"/><text x="52.2034%" y="463.50"></text></g><g><title>neural_network.exe`Unknown (5,182 samples, 1.03%)</title><rect x="51.9546%" y="437" width="1.0268%" height="15" fill="rgb(224,123,36)" fg:x="262209" fg:w="5182"/><text x="52.2046%" y="447.50"></text></g><g><title>neural_network.exe`_ZN14matrixmultiply9threading27RangeChunkParallel$LT$G$GT$8for_each17hd8f2bb866c6244c4E (4,950 samples, 0.98%)</title><rect x="52.0005%" y="421" width="0.9808%" height="15" fill="rgb(240,125,3)" fg:x="262441" fg:w="4950"/><text x="52.2505%" y="431.50"></text></g><g><title>neural_network.exe`_ZN14matrixmultiply12sgemm_kernel17kernel_target_fma17h60f801d0d7a890adE (4,942 samples, 0.98%)</title><rect x="52.0021%" y="405" width="0.9792%" height="15" fill="rgb(205,98,50)" fg:x="262449" fg:w="4942"/><text x="52.2521%" y="415.50"></text></g><g><title>neural_network.exe`_ZN14neural_network6layers11dense_layer10DenseLayer13backpropagate17h13f96c64e0c9a7aeE (9,972 samples, 1.98%)</title><rect x="51.0386%" y="469" width="1.9759%" height="15" fill="rgb(205,185,37)" fg:x="257586" fg:w="9972"/><text x="51.2886%" y="479.50">n..</text></g><g><title>neural_network.exe`_ZN7ndarray8impl_ops14arithmetic_ops131_$LT$impl$u20$core..ops..arith..Mul$LT$$RF$ndarray..ArrayBase$LT$S2$C$E$GT$$GT$$u20$for$u20$$RF$ndarray..ArrayBase$LT$S$C$D$GT$$GT$3mul17h96771690770a95b5E (65 samples, 0.01%)</title><rect x="53.0016%" y="453" width="0.0129%" height="15" fill="rgb(238,207,15)" fg:x="267493" fg:w="65"/><text x="53.2516%" y="463.50"></text></g><g><title>neural_network.exe`_ZN7ndarray3zip30Zip$LT$$LP$P1$C$P2$RP$$C$D$GT$17map_collect_owned17h2f7bd461b352da23E (65 samples, 0.01%)</title><rect x="53.0016%" y="437" width="0.0129%" height="15" fill="rgb(213,199,42)" fg:x="267493" fg:w="65"/><text x="53.2516%" y="447.50"></text></g><g><title>neural_network.exe`_ZN7ndarray3zip38Zip$LT$$LP$P1$C$P2$C$PLast$RP$$C$D$GT$20collect_with_partial17h863a0b7799f5e811E (65 samples, 0.01%)</title><rect x="53.0016%" y="421" width="0.0129%" height="15" fill="rgb(235,201,11)" fg:x="267493" fg:w="65"/><text x="53.2516%" y="431.50"></text></g><g><title>`0x7FF97E62AFA0 (386 samples, 0.08%)</title><rect x="68.7728%" y="453" width="0.0765%" height="15" fill="rgb(207,46,11)" fg:x="347089" fg:w="386"/><text x="69.0228%" y="463.50"></text></g><g><title>`0x7FF97E62AFAF (174 samples, 0.03%)</title><rect x="68.8579%" y="453" width="0.0345%" height="15" fill="rgb(241,35,35)" fg:x="347518" fg:w="174"/><text x="69.1079%" y="463.50"></text></g><g><title>`0x7FF97E62AFB7 (343 samples, 0.07%)</title><rect x="68.8923%" y="453" width="0.0680%" height="15" fill="rgb(243,32,47)" fg:x="347692" fg:w="343"/><text x="69.1423%" y="463.50"></text></g><g><title>`0x7FF97E62AFCF (229 samples, 0.05%)</title><rect x="68.9700%" y="453" width="0.0454%" height="15" fill="rgb(247,202,23)" fg:x="348084" fg:w="229"/><text x="69.2200%" y="463.50"></text></g><g><title>`0x7FF97E62AFDE (282 samples, 0.06%)</title><rect x="69.0205%" y="453" width="0.0559%" height="15" fill="rgb(219,102,11)" fg:x="348339" fg:w="282"/><text x="69.2705%" y="463.50"></text></g><g><title>`0x7FF97E62BB60 (490 samples, 0.10%)</title><rect x="69.0825%" y="437" width="0.0971%" height="15" fill="rgb(243,110,44)" fg:x="348652" fg:w="490"/><text x="69.3325%" y="447.50"></text></g><g><title>`0x7FF97E62BB6F (317 samples, 0.06%)</title><rect x="69.1858%" y="437" width="0.0628%" height="15" fill="rgb(222,74,54)" fg:x="349173" fg:w="317"/><text x="69.4358%" y="447.50"></text></g><g><title>`0x7FF97E62BB76 (575 samples, 0.11%)</title><rect x="69.2553%" y="437" width="0.1139%" height="15" fill="rgb(216,99,12)" fg:x="349524" fg:w="575"/><text x="69.5053%" y="447.50"></text></g><g><title>`0x7FF97E62BB7F (301 samples, 0.06%)</title><rect x="69.3693%" y="437" width="0.0596%" height="15" fill="rgb(226,22,26)" fg:x="350099" fg:w="301"/><text x="69.6193%" y="447.50"></text></g><g><title>`0x7FF97E62BB91 (488 samples, 0.10%)</title><rect x="69.4372%" y="437" width="0.0967%" height="15" fill="rgb(217,163,10)" fg:x="350442" fg:w="488"/><text x="69.6872%" y="447.50"></text></g><g><title>`0x7FF97E62BFA7 (102 samples, 0.02%)</title><rect x="69.5351%" y="437" width="0.0202%" height="15" fill="rgb(213,25,53)" fg:x="350936" fg:w="102"/><text x="69.7851%" y="447.50"></text></g><g><title>`0x7FF97E62C2AB (238 samples, 0.05%)</title><rect x="69.5561%" y="437" width="0.0472%" height="15" fill="rgb(252,105,26)" fg:x="351042" fg:w="238"/><text x="69.8061%" y="447.50"></text></g><g><title>`0x7FF97E62C2BB (65 samples, 0.01%)</title><rect x="69.6072%" y="437" width="0.0129%" height="15" fill="rgb(220,39,43)" fg:x="351300" fg:w="65"/><text x="69.8572%" y="447.50"></text></g><g><title>`0x7FF97E62C2E8 (159 samples, 0.03%)</title><rect x="69.6225%" y="437" width="0.0315%" height="15" fill="rgb(229,68,48)" fg:x="351377" fg:w="159"/><text x="69.8725%" y="447.50"></text></g><g><title>`0x7FF97E62C2F2 (107 samples, 0.02%)</title><rect x="69.6540%" y="437" width="0.0212%" height="15" fill="rgb(252,8,32)" fg:x="351536" fg:w="107"/><text x="69.9040%" y="447.50"></text></g><g><title>`0x7FF97E62C301 (201 samples, 0.04%)</title><rect x="69.6831%" y="437" width="0.0398%" height="15" fill="rgb(223,20,43)" fg:x="351683" fg:w="201"/><text x="69.9331%" y="447.50"></text></g><g><title>`0x7FF97E62C337 (253 samples, 0.05%)</title><rect x="69.7237%" y="437" width="0.0501%" height="15" fill="rgb(229,81,49)" fg:x="351888" fg:w="253"/><text x="69.9737%" y="447.50"></text></g><g><title>`0x7FF97E62C342 (177 samples, 0.04%)</title><rect x="69.7739%" y="437" width="0.0351%" height="15" fill="rgb(236,28,36)" fg:x="352141" fg:w="177"/><text x="70.0239%" y="447.50"></text></g><g><title>`0x7FF97E62C350 (131 samples, 0.03%)</title><rect x="69.8089%" y="437" width="0.0260%" height="15" fill="rgb(249,185,26)" fg:x="352318" fg:w="131"/><text x="70.0589%" y="447.50"></text></g><g><title>`0x7FF97E62B077 (130 samples, 0.03%)</title><rect x="69.8091%" y="421" width="0.0258%" height="15" fill="rgb(249,174,33)" fg:x="352319" fg:w="130"/><text x="70.0591%" y="431.50"></text></g><g><title>`0x7FF97E62C361 (229 samples, 0.05%)</title><rect x="69.8349%" y="437" width="0.0454%" height="15" fill="rgb(233,201,37)" fg:x="352449" fg:w="229"/><text x="70.0849%" y="447.50"></text></g><g><title>`0x7FF97E62C371 (226 samples, 0.04%)</title><rect x="69.8826%" y="437" width="0.0448%" height="15" fill="rgb(221,78,26)" fg:x="352690" fg:w="226"/><text x="70.1326%" y="447.50"></text></g><g><title>`0x7FF97E69CB4D (187 samples, 0.04%)</title><rect x="69.9359%" y="437" width="0.0371%" height="15" fill="rgb(250,127,30)" fg:x="352959" fg:w="187"/><text x="70.1859%" y="447.50"></text></g><g><title>`0x7FF97E69CB54 (167 samples, 0.03%)</title><rect x="69.9730%" y="437" width="0.0331%" height="15" fill="rgb(230,49,44)" fg:x="353146" fg:w="167"/><text x="70.2230%" y="447.50"></text></g><g><title>`0x7FF97E69CB5D (182 samples, 0.04%)</title><rect x="70.0160%" y="437" width="0.0361%" height="15" fill="rgb(229,67,23)" fg:x="353363" fg:w="182"/><text x="70.2660%" y="447.50"></text></g><g><title>`0x7FF97E69CB75 (170 samples, 0.03%)</title><rect x="70.0633%" y="437" width="0.0337%" height="15" fill="rgb(249,83,47)" fg:x="353602" fg:w="170"/><text x="70.3133%" y="447.50"></text></g><g><title>`0x7FF97E69CB78 (248 samples, 0.05%)</title><rect x="70.0970%" y="437" width="0.0491%" height="15" fill="rgb(215,43,3)" fg:x="353772" fg:w="248"/><text x="70.3470%" y="447.50"></text></g><g><title>`0x7FF97E69CB85 (61 samples, 0.01%)</title><rect x="70.1472%" y="437" width="0.0121%" height="15" fill="rgb(238,154,13)" fg:x="354025" fg:w="61"/><text x="70.3972%" y="447.50"></text></g><g><title>`0x7FF97E69CB88 (181 samples, 0.04%)</title><rect x="70.1592%" y="437" width="0.0359%" height="15" fill="rgb(219,56,2)" fg:x="354086" fg:w="181"/><text x="70.4092%" y="447.50"></text></g><g><title>`0x7FF97E69CB96 (89 samples, 0.02%)</title><rect x="70.2018%" y="437" width="0.0176%" height="15" fill="rgb(233,0,4)" fg:x="354301" fg:w="89"/><text x="70.4518%" y="447.50"></text></g><g><title>`0x7FF97E69CB9A (196 samples, 0.04%)</title><rect x="70.2195%" y="437" width="0.0388%" height="15" fill="rgb(235,30,7)" fg:x="354390" fg:w="196"/><text x="70.4695%" y="447.50"></text></g><g><title>`0x7FF97E69CBA1 (57 samples, 0.01%)</title><rect x="70.2611%" y="437" width="0.0113%" height="15" fill="rgb(250,79,13)" fg:x="354600" fg:w="57"/><text x="70.5111%" y="447.50"></text></g><g><title>`0x7FF97E69CBA4 (89 samples, 0.02%)</title><rect x="70.2724%" y="437" width="0.0176%" height="15" fill="rgb(211,146,34)" fg:x="354657" fg:w="89"/><text x="70.5224%" y="447.50"></text></g><g><title>`0x7FF97E69CBB3 (120 samples, 0.02%)</title><rect x="70.3001%" y="437" width="0.0238%" height="15" fill="rgb(228,22,38)" fg:x="354797" fg:w="120"/><text x="70.5501%" y="447.50"></text></g><g><title>`0x7FF97E69CBBC (59 samples, 0.01%)</title><rect x="70.3296%" y="437" width="0.0117%" height="15" fill="rgb(235,168,5)" fg:x="354946" fg:w="59"/><text x="70.5796%" y="447.50"></text></g><g><title>`0x7FF97E69CBD2 (150 samples, 0.03%)</title><rect x="70.3419%" y="437" width="0.0297%" height="15" fill="rgb(221,155,16)" fg:x="355008" fg:w="150"/><text x="70.5919%" y="447.50"></text></g><g><title>`0x7FF97E62B099 (84 samples, 0.02%)</title><rect x="70.3550%" y="421" width="0.0166%" height="15" fill="rgb(215,215,53)" fg:x="355074" fg:w="84"/><text x="70.6050%" y="431.50"></text></g><g><title>`0x7FF97E69CBF4 (158 samples, 0.03%)</title><rect x="70.3794%" y="437" width="0.0313%" height="15" fill="rgb(223,4,10)" fg:x="355197" fg:w="158"/><text x="70.6294%" y="447.50"></text></g><g><title>`0x7FF97E69CC4F (88 samples, 0.02%)</title><rect x="70.4109%" y="437" width="0.0174%" height="15" fill="rgb(234,103,6)" fg:x="355356" fg:w="88"/><text x="70.6609%" y="447.50"></text></g><g><title>`0x7FF97E69CC6A (65 samples, 0.01%)</title><rect x="70.4283%" y="437" width="0.0129%" height="15" fill="rgb(227,97,0)" fg:x="355444" fg:w="65"/><text x="70.6783%" y="447.50"></text></g><g><title>`0x7FF97E69CC6F (201 samples, 0.04%)</title><rect x="70.4412%" y="437" width="0.0398%" height="15" fill="rgb(234,150,53)" fg:x="355509" fg:w="201"/><text x="70.6912%" y="447.50"></text></g><g><title>`0x7FF97E69CC81 (152 samples, 0.03%)</title><rect x="70.4812%" y="437" width="0.0301%" height="15" fill="rgb(228,201,54)" fg:x="355711" fg:w="152"/><text x="70.7312%" y="447.50"></text></g><g><title>`0x7FF97E69CC88 (61 samples, 0.01%)</title><rect x="70.5119%" y="437" width="0.0121%" height="15" fill="rgb(222,22,37)" fg:x="355866" fg:w="61"/><text x="70.7619%" y="447.50"></text></g><g><title>`0x7FF97E69CCAF (248 samples, 0.05%)</title><rect x="70.5240%" y="437" width="0.0491%" height="15" fill="rgb(237,53,32)" fg:x="355927" fg:w="248"/><text x="70.7740%" y="447.50"></text></g><g><title>`0x7FF97E69CD05 (245 samples, 0.05%)</title><rect x="70.5746%" y="437" width="0.0485%" height="15" fill="rgb(233,25,53)" fg:x="356182" fg:w="245"/><text x="70.8246%" y="447.50"></text></g><g><title>`0x7FF97E62AFF1 (7,781 samples, 1.54%)</title><rect x="69.0825%" y="453" width="1.5417%" height="15" fill="rgb(210,40,34)" fg:x="348652" fg:w="7781"/><text x="69.3325%" y="463.50"></text></g><g><title>`0x7FF97E62AFF4 (101 samples, 0.02%)</title><rect x="70.6243%" y="453" width="0.0200%" height="15" fill="rgb(241,220,44)" fg:x="356433" fg:w="101"/><text x="70.8743%" y="463.50"></text></g><g><title>`0x7FF97E62CAF5 (117 samples, 0.02%)</title><rect x="70.6443%" y="453" width="0.0232%" height="15" fill="rgb(235,28,35)" fg:x="356534" fg:w="117"/><text x="70.8943%" y="463.50"></text></g><g><title>`0x7FF97E62CAFA (176 samples, 0.03%)</title><rect x="70.6675%" y="453" width="0.0349%" height="15" fill="rgb(210,56,17)" fg:x="356651" fg:w="176"/><text x="70.9175%" y="463.50"></text></g><g><title>`0x7FF97E62CB0A (151 samples, 0.03%)</title><rect x="70.7029%" y="453" width="0.0299%" height="15" fill="rgb(224,130,29)" fg:x="356830" fg:w="151"/><text x="70.9529%" y="463.50"></text></g><g><title>`0x7FF97E62CB17 (70 samples, 0.01%)</title><rect x="70.7329%" y="453" width="0.0139%" height="15" fill="rgb(235,212,8)" fg:x="356981" fg:w="70"/><text x="70.9829%" y="463.50"></text></g><g><title>`0x7FF97E62CB33 (134 samples, 0.03%)</title><rect x="70.7477%" y="453" width="0.0266%" height="15" fill="rgb(223,33,50)" fg:x="357056" fg:w="134"/><text x="70.9977%" y="463.50"></text></g><g><title>`0x7FF97E62CB7E (144 samples, 0.03%)</title><rect x="70.7788%" y="453" width="0.0285%" height="15" fill="rgb(219,149,13)" fg:x="357213" fg:w="144"/><text x="71.0288%" y="463.50"></text></g><g><title>`0x7FF97E62CB92 (111 samples, 0.02%)</title><rect x="70.8125%" y="453" width="0.0220%" height="15" fill="rgb(250,156,29)" fg:x="357383" fg:w="111"/><text x="71.0625%" y="463.50"></text></g><g><title>`0x7FF97E62CBBC (80 samples, 0.02%)</title><rect x="70.8432%" y="453" width="0.0159%" height="15" fill="rgb(216,193,19)" fg:x="357538" fg:w="80"/><text x="71.0932%" y="463.50"></text></g><g><title>`0x7FF97E62CBE2 (51 samples, 0.01%)</title><rect x="70.8658%" y="453" width="0.0101%" height="15" fill="rgb(216,135,14)" fg:x="357652" fg:w="51"/><text x="71.1158%" y="463.50"></text></g><g><title>`0x7FF97E62D562 (71 samples, 0.01%)</title><rect x="70.9066%" y="437" width="0.0141%" height="15" fill="rgb(241,47,5)" fg:x="357858" fg:w="71"/><text x="71.1566%" y="447.50"></text></g><g><title>`0x7FF97E62D5E2 (142 samples, 0.03%)</title><rect x="70.9308%" y="437" width="0.0281%" height="15" fill="rgb(233,42,35)" fg:x="357980" fg:w="142"/><text x="71.1808%" y="447.50"></text></g><g><title>`0x7FF97E62D609 (65 samples, 0.01%)</title><rect x="70.9589%" y="437" width="0.0129%" height="15" fill="rgb(231,13,6)" fg:x="358122" fg:w="65"/><text x="71.2089%" y="447.50"></text></g><g><title>`0x7FF97E62D68A (258 samples, 0.05%)</title><rect x="70.9845%" y="437" width="0.0511%" height="15" fill="rgb(207,181,40)" fg:x="358251" fg:w="258"/><text x="71.2345%" y="447.50"></text></g><g><title>`0x7FF97E62D6FC (103 samples, 0.02%)</title><rect x="71.0592%" y="437" width="0.0204%" height="15" fill="rgb(254,173,49)" fg:x="358628" fg:w="103"/><text x="71.3092%" y="447.50"></text></g><g><title>`0x7FF97E62D715 (71 samples, 0.01%)</title><rect x="71.0810%" y="437" width="0.0141%" height="15" fill="rgb(221,1,38)" fg:x="358738" fg:w="71"/><text x="71.3310%" y="447.50"></text></g><g><title>`0x7FF97E62D71B (59 samples, 0.01%)</title><rect x="71.0951%" y="437" width="0.0117%" height="15" fill="rgb(206,124,46)" fg:x="358809" fg:w="59"/><text x="71.3451%" y="447.50"></text></g><g><title>`0x7FF97E696E00 (89 samples, 0.02%)</title><rect x="71.1295%" y="421" width="0.0176%" height="15" fill="rgb(249,21,11)" fg:x="358983" fg:w="89"/><text x="71.3795%" y="431.50"></text></g><g><title>`0x7FF97E696E23 (2,036 samples, 0.40%)</title><rect x="71.1476%" y="421" width="0.4034%" height="15" fill="rgb(222,201,40)" fg:x="359074" fg:w="2036"/><text x="71.3976%" y="431.50"></text></g><g><title>`0x7FF97E696E2C (150 samples, 0.03%)</title><rect x="71.5510%" y="421" width="0.0297%" height="15" fill="rgb(235,61,29)" fg:x="361110" fg:w="150"/><text x="71.8010%" y="431.50"></text></g><g><title>`0x7FF97E696ECF (89 samples, 0.02%)</title><rect x="71.5839%" y="421" width="0.0176%" height="15" fill="rgb(219,207,3)" fg:x="361276" fg:w="89"/><text x="71.8339%" y="431.50"></text></g><g><title>`0x7FF97E696EDB (121 samples, 0.02%)</title><rect x="71.6015%" y="421" width="0.0240%" height="15" fill="rgb(222,56,46)" fg:x="361365" fg:w="121"/><text x="71.8515%" y="431.50"></text></g><g><title>`0x7FF97E62D7B9 (2,585 samples, 0.51%)</title><rect x="71.1157%" y="437" width="0.5122%" height="15" fill="rgb(239,76,54)" fg:x="358913" fg:w="2585"/><text x="71.3657%" y="447.50"></text></g><g><title>`0x7FF97E62CC9A (3,755 samples, 0.74%)</title><rect x="70.8874%" y="453" width="0.7440%" height="15" fill="rgb(231,124,27)" fg:x="357761" fg:w="3755"/><text x="71.1374%" y="463.50"></text></g><g><title>`0x7FF97E62CAF0 (160 samples, 0.03%)</title><rect x="91.6358%" y="437" width="0.0317%" height="15" fill="rgb(249,195,6)" fg:x="462476" fg:w="160"/><text x="91.8858%" y="447.50"></text></g><g><title>`0x7FF97E62CB04 (54 samples, 0.01%)</title><rect x="91.6697%" y="437" width="0.0107%" height="15" fill="rgb(237,174,47)" fg:x="462647" fg:w="54"/><text x="91.9197%" y="447.50"></text></g><g><title>`0x7FF97E62CB07 (100 samples, 0.02%)</title><rect x="91.6804%" y="437" width="0.0198%" height="15" fill="rgb(206,201,31)" fg:x="462701" fg:w="100"/><text x="91.9304%" y="447.50"></text></g><g><title>`0x7FF97E62CB2B (72 samples, 0.01%)</title><rect x="91.7020%" y="437" width="0.0143%" height="15" fill="rgb(231,57,52)" fg:x="462810" fg:w="72"/><text x="91.9520%" y="447.50"></text></g><g><title>`0x7FF97E62CB2E (62 samples, 0.01%)</title><rect x="91.7163%" y="437" width="0.0123%" height="15" fill="rgb(248,177,22)" fg:x="462882" fg:w="62"/><text x="91.9663%" y="447.50"></text></g><g><title>`0x7FF97E62CB7D (72 samples, 0.01%)</title><rect x="91.7420%" y="437" width="0.0143%" height="15" fill="rgb(215,211,37)" fg:x="463012" fg:w="72"/><text x="91.9920%" y="447.50"></text></g><g><title>`0x7FF97E62CB92 (96 samples, 0.02%)</title><rect x="91.7609%" y="437" width="0.0190%" height="15" fill="rgb(241,128,51)" fg:x="463107" fg:w="96"/><text x="92.0109%" y="447.50"></text></g><g><title>`0x7FF97E62D5E2 (1,380 samples, 0.27%)</title><rect x="91.8643%" y="421" width="0.2734%" height="15" fill="rgb(227,165,31)" fg:x="463629" fg:w="1380"/><text x="92.1143%" y="431.50"></text></g><g><title>`0x7FF97E62D609 (62 samples, 0.01%)</title><rect x="92.1379%" y="421" width="0.0123%" height="15" fill="rgb(228,167,24)" fg:x="465010" fg:w="62"/><text x="92.3879%" y="431.50"></text></g><g><title>`0x7FF97E68F8DE (60 samples, 0.01%)</title><rect x="92.1861%" y="405" width="0.0119%" height="15" fill="rgb(228,143,12)" fg:x="465253" fg:w="60"/><text x="92.4361%" y="415.50"></text></g><g><title>`0x7FF97E68F8FE (62 samples, 0.01%)</title><rect x="92.1980%" y="405" width="0.0123%" height="15" fill="rgb(249,149,8)" fg:x="465313" fg:w="62"/><text x="92.4480%" y="415.50"></text></g><g><title>`0x7FF97E68F916 (80 samples, 0.02%)</title><rect x="92.2103%" y="405" width="0.0159%" height="15" fill="rgb(243,35,44)" fg:x="465375" fg:w="80"/><text x="92.4603%" y="415.50"></text></g><g><title>`0x7FF97E68F92F (64 samples, 0.01%)</title><rect x="92.2265%" y="405" width="0.0127%" height="15" fill="rgb(246,89,9)" fg:x="465457" fg:w="64"/><text x="92.4765%" y="415.50"></text></g><g><title>`0x7FF97E62D68A (363 samples, 0.07%)</title><rect x="92.1760%" y="421" width="0.0719%" height="15" fill="rgb(233,213,13)" fg:x="465202" fg:w="363"/><text x="92.4260%" y="431.50"></text></g><g><title>`0x7FF97E696E00 (75 samples, 0.01%)</title><rect x="92.2792%" y="405" width="0.0149%" height="15" fill="rgb(233,141,41)" fg:x="465723" fg:w="75"/><text x="92.5292%" y="415.50"></text></g><g><title>`0x7FF97E696E23 (1,591 samples, 0.32%)</title><rect x="92.2943%" y="405" width="0.3152%" height="15" fill="rgb(239,167,4)" fg:x="465799" fg:w="1591"/><text x="92.5443%" y="415.50"></text></g><g><title>`0x7FF97E696E2C (108 samples, 0.02%)</title><rect x="92.6095%" y="405" width="0.0214%" height="15" fill="rgb(209,217,16)" fg:x="467390" fg:w="108"/><text x="92.8595%" y="415.50"></text></g><g><title>`0x7FF97E696E6D (76 samples, 0.02%)</title><rect x="92.6412%" y="405" width="0.0151%" height="15" fill="rgb(219,88,35)" fg:x="467550" fg:w="76"/><text x="92.8912%" y="415.50"></text></g><g><title>`0x7FF97E696E99 (63 samples, 0.01%)</title><rect x="92.6628%" y="405" width="0.0125%" height="15" fill="rgb(220,193,23)" fg:x="467659" fg:w="63"/><text x="92.9128%" y="415.50"></text></g><g><title>`0x7FF97E62D7B9 (2,073 samples, 0.41%)</title><rect x="92.2792%" y="421" width="0.4107%" height="15" fill="rgb(230,90,52)" fg:x="465723" fg:w="2073"/><text x="92.5292%" y="431.50"></text></g><g><title>`0x7FF97E62CC9A (4,264 samples, 0.84%)</title><rect x="91.8465%" y="437" width="0.8449%" height="15" fill="rgb(252,106,19)" fg:x="463539" fg:w="4264"/><text x="92.0965%" y="447.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_alloc_zeroed (636 samples, 0.13%)</title><rect x="92.7062%" y="437" width="0.1260%" height="15" fill="rgb(206,74,20)" fg:x="467878" fg:w="636"/><text x="92.9562%" y="447.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::alloc_zeroed (308 samples, 0.06%)</title><rect x="92.7712%" y="421" width="0.0610%" height="15" fill="rgb(230,138,44)" fg:x="468206" fg:w="308"/><text x="93.0212%" y="431.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::allocate (308 samples, 0.06%)</title><rect x="92.7712%" y="405" width="0.0610%" height="15" fill="rgb(235,182,43)" fg:x="468206" fg:w="308"/><text x="93.0212%" y="415.50"></text></g><g><title>neural_network.exe`Unknown (106,870 samples, 21.18%)</title><rect x="71.6673%" y="453" width="21.1754%" height="15" fill="rgb(242,16,51)" fg:x="361697" fg:w="106870"/><text x="71.9173%" y="463.50">neural_network.exe`Unknown</text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::process_heap_alloc (53 samples, 0.01%)</title><rect x="92.8322%" y="437" width="0.0105%" height="15" fill="rgb(248,9,4)" fg:x="468514" fg:w="53"/><text x="93.0822%" y="447.50"></text></g><g><title>neural_network.exe`_ZN14neural_network7helpers20activation_functions24activation_derivative_2d17h58214c8ed4b53d5cE (192 samples, 0.04%)</title><rect x="92.8427%" y="453" width="0.0380%" height="15" fill="rgb(210,31,22)" fg:x="468567" fg:w="192"/><text x="93.0927%" y="463.50"></text></g><g><title>neural_network.exe`_ZN7ndarray12impl_methods49_$LT$impl$u20$ndarray..ArrayBase$LT$S$C$D$GT$$GT$10slice_move17h9a906272c6122770E.llvm.10046197607551141982 (4,175 samples, 0.83%)</title><rect x="92.8808%" y="453" width="0.8272%" height="15" fill="rgb(239,54,39)" fg:x="468759" fg:w="4175"/><text x="93.1308%" y="463.50"></text></g><g><title>neural_network.exe`_ZN7ndarray9dimension8do_slice17h2d6b7c20bf43ed24E (1,168 samples, 0.23%)</title><rect x="93.4766%" y="437" width="0.2314%" height="15" fill="rgb(230,99,41)" fg:x="471766" fg:w="1168"/><text x="93.7266%" y="447.50"></text></g><g><title>neural_network.exe`_ZN7ndarray12impl_methods49_$LT$impl$u20$ndarray..ArrayBase$LT$S$C$D$GT$$GT$23zip_mut_with_same_shape17h00dbfafe86d5ec7bE (987 samples, 0.20%)</title><rect x="93.7080%" y="453" width="0.1956%" height="15" fill="rgb(253,106,12)" fg:x="472934" fg:w="987"/><text x="93.9580%" y="463.50"></text></g><g><title>`0x7FF968D51381 (104 samples, 0.02%)</title><rect x="93.9216%" y="437" width="0.0206%" height="15" fill="rgb(213,46,41)" fg:x="474012" fg:w="104"/><text x="94.1716%" y="447.50"></text></g><g><title>`0x7FF97E62CC9A (63 samples, 0.01%)</title><rect x="93.9487%" y="437" width="0.0125%" height="15" fill="rgb(215,133,35)" fg:x="474149" fg:w="63"/><text x="94.1987%" y="447.50"></text></g><g><title>neural_network.exe`_ZN7ndarray12impl_methods49_$LT$impl$u20$ndarray..ArrayBase$LT$S$C$D$GT$$GT$8to_owned17h6bf355bf2e32f5efE (323 samples, 0.06%)</title><rect x="93.9036%" y="453" width="0.0640%" height="15" fill="rgb(213,28,5)" fg:x="473921" fg:w="323"/><text x="94.1536%" y="463.50"></text></g><g><title>neural_network.exe`_ZN7ndarray12impl_methods49_$LT$impl$u20$ndarray..ArrayBase$LT$S$C$D$GT$$GT$9slice_mut17h030fde494796c03dE (28,230 samples, 5.59%)</title><rect x="93.9676%" y="453" width="5.5935%" height="15" fill="rgb(215,77,49)" fg:x="474244" fg:w="28230"/><text x="94.2176%" y="463.50">neural_..</text></g><g><title>neural_network.exe`_ZN7ndarray9dimension8do_slice17h2d6b7c20bf43ed24E (11,370 samples, 2.25%)</title><rect x="97.3082%" y="437" width="2.2529%" height="15" fill="rgb(248,100,22)" fg:x="491104" fg:w="11370"/><text x="97.5582%" y="447.50">n..</text></g><g><title>`0x7FF97E62CC9A (94 samples, 0.02%)</title><rect x="99.6499%" y="405" width="0.0186%" height="15" fill="rgb(208,67,9)" fg:x="502922" fg:w="94"/><text x="99.8999%" y="415.50"></text></g><g><title>neural_network.exe`_ZN7ndarray17impl_constructors49_$LT$impl$u20$ndarray..ArrayBase$LT$S$C$D$GT$$GT$6uninit17h257cdf6ffe4c40c0E.llvm.10046197607551141982 (286 samples, 0.06%)</title><rect x="99.6158%" y="421" width="0.0567%" height="15" fill="rgb(219,133,21)" fg:x="502750" fg:w="286"/><text x="99.8658%" y="431.50"></text></g><g><title>neural_network.exe`_ZN7ndarray8impl_ops14arithmetic_ops131_$LT$impl$u20$core..ops..arith..Mul$LT$$RF$ndarray..ArrayBase$LT$S2$C$E$GT$$GT$$u20$for$u20$$RF$ndarray..ArrayBase$LT$S$C$D$GT$$GT$3mul17h96771690770a95b5E (769 samples, 0.15%)</title><rect x="99.5621%" y="453" width="0.1524%" height="15" fill="rgb(246,46,29)" fg:x="502479" fg:w="769"/><text x="99.8121%" y="463.50"></text></g><g><title>neural_network.exe`_ZN7ndarray3zip30Zip$LT$$LP$P1$C$P2$RP$$C$D$GT$17map_collect_owned17h2f7bd461b352da23E (741 samples, 0.15%)</title><rect x="99.5677%" y="437" width="0.1468%" height="15" fill="rgb(246,185,52)" fg:x="502507" fg:w="741"/><text x="99.8177%" y="447.50"></text></g><g><title>neural_network.exe`_ZN7ndarray3zip38Zip$LT$$LP$P1$C$P2$C$PLast$RP$$C$D$GT$20collect_with_partial17h863a0b7799f5e811E (163 samples, 0.03%)</title><rect x="99.6822%" y="421" width="0.0323%" height="15" fill="rgb(252,136,11)" fg:x="503085" fg:w="163"/><text x="99.9322%" y="431.50"></text></g><g><title>neural_network.exe`__rust_dealloc (96 samples, 0.02%)</title><rect x="99.7145%" y="453" width="0.0190%" height="15" fill="rgb(219,138,53)" fg:x="503248" fg:w="96"/><text x="99.9645%" y="463.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_alloc_zeroed (623 samples, 0.12%)</title><rect x="99.7335%" y="453" width="0.1234%" height="15" fill="rgb(211,51,23)" fg:x="503344" fg:w="623"/><text x="99.9835%" y="463.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::alloc_zeroed (312 samples, 0.06%)</title><rect x="99.7951%" y="437" width="0.0618%" height="15" fill="rgb(247,221,28)" fg:x="503655" fg:w="312"/><text x="100.0451%" y="447.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::allocate (312 samples, 0.06%)</title><rect x="99.7951%" y="421" width="0.0618%" height="15" fill="rgb(251,222,45)" fg:x="503655" fg:w="312"/><text x="100.0451%" y="431.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (444 samples, 0.09%)</title><rect x="99.8569%" y="453" width="0.0880%" height="15" fill="rgb(217,162,53)" fg:x="503967" fg:w="444"/><text x="100.1069%" y="463.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::dealloc (119 samples, 0.02%)</title><rect x="99.9213%" y="437" width="0.0236%" height="15" fill="rgb(229,93,14)" fg:x="504292" fg:w="119"/><text x="100.1713%" y="447.50"></text></g><g><title>neural_network.exe`_ZN14neural_network6layers19convolutional_layer18ConvolutionalLayer13backpropagate17hecadacabfdf1caa3E (236,858 samples, 46.93%)</title><rect x="53.0144%" y="469" width="46.9315%" height="15" fill="rgb(209,67,49)" fg:x="267558" fg:w="236858"/><text x="53.2644%" y="479.50">neural_network.exe`_ZN14neural_network6layers19convolutional_layer18Convoluti..</text></g><g><title>`0x7FF968D5154E (80 samples, 0.02%)</title><rect x="99.9550%" y="453" width="0.0159%" height="15" fill="rgb(213,87,29)" fg:x="504462" fg:w="80"/><text x="100.2050%" y="463.50"></text></g><g><title>neural_network.exe`_ZN7ndarray12impl_methods49_$LT$impl$u20$ndarray..ArrayBase$LT$S$C$D$GT$$GT$8to_owned17h3af969dfe3e10f11E (163 samples, 0.03%)</title><rect x="99.9505%" y="469" width="0.0323%" height="15" fill="rgb(205,151,52)" fg:x="504439" fg:w="163"/><text x="100.2005%" y="479.50"></text></g><g><title>neural_network.exe`_ZN7ndarray12impl_methods49_$LT$impl$u20$ndarray..ArrayBase$LT$S$C$D$GT$$GT$8to_owned17h820a4293e6993ee3E (55 samples, 0.01%)</title><rect x="99.9828%" y="469" width="0.0109%" height="15" fill="rgb(253,215,39)" fg:x="504602" fg:w="55"/><text x="100.2328%" y="479.50"></text></g><g><title>`0x7FF97E64AF28 (504,661 samples, 99.99%)</title><rect x="0.0010%" y="693" width="99.9945%" height="15" fill="rgb(221,220,41)" fg:x="5" fg:w="504661"/><text x="0.2510%" y="703.50">`0x7FF97E64AF28</text></g><g><title>`0x7FF97DFB257D (504,661 samples, 99.99%)</title><rect x="0.0010%" y="677" width="99.9945%" height="15" fill="rgb(218,133,21)" fg:x="5" fg:w="504661"/><text x="0.2510%" y="687.50">`0x7FF97DFB257D</text></g><g><title>neural_network.exe`__scrt_common_main_seh() (504,650 samples, 99.99%)</title><rect x="0.0032%" y="661" width="99.9923%" height="15" fill="rgb(221,193,43)" fg:x="16" fg:w="504650"/><text x="0.2532%" y="671.50">neural_network.exe`__scrt_common_main_seh()</text></g><g><title>neural_network.exe`invoke_main() (504,645 samples, 99.99%)</title><rect x="0.0042%" y="645" width="99.9913%" height="15" fill="rgb(240,128,52)" fg:x="21" fg:w="504645"/><text x="0.2542%" y="655.50">neural_network.exe`invoke_main()</text></g><g><title>neural_network.exe`main (504,645 samples, 99.99%)</title><rect x="0.0042%" y="629" width="99.9913%" height="15" fill="rgb(253,114,12)" fg:x="21" fg:w="504645"/><text x="0.2542%" y="639.50">neural_network.exe`main</text></g><g><title>neural_network.exe`std::rt::lang_start_internal (504,645 samples, 99.99%)</title><rect x="0.0042%" y="613" width="99.9913%" height="15" fill="rgb(215,223,47)" fg:x="21" fg:w="504645"/><text x="0.2542%" y="623.50">neural_network.exe`std::rt::lang_start_internal</text></g><g><title>neural_network.exe`std::panic::catch_unwind (504,645 samples, 99.99%)</title><rect x="0.0042%" y="597" width="99.9913%" height="15" fill="rgb(248,225,23)" fg:x="21" fg:w="504645"/><text x="0.2542%" y="607.50">neural_network.exe`std::panic::catch_unwind</text></g><g><title>neural_network.exe`std::panicking::try (504,645 samples, 99.99%)</title><rect x="0.0042%" y="581" width="99.9913%" height="15" fill="rgb(250,108,0)" fg:x="21" fg:w="504645"/><text x="0.2542%" y="591.50">neural_network.exe`std::panicking::try</text></g><g><title>neural_network.exe`std::panicking::try::do_call (504,645 samples, 99.99%)</title><rect x="0.0042%" y="565" width="99.9913%" height="15" fill="rgb(228,208,7)" fg:x="21" fg:w="504645"/><text x="0.2542%" y="575.50">neural_network.exe`std::panicking::try::do_call</text></g><g><title>neural_network.exe`std::rt::lang_start_internal::closure$2 (504,645 samples, 99.99%)</title><rect x="0.0042%" y="549" width="99.9913%" height="15" fill="rgb(244,45,10)" fg:x="21" fg:w="504645"/><text x="0.2542%" y="559.50">neural_network.exe`std::rt::lang_start_internal::closure$2</text></g><g><title>neural_network.exe`std::panic::catch_unwind (504,645 samples, 99.99%)</title><rect x="0.0042%" y="533" width="99.9913%" height="15" fill="rgb(207,125,25)" fg:x="21" fg:w="504645"/><text x="0.2542%" y="543.50">neural_network.exe`std::panic::catch_unwind</text></g><g><title>neural_network.exe`_ZN4core3ops8function6FnOnce40call_once$u7b$$u7b$vtable.shim$u7d$$u7d$17h6d67b664973906deE.llvm.15269462732172247164 (504,645 samples, 99.99%)</title><rect x="0.0042%" y="517" width="99.9913%" height="15" fill="rgb(210,195,18)" fg:x="21" fg:w="504645"/><text x="0.2542%" y="527.50">neural_network.exe`_ZN4core3ops8function6FnOnce40call_once$u7b$$u7b$vtable.shim$u7d$$u7d$17h6d67b664973906deE.llvm.15269462732172247164</text></g><g><title>neural_network.exe`_ZN3std3sys9backtrace28__rust_begin_short_backtrace17h63251156b8c324b6E (504,645 samples, 99.99%)</title><rect x="0.0042%" y="501" width="99.9913%" height="15" fill="rgb(249,80,12)" fg:x="21" fg:w="504645"/><text x="0.2542%" y="511.50">neural_network.exe`_ZN3std3sys9backtrace28__rust_begin_short_backtrace17h63251156b8c324b6E</text></g><g><title>neural_network.exe`Unknown (504,645 samples, 99.99%)</title><rect x="0.0042%" y="485" width="99.9913%" height="15" fill="rgb(221,65,9)" fg:x="21" fg:w="504645"/><text x="0.2542%" y="495.50">neural_network.exe`Unknown</text></g><g><title>all (504,689 samples, 100%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(235,49,36)" fg:x="0" fg:w="504689"/><text x="0.2500%" y="719.50"></text></g></svg></svg>