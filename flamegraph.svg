<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="3686" onload="init(evt)" viewBox="0 0 1200 3686" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="3686" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="3669.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="3669.00"> </text><svg id="frames" x="10" width="1180" total_samples="1394236"><g><title>neural_network.exe`core::ptr::drop_in_place(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (403 samples, 0.03%)</title><rect x="0.0115%" y="3285" width="0.0289%" height="15" fill="rgb(227,0,7)" fg:x="160" fg:w="403"/><text x="0.2615%" y="3295.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(ndarray::data_repr::OwnedRepr (403 samples, 0.03%)</title><rect x="0.0115%" y="3269" width="0.0289%" height="15" fill="rgb(217,0,24)" fg:x="160" fg:w="403"/><text x="0.2615%" y="3279.50"></text></g><g><title>neural_network.exe`ndarray::data_repr::impl$2::drop(ndarray::data_repr::OwnedRepr (403 samples, 0.03%)</title><rect x="0.0115%" y="3253" width="0.0289%" height="15" fill="rgb(221,193,54)" fg:x="160" fg:w="403"/><text x="0.2615%" y="3263.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec (402 samples, 0.03%)</title><rect x="0.0115%" y="3237" width="0.0288%" height="15" fill="rgb(248,212,6)" fg:x="161" fg:w="402"/><text x="0.2615%" y="3247.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (402 samples, 0.03%)</title><rect x="0.0115%" y="3221" width="0.0288%" height="15" fill="rgb(208,68,35)" fg:x="161" fg:w="402"/><text x="0.2615%" y="3231.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec (402 samples, 0.03%)</title><rect x="0.0115%" y="3205" width="0.0288%" height="15" fill="rgb(232,128,0)" fg:x="161" fg:w="402"/><text x="0.2615%" y="3215.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (402 samples, 0.03%)</title><rect x="0.0115%" y="3189" width="0.0288%" height="15" fill="rgb(207,160,47)" fg:x="161" fg:w="402"/><text x="0.2615%" y="3199.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (402 samples, 0.03%)</title><rect x="0.0115%" y="3173" width="0.0288%" height="15" fill="rgb(228,23,34)" fg:x="161" fg:w="402"/><text x="0.2615%" y="3183.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (402 samples, 0.03%)</title><rect x="0.0115%" y="3157" width="0.0288%" height="15" fill="rgb(218,30,26)" fg:x="161" fg:w="402"/><text x="0.2615%" y="3167.50"></text></g><g><title>`0x7FF97E62AFF1 (402 samples, 0.03%)</title><rect x="0.0115%" y="3141" width="0.0288%" height="15" fill="rgb(220,122,19)" fg:x="161" fg:w="402"/><text x="0.2615%" y="3151.50"></text></g><g><title>`0x7FF97E62C324 (402 samples, 0.03%)</title><rect x="0.0115%" y="3125" width="0.0288%" height="15" fill="rgb(250,228,42)" fg:x="161" fg:w="402"/><text x="0.2615%" y="3135.50"></text></g><g><title>`0x7FF97E62A10C (400 samples, 0.03%)</title><rect x="0.0117%" y="3109" width="0.0287%" height="15" fill="rgb(240,193,28)" fg:x="163" fg:w="400"/><text x="0.2617%" y="3119.50"></text></g><g><title>`0x7FF97E636AC6 (400 samples, 0.03%)</title><rect x="0.0117%" y="3093" width="0.0287%" height="15" fill="rgb(216,20,37)" fg:x="163" fg:w="400"/><text x="0.2617%" y="3103.50"></text></g><g><title>`0x7FF97E690364 (400 samples, 0.03%)</title><rect x="0.0117%" y="3077" width="0.0287%" height="15" fill="rgb(206,188,39)" fg:x="163" fg:w="400"/><text x="0.2617%" y="3087.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (588 samples, 0.04%)</title><rect x="0.0115%" y="3333" width="0.0422%" height="15" fill="rgb(217,207,13)" fg:x="160" fg:w="588"/><text x="0.2615%" y="3343.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$25::drop(alloc::vec::Vec&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (588 samples, 0.04%)</title><rect x="0.0115%" y="3317" width="0.0422%" height="15" fill="rgb(231,73,38)" fg:x="160" fg:w="588"/><text x="0.2615%" y="3327.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(ptr_mut$&lt;slice2$&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (588 samples, 0.04%)</title><rect x="0.0115%" y="3301" width="0.0422%" height="15" fill="rgb(225,20,46)" fg:x="160" fg:w="588"/><text x="0.2615%" y="3311.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;enum2$&lt;ndarray::CowRepr&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::to_owned&lt;f32,enum2$&lt;ndarray::CowRepr&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; (185 samples, 0.01%)</title><rect x="0.0404%" y="3285" width="0.0133%" height="15" fill="rgb(210,31,41)" fg:x="563" fg:w="185"/><text x="0.2904%" y="3295.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_shape_vec_unchecked(ndarray::shape_builder::StrideShape&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, alloc::vec::Vec (184 samples, 0.01%)</title><rect x="0.0405%" y="3269" width="0.0132%" height="15" fill="rgb(221,200,47)" fg:x="564" fg:w="184"/><text x="0.2905%" y="3279.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_vec_dim_stride_unchecked(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;, ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;, alloc::vec::Vec (184 samples, 0.01%)</title><rect x="0.0405%" y="3253" width="0.0132%" height="15" fill="rgb(226,26,5)" fg:x="564" fg:w="184"/><text x="0.2905%" y="3263.50"></text></g><g><title>neural_network.exe`ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$ (184 samples, 0.01%)</title><rect x="0.0405%" y="3237" width="0.0132%" height="15" fill="rgb(249,33,26)" fg:x="564" fg:w="184"/><text x="0.2905%" y="3247.50"></text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$1::fold(core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;usize&gt;,core::slice::iter::Iter&lt;usize&gt; &gt;, long long, ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$ (184 samples, 0.01%)</title><rect x="0.0405%" y="3221" width="0.0132%" height="15" fill="rgb(235,183,28)" fg:x="564" fg:w="184"/><text x="0.2905%" y="3231.50"></text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$4::fold(core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;usize&gt;,core::slice::iter::Iter&lt;usize&gt; &gt;, long long, ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$ (184 samples, 0.01%)</title><rect x="0.0405%" y="3205" width="0.0132%" height="15" fill="rgb(221,5,38)" fg:x="564" fg:w="184"/><text x="0.2905%" y="3215.50"></text></g><g><title>neural_network.exe`ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure$0(ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, long long, tuple$&lt;ref$&lt;usize&gt;,ref$ (184 samples, 0.01%)</title><rect x="0.0405%" y="3189" width="0.0132%" height="15" fill="rgb(247,18,42)" fg:x="564" fg:w="184"/><text x="0.2905%" y="3199.50"></text></g><g><title>`0x7FF968D511FB (184 samples, 0.01%)</title><rect x="0.0405%" y="3173" width="0.0132%" height="15" fill="rgb(241,131,45)" fg:x="564" fg:w="184"/><text x="0.2905%" y="3183.50"></text></g><g><title>`0x7FF97E62A10C (299 samples, 0.02%)</title><rect x="0.0539%" y="3285" width="0.0214%" height="15" fill="rgb(249,31,29)" fg:x="752" fg:w="299"/><text x="0.3039%" y="3295.50"></text></g><g><title>`0x7FF97E636AC6 (299 samples, 0.02%)</title><rect x="0.0539%" y="3269" width="0.0214%" height="15" fill="rgb(225,111,53)" fg:x="752" fg:w="299"/><text x="0.3039%" y="3279.50"></text></g><g><title>`0x7FF97E690364 (299 samples, 0.02%)</title><rect x="0.0539%" y="3253" width="0.0214%" height="15" fill="rgb(238,160,17)" fg:x="752" fg:w="299"/><text x="0.3039%" y="3263.50"></text></g><g><title>`0x7FF97E62C324 (306 samples, 0.02%)</title><rect x="0.0537%" y="3301" width="0.0219%" height="15" fill="rgb(214,148,48)" fg:x="749" fg:w="306"/><text x="0.3037%" y="3311.50"></text></g><g><title>`0x7FF97E62AFF1 (307 samples, 0.02%)</title><rect x="0.0537%" y="3317" width="0.0220%" height="15" fill="rgb(232,36,49)" fg:x="749" fg:w="307"/><text x="0.3037%" y="3327.50"></text></g><g><title>`0x7FF968D5154E (199 samples, 0.01%)</title><rect x="0.0812%" y="3189" width="0.0143%" height="15" fill="rgb(209,103,24)" fg:x="1132" fg:w="199"/><text x="0.3312%" y="3199.50"></text></g><g><title>`0x7FF968D51556 (145 samples, 0.01%)</title><rect x="0.0955%" y="3189" width="0.0104%" height="15" fill="rgb(229,88,8)" fg:x="1331" fg:w="145"/><text x="0.3455%" y="3199.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::to_owned&lt;f32,ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; (454 samples, 0.03%)</title><rect x="0.0757%" y="3301" width="0.0326%" height="15" fill="rgb(213,181,19)" fg:x="1056" fg:w="454"/><text x="0.3257%" y="3311.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_shape_vec_unchecked(ndarray::shape_builder::StrideShape&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, alloc::vec::Vec (444 samples, 0.03%)</title><rect x="0.0765%" y="3285" width="0.0318%" height="15" fill="rgb(254,191,54)" fg:x="1066" fg:w="444"/><text x="0.3265%" y="3295.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_vec_dim_stride_unchecked(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;, ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;, alloc::vec::Vec (444 samples, 0.03%)</title><rect x="0.0765%" y="3269" width="0.0318%" height="15" fill="rgb(241,83,37)" fg:x="1066" fg:w="444"/><text x="0.3265%" y="3279.50"></text></g><g><title>neural_network.exe`ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$ (444 samples, 0.03%)</title><rect x="0.0765%" y="3253" width="0.0318%" height="15" fill="rgb(233,36,39)" fg:x="1066" fg:w="444"/><text x="0.3265%" y="3263.50"></text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$1::fold(core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;usize&gt;,core::slice::iter::Iter&lt;usize&gt; &gt;, long long, ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$ (444 samples, 0.03%)</title><rect x="0.0765%" y="3237" width="0.0318%" height="15" fill="rgb(226,3,54)" fg:x="1066" fg:w="444"/><text x="0.3265%" y="3247.50"></text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$4::fold(core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;usize&gt;,core::slice::iter::Iter&lt;usize&gt; &gt;, long long, ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$ (444 samples, 0.03%)</title><rect x="0.0765%" y="3221" width="0.0318%" height="15" fill="rgb(245,192,40)" fg:x="1066" fg:w="444"/><text x="0.3265%" y="3231.50"></text></g><g><title>neural_network.exe`ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure$0(ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, long long, tuple$&lt;ref$&lt;usize&gt;,ref$ (444 samples, 0.03%)</title><rect x="0.0765%" y="3205" width="0.0318%" height="15" fill="rgb(238,167,29)" fg:x="1066" fg:w="444"/><text x="0.3265%" y="3215.50"></text></g><g><title>`0x7FF97E696E23 (222 samples, 0.02%)</title><rect x="0.1489%" y="3125" width="0.0159%" height="15" fill="rgb(232,182,51)" fg:x="2076" fg:w="222"/><text x="0.3989%" y="3135.50"></text></g><g><title>`0x7FF97E62D7B9 (242 samples, 0.02%)</title><rect x="0.1487%" y="3141" width="0.0174%" height="15" fill="rgb(231,60,39)" fg:x="2073" fg:w="242"/><text x="0.3987%" y="3151.50"></text></g><g><title>`0x7FF97E62CC9A (285 samples, 0.02%)</title><rect x="0.1457%" y="3157" width="0.0204%" height="15" fill="rgb(208,69,12)" fg:x="2031" fg:w="285"/><text x="0.3957%" y="3167.50"></text></g><g><title>neural_network.exe`alloc::vec::from_elem (291 samples, 0.02%)</title><rect x="0.1455%" y="3285" width="0.0209%" height="15" fill="rgb(235,93,37)" fg:x="2028" fg:w="291"/><text x="0.3955%" y="3295.50"></text></g><g><title>neural_network.exe`alloc::vec::spec_from_elem::impl$1::from_elem (291 samples, 0.02%)</title><rect x="0.1455%" y="3269" width="0.0209%" height="15" fill="rgb(213,116,39)" fg:x="2028" fg:w="291"/><text x="0.3955%" y="3279.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f32,alloc::alloc::Global&gt;::with_capacity_zeroed_in (291 samples, 0.02%)</title><rect x="0.1455%" y="3253" width="0.0209%" height="15" fill="rgb(222,207,29)" fg:x="2028" fg:w="291"/><text x="0.3955%" y="3263.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_zeroed_in (291 samples, 0.02%)</title><rect x="0.1455%" y="3237" width="0.0209%" height="15" fill="rgb(206,96,30)" fg:x="2028" fg:w="291"/><text x="0.3955%" y="3247.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (291 samples, 0.02%)</title><rect x="0.1455%" y="3221" width="0.0209%" height="15" fill="rgb(218,138,4)" fg:x="2028" fg:w="291"/><text x="0.3955%" y="3231.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::allocate_zeroed (289 samples, 0.02%)</title><rect x="0.1456%" y="3205" width="0.0207%" height="15" fill="rgb(250,191,14)" fg:x="2030" fg:w="289"/><text x="0.3956%" y="3215.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::alloc_impl (289 samples, 0.02%)</title><rect x="0.1456%" y="3189" width="0.0207%" height="15" fill="rgb(239,60,40)" fg:x="2030" fg:w="289"/><text x="0.3956%" y="3199.50"></text></g><g><title>neural_network.exe`alloc::alloc::alloc_zeroed (289 samples, 0.02%)</title><rect x="0.1456%" y="3173" width="0.0207%" height="15" fill="rgb(206,27,48)" fg:x="2030" fg:w="289"/><text x="0.3956%" y="3183.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec (146 samples, 0.01%)</title><rect x="0.1739%" y="3285" width="0.0105%" height="15" fill="rgb(225,35,8)" fg:x="2424" fg:w="146"/><text x="0.4239%" y="3295.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (146 samples, 0.01%)</title><rect x="0.1739%" y="3269" width="0.0105%" height="15" fill="rgb(250,213,24)" fg:x="2424" fg:w="146"/><text x="0.4239%" y="3279.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec (146 samples, 0.01%)</title><rect x="0.1739%" y="3253" width="0.0105%" height="15" fill="rgb(247,123,22)" fg:x="2424" fg:w="146"/><text x="0.4239%" y="3263.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (146 samples, 0.01%)</title><rect x="0.1739%" y="3237" width="0.0105%" height="15" fill="rgb(231,138,38)" fg:x="2424" fg:w="146"/><text x="0.4239%" y="3247.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (146 samples, 0.01%)</title><rect x="0.1739%" y="3221" width="0.0105%" height="15" fill="rgb(231,145,46)" fg:x="2424" fg:w="146"/><text x="0.4239%" y="3231.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (146 samples, 0.01%)</title><rect x="0.1739%" y="3205" width="0.0105%" height="15" fill="rgb(251,118,11)" fg:x="2424" fg:w="146"/><text x="0.4239%" y="3215.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,alloc::alloc::Global&gt;::push(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (1,714 samples, 0.12%)</title><rect x="0.0757%" y="3317" width="0.1229%" height="15" fill="rgb(217,147,25)" fg:x="1056" fg:w="1714"/><text x="0.3257%" y="3327.50"></text></g><g><title>neural_network.exe`neural_network::layers::softmax_layer::pass(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (1,260 samples, 0.09%)</title><rect x="0.1083%" y="3301" width="0.0904%" height="15" fill="rgb(247,81,37)" fg:x="1510" fg:w="1260"/><text x="0.3583%" y="3311.50"></text></g><g><title>neural_network.exe`std::f32::impl$0::exp (170 samples, 0.01%)</title><rect x="0.1865%" y="3285" width="0.0122%" height="15" fill="rgb(209,12,38)" fg:x="2600" fg:w="170"/><text x="0.4365%" y="3295.50"></text></g><g><title>`0x7FF968D511FB (214 samples, 0.02%)</title><rect x="0.1987%" y="3221" width="0.0153%" height="15" fill="rgb(227,1,9)" fg:x="2770" fg:w="214"/><text x="0.4487%" y="3231.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt; &gt;,alloc::alloc::Global&gt;::push(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (226 samples, 0.02%)</title><rect x="0.1987%" y="3317" width="0.0162%" height="15" fill="rgb(248,47,43)" fg:x="2770" fg:w="226"/><text x="0.4487%" y="3327.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt; &gt;::to_owned&lt;f32,ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt; &gt; (226 samples, 0.02%)</title><rect x="0.1987%" y="3301" width="0.0162%" height="15" fill="rgb(221,10,30)" fg:x="2770" fg:w="226"/><text x="0.4487%" y="3311.50"></text></g><g><title>neural_network.exe`alloc::slice::impl$0::to_vec(ref$&lt;slice2$ (226 samples, 0.02%)</title><rect x="0.1987%" y="3285" width="0.0162%" height="15" fill="rgb(210,229,1)" fg:x="2770" fg:w="226"/><text x="0.4487%" y="3295.50"></text></g><g><title>neural_network.exe`alloc::slice::impl$0::to_vec_in(ref$&lt;slice2$ (226 samples, 0.02%)</title><rect x="0.1987%" y="3269" width="0.0162%" height="15" fill="rgb(222,148,37)" fg:x="2770" fg:w="226"/><text x="0.4487%" y="3279.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$ (226 samples, 0.02%)</title><rect x="0.1987%" y="3253" width="0.0162%" height="15" fill="rgb(234,67,33)" fg:x="2770" fg:w="226"/><text x="0.4487%" y="3263.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$ (226 samples, 0.02%)</title><rect x="0.1987%" y="3237" width="0.0162%" height="15" fill="rgb(247,98,35)" fg:x="2770" fg:w="226"/><text x="0.4487%" y="3247.50"></text></g><g><title>`0x7FF968D5154E (221 samples, 0.02%)</title><rect x="0.2199%" y="3173" width="0.0159%" height="15" fill="rgb(247,138,52)" fg:x="3066" fg:w="221"/><text x="0.4699%" y="3183.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(ndarray::ArrayBase&lt;enum2$&lt;ndarray::CowRepr&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (429 samples, 0.03%)</title><rect x="0.2149%" y="3317" width="0.0308%" height="15" fill="rgb(213,79,30)" fg:x="2996" fg:w="429"/><text x="0.4649%" y="3327.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(enum2$&lt;ndarray::CowRepr (429 samples, 0.03%)</title><rect x="0.2149%" y="3301" width="0.0308%" height="15" fill="rgb(246,177,23)" fg:x="2996" fg:w="429"/><text x="0.4649%" y="3311.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;enum2$&lt;ndarray::CowRepr&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::to_owned&lt;f32,enum2$&lt;ndarray::CowRepr&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; (429 samples, 0.03%)</title><rect x="0.2149%" y="3285" width="0.0308%" height="15" fill="rgb(230,62,27)" fg:x="2996" fg:w="429"/><text x="0.4649%" y="3295.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_shape_vec_unchecked(ndarray::shape_builder::StrideShape&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, alloc::vec::Vec (428 samples, 0.03%)</title><rect x="0.2150%" y="3269" width="0.0307%" height="15" fill="rgb(216,154,8)" fg:x="2997" fg:w="428"/><text x="0.4650%" y="3279.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_vec_dim_stride_unchecked(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;, ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;, alloc::vec::Vec (428 samples, 0.03%)</title><rect x="0.2150%" y="3253" width="0.0307%" height="15" fill="rgb(244,35,45)" fg:x="2997" fg:w="428"/><text x="0.4650%" y="3263.50"></text></g><g><title>neural_network.exe`ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$ (428 samples, 0.03%)</title><rect x="0.2150%" y="3237" width="0.0307%" height="15" fill="rgb(251,115,12)" fg:x="2997" fg:w="428"/><text x="0.4650%" y="3247.50"></text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$1::fold(core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;usize&gt;,core::slice::iter::Iter&lt;usize&gt; &gt;, long long, ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$ (428 samples, 0.03%)</title><rect x="0.2150%" y="3221" width="0.0307%" height="15" fill="rgb(240,54,50)" fg:x="2997" fg:w="428"/><text x="0.4650%" y="3231.50"></text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$4::fold(core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;usize&gt;,core::slice::iter::Iter&lt;usize&gt; &gt;, long long, ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$ (428 samples, 0.03%)</title><rect x="0.2150%" y="3205" width="0.0307%" height="15" fill="rgb(233,84,52)" fg:x="2997" fg:w="428"/><text x="0.4650%" y="3215.50"></text></g><g><title>neural_network.exe`ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure$0(ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, long long, tuple$&lt;ref$&lt;usize&gt;,ref$ (428 samples, 0.03%)</title><rect x="0.2150%" y="3189" width="0.0307%" height="15" fill="rgb(207,117,47)" fg:x="2997" fg:w="428"/><text x="0.4650%" y="3199.50"></text></g><g><title>`0x7FF97E62BFA7 (322 samples, 0.02%)</title><rect x="0.3192%" y="3093" width="0.0231%" height="15" fill="rgb(249,43,39)" fg:x="4451" fg:w="322"/><text x="0.5692%" y="3103.50"></text></g><g><title>`0x7FF97E62C342 (250 samples, 0.02%)</title><rect x="0.3524%" y="3093" width="0.0179%" height="15" fill="rgb(209,38,44)" fg:x="4913" fg:w="250"/><text x="0.6024%" y="3103.50"></text></g><g><title>`0x7FF97E62C350 (246 samples, 0.02%)</title><rect x="0.3703%" y="3093" width="0.0176%" height="15" fill="rgb(236,212,23)" fg:x="5163" fg:w="246"/><text x="0.6203%" y="3103.50"></text></g><g><title>`0x7FF97E62B077 (245 samples, 0.02%)</title><rect x="0.3704%" y="3077" width="0.0176%" height="15" fill="rgb(242,79,21)" fg:x="5164" fg:w="245"/><text x="0.6204%" y="3087.50"></text></g><g><title>`0x7FF97E69CBBC (158 samples, 0.01%)</title><rect x="0.4344%" y="3093" width="0.0113%" height="15" fill="rgb(211,96,35)" fg:x="6057" fg:w="158"/><text x="0.6844%" y="3103.50"></text></g><g><title>`0x7FF97E69CBBF (142 samples, 0.01%)</title><rect x="0.4458%" y="3093" width="0.0102%" height="15" fill="rgb(253,215,40)" fg:x="6215" fg:w="142"/><text x="0.6958%" y="3103.50"></text></g><g><title>`0x7FF97E69CC6F (1,169 samples, 0.08%)</title><rect x="0.4730%" y="3093" width="0.0838%" height="15" fill="rgb(211,81,21)" fg:x="6595" fg:w="1169"/><text x="0.7230%" y="3103.50"></text></g><g><title>`0x7FF97E69CC81 (187 samples, 0.01%)</title><rect x="0.5571%" y="3093" width="0.0134%" height="15" fill="rgb(208,190,38)" fg:x="7767" fg:w="187"/><text x="0.8071%" y="3103.50"></text></g><g><title>`0x7FF97E69CC88 (224 samples, 0.02%)</title><rect x="0.5705%" y="3093" width="0.0161%" height="15" fill="rgb(235,213,38)" fg:x="7954" fg:w="224"/><text x="0.8205%" y="3103.50"></text></g><g><title>`0x7FF97E69CCAF (322 samples, 0.02%)</title><rect x="0.5868%" y="3093" width="0.0231%" height="15" fill="rgb(237,122,38)" fg:x="8182" fg:w="322"/><text x="0.8368%" y="3103.50"></text></g><g><title>`0x7FF97E69CCF4 (190 samples, 0.01%)</title><rect x="0.6100%" y="3093" width="0.0136%" height="15" fill="rgb(244,218,35)" fg:x="8505" fg:w="190"/><text x="0.8600%" y="3103.50"></text></g><g><title>`0x7FF97E69CD0E (178 samples, 0.01%)</title><rect x="0.6283%" y="3093" width="0.0128%" height="15" fill="rgb(240,68,47)" fg:x="8760" fg:w="178"/><text x="0.8783%" y="3103.50"></text></g><g><title>`0x7FF97E69CD3B (177 samples, 0.01%)</title><rect x="0.6459%" y="3093" width="0.0127%" height="15" fill="rgb(210,16,53)" fg:x="9006" fg:w="177"/><text x="0.8959%" y="3103.50"></text></g><g><title>`0x7FF97E62AFF1 (4,824 samples, 0.35%)</title><rect x="0.3128%" y="3109" width="0.3460%" height="15" fill="rgb(235,124,12)" fg:x="4361" fg:w="4824"/><text x="0.5628%" y="3119.50"></text></g><g><title>`0x7FF97E62AFF4 (402 samples, 0.03%)</title><rect x="0.6588%" y="3109" width="0.0288%" height="15" fill="rgb(224,169,11)" fg:x="9185" fg:w="402"/><text x="0.9088%" y="3119.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (5,340 samples, 0.38%)</title><rect x="0.3068%" y="3141" width="0.3830%" height="15" fill="rgb(250,166,2)" fg:x="4277" fg:w="5340"/><text x="0.5568%" y="3151.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (5,340 samples, 0.38%)</title><rect x="0.3068%" y="3125" width="0.3830%" height="15" fill="rgb(242,216,29)" fg:x="4277" fg:w="5340"/><text x="0.5568%" y="3135.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec (5,342 samples, 0.38%)</title><rect x="0.3068%" y="3205" width="0.3831%" height="15" fill="rgb(230,116,27)" fg:x="4277" fg:w="5342"/><text x="0.5568%" y="3215.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (5,342 samples, 0.38%)</title><rect x="0.3068%" y="3189" width="0.3831%" height="15" fill="rgb(228,99,48)" fg:x="4277" fg:w="5342"/><text x="0.5568%" y="3199.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec (5,342 samples, 0.38%)</title><rect x="0.3068%" y="3173" width="0.3831%" height="15" fill="rgb(253,11,6)" fg:x="4277" fg:w="5342"/><text x="0.5568%" y="3183.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (5,342 samples, 0.38%)</title><rect x="0.3068%" y="3157" width="0.3831%" height="15" fill="rgb(247,143,39)" fg:x="4277" fg:w="5342"/><text x="0.5568%" y="3167.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (5,363 samples, 0.38%)</title><rect x="0.3059%" y="3253" width="0.3847%" height="15" fill="rgb(236,97,10)" fg:x="4265" fg:w="5363"/><text x="0.5559%" y="3263.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(ndarray::data_repr::OwnedRepr (5,363 samples, 0.38%)</title><rect x="0.3059%" y="3237" width="0.3847%" height="15" fill="rgb(233,208,19)" fg:x="4265" fg:w="5363"/><text x="0.5559%" y="3247.50"></text></g><g><title>neural_network.exe`ndarray::data_repr::impl$2::drop(ndarray::data_repr::OwnedRepr (5,363 samples, 0.38%)</title><rect x="0.3059%" y="3221" width="0.3847%" height="15" fill="rgb(216,164,2)" fg:x="4265" fg:w="5363"/><text x="0.5559%" y="3231.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,3&gt; &gt; &gt;::collapse_axis (1,830 samples, 0.13%)</title><rect x="0.6906%" y="3221" width="0.1313%" height="15" fill="rgb(220,129,5)" fg:x="9628" fg:w="1830"/><text x="0.9406%" y="3231.50"></text></g><g><title>neural_network.exe`ndarray::dimension::do_collapse_axis(ndarray::dimension::dim::Dim&lt;array$&lt;usize,3&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$ (1,827 samples, 0.13%)</title><rect x="0.6908%" y="3205" width="0.1310%" height="15" fill="rgb(242,17,10)" fg:x="9631" fg:w="1827"/><text x="0.9408%" y="3215.50"></text></g><g><title>neural_network.exe`ndarray::dimension::stride_offset (382 samples, 0.03%)</title><rect x="0.7944%" y="3189" width="0.0274%" height="15" fill="rgb(242,107,0)" fg:x="11076" fg:w="382"/><text x="1.0444%" y="3199.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,3&gt; &gt; &gt;::index_axis_move(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (3,611 samples, 0.26%)</title><rect x="0.6906%" y="3237" width="0.2590%" height="15" fill="rgb(251,28,31)" fg:x="9628" fg:w="3611"/><text x="0.9406%" y="3247.50"></text></g><g><title>neural_network.exe`ndarray::dimension::remove_axis::impl$2::remove_axis(ndarray::dimension::dim::Dim&lt;array$ (1,778 samples, 0.13%)</title><rect x="0.8220%" y="3221" width="0.1275%" height="15" fill="rgb(233,223,10)" fg:x="11461" fg:w="1778"/><text x="1.0720%" y="3231.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::copy_from_slice(ref_mut$&lt;slice2$&lt;usize&gt; &gt;, ref$&lt;slice2$ (1,778 samples, 0.13%)</title><rect x="0.8220%" y="3205" width="0.1275%" height="15" fill="rgb(215,21,27)" fg:x="11461" fg:w="1778"/><text x="1.0720%" y="3215.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping (1,778 samples, 0.13%)</title><rect x="0.8220%" y="3189" width="0.1275%" height="15" fill="rgb(232,23,21)" fg:x="11461" fg:w="1778"/><text x="1.0720%" y="3199.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,3&gt; &gt; &gt;::index_axis (24,831 samples, 1.78%)</title><rect x="0.6906%" y="3253" width="1.7810%" height="15" fill="rgb(244,5,23)" fg:x="9628" fg:w="24831"/><text x="0.9406%" y="3263.50">n..</text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,3&gt; &gt; &gt;::view (21,220 samples, 1.52%)</title><rect x="0.9496%" y="3237" width="1.5220%" height="15" fill="rgb(226,81,46)" fg:x="13239" fg:w="21220"/><text x="1.1996%" y="3247.50"></text></g><g><title>neural_network.exe`ndarray::dimension::dim::impl$4::clone(ndarray::dimension::dim::Dim&lt;array$ (21,220 samples, 1.52%)</title><rect x="0.9496%" y="3221" width="1.5220%" height="15" fill="rgb(247,70,30)" fg:x="13239" fg:w="21220"/><text x="1.1996%" y="3231.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,3&gt; &gt; &gt;::index_axis_mut (703 samples, 0.05%)</title><rect x="2.4716%" y="3253" width="0.0504%" height="15" fill="rgb(212,68,19)" fg:x="34460" fg:w="703"/><text x="2.7216%" y="3263.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,3&gt; &gt; &gt;::index_axis_move(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (703 samples, 0.05%)</title><rect x="2.4716%" y="3237" width="0.0504%" height="15" fill="rgb(240,187,13)" fg:x="34460" fg:w="703"/><text x="2.7216%" y="3247.50"></text></g><g><title>neural_network.exe`ndarray::dimension::remove_axis::impl$2::remove_axis(ndarray::dimension::dim::Dim&lt;array$ (699 samples, 0.05%)</title><rect x="2.4719%" y="3221" width="0.0501%" height="15" fill="rgb(223,113,26)" fg:x="34464" fg:w="699"/><text x="2.7219%" y="3231.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::copy_from_slice(ref_mut$&lt;slice2$&lt;usize&gt; &gt;, ref$&lt;slice2$ (699 samples, 0.05%)</title><rect x="2.4719%" y="3205" width="0.0501%" height="15" fill="rgb(206,192,2)" fg:x="34464" fg:w="699"/><text x="2.7219%" y="3215.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping (699 samples, 0.05%)</title><rect x="2.4719%" y="3189" width="0.0501%" height="15" fill="rgb(241,108,4)" fg:x="34464" fg:w="699"/><text x="2.7219%" y="3199.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt; &gt;::index_axis (631 samples, 0.05%)</title><rect x="2.5220%" y="3253" width="0.0453%" height="15" fill="rgb(247,173,49)" fg:x="35163" fg:w="631"/><text x="2.7720%" y="3263.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt; &gt;::index_axis_move(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (631 samples, 0.05%)</title><rect x="2.5220%" y="3237" width="0.0453%" height="15" fill="rgb(224,114,35)" fg:x="35163" fg:w="631"/><text x="2.7720%" y="3247.50"></text></g><g><title>neural_network.exe`ndarray::dimension::remove_axis::impl$3::remove_axis(ndarray::dimension::dim::Dim&lt;array$ (551 samples, 0.04%)</title><rect x="2.5278%" y="3221" width="0.0395%" height="15" fill="rgb(245,159,27)" fg:x="35243" fg:w="551"/><text x="2.7778%" y="3231.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::copy_from_slice(ref_mut$&lt;slice2$&lt;usize&gt; &gt;, ref$&lt;slice2$ (551 samples, 0.04%)</title><rect x="2.5278%" y="3205" width="0.0395%" height="15" fill="rgb(245,172,44)" fg:x="35243" fg:w="551"/><text x="2.7778%" y="3215.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping (551 samples, 0.04%)</title><rect x="2.5278%" y="3189" width="0.0395%" height="15" fill="rgb(236,23,11)" fg:x="35243" fg:w="551"/><text x="2.7778%" y="3199.50"></text></g><g><title>neural_network.exe`core::cmp::impls::impl$70::lt (21,294 samples, 1.53%)</title><rect x="17.1760%" y="3125" width="1.5273%" height="15" fill="rgb(205,117,38)" fg:x="239474" fg:w="21294"/><text x="17.4260%" y="3135.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$6::next(core::ops::range::Range (65,420 samples, 4.69%)</title><rect x="14.0716%" y="3157" width="4.6922%" height="15" fill="rgb(237,72,25)" fg:x="196191" fg:w="65420"/><text x="14.3216%" y="3167.50">neura..</text></g><g><title>neural_network.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (65,420 samples, 4.69%)</title><rect x="14.0716%" y="3141" width="4.6922%" height="15" fill="rgb(244,70,9)" fg:x="196191" fg:w="65420"/><text x="14.3216%" y="3151.50">neura..</text></g><g><title>neural_network.exe`core::iter::range::impl$44::forward_unchecked (843 samples, 0.06%)</title><rect x="18.7033%" y="3125" width="0.0605%" height="15" fill="rgb(217,125,39)" fg:x="260768" fg:w="843"/><text x="18.9533%" y="3135.50"></text></g><g><title>neural_network.exe`core::num::impl$5::checked_add_unsigned (843 samples, 0.06%)</title><rect x="18.7033%" y="3109" width="0.0605%" height="15" fill="rgb(235,36,10)" fg:x="260768" fg:w="843"/><text x="18.9533%" y="3119.50"></text></g><g><title>neural_network.exe`core::num::impl$5::overflowing_add_unsigned (843 samples, 0.06%)</title><rect x="18.7033%" y="3093" width="0.0605%" height="15" fill="rgb(251,123,47)" fg:x="260768" fg:w="843"/><text x="18.9533%" y="3103.50"></text></g><g><title>neural_network.exe`core::num::impl$5::overflowing_add (843 samples, 0.06%)</title><rect x="18.7033%" y="3077" width="0.0605%" height="15" fill="rgb(221,13,13)" fg:x="260768" fg:w="843"/><text x="18.9533%" y="3087.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::dim (1,860 samples, 0.13%)</title><rect x="18.7638%" y="3157" width="0.1334%" height="15" fill="rgb(238,131,9)" fg:x="261611" fg:w="1860"/><text x="19.0138%" y="3167.50"></text></g><g><title>neural_network.exe`ndarray::dimension::dim::impl$4::clone(ndarray::dimension::dim::Dim&lt;array$ (1,860 samples, 0.13%)</title><rect x="18.7638%" y="3141" width="0.1334%" height="15" fill="rgb(211,50,8)" fg:x="261611" fg:w="1860"/><text x="19.0138%" y="3151.50"></text></g><g><title>neural_network.exe`core::array::impl$20::clone (1,860 samples, 0.13%)</title><rect x="18.7638%" y="3125" width="0.1334%" height="15" fill="rgb(245,182,24)" fg:x="261611" fg:w="1860"/><text x="19.0138%" y="3135.50"></text></g><g><title>neural_network.exe`core::array::impl$22::clone (1,860 samples, 0.13%)</title><rect x="18.7638%" y="3109" width="0.1334%" height="15" fill="rgb(242,14,37)" fg:x="261611" fg:w="1860"/><text x="19.0138%" y="3119.50"></text></g><g><title>`0x7FF97E62CB04 (371 samples, 0.03%)</title><rect x="18.9220%" y="3045" width="0.0266%" height="15" fill="rgb(246,228,12)" fg:x="263817" fg:w="371"/><text x="19.1720%" y="3055.50"></text></g><g><title>`0x7FF97E62CB2B (256 samples, 0.02%)</title><rect x="18.9523%" y="3045" width="0.0184%" height="15" fill="rgb(213,55,15)" fg:x="264240" fg:w="256"/><text x="19.2023%" y="3055.50"></text></g><g><title>`0x7FF97E62D609 (158 samples, 0.01%)</title><rect x="19.0274%" y="3029" width="0.0113%" height="15" fill="rgb(209,9,3)" fg:x="265287" fg:w="158"/><text x="19.2774%" y="3039.50"></text></g><g><title>`0x7FF97E68F938 (199 samples, 0.01%)</title><rect x="19.0760%" y="3013" width="0.0143%" height="15" fill="rgb(230,59,30)" fg:x="265965" fg:w="199"/><text x="19.3260%" y="3023.50"></text></g><g><title>`0x7FF97E62D68A (644 samples, 0.05%)</title><rect x="19.0450%" y="3029" width="0.0462%" height="15" fill="rgb(209,121,21)" fg:x="265532" fg:w="644"/><text x="19.2950%" y="3039.50"></text></g><g><title>`0x7FF97E62D691 (265 samples, 0.02%)</title><rect x="19.0912%" y="3029" width="0.0190%" height="15" fill="rgb(220,109,13)" fg:x="266176" fg:w="265"/><text x="19.3412%" y="3039.50"></text></g><g><title>`0x7FF97E62D6A8 (218 samples, 0.02%)</title><rect x="19.1138%" y="3029" width="0.0156%" height="15" fill="rgb(232,18,1)" fg:x="266492" fg:w="218"/><text x="19.3638%" y="3039.50"></text></g><g><title>`0x7FF97E62D711 (226 samples, 0.02%)</title><rect x="19.1538%" y="3029" width="0.0162%" height="15" fill="rgb(215,41,42)" fg:x="267049" fg:w="226"/><text x="19.4038%" y="3039.50"></text></g><g><title>`0x7FF97E696E00 (219 samples, 0.02%)</title><rect x="19.1894%" y="3013" width="0.0157%" height="15" fill="rgb(224,123,36)" fg:x="267546" fg:w="219"/><text x="19.4394%" y="3023.50"></text></g><g><title>`0x7FF97E696E23 (5,281 samples, 0.38%)</title><rect x="19.2084%" y="3013" width="0.3788%" height="15" fill="rgb(240,125,3)" fg:x="267811" fg:w="5281"/><text x="19.4584%" y="3023.50"></text></g><g><title>`0x7FF97E696E2C (519 samples, 0.04%)</title><rect x="19.5872%" y="3013" width="0.0372%" height="15" fill="rgb(205,98,50)" fg:x="273092" fg:w="519"/><text x="19.8372%" y="3023.50"></text></g><g><title>`0x7FF97E696E5D (185 samples, 0.01%)</title><rect x="19.6255%" y="3013" width="0.0133%" height="15" fill="rgb(205,185,37)" fg:x="273626" fg:w="185"/><text x="19.8755%" y="3023.50"></text></g><g><title>`0x7FF97E696E6D (694 samples, 0.05%)</title><rect x="19.6390%" y="3013" width="0.0498%" height="15" fill="rgb(238,207,15)" fg:x="273814" fg:w="694"/><text x="19.8890%" y="3023.50"></text></g><g><title>`0x7FF97E696E99 (179 samples, 0.01%)</title><rect x="19.6924%" y="3013" width="0.0128%" height="15" fill="rgb(213,199,42)" fg:x="274558" fg:w="179"/><text x="19.9424%" y="3023.50"></text></g><g><title>`0x7FF97E696EA8 (192 samples, 0.01%)</title><rect x="19.7066%" y="3013" width="0.0138%" height="15" fill="rgb(235,201,11)" fg:x="274756" fg:w="192"/><text x="19.9566%" y="3023.50"></text></g><g><title>`0x7FF97E696EBC (534 samples, 0.04%)</title><rect x="19.7222%" y="3013" width="0.0383%" height="15" fill="rgb(207,46,11)" fg:x="274974" fg:w="534"/><text x="19.9722%" y="3023.50"></text></g><g><title>`0x7FF97E62D7B9 (7,965 samples, 0.57%)</title><rect x="19.1894%" y="3029" width="0.5713%" height="15" fill="rgb(241,35,35)" fg:x="267546" fg:w="7965"/><text x="19.4394%" y="3039.50"></text></g><g><title>`0x7FF97E62CC9A (10,552 samples, 0.76%)</title><rect x="19.0084%" y="3045" width="0.7568%" height="15" fill="rgb(243,32,47)" fg:x="265022" fg:w="10552"/><text x="19.2584%" y="3055.50"></text></g><g><title>`0x7FF97E62CCCF (158 samples, 0.01%)</title><rect x="19.7718%" y="3045" width="0.0113%" height="15" fill="rgb(247,202,23)" fg:x="275665" fg:w="158"/><text x="20.0218%" y="3055.50"></text></g><g><title>`0x7FF97E62CCFC (196 samples, 0.01%)</title><rect x="19.7941%" y="3045" width="0.0141%" height="15" fill="rgb(219,102,11)" fg:x="275977" fg:w="196"/><text x="20.0441%" y="3055.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::allocate_zeroed (149 samples, 0.01%)</title><rect x="19.8179%" y="3045" width="0.0107%" height="15" fill="rgb(243,110,44)" fg:x="276308" fg:w="149"/><text x="20.0679%" y="3055.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::alloc_impl (149 samples, 0.01%)</title><rect x="19.8179%" y="3029" width="0.0107%" height="15" fill="rgb(222,74,54)" fg:x="276308" fg:w="149"/><text x="20.0679%" y="3039.50"></text></g><g><title>neural_network.exe`alloc::alloc::alloc_zeroed (149 samples, 0.01%)</title><rect x="19.8179%" y="3013" width="0.0107%" height="15" fill="rgb(216,99,12)" fg:x="276308" fg:w="149"/><text x="20.0679%" y="3023.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::layout_array (1,059 samples, 0.08%)</title><rect x="19.8286%" y="3045" width="0.0760%" height="15" fill="rgb(226,22,26)" fg:x="276457" fg:w="1059"/><text x="20.0786%" y="3055.50"></text></g><g><title>neural_network.exe`core::alloc::layout::Layout::repeat (1,059 samples, 0.08%)</title><rect x="19.8286%" y="3029" width="0.0760%" height="15" fill="rgb(217,163,10)" fg:x="276457" fg:w="1059"/><text x="20.0786%" y="3039.50"></text></g><g><title>neural_network.exe`core::num::impl$11::checked_mul (1,059 samples, 0.08%)</title><rect x="19.8286%" y="3013" width="0.0760%" height="15" fill="rgb(213,25,53)" fg:x="276457" fg:w="1059"/><text x="20.0786%" y="3023.50"></text></g><g><title>neural_network.exe`core::num::impl$11::overflowing_mul (547 samples, 0.04%)</title><rect x="19.8653%" y="2997" width="0.0392%" height="15" fill="rgb(252,105,26)" fg:x="276969" fg:w="547"/><text x="20.1153%" y="3007.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_alloc_zeroed (1,053 samples, 0.08%)</title><rect x="19.9045%" y="3045" width="0.0755%" height="15" fill="rgb(220,39,43)" fg:x="277516" fg:w="1053"/><text x="20.1545%" y="3055.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::alloc_zeroed (536 samples, 0.04%)</title><rect x="19.9416%" y="3029" width="0.0384%" height="15" fill="rgb(229,68,48)" fg:x="278033" fg:w="536"/><text x="20.1916%" y="3039.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::allocate (536 samples, 0.04%)</title><rect x="19.9416%" y="3013" width="0.0384%" height="15" fill="rgb(252,8,32)" fg:x="278033" fg:w="536"/><text x="20.1916%" y="3023.50"></text></g><g><title>neural_network.exe`alloc::vec::from_elem (15,622 samples, 1.12%)</title><rect x="18.8972%" y="3125" width="1.1205%" height="15" fill="rgb(223,20,43)" fg:x="263471" fg:w="15622"/><text x="19.1472%" y="3135.50"></text></g><g><title>neural_network.exe`alloc::vec::spec_from_elem::impl$1::from_elem (15,622 samples, 1.12%)</title><rect x="18.8972%" y="3109" width="1.1205%" height="15" fill="rgb(229,81,49)" fg:x="263471" fg:w="15622"/><text x="19.1472%" y="3119.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f32,alloc::alloc::Global&gt;::with_capacity_zeroed_in (15,622 samples, 1.12%)</title><rect x="18.8972%" y="3093" width="1.1205%" height="15" fill="rgb(236,28,36)" fg:x="263471" fg:w="15622"/><text x="19.1472%" y="3103.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_zeroed_in (15,622 samples, 1.12%)</title><rect x="18.8972%" y="3077" width="1.1205%" height="15" fill="rgb(249,185,26)" fg:x="263471" fg:w="15622"/><text x="19.1472%" y="3087.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (15,622 samples, 1.12%)</title><rect x="18.8972%" y="3061" width="1.1205%" height="15" fill="rgb(249,174,33)" fg:x="263471" fg:w="15622"/><text x="19.1472%" y="3071.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::process_heap_alloc (524 samples, 0.04%)</title><rect x="19.9800%" y="3045" width="0.0376%" height="15" fill="rgb(233,201,37)" fg:x="278569" fg:w="524"/><text x="20.2300%" y="3055.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;f32&gt;::add(core::ptr::non_null::NonNull (147 samples, 0.01%)</title><rect x="20.0176%" y="3093" width="0.0105%" height="15" fill="rgb(221,78,26)" fg:x="279093" fg:w="147"/><text x="20.2676%" y="3103.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_shape_vec_unchecked(ndarray::shape_builder::Shape&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, alloc::vec::Vec (196 samples, 0.01%)</title><rect x="20.0176%" y="3125" width="0.0141%" height="15" fill="rgb(250,127,30)" fg:x="279093" fg:w="196"/><text x="20.2676%" y="3135.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_vec_dim_stride_unchecked(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;, ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;, alloc::vec::Vec (196 samples, 0.01%)</title><rect x="20.0176%" y="3109" width="0.0141%" height="15" fill="rgb(230,49,44)" fg:x="279093" fg:w="196"/><text x="20.2676%" y="3119.50"></text></g><g><title>neural_network.exe`core::iter::adapters::filter::impl$3::try_fold(core::iter::adapters::filter::Filter&lt;core::slice::iter::Iter&lt;usize&gt;,ndarray::dimension::size_of_shape_checked::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;*, unsigned long long, ndarray::dimension::size_of_shape_checked::closure_env$1&lt;ndarray::dimension::dim::Dim&lt;array$ (1,096 samples, 0.08%)</title><rect x="20.0317%" y="3109" width="0.0786%" height="15" fill="rgb(229,67,23)" fg:x="279289" fg:w="1096"/><text x="20.2817%" y="3119.50"></text></g><g><title>neural_network.exe`core::iter::traits::iterator::Iterator::try_fold(core::slice::iter::Iter&lt;usize&gt;*, unsigned long long, core::iter::adapters::filter::filter_try_fold::closure_env$0&lt;ref$&lt;usize&gt;,usize,enum2$&lt;core::option::Option&lt;usize&gt; &gt;,ndarray::dimension::size_of_shape_checked::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::dimension::size_of_shape_checked::closure_env$1&lt;ndarray::dimension::dim::Dim&lt;array$ (1,096 samples, 0.08%)</title><rect x="20.0317%" y="3093" width="0.0786%" height="15" fill="rgb(249,83,47)" fg:x="279289" fg:w="1096"/><text x="20.2817%" y="3103.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::zeros(tuple$ (17,515 samples, 1.26%)</title><rect x="18.8972%" y="3157" width="1.2562%" height="15" fill="rgb(215,43,3)" fg:x="263471" fg:w="17515"/><text x="19.1472%" y="3167.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_elem(tuple$ (17,515 samples, 1.26%)</title><rect x="18.8972%" y="3141" width="1.2562%" height="15" fill="rgb(238,154,13)" fg:x="263471" fg:w="17515"/><text x="19.1472%" y="3151.50"></text></g><g><title>neural_network.exe`ndarray::dimension::size_of_shape_checked(ndarray::dimension::dim::Dim&lt;array$ (1,697 samples, 0.12%)</title><rect x="20.0317%" y="3125" width="0.1217%" height="15" fill="rgb(219,56,2)" fg:x="279289" fg:w="1697"/><text x="20.2817%" y="3135.50"></text></g><g><title>neural_network.exe`ndarray::dimension::dimension_trait::impl$2::size(ndarray::dimension::dim::Dim&lt;array$ (601 samples, 0.04%)</title><rect x="20.1103%" y="3109" width="0.0431%" height="15" fill="rgb(233,0,4)" fg:x="280385" fg:w="601"/><text x="20.3603%" y="3119.50"></text></g><g><title>neural_network.exe`core::cmp::impls::impl$9::eq(ref$&lt;slice2$&lt;usize&gt; &gt;*, ref$&lt;slice2$ (265,201 samples, 19.02%)</title><rect x="2.9701%" y="3221" width="19.0212%" height="15" fill="rgb(235,30,7)" fg:x="41410" fg:w="265201"/><text x="3.2201%" y="3231.50">neural_network.exe`core::cmp::..</text></g><g><title>neural_network.exe`core::slice::cmp::impl$0::eq(ref$&lt;slice2$&lt;usize&gt; &gt;, ref$&lt;slice2$ (265,201 samples, 19.02%)</title><rect x="2.9701%" y="3205" width="19.0212%" height="15" fill="rgb(250,79,13)" fg:x="41410" fg:w="265201"/><text x="3.2201%" y="3215.50">neural_network.exe`core::slice..</text></g><g><title>neural_network.exe`core::slice::cmp::impl$5::equal(ref$&lt;slice2$&lt;usize&gt; &gt;, ref$&lt;slice2$ (265,201 samples, 19.02%)</title><rect x="2.9701%" y="3189" width="19.0212%" height="15" fill="rgb(211,146,34)" fg:x="41410" fg:w="265201"/><text x="3.2201%" y="3199.50">neural_network.exe`core::slice..</text></g><g><title>neural_network.exe`neural_network::layers::convolutional_layer::convolve_and_slide(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (253,818 samples, 18.20%)</title><rect x="3.7865%" y="3173" width="18.2048%" height="15" fill="rgb(228,22,38)" fg:x="52793" fg:w="253818"/><text x="4.0365%" y="3183.50">neural_network.exe`neural_ne..</text></g><g><title>neural_network.exe`ndarray::arraytraits::impl$0::index(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (25,625 samples, 1.84%)</title><rect x="20.1534%" y="3157" width="1.8379%" height="15" fill="rgb(235,168,5)" fg:x="280986" fg:w="25625"/><text x="20.4034%" y="3167.50">n..</text></g><g><title>neural_network.exe`ndarray::dimension::ndindex::impl$16::index_checked(unsigned long long[2]*, ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$ (25,625 samples, 1.84%)</title><rect x="20.1534%" y="3141" width="1.8379%" height="15" fill="rgb(221,155,16)" fg:x="280986" fg:w="25625"/><text x="20.4034%" y="3151.50">n..</text></g><g><title>neural_network.exe`ndarray::dimension::dimension_trait::impl$2::stride_offset_checked(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$ (25,625 samples, 1.84%)</title><rect x="20.1534%" y="3125" width="1.8379%" height="15" fill="rgb(215,215,53)" fg:x="280986" fg:w="25625"/><text x="20.4034%" y="3135.50">n..</text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::is_contiguous (1,010 samples, 0.07%)</title><rect x="22.1171%" y="3173" width="0.0724%" height="15" fill="rgb(223,4,10)" fg:x="308364" fg:w="1010"/><text x="22.3671%" y="3183.50"></text></g><g><title>neural_network.exe`ndarray::dimension::dimension_trait::Dimension::is_contiguous(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$ (1,010 samples, 0.07%)</title><rect x="22.1171%" y="3157" width="0.0724%" height="15" fill="rgb(234,103,6)" fg:x="308364" fg:w="1010"/><text x="22.3671%" y="3167.50"></text></g><g><title>neural_network.exe`ndarray::dimension::dimension_trait::impl$2::default_strides(ndarray::dimension::dim::Dim&lt;array$ (1,010 samples, 0.07%)</title><rect x="22.1171%" y="3141" width="0.0724%" height="15" fill="rgb(227,97,0)" fg:x="308364" fg:w="1010"/><text x="22.3671%" y="3151.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::as_slice_memory_order_mut (1,689 samples, 0.12%)</title><rect x="22.1171%" y="3205" width="0.1211%" height="15" fill="rgb(234,150,53)" fg:x="308364" fg:w="1689"/><text x="22.3671%" y="3215.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::try_as_slice_memory_order_mut (1,689 samples, 0.12%)</title><rect x="22.1171%" y="3189" width="0.1211%" height="15" fill="rgb(228,201,54)" fg:x="308364" fg:w="1689"/><text x="22.3671%" y="3199.50"></text></g><g><title>neural_network.exe`ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$ (679 samples, 0.05%)</title><rect x="22.1895%" y="3173" width="0.0487%" height="15" fill="rgb(222,22,37)" fg:x="309374" fg:w="679"/><text x="22.4395%" y="3183.50"></text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$1::fold(core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;usize&gt;,core::slice::iter::Iter&lt;usize&gt; &gt;, long long, ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$ (679 samples, 0.05%)</title><rect x="22.1895%" y="3157" width="0.0487%" height="15" fill="rgb(237,53,32)" fg:x="309374" fg:w="679"/><text x="22.4395%" y="3167.50"></text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$4::fold(core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;usize&gt;,core::slice::iter::Iter&lt;usize&gt; &gt;, long long, ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$ (679 samples, 0.05%)</title><rect x="22.1895%" y="3141" width="0.0487%" height="15" fill="rgb(233,25,53)" fg:x="309374" fg:w="679"/><text x="22.4395%" y="3151.50"></text></g><g><title>neural_network.exe`ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure$0(ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, long long, tuple$&lt;ref$&lt;usize&gt;,ref$ (679 samples, 0.05%)</title><rect x="22.1895%" y="3125" width="0.0487%" height="15" fill="rgb(210,40,34)" fg:x="309374" fg:w="679"/><text x="22.4395%" y="3135.50"></text></g><g><title>neural_network.exe`ndarray::dimension::dimension_trait::Dimension::strides_equivalent(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$ (1,471 samples, 0.11%)</title><rect x="22.2461%" y="3205" width="0.1055%" height="15" fill="rgb(241,220,44)" fg:x="310163" fg:w="1471"/><text x="22.4961%" y="3215.50"></text></g><g><title>neural_network.exe`core::iter::traits::iterator::Iterator::all(core::iter::adapters::map::Map&lt;core::iter::adapters::zip::Zip&lt;core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;usize&gt;,core::slice::iter::Iter&lt;usize&gt; &gt;,core::slice::iter::Iter&lt;usize&gt; &gt;,ndarray::dimension::dimension_trait::Dimension::strides_equivalent::closure_env$1&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;*, ndarray::dimension::dimension_trait::Dimension::strides_equivalent::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (1,471 samples, 0.11%)</title><rect x="22.2461%" y="3189" width="0.1055%" height="15" fill="rgb(235,28,35)" fg:x="310163" fg:w="1471"/><text x="22.4961%" y="3199.50"></text></g><g><title>neural_network.exe`core::iter::adapters::map::impl$2::try_fold(core::iter::adapters::map::Map&lt;core::iter::adapters::zip::Zip&lt;core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;usize&gt;,core::slice::iter::Iter&lt;usize&gt; &gt;,core::slice::iter::Iter&lt;usize&gt; &gt;,ndarray::dimension::dimension_trait::Dimension::strides_equivalent::closure_env$1&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;*, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::all::check::closure_env$0&lt;tuple$&lt;ref$&lt;usize&gt;,ref$&lt;usize&gt;,ref$&lt;usize&gt; &gt;,ndarray::dimension::dimension_trait::Dimension::strides_equivalent::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (1,471 samples, 0.11%)</title><rect x="22.2461%" y="3173" width="0.1055%" height="15" fill="rgb(210,56,17)" fg:x="310163" fg:w="1471"/><text x="22.4961%" y="3183.50"></text></g><g><title>neural_network.exe`core::iter::traits::iterator::Iterator::try_fold(core::iter::adapters::zip::Zip&lt;core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;usize&gt;,core::slice::iter::Iter&lt;usize&gt; &gt;,core::slice::iter::Iter&lt;usize&gt; &gt;*, tuple$&lt;&gt;, core::iter::adapters::map::map_try_fold::closure_env$0&lt;tuple$&lt;tuple$&lt;ref$&lt;usize&gt;,ref$&lt;usize&gt; &gt;,ref$&lt;usize&gt; &gt;,tuple$&lt;ref$&lt;usize&gt;,ref$&lt;usize&gt;,ref$&lt;usize&gt; &gt;,tuple$&lt;&gt;,enum2$&lt;core::ops::control_flow::ControlFlow&lt;tuple$&lt;&gt;,tuple$&lt;&gt; &gt; &gt;,ndarray::dimension::dimension_trait::Dimension::strides_equivalent::closure_env$1&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,core::iter::traits::iterator::Iterator::all::check::closure_env$0&lt;tuple$&lt;ref$&lt;usize&gt;,ref$&lt;usize&gt;,ref$&lt;usize&gt; &gt;,ndarray::dimension::dimension_trait::Dimension::strides_equivalent::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (1,471 samples, 0.11%)</title><rect x="22.2461%" y="3157" width="0.1055%" height="15" fill="rgb(224,130,29)" fg:x="310163" fg:w="1471"/><text x="22.4961%" y="3167.50"></text></g><g><title>neural_network.exe`core::iter::adapters::map::map_try_fold::closure$0(core::iter::adapters::map::map_try_fold::closure_env$0&lt;tuple$&lt;tuple$&lt;ref$&lt;usize&gt;,ref$&lt;usize&gt; &gt;,ref$&lt;usize&gt; &gt;,tuple$&lt;ref$&lt;usize&gt;,ref$&lt;usize&gt;,ref$&lt;usize&gt; &gt;,tuple$&lt;&gt;,enum2$&lt;core::ops::control_flow::ControlFlow&lt;tuple$&lt;&gt;,tuple$&lt;&gt; &gt; &gt;,ndarray::dimension::dimension_trait::Dimension::strides_equivalent::closure_env$1&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,core::iter::traits::iterator::Iterator::all::check::closure_env$0&lt;tuple$&lt;ref$&lt;usize&gt;,ref$&lt;usize&gt;,ref$&lt;usize&gt; &gt;,ndarray::dimension::dimension_trait::Dimension::strides_equivalent::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt; &gt;*, tuple$&lt;&gt;, tuple$&lt;tuple$&lt;ref$&lt;usize&gt;,ref$&lt;usize&gt; &gt;,ref$ (1,471 samples, 0.11%)</title><rect x="22.2461%" y="3141" width="0.1055%" height="15" fill="rgb(235,212,8)" fg:x="310163" fg:w="1471"/><text x="22.4961%" y="3151.50"></text></g><g><title>neural_network.exe`core::iter::traits::iterator::Iterator::all::check::closure$0(core::iter::traits::iterator::Iterator::all::check::closure_env$0&lt;tuple$&lt;ref$&lt;usize&gt;,ref$&lt;usize&gt;,ref$&lt;usize&gt; &gt;,ndarray::dimension::dimension_trait::Dimension::strides_equivalent::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;*, tuple$&lt;&gt;, tuple$&lt;ref$&lt;usize&gt;,ref$&lt;usize&gt;,ref$ (1,471 samples, 0.11%)</title><rect x="22.2461%" y="3125" width="0.1055%" height="15" fill="rgb(223,33,50)" fg:x="310163" fg:w="1471"/><text x="22.4961%" y="3135.50"></text></g><g><title>neural_network.exe`ndarray::dimension::dimension_trait::Dimension::strides_equivalent::closure$0(ndarray::dimension::dimension_trait::Dimension::strides_equivalent::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;ref$&lt;usize&gt;,ref$&lt;usize&gt;,ref$ (1,471 samples, 0.11%)</title><rect x="22.2461%" y="3109" width="0.1055%" height="15" fill="rgb(219,149,13)" fg:x="310163" fg:w="1471"/><text x="22.4961%" y="3119.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (308,616 samples, 22.14%)</title><rect x="0.2457%" y="3317" width="22.1351%" height="15" fill="rgb(250,156,29)" fg:x="3425" fg:w="308616"/><text x="0.4957%" y="3327.50">neural_network.exe`core::ptr::drop_..</text></g><g><title>neural_network.exe`core::ptr::drop_in_place(ndarray::data_repr::OwnedRepr (308,616 samples, 22.14%)</title><rect x="0.2457%" y="3301" width="22.1351%" height="15" fill="rgb(216,193,19)" fg:x="3425" fg:w="308616"/><text x="0.4957%" y="3311.50">neural_network.exe`core::ptr::drop_..</text></g><g><title>neural_network.exe`ndarray::data_repr::impl$2::drop(ndarray::data_repr::OwnedRepr (308,616 samples, 22.14%)</title><rect x="0.2457%" y="3285" width="22.1351%" height="15" fill="rgb(216,135,14)" fg:x="3425" fg:w="308616"/><text x="0.4957%" y="3295.50">neural_network.exe`ndarray::data_re..</text></g><g><title>neural_network.exe`neural_network::layers::convolutional_layer::ConvolutionalLayer::im_ready_to_pass_regular_rick(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (308,522 samples, 22.13%)</title><rect x="0.2524%" y="3269" width="22.1284%" height="15" fill="rgb(241,47,5)" fg:x="3519" fg:w="308522"/><text x="0.5024%" y="3279.50">neural_network.exe`neural_network::..</text></g><g><title>neural_network.exe`ndarray::impl_ops::assign_ops::impl$0::add_assign(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (276,224 samples, 19.81%)</title><rect x="2.5689%" y="3253" width="19.8119%" height="15" fill="rgb(233,42,35)" fg:x="35817" fg:w="276224"/><text x="2.8189%" y="3263.50">neural_network.exe`ndarray::imp..</text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::zip_mut_with(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::impl_ops::assign_ops::impl$0::add_assign::closure_env$0&lt;f32,ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (276,224 samples, 19.81%)</title><rect x="2.5689%" y="3237" width="19.8119%" height="15" fill="rgb(231,13,6)" fg:x="35817" fg:w="276224"/><text x="2.8189%" y="3247.50">neural_network.exe`ndarray::Arr..</text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::zip_mut_with_same_shape&lt;f32,ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f32,ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::impl_ops::assign_ops::impl$0::add_assign::closure_env$0&lt;f32,ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::impl_ops::assign_ops::impl$0::add_assign::closure_env$0&lt;f32,ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (5,430 samples, 0.39%)</title><rect x="21.9913%" y="3221" width="0.3895%" height="15" fill="rgb(207,181,40)" fg:x="306611" fg:w="5430"/><text x="22.2413%" y="3231.50"></text></g><g><title>neural_network.exe`ndarray::impl_ops::assign_ops::impl$0::add_assign::closure$0(ndarray::impl_ops::assign_ops::impl$0::add_assign::closure_env$0&lt;f32,ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (407 samples, 0.03%)</title><rect x="22.3516%" y="3205" width="0.0292%" height="15" fill="rgb(254,173,49)" fg:x="311634" fg:w="407"/><text x="22.6016%" y="3215.50"></text></g><g><title>neural_network.exe`core::ops::arith::impl$353::add_assign (407 samples, 0.03%)</title><rect x="22.3516%" y="3189" width="0.0292%" height="15" fill="rgb(221,1,38)" fg:x="311634" fg:w="407"/><text x="22.6016%" y="3199.50"></text></g><g><title>`0x7FF968D511FB (171 samples, 0.01%)</title><rect x="22.3808%" y="3237" width="0.0123%" height="15" fill="rgb(206,124,46)" fg:x="312041" fg:w="171"/><text x="22.6308%" y="3247.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt; &gt;::to_owned&lt;f32,ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt; &gt; (176 samples, 0.01%)</title><rect x="22.3808%" y="3317" width="0.0126%" height="15" fill="rgb(249,21,11)" fg:x="312041" fg:w="176"/><text x="22.6308%" y="3327.50"></text></g><g><title>neural_network.exe`alloc::slice::impl$0::to_vec(ref$&lt;slice2$ (176 samples, 0.01%)</title><rect x="22.3808%" y="3301" width="0.0126%" height="15" fill="rgb(222,201,40)" fg:x="312041" fg:w="176"/><text x="22.6308%" y="3311.50"></text></g><g><title>neural_network.exe`alloc::slice::impl$0::to_vec_in(ref$&lt;slice2$ (176 samples, 0.01%)</title><rect x="22.3808%" y="3285" width="0.0126%" height="15" fill="rgb(235,61,29)" fg:x="312041" fg:w="176"/><text x="22.6308%" y="3295.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$ (176 samples, 0.01%)</title><rect x="22.3808%" y="3269" width="0.0126%" height="15" fill="rgb(219,207,3)" fg:x="312041" fg:w="176"/><text x="22.6308%" y="3279.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$ (176 samples, 0.01%)</title><rect x="22.3808%" y="3253" width="0.0126%" height="15" fill="rgb(222,56,46)" fg:x="312041" fg:w="176"/><text x="22.6308%" y="3263.50"></text></g><g><title>`0x7FF968D511FB (546 samples, 0.04%)</title><rect x="22.3934%" y="3285" width="0.0392%" height="15" fill="rgb(239,76,54)" fg:x="312217" fg:w="546"/><text x="22.6434%" y="3295.50"></text></g><g><title>`0x7FF968D5154E (504 samples, 0.04%)</title><rect x="22.4443%" y="3285" width="0.0361%" height="15" fill="rgb(231,124,27)" fg:x="312927" fg:w="504"/><text x="22.6943%" y="3295.50"></text></g><g><title>`0x7FF968D51556 (284 samples, 0.02%)</title><rect x="22.4805%" y="3285" width="0.0204%" height="15" fill="rgb(249,195,6)" fg:x="313431" fg:w="284"/><text x="22.7305%" y="3295.50"></text></g><g><title>neural_network.exe`ndarray::impl_clone::impl$0::clone(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (1,603 samples, 0.11%)</title><rect x="22.3934%" y="3317" width="0.1150%" height="15" fill="rgb(237,174,47)" fg:x="312217" fg:w="1603"/><text x="22.6434%" y="3327.50"></text></g><g><title>neural_network.exe`ndarray::data_traits::impl$14::clone_with_ptr(ndarray::data_repr::OwnedRepr&lt;f32&gt;*, core::ptr::non_null::NonNull (1,603 samples, 0.11%)</title><rect x="22.3934%" y="3301" width="0.1150%" height="15" fill="rgb(206,201,31)" fg:x="312217" fg:w="1603"/><text x="22.6434%" y="3311.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping (737 samples, 0.05%)</title><rect x="22.5149%" y="3205" width="0.0529%" height="15" fill="rgb(231,57,52)" fg:x="313911" fg:w="737"/><text x="22.7649%" y="3215.50"></text></g><g><title>neural_network.exe`matrixmultiply::packing::pack_avx2&lt;matrixmultiply::kernel::U8,f32&gt;(unsigned long long, unsigned long long, ref_mut$&lt;slice2$ (877 samples, 0.06%)</title><rect x="22.5118%" y="3237" width="0.0629%" height="15" fill="rgb(248,177,22)" fg:x="313868" fg:w="877"/><text x="22.7618%" y="3247.50"></text></g><g><title>neural_network.exe`matrixmultiply::packing::pack_impl(unsigned long long, unsigned long long, ref_mut$&lt;slice2$ (877 samples, 0.06%)</title><rect x="22.5118%" y="3221" width="0.0629%" height="15" fill="rgb(215,211,37)" fg:x="313868" fg:w="877"/><text x="22.7618%" y="3231.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping (396 samples, 0.03%)</title><rect x="22.5761%" y="3157" width="0.0284%" height="15" fill="rgb(241,128,51)" fg:x="314764" fg:w="396"/><text x="22.8261%" y="3167.50"></text></g><g><title>neural_network.exe`matrixmultiply::gemm::gemm_loop::closure$1(matrixmultiply::gemm::gemm_loop::closure_env$1&lt;matrixmultiply::sgemm_kernel::KernelFmaAvx2&gt;*, tuple$&lt;&gt;*, matrixmultiply::ptr::Ptr&lt;ptr_mut$ (430 samples, 0.03%)</title><rect x="22.5747%" y="3221" width="0.0308%" height="15" fill="rgb(227,165,31)" fg:x="314745" fg:w="430"/><text x="22.8247%" y="3231.50"></text></g><g><title>neural_network.exe`rawpointer::PointerExt::stride_offset(matrixmultiply::ptr::Ptr&lt;ptr_mut$ (426 samples, 0.03%)</title><rect x="22.5750%" y="3205" width="0.0306%" height="15" fill="rgb(228,167,24)" fg:x="314749" fg:w="426"/><text x="22.8250%" y="3215.50"></text></g><g><title>neural_network.exe`matrixmultiply::packing::pack_avx2&lt;matrixmultiply::kernel::U8,f32&gt;(unsigned long long, unsigned long long, ref_mut$&lt;slice2$ (425 samples, 0.03%)</title><rect x="22.5751%" y="3189" width="0.0305%" height="15" fill="rgb(228,143,12)" fg:x="314750" fg:w="425"/><text x="22.8251%" y="3199.50"></text></g><g><title>neural_network.exe`matrixmultiply::packing::pack_impl(unsigned long long, unsigned long long, ref_mut$&lt;slice2$ (425 samples, 0.03%)</title><rect x="22.5751%" y="3173" width="0.0305%" height="15" fill="rgb(249,149,8)" fg:x="314750" fg:w="425"/><text x="22.8251%" y="3183.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_load_ps (1,317 samples, 0.09%)</title><rect x="22.6160%" y="3125" width="0.0945%" height="15" fill="rgb(243,35,44)" fg:x="315321" fg:w="1317"/><text x="22.8660%" y="3135.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_movehdup_ps (329 samples, 0.02%)</title><rect x="22.7119%" y="3125" width="0.0236%" height="15" fill="rgb(246,89,9)" fg:x="316657" fg:w="329"/><text x="22.9619%" y="3135.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_moveldup_ps (1,100 samples, 0.08%)</title><rect x="22.7355%" y="3125" width="0.0789%" height="15" fill="rgb(233,213,13)" fg:x="316986" fg:w="1100"/><text x="22.9855%" y="3135.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_permute2f128_ps (6,170 samples, 0.44%)</title><rect x="22.8187%" y="3125" width="0.4425%" height="15" fill="rgb(233,141,41)" fg:x="318146" fg:w="6170"/><text x="23.0687%" y="3135.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_permute_ps (2,069 samples, 0.15%)</title><rect x="23.2612%" y="3125" width="0.1484%" height="15" fill="rgb(239,167,4)" fg:x="324316" fg:w="2069"/><text x="23.5112%" y="3135.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_storeu_ps (140 samples, 0.01%)</title><rect x="23.4116%" y="3125" width="0.0100%" height="15" fill="rgb(209,217,16)" fg:x="326413" fg:w="140"/><text x="23.6616%" y="3135.50"></text></g><g><title>neural_network.exe`core::ptr::mut_ptr::impl$0::write_unaligned (140 samples, 0.01%)</title><rect x="23.4116%" y="3109" width="0.0100%" height="15" fill="rgb(219,88,35)" fg:x="326413" fg:w="140"/><text x="23.6616%" y="3119.50"></text></g><g><title>neural_network.exe`core::ptr::write_unaligned (140 samples, 0.01%)</title><rect x="23.4116%" y="3093" width="0.0100%" height="15" fill="rgb(220,193,23)" fg:x="326413" fg:w="140"/><text x="23.6616%" y="3103.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping (140 samples, 0.01%)</title><rect x="23.4116%" y="3077" width="0.0100%" height="15" fill="rgb(230,90,52)" fg:x="326413" fg:w="140"/><text x="23.6616%" y="3087.50"></text></g><g><title>neural_network.exe`matrixmultiply::sgemm_kernel::impl$2::kernel (13,833 samples, 0.99%)</title><rect x="22.6067%" y="3173" width="0.9922%" height="15" fill="rgb(252,106,19)" fg:x="315191" fg:w="13833"/><text x="22.8567%" y="3183.50"></text></g><g><title>neural_network.exe`matrixmultiply::sgemm_kernel::kernel_target_fma (13,819 samples, 0.99%)</title><rect x="22.6077%" y="3157" width="0.9912%" height="15" fill="rgb(206,74,20)" fg:x="315205" fg:w="13819"/><text x="22.8577%" y="3167.50"></text></g><g><title>neural_network.exe`matrixmultiply::sgemm_kernel::kernel_x86_avx (13,771 samples, 0.99%)</title><rect x="22.6112%" y="3141" width="0.9877%" height="15" fill="rgb(230,138,44)" fg:x="315253" fg:w="13771"/><text x="22.8612%" y="3151.50"></text></g><g><title>neural_network.exe`matrixmultiply::x86::impl$1::multiply_add (2,342 samples, 0.17%)</title><rect x="23.4309%" y="3125" width="0.1680%" height="15" fill="rgb(235,182,43)" fg:x="326682" fg:w="2342"/><text x="23.6809%" y="3135.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::fma::_mm256_fmadd_ps (2,342 samples, 0.17%)</title><rect x="23.4309%" y="3109" width="0.1680%" height="15" fill="rgb(242,16,51)" fg:x="326682" fg:w="2342"/><text x="23.6809%" y="3119.50"></text></g><g><title>neural_network.exe`matrixmultiply::gemm::gemm_packed::closure$1(matrixmultiply::gemm::gemm_packed::closure_env$1&lt;matrixmultiply::sgemm_kernel::KernelFmaAvx2&gt;*, tuple$&lt;&gt;*, ref_mut$&lt;slice2$ (13,856 samples, 0.99%)</title><rect x="22.6057%" y="3189" width="0.9938%" height="15" fill="rgb(248,9,4)" fg:x="315177" fg:w="13856"/><text x="22.8557%" y="3199.50"></text></g><g><title>neural_network.exe`matrixmultiply::gemm::gemm_loop&lt;matrixmultiply::sgemm_kernel::KernelFmaAvx2&gt; (15,175 samples, 1.09%)</title><rect x="22.5113%" y="3253" width="1.0884%" height="15" fill="rgb(210,31,22)" fg:x="313861" fg:w="15175"/><text x="22.7613%" y="3263.50"></text></g><g><title>neural_network.exe`matrixmultiply::threading::RangeChunkParallel&lt;matrixmultiply::gemm::gemm_loop::closure_env$0&lt;matrixmultiply::sgemm_kernel::KernelFmaAvx2&gt; &gt;::for_each(matrixmultiply::threading::RangeChunkParallel&lt;matrixmultiply::gemm::gemm_loop::closure_env$0&lt;matrixmultiply::sgemm_kernel::KernelFmaAvx2&gt; &gt;, matrixmultiply::gemm::gemm_loop::closure_env$1 (14,291 samples, 1.03%)</title><rect x="22.5747%" y="3237" width="1.0250%" height="15" fill="rgb(239,54,39)" fg:x="314745" fg:w="14291"/><text x="22.8247%" y="3247.50"></text></g><g><title>neural_network.exe`matrixmultiply::util::impl$0::next (13,861 samples, 0.99%)</title><rect x="22.6056%" y="3221" width="0.9942%" height="15" fill="rgb(230,99,41)" fg:x="315175" fg:w="13861"/><text x="22.8556%" y="3231.50"></text></g><g><title>neural_network.exe`matrixmultiply::threading::RangeChunkParallel&lt;matrixmultiply::gemm::gemm_packed::closure_env$0&lt;matrixmultiply::sgemm_kernel::KernelFmaAvx2&gt; &gt;::for_each&lt;matrixmultiply::gemm::gemm_packed::closure_env$0&lt;matrixmultiply::sgemm_kernel::KernelFmaAvx2&gt;,ref_mut$&lt;slice2$&lt;f32&gt; &gt;,matrixmultiply::gemm::gemm_packed::closure_env$1&lt;matrixmultiply::sgemm_kernel::KernelFmaAvx2&gt; &gt;(matrixmultiply::threading::RangeChunkParallel&lt;matrixmultiply::gemm::gemm_packed::closure_env$0&lt;matrixmultiply::sgemm_kernel::KernelFmaAvx2&gt; &gt;, matrixmultiply::gemm::gemm_packed::closure_env$1 (13,860 samples, 0.99%)</title><rect x="22.6056%" y="3205" width="0.9941%" height="15" fill="rgb(253,106,12)" fg:x="315176" fg:w="13860"/><text x="22.8556%" y="3215.50"></text></g><g><title>neural_network.exe`ndarray::impl_clone::impl$0::clone(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (15,217 samples, 1.09%)</title><rect x="22.5084%" y="3301" width="1.0914%" height="15" fill="rgb(213,46,41)" fg:x="313820" fg:w="15217"/><text x="22.7584%" y="3311.50"></text></g><g><title>neural_network.exe`ndarray::data_traits::impl$14::clone_with_ptr(ndarray::data_repr::OwnedRepr&lt;f32&gt;*, core::ptr::non_null::NonNull (15,217 samples, 1.09%)</title><rect x="22.5084%" y="3285" width="1.0914%" height="15" fill="rgb(215,133,35)" fg:x="313820" fg:w="15217"/><text x="22.7584%" y="3295.50"></text></g><g><title>neural_network.exe`ndarray::linalg::impl_linalg::impl$4::dot&lt;f32,ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::data_repr::OwnedRepr&lt;f32&gt; &gt;(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (15,217 samples, 1.09%)</title><rect x="22.5084%" y="3269" width="1.0914%" height="15" fill="rgb(213,28,5)" fg:x="313820" fg:w="15217"/><text x="22.7584%" y="3279.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::view (328,967 samples, 23.59%)</title><rect x="0.0114%" y="3381" width="23.5948%" height="15" fill="rgb(215,77,49)" fg:x="159" fg:w="328967"/><text x="0.2614%" y="3391.50">neural_network.exe`ndarray::ArrayBase..</text></g><g><title>neural_network.exe`ndarray::dimension::dim::impl$4::clone(ndarray::dimension::dim::Dim&lt;array$ (328,967 samples, 23.59%)</title><rect x="0.0114%" y="3365" width="23.5948%" height="15" fill="rgb(248,100,22)" fg:x="159" fg:w="328967"/><text x="0.2614%" y="3375.50">neural_network.exe`ndarray::dimension..</text></g><g><title>neural_network.exe`neural_network::networks::convolutional_net::ConvolutionalNet::predict(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (328,967 samples, 23.59%)</title><rect x="0.0114%" y="3349" width="23.5948%" height="15" fill="rgb(208,67,9)" fg:x="159" fg:w="328967"/><text x="0.2614%" y="3359.50">neural_network.exe`neural_network::ne..</text></g><g><title>neural_network.exe`neural_network::networks::convolutional_net::ConvolutionalNet::forward_pass(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (328,377 samples, 23.55%)</title><rect x="0.0537%" y="3333" width="23.5525%" height="15" fill="rgb(219,133,21)" fg:x="749" fg:w="328377"/><text x="0.3037%" y="3343.50">neural_network.exe`neural_network::ne..</text></g><g><title>neural_network.exe`neural_network::layers::dense_layer::DenseLayer::pass(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (15,306 samples, 1.10%)</title><rect x="22.5084%" y="3317" width="1.0978%" height="15" fill="rgb(246,46,29)" fg:x="313820" fg:w="15306"/><text x="22.7584%" y="3327.50"></text></g><g><title>`0x7FF97DFB44ED (575 samples, 0.04%)</title><rect x="23.6140%" y="3285" width="0.0412%" height="15" fill="rgb(246,185,52)" fg:x="329235" fg:w="575"/><text x="23.8640%" y="3295.50"></text></g><g><title>`0x7FF97B95430F (573 samples, 0.04%)</title><rect x="23.6142%" y="3269" width="0.0411%" height="15" fill="rgb(252,136,11)" fg:x="329237" fg:w="573"/><text x="23.8642%" y="3279.50"></text></g><g><title>`0x7FF97E691874 (572 samples, 0.04%)</title><rect x="23.6142%" y="3253" width="0.0410%" height="15" fill="rgb(219,138,53)" fg:x="329238" fg:w="572"/><text x="23.8642%" y="3263.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::thread::Thread::new (580 samples, 0.04%)</title><rect x="23.6140%" y="3301" width="0.0416%" height="15" fill="rgb(211,51,23)" fg:x="329235" fg:w="580"/><text x="23.8640%" y="3311.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_puzzles_3d (690 samples, 0.05%)</title><rect x="23.6062%" y="3381" width="0.0495%" height="15" fill="rgb(247,221,28)" fg:x="329126" fg:w="690"/><text x="23.8562%" y="3391.50"></text></g><g><title>neural_network.exe`std::thread::spawn (591 samples, 0.04%)</title><rect x="23.6133%" y="3365" width="0.0424%" height="15" fill="rgb(251,222,45)" fg:x="329225" fg:w="591"/><text x="23.8633%" y="3375.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::result::Result&lt;std::thread::JoinHandle&lt;tuple$&lt;&gt; &gt;,std::io::error::Error&gt; &gt;::expect(enum2$&lt;core::result::Result&lt;std::thread::JoinHandle&lt;tuple$&lt;&gt; &gt;,std::io::error::Error&gt; &gt;, ref$ (591 samples, 0.04%)</title><rect x="23.6133%" y="3349" width="0.0424%" height="15" fill="rgb(217,162,53)" fg:x="329225" fg:w="591"/><text x="23.8633%" y="3359.50"></text></g><g><title>neural_network.exe`std::thread::Builder::spawn_unchecked&lt;neural_network::flow::flow_ai::generate_puzzles_3d::closure_env$0,tuple$&lt;&gt; &gt; (591 samples, 0.04%)</title><rect x="23.6133%" y="3333" width="0.0424%" height="15" fill="rgb(229,93,14)" fg:x="329225" fg:w="591"/><text x="23.8633%" y="3343.50"></text></g><g><title>neural_network.exe`std::thread::Builder::spawn_unchecked_(std::thread::Builder, neural_network::flow::flow_ai::generate_puzzles_3d::closure_env$0, enum2$&lt;core::option::Option&lt;alloc::sync::Arc (591 samples, 0.04%)</title><rect x="23.6133%" y="3317" width="0.0424%" height="15" fill="rgb(209,67,49)" fg:x="329225" fg:w="591"/><text x="23.8633%" y="3327.50"></text></g><g><title>`0x7FF97E62C324 (441 samples, 0.03%)</title><rect x="23.6630%" y="3157" width="0.0316%" height="15" fill="rgb(213,87,29)" fg:x="329918" fg:w="441"/><text x="23.9130%" y="3167.50"></text></g><g><title>`0x7FF97E62A10C (439 samples, 0.03%)</title><rect x="23.6631%" y="3141" width="0.0315%" height="15" fill="rgb(205,151,52)" fg:x="329920" fg:w="439"/><text x="23.9131%" y="3151.50"></text></g><g><title>`0x7FF97E636AC6 (439 samples, 0.03%)</title><rect x="23.6631%" y="3125" width="0.0315%" height="15" fill="rgb(253,215,39)" fg:x="329920" fg:w="439"/><text x="23.9131%" y="3135.50"></text></g><g><title>`0x7FF97E690364 (439 samples, 0.03%)</title><rect x="23.6631%" y="3109" width="0.0315%" height="15" fill="rgb(221,220,41)" fg:x="329920" fg:w="439"/><text x="23.9131%" y="3119.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (544 samples, 0.04%)</title><rect x="23.6557%" y="3365" width="0.0390%" height="15" fill="rgb(218,133,21)" fg:x="329816" fg:w="544"/><text x="23.9057%" y="3375.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$25::drop(alloc::vec::Vec&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (544 samples, 0.04%)</title><rect x="23.6557%" y="3349" width="0.0390%" height="15" fill="rgb(221,193,43)" fg:x="329816" fg:w="544"/><text x="23.9057%" y="3359.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(ptr_mut$&lt;slice2$&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (544 samples, 0.04%)</title><rect x="23.6557%" y="3333" width="0.0390%" height="15" fill="rgb(240,128,52)" fg:x="329816" fg:w="544"/><text x="23.9057%" y="3343.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (543 samples, 0.04%)</title><rect x="23.6558%" y="3317" width="0.0389%" height="15" fill="rgb(253,114,12)" fg:x="329817" fg:w="543"/><text x="23.9058%" y="3327.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(ndarray::data_repr::OwnedRepr (543 samples, 0.04%)</title><rect x="23.6558%" y="3301" width="0.0389%" height="15" fill="rgb(215,223,47)" fg:x="329817" fg:w="543"/><text x="23.9058%" y="3311.50"></text></g><g><title>neural_network.exe`ndarray::data_repr::impl$2::drop(ndarray::data_repr::OwnedRepr (543 samples, 0.04%)</title><rect x="23.6558%" y="3285" width="0.0389%" height="15" fill="rgb(248,225,23)" fg:x="329817" fg:w="543"/><text x="23.9058%" y="3295.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec (443 samples, 0.03%)</title><rect x="23.6629%" y="3269" width="0.0318%" height="15" fill="rgb(250,108,0)" fg:x="329917" fg:w="443"/><text x="23.9129%" y="3279.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (443 samples, 0.03%)</title><rect x="23.6629%" y="3253" width="0.0318%" height="15" fill="rgb(228,208,7)" fg:x="329917" fg:w="443"/><text x="23.9129%" y="3263.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec (443 samples, 0.03%)</title><rect x="23.6629%" y="3237" width="0.0318%" height="15" fill="rgb(244,45,10)" fg:x="329917" fg:w="443"/><text x="23.9129%" y="3247.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (443 samples, 0.03%)</title><rect x="23.6629%" y="3221" width="0.0318%" height="15" fill="rgb(207,125,25)" fg:x="329917" fg:w="443"/><text x="23.9129%" y="3231.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (443 samples, 0.03%)</title><rect x="23.6629%" y="3205" width="0.0318%" height="15" fill="rgb(210,195,18)" fg:x="329917" fg:w="443"/><text x="23.9129%" y="3215.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (443 samples, 0.03%)</title><rect x="23.6629%" y="3189" width="0.0318%" height="15" fill="rgb(249,80,12)" fg:x="329917" fg:w="443"/><text x="23.9129%" y="3199.50"></text></g><g><title>`0x7FF97E62AFF1 (443 samples, 0.03%)</title><rect x="23.6629%" y="3173" width="0.0318%" height="15" fill="rgb(221,65,9)" fg:x="329917" fg:w="443"/><text x="23.9129%" y="3183.50"></text></g><g><title>`0x7FF968D5154E (190 samples, 0.01%)</title><rect x="23.6989%" y="3253" width="0.0136%" height="15" fill="rgb(235,49,36)" fg:x="330418" fg:w="190"/><text x="23.9489%" y="3263.50"></text></g><g><title>`0x7FF968D51556 (146 samples, 0.01%)</title><rect x="23.7125%" y="3253" width="0.0105%" height="15" fill="rgb(225,32,20)" fg:x="330608" fg:w="146"/><text x="23.9625%" y="3263.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(ndarray::ArrayBase&lt;enum2$&lt;ndarray::CowRepr&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (420 samples, 0.03%)</title><rect x="23.6947%" y="3365" width="0.0301%" height="15" fill="rgb(215,141,46)" fg:x="330360" fg:w="420"/><text x="23.9447%" y="3375.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(enum2$&lt;ndarray::CowRepr (420 samples, 0.03%)</title><rect x="23.6947%" y="3349" width="0.0301%" height="15" fill="rgb(250,160,47)" fg:x="330360" fg:w="420"/><text x="23.9447%" y="3359.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;enum2$&lt;ndarray::CowRepr&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt; &gt;::to_owned&lt;f32,enum2$&lt;ndarray::CowRepr&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt; &gt; (420 samples, 0.03%)</title><rect x="23.6947%" y="3333" width="0.0301%" height="15" fill="rgb(216,222,40)" fg:x="330360" fg:w="420"/><text x="23.9447%" y="3343.50"></text></g><g><title>neural_network.exe`alloc::slice::impl$0::to_vec(ref$&lt;slice2$ (420 samples, 0.03%)</title><rect x="23.6947%" y="3317" width="0.0301%" height="15" fill="rgb(234,217,39)" fg:x="330360" fg:w="420"/><text x="23.9447%" y="3327.50"></text></g><g><title>neural_network.exe`alloc::slice::impl$0::to_vec_in(ref$&lt;slice2$ (420 samples, 0.03%)</title><rect x="23.6947%" y="3301" width="0.0301%" height="15" fill="rgb(207,178,40)" fg:x="330360" fg:w="420"/><text x="23.9447%" y="3311.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$ (420 samples, 0.03%)</title><rect x="23.6947%" y="3285" width="0.0301%" height="15" fill="rgb(221,136,13)" fg:x="330360" fg:w="420"/><text x="23.9447%" y="3295.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$ (420 samples, 0.03%)</title><rect x="23.6947%" y="3269" width="0.0301%" height="15" fill="rgb(249,199,10)" fg:x="330360" fg:w="420"/><text x="23.9447%" y="3279.50"></text></g><g><title>`0x7FF97E62A10C (235 samples, 0.02%)</title><rect x="23.7324%" y="3189" width="0.0169%" height="15" fill="rgb(249,222,13)" fg:x="330886" fg:w="235"/><text x="23.9824%" y="3199.50"></text></g><g><title>`0x7FF97E636AC6 (235 samples, 0.02%)</title><rect x="23.7324%" y="3173" width="0.0169%" height="15" fill="rgb(244,185,38)" fg:x="330886" fg:w="235"/><text x="23.9824%" y="3183.50"></text></g><g><title>`0x7FF97E690364 (235 samples, 0.02%)</title><rect x="23.7324%" y="3157" width="0.0169%" height="15" fill="rgb(236,202,9)" fg:x="330886" fg:w="235"/><text x="23.9824%" y="3167.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec (237 samples, 0.02%)</title><rect x="23.7324%" y="3317" width="0.0170%" height="15" fill="rgb(250,229,37)" fg:x="330886" fg:w="237"/><text x="23.9824%" y="3327.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (237 samples, 0.02%)</title><rect x="23.7324%" y="3301" width="0.0170%" height="15" fill="rgb(206,174,23)" fg:x="330886" fg:w="237"/><text x="23.9824%" y="3311.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec (237 samples, 0.02%)</title><rect x="23.7324%" y="3285" width="0.0170%" height="15" fill="rgb(211,33,43)" fg:x="330886" fg:w="237"/><text x="23.9824%" y="3295.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (237 samples, 0.02%)</title><rect x="23.7324%" y="3269" width="0.0170%" height="15" fill="rgb(245,58,50)" fg:x="330886" fg:w="237"/><text x="23.9824%" y="3279.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (237 samples, 0.02%)</title><rect x="23.7324%" y="3253" width="0.0170%" height="15" fill="rgb(244,68,36)" fg:x="330886" fg:w="237"/><text x="23.9824%" y="3263.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (237 samples, 0.02%)</title><rect x="23.7324%" y="3237" width="0.0170%" height="15" fill="rgb(232,229,15)" fg:x="330886" fg:w="237"/><text x="23.9824%" y="3247.50"></text></g><g><title>`0x7FF97E62AFF1 (237 samples, 0.02%)</title><rect x="23.7324%" y="3221" width="0.0170%" height="15" fill="rgb(254,30,23)" fg:x="330886" fg:w="237"/><text x="23.9824%" y="3231.50"></text></g><g><title>`0x7FF97E62C324 (237 samples, 0.02%)</title><rect x="23.7324%" y="3205" width="0.0170%" height="15" fill="rgb(235,160,14)" fg:x="330886" fg:w="237"/><text x="23.9824%" y="3215.50"></text></g><g><title>`0x7FF97E69CC6F (284 samples, 0.02%)</title><rect x="23.9798%" y="3237" width="0.0204%" height="15" fill="rgb(212,155,44)" fg:x="334335" fg:w="284"/><text x="24.2298%" y="3247.50"></text></g><g><title>`0x7FF97E69CC81 (249 samples, 0.02%)</title><rect x="24.0003%" y="3237" width="0.0179%" height="15" fill="rgb(226,2,50)" fg:x="334621" fg:w="249"/><text x="24.2503%" y="3247.50"></text></g><g><title>`0x7FF97E69CCAF (217 samples, 0.02%)</title><rect x="24.0261%" y="3237" width="0.0156%" height="15" fill="rgb(234,177,6)" fg:x="334980" fg:w="217"/><text x="24.2761%" y="3247.50"></text></g><g><title>`0x7FF97E62AFF1 (2,146 samples, 0.15%)</title><rect x="23.9006%" y="3253" width="0.1539%" height="15" fill="rgb(217,24,9)" fg:x="333231" fg:w="2146"/><text x="24.1506%" y="3263.50"></text></g><g><title>`0x7FF97E62AFF4 (143 samples, 0.01%)</title><rect x="24.0545%" y="3253" width="0.0103%" height="15" fill="rgb(220,13,46)" fg:x="335377" fg:w="143"/><text x="24.3045%" y="3263.50"></text></g><g><title>`0x7FF97E62AFA0 (1,006 samples, 0.07%)</title><rect x="24.0817%" y="3157" width="0.0722%" height="15" fill="rgb(239,221,27)" fg:x="335756" fg:w="1006"/><text x="24.3317%" y="3167.50"></text></g><g><title>`0x7FF97E62AFAA (323 samples, 0.02%)</title><rect x="24.1555%" y="3157" width="0.0232%" height="15" fill="rgb(222,198,25)" fg:x="336784" fg:w="323"/><text x="24.4055%" y="3167.50"></text></g><g><title>`0x7FF97E62AFB7 (970 samples, 0.07%)</title><rect x="24.1822%" y="3157" width="0.0696%" height="15" fill="rgb(211,99,13)" fg:x="337157" fg:w="970"/><text x="24.4322%" y="3167.50"></text></g><g><title>`0x7FF97E62AFBF (696 samples, 0.05%)</title><rect x="24.2518%" y="3157" width="0.0499%" height="15" fill="rgb(232,111,31)" fg:x="338127" fg:w="696"/><text x="24.5018%" y="3167.50"></text></g><g><title>`0x7FF97E62AFDE (810 samples, 0.06%)</title><rect x="24.3054%" y="3157" width="0.0581%" height="15" fill="rgb(245,82,37)" fg:x="338875" fg:w="810"/><text x="24.5554%" y="3167.50"></text></g><g><title>`0x7FF97E62AFE3 (1,331 samples, 0.10%)</title><rect x="24.3635%" y="3157" width="0.0955%" height="15" fill="rgb(227,149,46)" fg:x="339685" fg:w="1331"/><text x="24.6135%" y="3167.50"></text></g><g><title>`0x7FF97E62BB6F (799 samples, 0.06%)</title><rect x="24.4664%" y="3141" width="0.0573%" height="15" fill="rgb(218,36,50)" fg:x="341119" fg:w="799"/><text x="24.7164%" y="3151.50"></text></g><g><title>`0x7FF97E62BB72 (1,655 samples, 0.12%)</title><rect x="24.5238%" y="3141" width="0.1187%" height="15" fill="rgb(226,80,48)" fg:x="341919" fg:w="1655"/><text x="24.7738%" y="3151.50"></text></g><g><title>`0x7FF97E62BB7F (717 samples, 0.05%)</title><rect x="24.6453%" y="3141" width="0.0514%" height="15" fill="rgb(238,224,15)" fg:x="343613" fg:w="717"/><text x="24.8953%" y="3151.50"></text></g><g><title>`0x7FF97E62BB8B (1,254 samples, 0.09%)</title><rect x="24.6967%" y="3141" width="0.0899%" height="15" fill="rgb(241,136,10)" fg:x="344330" fg:w="1254"/><text x="24.9467%" y="3151.50"></text></g><g><title>`0x7FF97E62C2AB (557 samples, 0.04%)</title><rect x="24.8005%" y="3141" width="0.0400%" height="15" fill="rgb(208,32,45)" fg:x="345778" fg:w="557"/><text x="25.0505%" y="3151.50"></text></g><g><title>`0x7FF97E62C2B7 (640 samples, 0.05%)</title><rect x="24.8407%" y="3141" width="0.0459%" height="15" fill="rgb(207,135,9)" fg:x="346338" fg:w="640"/><text x="25.0907%" y="3151.50"></text></g><g><title>`0x7FF97E62C2E5 (187 samples, 0.01%)</title><rect x="24.8914%" y="3141" width="0.0134%" height="15" fill="rgb(206,86,44)" fg:x="347045" fg:w="187"/><text x="25.1414%" y="3151.50"></text></g><g><title>`0x7FF97E62C301 (425 samples, 0.03%)</title><rect x="24.9119%" y="3141" width="0.0305%" height="15" fill="rgb(245,177,15)" fg:x="347330" fg:w="425"/><text x="25.1619%" y="3151.50"></text></g><g><title>`0x7FF97E62C337 (242 samples, 0.02%)</title><rect x="24.9428%" y="3141" width="0.0174%" height="15" fill="rgb(206,64,50)" fg:x="347762" fg:w="242"/><text x="25.1928%" y="3151.50"></text></g><g><title>`0x7FF97E62C342 (175 samples, 0.01%)</title><rect x="24.9602%" y="3141" width="0.0126%" height="15" fill="rgb(234,36,40)" fg:x="348004" fg:w="175"/><text x="25.2102%" y="3151.50"></text></g><g><title>`0x7FF97E62C350 (148 samples, 0.01%)</title><rect x="24.9727%" y="3141" width="0.0106%" height="15" fill="rgb(213,64,8)" fg:x="348179" fg:w="148"/><text x="25.2227%" y="3151.50"></text></g><g><title>`0x7FF97E62B077 (148 samples, 0.01%)</title><rect x="24.9727%" y="3125" width="0.0106%" height="15" fill="rgb(210,75,36)" fg:x="348179" fg:w="148"/><text x="25.2227%" y="3135.50"></text></g><g><title>`0x7FF97E62C371 (467 samples, 0.03%)</title><rect x="24.9839%" y="3141" width="0.0335%" height="15" fill="rgb(229,88,21)" fg:x="348335" fg:w="467"/><text x="25.2339%" y="3151.50"></text></g><g><title>`0x7FF97E69CB5D (324 samples, 0.02%)</title><rect x="25.0278%" y="3141" width="0.0232%" height="15" fill="rgb(252,204,47)" fg:x="348947" fg:w="324"/><text x="25.2778%" y="3151.50"></text></g><g><title>`0x7FF97E69CB88 (277 samples, 0.02%)</title><rect x="25.0666%" y="3141" width="0.0199%" height="15" fill="rgb(208,77,27)" fg:x="349487" fg:w="277"/><text x="25.3166%" y="3151.50"></text></g><g><title>`0x7FF97E69CBA4 (167 samples, 0.01%)</title><rect x="25.1008%" y="3141" width="0.0120%" height="15" fill="rgb(221,76,26)" fg:x="349965" fg:w="167"/><text x="25.3508%" y="3151.50"></text></g><g><title>`0x7FF97E69CC6F (281 samples, 0.02%)</title><rect x="25.1472%" y="3141" width="0.0202%" height="15" fill="rgb(225,139,18)" fg:x="350611" fg:w="281"/><text x="25.3972%" y="3151.50"></text></g><g><title>`0x7FF97E69CC81 (252 samples, 0.02%)</title><rect x="25.1675%" y="3141" width="0.0181%" height="15" fill="rgb(230,137,11)" fg:x="350894" fg:w="252"/><text x="25.4175%" y="3151.50"></text></g><g><title>`0x7FF97E69CCAF (492 samples, 0.04%)</title><rect x="25.1909%" y="3141" width="0.0353%" height="15" fill="rgb(212,28,1)" fg:x="351220" fg:w="492"/><text x="25.4409%" y="3151.50"></text></g><g><title>`0x7FF97E69CD05 (455 samples, 0.03%)</title><rect x="25.2269%" y="3141" width="0.0326%" height="15" fill="rgb(248,164,17)" fg:x="351723" fg:w="455"/><text x="25.4769%" y="3151.50"></text></g><g><title>`0x7FF97E69CD30 (386 samples, 0.03%)</title><rect x="25.2615%" y="3141" width="0.0277%" height="15" fill="rgb(222,171,42)" fg:x="352205" fg:w="386"/><text x="25.5115%" y="3151.50"></text></g><g><title>`0x7FF97E62AFF1 (11,551 samples, 0.83%)</title><rect x="24.4613%" y="3157" width="0.8285%" height="15" fill="rgb(243,84,45)" fg:x="341048" fg:w="11551"/><text x="24.7113%" y="3167.50"></text></g><g><title>`0x7FF97E62AFF4 (170 samples, 0.01%)</title><rect x="25.2898%" y="3157" width="0.0122%" height="15" fill="rgb(252,49,23)" fg:x="352599" fg:w="170"/><text x="25.5398%" y="3167.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec (18,578 samples, 1.33%)</title><rect x="24.0663%" y="3253" width="1.3325%" height="15" fill="rgb(215,19,7)" fg:x="335541" fg:w="18578"/><text x="24.3163%" y="3263.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (18,578 samples, 1.33%)</title><rect x="24.0663%" y="3237" width="1.3325%" height="15" fill="rgb(238,81,41)" fg:x="335541" fg:w="18578"/><text x="24.3163%" y="3247.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec (18,578 samples, 1.33%)</title><rect x="24.0663%" y="3221" width="1.3325%" height="15" fill="rgb(210,199,37)" fg:x="335541" fg:w="18578"/><text x="24.3163%" y="3231.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (18,578 samples, 1.33%)</title><rect x="24.0663%" y="3205" width="1.3325%" height="15" fill="rgb(244,192,49)" fg:x="335541" fg:w="18578"/><text x="24.3163%" y="3215.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (18,578 samples, 1.33%)</title><rect x="24.0663%" y="3189" width="1.3325%" height="15" fill="rgb(226,211,11)" fg:x="335541" fg:w="18578"/><text x="24.3163%" y="3199.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (18,578 samples, 1.33%)</title><rect x="24.0663%" y="3173" width="1.3325%" height="15" fill="rgb(236,162,54)" fg:x="335541" fg:w="18578"/><text x="24.3163%" y="3183.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (1,315 samples, 0.09%)</title><rect x="25.3045%" y="3157" width="0.0943%" height="15" fill="rgb(220,229,9)" fg:x="352804" fg:w="1315"/><text x="25.5545%" y="3167.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::dealloc (279 samples, 0.02%)</title><rect x="25.3788%" y="3141" width="0.0200%" height="15" fill="rgb(250,87,22)" fg:x="353840" fg:w="279"/><text x="25.6288%" y="3151.50"></text></g><g><title>neural_network.exe`ndarray::data_repr::OwnedRepr&lt;f32&gt;::take_as_vec (5,725 samples, 0.41%)</title><rect x="25.3988%" y="3253" width="0.4106%" height="15" fill="rgb(239,43,17)" fg:x="354119" fg:w="5725"/><text x="25.6488%" y="3263.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (26,954 samples, 1.93%)</title><rect x="23.8780%" y="3301" width="1.9332%" height="15" fill="rgb(231,177,25)" fg:x="332915" fg:w="26954"/><text x="24.1280%" y="3311.50">n..</text></g><g><title>neural_network.exe`core::ptr::drop_in_place(ndarray::data_repr::OwnedRepr (26,954 samples, 1.93%)</title><rect x="23.8780%" y="3285" width="1.9332%" height="15" fill="rgb(219,179,1)" fg:x="332915" fg:w="26954"/><text x="24.1280%" y="3295.50">n..</text></g><g><title>neural_network.exe`ndarray::data_repr::impl$2::drop(ndarray::data_repr::OwnedRepr (26,954 samples, 1.93%)</title><rect x="23.8780%" y="3269" width="1.9332%" height="15" fill="rgb(238,219,53)" fg:x="332915" fg:w="26954"/><text x="24.1280%" y="3279.50">n..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;isize&gt; &gt;::unwrap_or(enum2$&lt;core::option::Option (478 samples, 0.03%)</title><rect x="26.3744%" y="3189" width="0.0343%" height="15" fill="rgb(232,167,36)" fg:x="367722" fg:w="478"/><text x="26.6244%" y="3199.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;f32&gt;::offset(core::ptr::non_null::NonNull (2,104 samples, 0.15%)</title><rect x="26.3136%" y="3237" width="0.1509%" height="15" fill="rgb(244,19,51)" fg:x="366873" fg:w="2104"/><text x="26.5636%" y="3247.50"></text></g><g><title>neural_network.exe`ndarray::dimension::do_slice (2,090 samples, 0.15%)</title><rect x="26.3146%" y="3221" width="0.1499%" height="15" fill="rgb(224,6,22)" fg:x="366887" fg:w="2090"/><text x="26.5646%" y="3231.50"></text></g><g><title>neural_network.exe`ndarray::dimension::to_abs_slice (1,722 samples, 0.12%)</title><rect x="26.3409%" y="3205" width="0.1235%" height="15" fill="rgb(224,145,5)" fg:x="367255" fg:w="1722"/><text x="26.5909%" y="3215.50"></text></g><g><title>neural_network.exe`ndarray::dimension::abs_index (777 samples, 0.06%)</title><rect x="26.4087%" y="3189" width="0.0557%" height="15" fill="rgb(234,130,49)" fg:x="368200" fg:w="777"/><text x="26.6587%" y="3199.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;isize&gt; &gt;::unwrap_or(enum2$&lt;core::option::Option (357 samples, 0.03%)</title><rect x="26.4893%" y="3205" width="0.0256%" height="15" fill="rgb(254,6,2)" fg:x="369323" fg:w="357"/><text x="26.7393%" y="3215.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::for_each(core::slice::iter::Iter&lt;enum2$&lt;ndarray::slice::SliceInfoElem&gt; &gt;, ndarray::impl_methods::impl$0::slice_move::closure_env$0&lt;f32,ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::slice::SliceInfo&lt;array$&lt;enum2$&lt;ndarray::slice::SliceInfoElem&gt;,2&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (7,764 samples, 0.56%)</title><rect x="26.2877%" y="3285" width="0.5569%" height="15" fill="rgb(208,96,46)" fg:x="366512" fg:w="7764"/><text x="26.5377%" y="3295.50"></text></g><g><title>neural_network.exe`ndarray::impl_methods::impl$0::slice_move::closure$0(ndarray::impl_methods::impl$0::slice_move::closure_env$0&lt;f32,ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::slice::SliceInfo&lt;array$&lt;enum2$&lt;ndarray::slice::SliceInfoElem&gt;,2&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;*, enum2$ (7,764 samples, 0.56%)</title><rect x="26.2877%" y="3269" width="0.5569%" height="15" fill="rgb(239,3,39)" fg:x="366512" fg:w="7764"/><text x="26.5377%" y="3279.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::slice_axis_inplace (7,532 samples, 0.54%)</title><rect x="26.3043%" y="3253" width="0.5402%" height="15" fill="rgb(233,210,1)" fg:x="366744" fg:w="7532"/><text x="26.5543%" y="3263.50"></text></g><g><title>neural_network.exe`ndarray::dimension::do_slice (5,299 samples, 0.38%)</title><rect x="26.4645%" y="3237" width="0.3801%" height="15" fill="rgb(244,137,37)" fg:x="368977" fg:w="5299"/><text x="26.7145%" y="3247.50"></text></g><g><title>neural_network.exe`ndarray::dimension::to_abs_slice (5,130 samples, 0.37%)</title><rect x="26.4766%" y="3221" width="0.3679%" height="15" fill="rgb(240,136,2)" fg:x="369146" fg:w="5130"/><text x="26.7266%" y="3231.50"></text></g><g><title>neural_network.exe`ndarray::dimension::abs_index (4,596 samples, 0.33%)</title><rect x="26.5149%" y="3205" width="0.3296%" height="15" fill="rgb(239,18,37)" fg:x="369680" fg:w="4596"/><text x="26.7649%" y="3215.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::slice_move&lt;f32,ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::slice::SliceInfo&lt;array$&lt;enum2$&lt;ndarray::slice::SliceInfoElem&gt;,2&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, ndarray::slice::SliceInfo&lt;array$&lt;enum2$&lt;ndarray::slice::SliceInfoElem&gt;,2&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (14,677 samples, 1.05%)</title><rect x="25.8115%" y="3301" width="1.0527%" height="15" fill="rgb(218,185,22)" fg:x="359873" fg:w="14677"/><text x="26.0615%" y="3311.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::with_strides_dim(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;, ndarray::dimension::dim::Dim&lt;array$ (274 samples, 0.02%)</title><rect x="26.8445%" y="3285" width="0.0197%" height="15" fill="rgb(225,218,4)" fg:x="374276" fg:w="274"/><text x="27.0945%" y="3295.50"></text></g><g><title>`0x7FF97E62CC9A (162 samples, 0.01%)</title><rect x="26.8692%" y="3157" width="0.0116%" height="15" fill="rgb(230,182,32)" fg:x="374620" fg:w="162"/><text x="27.1192%" y="3167.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;f32,alloc::alloc::Global&gt;::with_capacity_in (272 samples, 0.02%)</title><rect x="26.8673%" y="3221" width="0.0195%" height="15" fill="rgb(242,56,43)" fg:x="374593" fg:w="272"/><text x="27.1173%" y="3231.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f32,alloc::alloc::Global&gt;::with_capacity_in (272 samples, 0.02%)</title><rect x="26.8673%" y="3205" width="0.0195%" height="15" fill="rgb(233,99,24)" fg:x="374593" fg:w="272"/><text x="27.1173%" y="3215.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (272 samples, 0.02%)</title><rect x="26.8673%" y="3189" width="0.0195%" height="15" fill="rgb(234,209,42)" fg:x="374593" fg:w="272"/><text x="27.1173%" y="3199.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (272 samples, 0.02%)</title><rect x="26.8673%" y="3173" width="0.0195%" height="15" fill="rgb(227,7,12)" fg:x="374593" fg:w="272"/><text x="27.1173%" y="3183.50"></text></g><g><title>neural_network.exe`alloc::slice::impl$0::to_vec(ref$&lt;slice2$ (277 samples, 0.02%)</title><rect x="26.8673%" y="3285" width="0.0199%" height="15" fill="rgb(245,203,43)" fg:x="374593" fg:w="277"/><text x="27.1173%" y="3295.50"></text></g><g><title>neural_network.exe`alloc::slice::impl$0::to_vec_in(ref$&lt;slice2$ (277 samples, 0.02%)</title><rect x="26.8673%" y="3269" width="0.0199%" height="15" fill="rgb(238,205,33)" fg:x="374593" fg:w="277"/><text x="27.1173%" y="3279.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$ (277 samples, 0.02%)</title><rect x="26.8673%" y="3253" width="0.0199%" height="15" fill="rgb(231,56,7)" fg:x="374593" fg:w="277"/><text x="27.1173%" y="3263.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$ (277 samples, 0.02%)</title><rect x="26.8673%" y="3237" width="0.0199%" height="15" fill="rgb(244,186,29)" fg:x="374593" fg:w="277"/><text x="27.1173%" y="3247.50"></text></g><g><title>`0x7FF968D51381 (187 samples, 0.01%)</title><rect x="26.8949%" y="3189" width="0.0134%" height="15" fill="rgb(234,111,31)" fg:x="374978" fg:w="187"/><text x="27.1449%" y="3199.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::to_owned&lt;f32,ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; (685 samples, 0.05%)</title><rect x="26.8642%" y="3301" width="0.0491%" height="15" fill="rgb(241,149,10)" fg:x="374550" fg:w="685"/><text x="27.1142%" y="3311.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_shape_vec_unchecked(ndarray::shape_builder::StrideShape&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, alloc::vec::Vec (277 samples, 0.02%)</title><rect x="26.8934%" y="3285" width="0.0199%" height="15" fill="rgb(249,206,44)" fg:x="374958" fg:w="277"/><text x="27.1434%" y="3295.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_vec_dim_stride_unchecked(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;, ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;, alloc::vec::Vec (277 samples, 0.02%)</title><rect x="26.8934%" y="3269" width="0.0199%" height="15" fill="rgb(251,153,30)" fg:x="374958" fg:w="277"/><text x="27.1434%" y="3279.50"></text></g><g><title>neural_network.exe`ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$ (266 samples, 0.02%)</title><rect x="26.8942%" y="3253" width="0.0191%" height="15" fill="rgb(239,152,38)" fg:x="374969" fg:w="266"/><text x="27.1442%" y="3263.50"></text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$1::fold(core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;usize&gt;,core::slice::iter::Iter&lt;usize&gt; &gt;, long long, ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$ (266 samples, 0.02%)</title><rect x="26.8942%" y="3237" width="0.0191%" height="15" fill="rgb(249,139,47)" fg:x="374969" fg:w="266"/><text x="27.1442%" y="3247.50"></text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$4::fold(core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;usize&gt;,core::slice::iter::Iter&lt;usize&gt; &gt;, long long, ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$ (266 samples, 0.02%)</title><rect x="26.8942%" y="3221" width="0.0191%" height="15" fill="rgb(244,64,35)" fg:x="374969" fg:w="266"/><text x="27.1442%" y="3231.50"></text></g><g><title>neural_network.exe`ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure$0(ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, long long, tuple$&lt;ref$&lt;usize&gt;,ref$ (266 samples, 0.02%)</title><rect x="26.8942%" y="3205" width="0.0191%" height="15" fill="rgb(216,46,15)" fg:x="374969" fg:w="266"/><text x="27.1442%" y="3215.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$6::next(core::ops::range::Range (283 samples, 0.02%)</title><rect x="26.9308%" y="3221" width="0.0203%" height="15" fill="rgb(250,74,19)" fg:x="375479" fg:w="283"/><text x="27.1808%" y="3231.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (283 samples, 0.02%)</title><rect x="26.9308%" y="3205" width="0.0203%" height="15" fill="rgb(249,42,33)" fg:x="375479" fg:w="283"/><text x="27.1808%" y="3215.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,3&gt; &gt; &gt;::collapse_axis (892 samples, 0.06%)</title><rect x="26.9133%" y="3269" width="0.0640%" height="15" fill="rgb(242,149,17)" fg:x="375235" fg:w="892"/><text x="27.1633%" y="3279.50"></text></g><g><title>neural_network.exe`ndarray::dimension::do_collapse_axis(ndarray::dimension::dim::Dim&lt;array$&lt;usize,3&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$ (873 samples, 0.06%)</title><rect x="26.9147%" y="3253" width="0.0626%" height="15" fill="rgb(244,29,21)" fg:x="375254" fg:w="873"/><text x="27.1647%" y="3263.50"></text></g><g><title>neural_network.exe`neural_network::helpers::activation_functions::activation_derivative_2d(unsigned char, ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (870 samples, 0.06%)</title><rect x="26.9149%" y="3237" width="0.0624%" height="15" fill="rgb(220,130,37)" fg:x="375257" fg:w="870"/><text x="27.1649%" y="3247.50"></text></g><g><title>neural_network.exe`neural_network::helpers::activation_functions::relu_derivative (364 samples, 0.03%)</title><rect x="26.9512%" y="3221" width="0.0261%" height="15" fill="rgb(211,67,2)" fg:x="375763" fg:w="364"/><text x="27.2012%" y="3231.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,3&gt; &gt; &gt;::index_axis_move(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (898 samples, 0.06%)</title><rect x="26.9133%" y="3285" width="0.0644%" height="15" fill="rgb(235,68,52)" fg:x="375235" fg:w="898"/><text x="27.1633%" y="3295.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,3&gt; &gt; &gt;::index_axis (1,222 samples, 0.09%)</title><rect x="26.9133%" y="3301" width="0.0876%" height="15" fill="rgb(246,142,3)" fg:x="375235" fg:w="1222"/><text x="27.1633%" y="3311.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,3&gt; &gt; &gt;::view (324 samples, 0.02%)</title><rect x="26.9777%" y="3285" width="0.0232%" height="15" fill="rgb(241,25,7)" fg:x="376133" fg:w="324"/><text x="27.2277%" y="3295.50"></text></g><g><title>neural_network.exe`ndarray::dimension::dim::impl$4::clone(ndarray::dimension::dim::Dim&lt;array$ (324 samples, 0.02%)</title><rect x="26.9777%" y="3269" width="0.0232%" height="15" fill="rgb(242,119,39)" fg:x="376133" fg:w="324"/><text x="27.2277%" y="3279.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;f32&gt;::offset(core::ptr::non_null::NonNull (738 samples, 0.05%)</title><rect x="30.5590%" y="3141" width="0.0529%" height="15" fill="rgb(241,98,45)" fg:x="426065" fg:w="738"/><text x="30.8090%" y="3151.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt; &gt;::collapse_axis (3,128 samples, 0.22%)</title><rect x="30.4600%" y="3157" width="0.2244%" height="15" fill="rgb(254,28,30)" fg:x="424684" fg:w="3128"/><text x="30.7100%" y="3167.50"></text></g><g><title>neural_network.exe`ndarray::dimension::do_collapse_axis(ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$ (1,009 samples, 0.07%)</title><rect x="30.6120%" y="3141" width="0.0724%" height="15" fill="rgb(241,142,54)" fg:x="426803" fg:w="1009"/><text x="30.8620%" y="3151.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;isize&gt; &gt;::unwrap_or(enum2$&lt;core::option::Option (2,623 samples, 0.19%)</title><rect x="31.1900%" y="3093" width="0.1881%" height="15" fill="rgb(222,85,15)" fg:x="434862" fg:w="2623"/><text x="31.4400%" y="3103.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt; &gt;::slice_axis_inplace (31,453 samples, 2.26%)</title><rect x="30.6843%" y="3157" width="2.2559%" height="15" fill="rgb(210,85,47)" fg:x="427812" fg:w="31453"/><text x="30.9343%" y="3167.50">n..</text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;f32&gt;::offset(core::ptr::non_null::NonNull (29,276 samples, 2.10%)</title><rect x="30.8405%" y="3141" width="2.0998%" height="15" fill="rgb(224,206,25)" fg:x="429989" fg:w="29276"/><text x="31.0905%" y="3151.50">n..</text></g><g><title>neural_network.exe`ndarray::dimension::do_slice (29,245 samples, 2.10%)</title><rect x="30.8427%" y="3125" width="2.0976%" height="15" fill="rgb(243,201,19)" fg:x="430020" fg:w="29245"/><text x="31.0927%" y="3135.50">n..</text></g><g><title>neural_network.exe`ndarray::dimension::to_abs_slice (26,235 samples, 1.88%)</title><rect x="31.0586%" y="3109" width="1.8817%" height="15" fill="rgb(236,59,4)" fg:x="433030" fg:w="26235"/><text x="31.3086%" y="3119.50">n..</text></g><g><title>neural_network.exe`ndarray::dimension::abs_index (21,780 samples, 1.56%)</title><rect x="31.3781%" y="3093" width="1.5621%" height="15" fill="rgb(254,179,45)" fg:x="437485" fg:w="21780"/><text x="31.6281%" y="3103.50"></text></g><g><title>neural_network.exe`ndarray::dimension::abs_index (3,305 samples, 0.24%)</title><rect x="32.9403%" y="3157" width="0.2370%" height="15" fill="rgb(226,14,10)" fg:x="459265" fg:w="3305"/><text x="33.1903%" y="3167.50"></text></g><g><title>neural_network.exe`ndarray::dimension::conversion::impl$31::index(ndarray::dimension::dim::Dim&lt;array$ (259 samples, 0.02%)</title><rect x="33.1587%" y="3141" width="0.0186%" height="15" fill="rgb(244,27,41)" fg:x="462311" fg:w="259"/><text x="33.4087%" y="3151.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::for_each(core::slice::iter::Iter&lt;enum2$&lt;ndarray::slice::SliceInfoElem&gt; &gt;, ndarray::impl_methods::impl$0::slice_move::closure_env$0&lt;f32,ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt;,ndarray::slice::SliceInfo&lt;array$&lt;enum2$&lt;ndarray::slice::SliceInfoElem&gt;,4&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (44,523 samples, 3.19%)</title><rect x="29.9843%" y="3189" width="3.1934%" height="15" fill="rgb(235,35,32)" fg:x="418052" fg:w="44523"/><text x="30.2343%" y="3199.50">neu..</text></g><g><title>neural_network.exe`ndarray::impl_methods::impl$0::slice_move::closure$0(ndarray::impl_methods::impl$0::slice_move::closure_env$0&lt;f32,ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt;,ndarray::slice::SliceInfo&lt;array$&lt;enum2$&lt;ndarray::slice::SliceInfoElem&gt;,4&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;*, enum2$ (44,523 samples, 3.19%)</title><rect x="29.9843%" y="3173" width="3.1934%" height="15" fill="rgb(218,68,31)" fg:x="418052" fg:w="44523"/><text x="30.2343%" y="3183.50">neu..</text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt; &gt;::slice_move(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt; &gt;, ndarray::slice::SliceInfo&lt;array$&lt;enum2$&lt;ndarray::slice::SliceInfoElem&gt;,4&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (74,135 samples, 5.32%)</title><rect x="27.8981%" y="3205" width="5.3172%" height="15" fill="rgb(207,120,37)" fg:x="388966" fg:w="74135"/><text x="28.1481%" y="3215.50">neural_..</text></g><g><title>neural_network.exe`ndarray::dimension::dimension_trait::impl$2::zeros (515 samples, 0.04%)</title><rect x="33.1785%" y="3189" width="0.0369%" height="15" fill="rgb(227,98,0)" fg:x="462586" fg:w="515"/><text x="33.4285%" y="3199.50"></text></g><g><title>neural_network.exe`ndarray::dimension::dim::impl$9::default (515 samples, 0.04%)</title><rect x="33.1785%" y="3173" width="0.0369%" height="15" fill="rgb(207,7,3)" fg:x="462586" fg:w="515"/><text x="33.4285%" y="3183.50"></text></g><g><title>neural_network.exe`core::array::impl$59::default (515 samples, 0.04%)</title><rect x="33.1785%" y="3157" width="0.0369%" height="15" fill="rgb(206,98,19)" fg:x="462586" fg:w="515"/><text x="33.4285%" y="3167.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt; &gt;::new(core::ptr::non_null::NonNull&lt;f32&gt;, ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt;, ndarray::dimension::dim::Dim&lt;array$ (904 samples, 0.06%)</title><rect x="33.2177%" y="3189" width="0.0648%" height="15" fill="rgb(217,5,26)" fg:x="463133" fg:w="904"/><text x="33.4677%" y="3199.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;::with_strides_dim(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;, ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt;, ndarray::dimension::dim::Dim&lt;array$ (904 samples, 0.06%)</title><rect x="33.2177%" y="3173" width="0.0648%" height="15" fill="rgb(235,190,38)" fg:x="463133" fg:w="904"/><text x="33.4677%" y="3183.50"></text></g><g><title>neural_network.exe`core::cmp::impls::impl$9::eq(ref$&lt;slice2$&lt;usize&gt; &gt;*, ref$&lt;slice2$ (85,974 samples, 6.17%)</title><rect x="27.2172%" y="3269" width="6.1664%" height="15" fill="rgb(247,86,24)" fg:x="379472" fg:w="85974"/><text x="27.4672%" y="3279.50">neural_n..</text></g><g><title>neural_network.exe`core::slice::cmp::impl$0::eq(ref$&lt;slice2$&lt;usize&gt; &gt;, ref$&lt;slice2$ (85,974 samples, 6.17%)</title><rect x="27.2172%" y="3253" width="6.1664%" height="15" fill="rgb(205,101,16)" fg:x="379472" fg:w="85974"/><text x="27.4672%" y="3263.50">neural_n..</text></g><g><title>neural_network.exe`core::slice::cmp::impl$5::equal(ref$&lt;slice2$&lt;usize&gt; &gt;, ref$&lt;slice2$ (85,974 samples, 6.17%)</title><rect x="27.2172%" y="3237" width="6.1664%" height="15" fill="rgb(246,168,33)" fg:x="379472" fg:w="85974"/><text x="27.4672%" y="3247.50">neural_n..</text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt; &gt;::slice_mut&lt;f32,ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt;,ndarray::slice::SliceInfo&lt;array$&lt;enum2$&lt;ndarray::slice::SliceInfoElem&gt;,4&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;(ndarray::slice::SliceInfo&lt;array$&lt;enum2$&lt;ndarray::slice::SliceInfoElem&gt;,4&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (79,257 samples, 5.68%)</title><rect x="27.6990%" y="3221" width="5.6846%" height="15" fill="rgb(231,114,1)" fg:x="386189" fg:w="79257"/><text x="27.9490%" y="3231.50">neural_..</text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt; &gt;::view_mut (2,345 samples, 0.17%)</title><rect x="33.2154%" y="3205" width="0.1682%" height="15" fill="rgb(207,184,53)" fg:x="463101" fg:w="2345"/><text x="33.4654%" y="3215.50"></text></g><g><title>neural_network.exe`ndarray::dimension::dim::impl$4::clone(ndarray::dimension::dim::Dim&lt;array$ (1,409 samples, 0.10%)</title><rect x="33.2825%" y="3189" width="0.1011%" height="15" fill="rgb(224,95,51)" fg:x="464037" fg:w="1409"/><text x="33.5325%" y="3199.50"></text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$1::next(core::iter::adapters::zip::Zip&lt;core::slice::iter::IterMut&lt;f32&gt;,core::slice::iter::Iter (269 samples, 0.02%)</title><rect x="33.4278%" y="3253" width="0.0193%" height="15" fill="rgb(212,188,45)" fg:x="466063" fg:w="269"/><text x="33.6778%" y="3263.50"></text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$5::next(core::iter::adapters::zip::Zip&lt;core::slice::iter::IterMut&lt;f32&gt;,core::slice::iter::Iter (269 samples, 0.02%)</title><rect x="33.4278%" y="3237" width="0.0193%" height="15" fill="rgb(223,154,38)" fg:x="466063" fg:w="269"/><text x="33.6778%" y="3247.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::is_contiguous (511 samples, 0.04%)</title><rect x="33.4471%" y="3221" width="0.0367%" height="15" fill="rgb(251,22,52)" fg:x="466332" fg:w="511"/><text x="33.6971%" y="3231.50"></text></g><g><title>neural_network.exe`ndarray::dimension::dimension_trait::Dimension::is_contiguous(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$ (511 samples, 0.04%)</title><rect x="33.4471%" y="3205" width="0.0367%" height="15" fill="rgb(229,209,22)" fg:x="466332" fg:w="511"/><text x="33.6971%" y="3215.50"></text></g><g><title>neural_network.exe`ndarray::dimension::dimension_trait::impl$2::default_strides(ndarray::dimension::dim::Dim&lt;array$ (435 samples, 0.03%)</title><rect x="33.4526%" y="3189" width="0.0312%" height="15" fill="rgb(234,138,34)" fg:x="466408" fg:w="435"/><text x="33.7026%" y="3199.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::as_slice_memory_order_mut (946 samples, 0.07%)</title><rect x="33.4471%" y="3253" width="0.0679%" height="15" fill="rgb(212,95,11)" fg:x="466332" fg:w="946"/><text x="33.6971%" y="3263.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::try_as_slice_memory_order_mut (946 samples, 0.07%)</title><rect x="33.4471%" y="3237" width="0.0679%" height="15" fill="rgb(240,179,47)" fg:x="466332" fg:w="946"/><text x="33.6971%" y="3247.50"></text></g><g><title>neural_network.exe`ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$ (435 samples, 0.03%)</title><rect x="33.4838%" y="3221" width="0.0312%" height="15" fill="rgb(240,163,11)" fg:x="466843" fg:w="435"/><text x="33.7338%" y="3231.50"></text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$1::fold(core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;usize&gt;,core::slice::iter::Iter&lt;usize&gt; &gt;, long long, ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$ (435 samples, 0.03%)</title><rect x="33.4838%" y="3205" width="0.0312%" height="15" fill="rgb(236,37,12)" fg:x="466843" fg:w="435"/><text x="33.7338%" y="3215.50"></text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$4::fold(core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;usize&gt;,core::slice::iter::Iter&lt;usize&gt; &gt;, long long, ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$ (435 samples, 0.03%)</title><rect x="33.4838%" y="3189" width="0.0312%" height="15" fill="rgb(232,164,16)" fg:x="466843" fg:w="435"/><text x="33.7338%" y="3199.50"></text></g><g><title>neural_network.exe`ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure$0(ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, long long, tuple$&lt;ref$&lt;usize&gt;,ref$ (435 samples, 0.03%)</title><rect x="33.4838%" y="3173" width="0.0312%" height="15" fill="rgb(244,205,15)" fg:x="466843" fg:w="435"/><text x="33.7338%" y="3183.50"></text></g><g><title>neural_network.exe`ndarray::dimension::dimension_trait::impl$2::default_strides(ndarray::dimension::dim::Dim&lt;array$ (154 samples, 0.01%)</title><rect x="33.5282%" y="3205" width="0.0110%" height="15" fill="rgb(223,117,47)" fg:x="467462" fg:w="154"/><text x="33.7782%" y="3215.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::is_contiguous (339 samples, 0.02%)</title><rect x="33.5150%" y="3237" width="0.0243%" height="15" fill="rgb(244,107,35)" fg:x="467278" fg:w="339"/><text x="33.7650%" y="3247.50"></text></g><g><title>neural_network.exe`ndarray::dimension::dimension_trait::Dimension::is_contiguous(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$ (339 samples, 0.02%)</title><rect x="33.5150%" y="3221" width="0.0243%" height="15" fill="rgb(205,140,8)" fg:x="467278" fg:w="339"/><text x="33.7650%" y="3231.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::as_slice_memory_order (456 samples, 0.03%)</title><rect x="33.5150%" y="3253" width="0.0327%" height="15" fill="rgb(228,84,46)" fg:x="467278" fg:w="456"/><text x="33.7650%" y="3263.50"></text></g><g><title>neural_network.exe`ndarray::dimension::dimension_trait::Dimension::strides_equivalent(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$ (472 samples, 0.03%)</title><rect x="33.5477%" y="3253" width="0.0339%" height="15" fill="rgb(254,188,9)" fg:x="467734" fg:w="472"/><text x="33.7977%" y="3263.50"></text></g><g><title>neural_network.exe`core::iter::traits::iterator::Iterator::all(core::iter::adapters::map::Map&lt;core::iter::adapters::zip::Zip&lt;core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;usize&gt;,core::slice::iter::Iter&lt;usize&gt; &gt;,core::slice::iter::Iter&lt;usize&gt; &gt;,ndarray::dimension::dimension_trait::Dimension::strides_equivalent::closure_env$1&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;*, ndarray::dimension::dimension_trait::Dimension::strides_equivalent::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (472 samples, 0.03%)</title><rect x="33.5477%" y="3237" width="0.0339%" height="15" fill="rgb(206,112,54)" fg:x="467734" fg:w="472"/><text x="33.7977%" y="3247.50"></text></g><g><title>neural_network.exe`core::iter::adapters::map::impl$2::try_fold(core::iter::adapters::map::Map&lt;core::iter::adapters::zip::Zip&lt;core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;usize&gt;,core::slice::iter::Iter&lt;usize&gt; &gt;,core::slice::iter::Iter&lt;usize&gt; &gt;,ndarray::dimension::dimension_trait::Dimension::strides_equivalent::closure_env$1&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;*, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::all::check::closure_env$0&lt;tuple$&lt;ref$&lt;usize&gt;,ref$&lt;usize&gt;,ref$&lt;usize&gt; &gt;,ndarray::dimension::dimension_trait::Dimension::strides_equivalent::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (472 samples, 0.03%)</title><rect x="33.5477%" y="3221" width="0.0339%" height="15" fill="rgb(216,84,49)" fg:x="467734" fg:w="472"/><text x="33.7977%" y="3231.50"></text></g><g><title>neural_network.exe`core::iter::traits::iterator::Iterator::try_fold(core::iter::adapters::zip::Zip&lt;core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;usize&gt;,core::slice::iter::Iter&lt;usize&gt; &gt;,core::slice::iter::Iter&lt;usize&gt; &gt;*, tuple$&lt;&gt;, core::iter::adapters::map::map_try_fold::closure_env$0&lt;tuple$&lt;tuple$&lt;ref$&lt;usize&gt;,ref$&lt;usize&gt; &gt;,ref$&lt;usize&gt; &gt;,tuple$&lt;ref$&lt;usize&gt;,ref$&lt;usize&gt;,ref$&lt;usize&gt; &gt;,tuple$&lt;&gt;,enum2$&lt;core::ops::control_flow::ControlFlow&lt;tuple$&lt;&gt;,tuple$&lt;&gt; &gt; &gt;,ndarray::dimension::dimension_trait::Dimension::strides_equivalent::closure_env$1&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,core::iter::traits::iterator::Iterator::all::check::closure_env$0&lt;tuple$&lt;ref$&lt;usize&gt;,ref$&lt;usize&gt;,ref$&lt;usize&gt; &gt;,ndarray::dimension::dimension_trait::Dimension::strides_equivalent::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (472 samples, 0.03%)</title><rect x="33.5477%" y="3205" width="0.0339%" height="15" fill="rgb(214,194,35)" fg:x="467734" fg:w="472"/><text x="33.7977%" y="3215.50"></text></g><g><title>neural_network.exe`core::iter::adapters::map::map_try_fold::closure$0(core::iter::adapters::map::map_try_fold::closure_env$0&lt;tuple$&lt;tuple$&lt;ref$&lt;usize&gt;,ref$&lt;usize&gt; &gt;,ref$&lt;usize&gt; &gt;,tuple$&lt;ref$&lt;usize&gt;,ref$&lt;usize&gt;,ref$&lt;usize&gt; &gt;,tuple$&lt;&gt;,enum2$&lt;core::ops::control_flow::ControlFlow&lt;tuple$&lt;&gt;,tuple$&lt;&gt; &gt; &gt;,ndarray::dimension::dimension_trait::Dimension::strides_equivalent::closure_env$1&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,core::iter::traits::iterator::Iterator::all::check::closure_env$0&lt;tuple$&lt;ref$&lt;usize&gt;,ref$&lt;usize&gt;,ref$&lt;usize&gt; &gt;,ndarray::dimension::dimension_trait::Dimension::strides_equivalent::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt; &gt;*, tuple$&lt;&gt;, tuple$&lt;tuple$&lt;ref$&lt;usize&gt;,ref$&lt;usize&gt; &gt;,ref$ (472 samples, 0.03%)</title><rect x="33.5477%" y="3189" width="0.0339%" height="15" fill="rgb(249,28,3)" fg:x="467734" fg:w="472"/><text x="33.7977%" y="3199.50"></text></g><g><title>neural_network.exe`core::iter::traits::iterator::Iterator::all::check::closure$0(core::iter::traits::iterator::Iterator::all::check::closure_env$0&lt;tuple$&lt;ref$&lt;usize&gt;,ref$&lt;usize&gt;,ref$&lt;usize&gt; &gt;,ndarray::dimension::dimension_trait::Dimension::strides_equivalent::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;*, tuple$&lt;&gt;, tuple$&lt;ref$&lt;usize&gt;,ref$&lt;usize&gt;,ref$ (472 samples, 0.03%)</title><rect x="33.5477%" y="3173" width="0.0339%" height="15" fill="rgb(222,56,52)" fg:x="467734" fg:w="472"/><text x="33.7977%" y="3183.50"></text></g><g><title>neural_network.exe`ndarray::dimension::dimension_trait::Dimension::strides_equivalent::closure$0(ndarray::dimension::dimension_trait::Dimension::strides_equivalent::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;ref$&lt;usize&gt;,ref$&lt;usize&gt;,ref$ (472 samples, 0.03%)</title><rect x="33.5477%" y="3157" width="0.0339%" height="15" fill="rgb(245,217,50)" fg:x="467734" fg:w="472"/><text x="33.7977%" y="3167.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::assign(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (92,104 samples, 6.61%)</title><rect x="27.0010%" y="3301" width="6.6061%" height="15" fill="rgb(213,201,24)" fg:x="376458" fg:w="92104"/><text x="27.2510%" y="3311.50">neural_ne..</text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::zip_mut_with(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::impl_methods::impl$0::assign::closure_env$0&lt;f32,ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::data_repr::OwnedRepr (92,104 samples, 6.61%)</title><rect x="27.0010%" y="3285" width="6.6061%" height="15" fill="rgb(248,116,28)" fg:x="376458" fg:w="92104"/><text x="27.2510%" y="3295.50">neural_ne..</text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::zip_mut_with_same_shape&lt;f32,ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f32,ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::impl_methods::impl$0::assign::closure_env$0&lt;f32,ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::data_repr::OwnedRepr&lt;f32&gt; &gt; &gt;(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::impl_methods::impl$0::assign::closure_env$0&lt;f32,ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::data_repr::OwnedRepr (3,116 samples, 0.22%)</title><rect x="33.3836%" y="3269" width="0.2235%" height="15" fill="rgb(219,72,43)" fg:x="465446" fg:w="3116"/><text x="33.6336%" y="3279.50"></text></g><g><title>neural_network.exe`ndarray::impl_methods::impl$0::assign::closure$0(ndarray::impl_methods::impl$0::assign::closure_env$0&lt;f32,ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::data_repr::OwnedRepr (356 samples, 0.03%)</title><rect x="33.5815%" y="3253" width="0.0255%" height="15" fill="rgb(209,138,14)" fg:x="468206" fg:w="356"/><text x="33.8315%" y="3263.50"></text></g><g><title>neural_network.exe`core::clone::Clone::clone_from (356 samples, 0.03%)</title><rect x="33.5815%" y="3237" width="0.0255%" height="15" fill="rgb(222,18,33)" fg:x="468206" fg:w="356"/><text x="33.8315%" y="3247.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::view (394 samples, 0.03%)</title><rect x="33.6079%" y="3301" width="0.0283%" height="15" fill="rgb(213,199,7)" fg:x="468573" fg:w="394"/><text x="33.8579%" y="3311.50"></text></g><g><title>neural_network.exe`ndarray::dimension::dim::impl$4::clone(ndarray::dimension::dim::Dim&lt;array$ (334 samples, 0.02%)</title><rect x="33.6122%" y="3285" width="0.0240%" height="15" fill="rgb(250,110,10)" fg:x="468633" fg:w="334"/><text x="33.8622%" y="3295.50"></text></g><g><title>`0x7FF97E62CC9A (244 samples, 0.02%)</title><rect x="33.6630%" y="3141" width="0.0175%" height="15" fill="rgb(248,123,6)" fg:x="469342" fg:w="244"/><text x="33.9130%" y="3151.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;core::mem::maybe_uninit::MaybeUninit&lt;f32&gt;,alloc::alloc::Global&gt;::with_capacity (310 samples, 0.02%)</title><rect x="33.6618%" y="3221" width="0.0222%" height="15" fill="rgb(206,91,31)" fg:x="469325" fg:w="310"/><text x="33.9118%" y="3231.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;core::mem::maybe_uninit::MaybeUninit&lt;f32&gt;,alloc::alloc::Global&gt;::with_capacity_in (310 samples, 0.02%)</title><rect x="33.6618%" y="3205" width="0.0222%" height="15" fill="rgb(211,154,13)" fg:x="469325" fg:w="310"/><text x="33.9118%" y="3215.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;core::mem::maybe_uninit::MaybeUninit&lt;f32&gt;,alloc::alloc::Global&gt;::with_capacity_in (310 samples, 0.02%)</title><rect x="33.6618%" y="3189" width="0.0222%" height="15" fill="rgb(225,148,7)" fg:x="469325" fg:w="310"/><text x="33.9118%" y="3199.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (310 samples, 0.02%)</title><rect x="33.6618%" y="3173" width="0.0222%" height="15" fill="rgb(220,160,43)" fg:x="469325" fg:w="310"/><text x="33.9118%" y="3183.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (310 samples, 0.02%)</title><rect x="33.6618%" y="3157" width="0.0222%" height="15" fill="rgb(213,52,39)" fg:x="469325" fg:w="310"/><text x="33.9118%" y="3167.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;core::mem::maybe_uninit::MaybeUninit&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_shape_vec_unchecked(ndarray::shape_builder::Shape&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, alloc::vec::Vec&lt;core::mem::maybe_uninit::MaybeUninit (272 samples, 0.02%)</title><rect x="33.6840%" y="3221" width="0.0195%" height="15" fill="rgb(243,137,7)" fg:x="469635" fg:w="272"/><text x="33.9340%" y="3231.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;core::mem::maybe_uninit::MaybeUninit&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_vec_dim_stride_unchecked(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;, ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;, alloc::vec::Vec&lt;core::mem::maybe_uninit::MaybeUninit (260 samples, 0.02%)</title><rect x="33.6849%" y="3205" width="0.0186%" height="15" fill="rgb(230,79,13)" fg:x="469647" fg:w="260"/><text x="33.9349%" y="3215.50"></text></g><g><title>neural_network.exe`ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$ (151 samples, 0.01%)</title><rect x="33.6927%" y="3189" width="0.0108%" height="15" fill="rgb(247,105,23)" fg:x="469756" fg:w="151"/><text x="33.9427%" y="3199.50"></text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$1::fold(core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;usize&gt;,core::slice::iter::Iter&lt;usize&gt; &gt;, long long, ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$ (151 samples, 0.01%)</title><rect x="33.6927%" y="3173" width="0.0108%" height="15" fill="rgb(223,179,41)" fg:x="469756" fg:w="151"/><text x="33.9427%" y="3183.50"></text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$4::fold(core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;usize&gt;,core::slice::iter::Iter&lt;usize&gt; &gt;, long long, ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$ (151 samples, 0.01%)</title><rect x="33.6927%" y="3157" width="0.0108%" height="15" fill="rgb(218,9,34)" fg:x="469756" fg:w="151"/><text x="33.9427%" y="3167.50"></text></g><g><title>neural_network.exe`ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure$0(ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, long long, tuple$&lt;ref$&lt;usize&gt;,ref$ (151 samples, 0.01%)</title><rect x="33.6927%" y="3141" width="0.0108%" height="15" fill="rgb(222,106,8)" fg:x="469756" fg:w="151"/><text x="33.9427%" y="3151.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::uninit&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,f32,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::shape_builder::Shape&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;(ndarray::shape_builder::Shape&lt;ndarray::dimension::dim::Dim&lt;array$ (692 samples, 0.05%)</title><rect x="33.6548%" y="3237" width="0.0496%" height="15" fill="rgb(211,220,0)" fg:x="469228" fg:w="692"/><text x="33.9048%" y="3247.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;core::mem::maybe_uninit::MaybeUninit&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::raw_view_mut_unchecked (839 samples, 0.06%)</title><rect x="33.6533%" y="3253" width="0.0602%" height="15" fill="rgb(229,52,16)" fg:x="469206" fg:w="839"/><text x="33.9033%" y="3263.50"></text></g><g><title>neural_network.exe`ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::and&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;(ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (180 samples, 0.01%)</title><rect x="33.7134%" y="3253" width="0.0129%" height="15" fill="rgb(212,155,18)" fg:x="470045" fg:w="180"/><text x="33.9634%" y="3263.50"></text></g><g><title>neural_network.exe`ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::collect_with_partial&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,f32,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::impl_ops::arithmetic_ops::clone_opf::closure_env$0&lt;f32,f32,f32,f32 (*)(f32,f32)&gt; &gt;(ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, ndarray::impl_ops::arithmetic_ops::clone_opf::closure_env$0&lt;f32,f32,f32,f32 (*) (399 samples, 0.03%)</title><rect x="33.7264%" y="3253" width="0.0286%" height="15" fill="rgb(242,21,14)" fg:x="470225" fg:w="399"/><text x="33.9764%" y="3263.50"></text></g><g><title>neural_network.exe`ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::for_each(ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, ndarray::zip::impl$42::collect_with_partial::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,f32,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::impl_ops::arithmetic_ops::clone_opf::closure_env$0&lt;f32,f32,f32,f32 (*) (306 samples, 0.02%)</title><rect x="33.7330%" y="3237" width="0.0219%" height="15" fill="rgb(222,19,48)" fg:x="470318" fg:w="306"/><text x="33.9830%" y="3247.50"></text></g><g><title>neural_network.exe`ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::for_each_core(tuple$&lt;&gt;, ndarray::zip::impl$29::for_each::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::zip::impl$42::collect_with_partial::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,f32,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::impl_ops::arithmetic_ops::clone_opf::closure_env$0&lt;f32,f32,f32,f32 (*) (306 samples, 0.02%)</title><rect x="33.7330%" y="3221" width="0.0219%" height="15" fill="rgb(232,45,27)" fg:x="470318" fg:w="306"/><text x="33.9830%" y="3231.50"></text></g><g><title>neural_network.exe`ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::for_each_core_contiguous(tuple$&lt;&gt;, ndarray::zip::impl$29::for_each::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::zip::impl$42::collect_with_partial::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,f32,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::impl_ops::arithmetic_ops::clone_opf::closure_env$0&lt;f32,f32,f32,f32 (*) (306 samples, 0.02%)</title><rect x="33.7330%" y="3205" width="0.0219%" height="15" fill="rgb(249,103,42)" fg:x="470318" fg:w="306"/><text x="33.9830%" y="3215.50"></text></g><g><title>neural_network.exe`ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::inner(tuple$&lt;&gt;, tuple$&lt;ptr_mut$&lt;f32&gt;,ptr_mut$&lt;f32&gt;,ptr_mut$&lt;f32&gt; &gt;, tuple$&lt;isize,isize,isize&gt;, unsigned long long, ndarray::zip::impl$29::for_each::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::zip::impl$42::collect_with_partial::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,f32,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::impl_ops::arithmetic_ops::clone_opf::closure_env$0&lt;f32,f32,f32,f32 (*) (306 samples, 0.02%)</title><rect x="33.7330%" y="3189" width="0.0219%" height="15" fill="rgb(246,81,33)" fg:x="470318" fg:w="306"/><text x="33.9830%" y="3199.50"></text></g><g><title>neural_network.exe`ndarray::zip::impl$29::for_each::closure$0(ndarray::zip::impl$29::for_each::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::zip::impl$42::collect_with_partial::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,f32,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::impl_ops::arithmetic_ops::clone_opf::closure_env$0&lt;f32,f32,f32,f32 (*)(f32,f32)&gt; &gt; &gt;*, tuple$&lt;&gt;, tuple$&lt;ref$&lt;f32&gt;,ref$&lt;f32&gt;,ptr_mut$ (216 samples, 0.02%)</title><rect x="33.7395%" y="3173" width="0.0155%" height="15" fill="rgb(252,33,42)" fg:x="470408" fg:w="216"/><text x="33.9895%" y="3183.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::build_uninit(ndarray::shape_builder::Shape&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, ndarray::zip::impl$26::map_collect_owned::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::data_repr::OwnedRepr&lt;f32&gt;,f32,ndarray::impl_ops::arithmetic_ops::clone_opf::closure_env$0&lt;f32,f32,f32,f32 (*) (1,422 samples, 0.10%)</title><rect x="33.6531%" y="3269" width="0.1020%" height="15" fill="rgb(209,212,41)" fg:x="469203" fg:w="1422"/><text x="33.9031%" y="3279.50"></text></g><g><title>neural_network.exe`ndarray::impl_ops::arithmetic_ops::impl$19::mul&lt;f32,f32,ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (2,117 samples, 0.15%)</title><rect x="33.6407%" y="3301" width="0.1518%" height="15" fill="rgb(207,154,6)" fg:x="469031" fg:w="2117"/><text x="33.8907%" y="3311.50"></text></g><g><title>neural_network.exe`ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::map_collect_owned&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::data_repr::OwnedRepr&lt;f32&gt;,f32,ndarray::impl_ops::arithmetic_ops::clone_opf::closure_env$0&lt;f32,f32,f32,f32 (*)(f32,f32)&gt; &gt;(ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, ndarray::impl_ops::arithmetic_ops::clone_opf::closure_env$0&lt;f32,f32,f32,f32 (*) (1,993 samples, 0.14%)</title><rect x="33.6496%" y="3285" width="0.1429%" height="15" fill="rgb(223,64,47)" fg:x="469155" fg:w="1993"/><text x="33.8996%" y="3295.50"></text></g><g><title>neural_network.exe`ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::prefer_f (523 samples, 0.04%)</title><rect x="33.7550%" y="3269" width="0.0375%" height="15" fill="rgb(211,161,38)" fg:x="470625" fg:w="523"/><text x="34.0050%" y="3279.50"></text></g><g><title>neural_network.exe`ndarray::shape_builder::impl$5::into_shape_with_order(ndarray::dimension::dim::Dim&lt;array$ (472 samples, 0.03%)</title><rect x="33.7587%" y="3253" width="0.0339%" height="15" fill="rgb(219,138,40)" fg:x="470676" fg:w="472"/><text x="34.0087%" y="3263.50"></text></g><g><title>neural_network.exe`ndarray::slice::SliceInfo&lt;array$&lt;enum2$&lt;ndarray::slice::SliceInfoElem&gt;,4&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::new_unchecked(enum2$&lt;ndarray::slice::SliceInfoElem&gt;[4], core::marker::PhantomData&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt; &gt;, core::marker::PhantomData&lt;ndarray::dimension::dim::Dim&lt;array$ (2,657 samples, 0.19%)</title><rect x="33.7926%" y="3301" width="0.1906%" height="15" fill="rgb(241,228,46)" fg:x="471148" fg:w="2657"/><text x="34.0426%" y="3311.50"></text></g><g><title>neural_network.exe`core::cmp::impls::impl$58::lt (75,551 samples, 5.42%)</title><rect x="47.1432%" y="3253" width="5.4188%" height="15" fill="rgb(223,209,38)" fg:x="657287" fg:w="75551"/><text x="47.3932%" y="3263.50">neural_..</text></g><g><title>neural_network.exe`core::iter::range::impl$6::next(core::ops::range::Range (170,453 samples, 12.23%)</title><rect x="41.5379%" y="3285" width="12.2255%" height="15" fill="rgb(236,164,45)" fg:x="579136" fg:w="170453"/><text x="41.7879%" y="3295.50">neural_network.exe..</text></g><g><title>neural_network.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (170,453 samples, 12.23%)</title><rect x="41.5379%" y="3269" width="12.2255%" height="15" fill="rgb(231,15,5)" fg:x="579136" fg:w="170453"/><text x="41.7879%" y="3279.50">neural_network.exe..</text></g><g><title>neural_network.exe`core::iter::range::impl$43::forward_unchecked (16,751 samples, 1.20%)</title><rect x="52.5620%" y="3253" width="1.2014%" height="15" fill="rgb(252,35,15)" fg:x="732838" fg:w="16751"/><text x="52.8120%" y="3263.50"></text></g><g><title>neural_network.exe`core::num::impl$11::unchecked_add (16,751 samples, 1.20%)</title><rect x="52.5620%" y="3237" width="1.2014%" height="15" fill="rgb(248,181,18)" fg:x="732838" fg:w="16751"/><text x="52.8120%" y="3247.50"></text></g><g><title>`0x7FF97E62CAFB (442 samples, 0.03%)</title><rect x="53.8212%" y="3173" width="0.0317%" height="15" fill="rgb(233,39,42)" fg:x="750394" fg:w="442"/><text x="54.0712%" y="3183.50"></text></g><g><title>`0x7FF97E62CB1A (473 samples, 0.03%)</title><rect x="53.8575%" y="3173" width="0.0339%" height="15" fill="rgb(238,110,33)" fg:x="750900" fg:w="473"/><text x="54.1075%" y="3183.50"></text></g><g><title>`0x7FF97E62CB3C (412 samples, 0.03%)</title><rect x="53.8979%" y="3173" width="0.0296%" height="15" fill="rgb(233,195,10)" fg:x="751464" fg:w="412"/><text x="54.1479%" y="3183.50"></text></g><g><title>`0x7FF97E62CB82 (301 samples, 0.02%)</title><rect x="53.9333%" y="3173" width="0.0216%" height="15" fill="rgb(254,105,3)" fg:x="751958" fg:w="301"/><text x="54.1833%" y="3183.50"></text></g><g><title>`0x7FF97E62CBA0 (154 samples, 0.01%)</title><rect x="53.9570%" y="3173" width="0.0110%" height="15" fill="rgb(221,225,9)" fg:x="752288" fg:w="154"/><text x="54.2070%" y="3183.50"></text></g><g><title>`0x7FF97E62D5E2 (405 samples, 0.03%)</title><rect x="54.0298%" y="3157" width="0.0290%" height="15" fill="rgb(224,227,45)" fg:x="753303" fg:w="405"/><text x="54.2798%" y="3167.50"></text></g><g><title>`0x7FF97E62D609 (162 samples, 0.01%)</title><rect x="54.0594%" y="3157" width="0.0116%" height="15" fill="rgb(229,198,43)" fg:x="753715" fg:w="162"/><text x="54.3094%" y="3167.50"></text></g><g><title>`0x7FF97E62D68A (703 samples, 0.05%)</title><rect x="54.0871%" y="3157" width="0.0504%" height="15" fill="rgb(206,209,35)" fg:x="754102" fg:w="703"/><text x="54.3371%" y="3167.50"></text></g><g><title>`0x7FF97E62D69C (200 samples, 0.01%)</title><rect x="54.1403%" y="3157" width="0.0143%" height="15" fill="rgb(245,195,53)" fg:x="754844" fg:w="200"/><text x="54.3903%" y="3167.50"></text></g><g><title>`0x7FF97E62D6B9 (226 samples, 0.02%)</title><rect x="54.1573%" y="3157" width="0.0162%" height="15" fill="rgb(240,92,26)" fg:x="755081" fg:w="226"/><text x="54.4073%" y="3167.50"></text></g><g><title>`0x7FF97E62D6DB (250 samples, 0.02%)</title><rect x="54.1750%" y="3157" width="0.0179%" height="15" fill="rgb(207,40,23)" fg:x="755327" fg:w="250"/><text x="54.4250%" y="3167.50"></text></g><g><title>`0x7FF97E62D6FC (445 samples, 0.03%)</title><rect x="54.1933%" y="3157" width="0.0319%" height="15" fill="rgb(223,111,35)" fg:x="755582" fg:w="445"/><text x="54.4433%" y="3167.50"></text></g><g><title>`0x7FF97E62D71B (222 samples, 0.02%)</title><rect x="54.2331%" y="3157" width="0.0159%" height="15" fill="rgb(229,147,28)" fg:x="756138" fg:w="222"/><text x="54.4831%" y="3167.50"></text></g><g><title>`0x7FF97E696E00 (317 samples, 0.02%)</title><rect x="54.2822%" y="3141" width="0.0227%" height="15" fill="rgb(211,29,28)" fg:x="756822" fg:w="317"/><text x="54.5322%" y="3151.50"></text></g><g><title>`0x7FF97E696E23 (5,697 samples, 0.41%)</title><rect x="54.3057%" y="3141" width="0.4086%" height="15" fill="rgb(228,72,33)" fg:x="757149" fg:w="5697"/><text x="54.5557%" y="3151.50"></text></g><g><title>`0x7FF97E696E2C (498 samples, 0.04%)</title><rect x="54.7143%" y="3141" width="0.0357%" height="15" fill="rgb(205,214,31)" fg:x="762847" fg:w="498"/><text x="54.9643%" y="3151.50"></text></g><g><title>`0x7FF97E696ECF (182 samples, 0.01%)</title><rect x="54.7525%" y="3141" width="0.0131%" height="15" fill="rgb(224,111,15)" fg:x="763379" fg:w="182"/><text x="55.0025%" y="3151.50"></text></g><g><title>`0x7FF97E696EDB (505 samples, 0.04%)</title><rect x="54.7655%" y="3141" width="0.0362%" height="15" fill="rgb(253,21,26)" fg:x="763561" fg:w="505"/><text x="55.0155%" y="3151.50"></text></g><g><title>`0x7FF97E62D7B9 (7,435 samples, 0.53%)</title><rect x="54.2712%" y="3157" width="0.5333%" height="15" fill="rgb(245,139,43)" fg:x="756668" fg:w="7435"/><text x="54.5212%" y="3167.50"></text></g><g><title>`0x7FF97E62CC9A (11,334 samples, 0.81%)</title><rect x="53.9958%" y="3173" width="0.8129%" height="15" fill="rgb(252,170,7)" fg:x="752829" fg:w="11334"/><text x="54.2458%" y="3183.50"></text></g><g><title>`0x7FF97E62CD03 (157 samples, 0.01%)</title><rect x="54.8339%" y="3173" width="0.0113%" height="15" fill="rgb(231,118,14)" fg:x="764514" fg:w="157"/><text x="55.0839%" y="3183.50"></text></g><g><title>neural_network.exe`__rust_alloc_zeroed (566 samples, 0.04%)</title><rect x="54.8452%" y="3173" width="0.0406%" height="15" fill="rgb(238,83,0)" fg:x="764671" fg:w="566"/><text x="55.0952%" y="3183.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::allocate_zeroed (397 samples, 0.03%)</title><rect x="54.8858%" y="3173" width="0.0285%" height="15" fill="rgb(221,39,39)" fg:x="765237" fg:w="397"/><text x="55.1358%" y="3183.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::alloc_impl (397 samples, 0.03%)</title><rect x="54.8858%" y="3157" width="0.0285%" height="15" fill="rgb(222,119,46)" fg:x="765237" fg:w="397"/><text x="55.1358%" y="3167.50"></text></g><g><title>neural_network.exe`alloc::alloc::alloc_zeroed (397 samples, 0.03%)</title><rect x="54.8858%" y="3141" width="0.0285%" height="15" fill="rgb(222,165,49)" fg:x="765237" fg:w="397"/><text x="55.1358%" y="3151.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::layout_array (226 samples, 0.02%)</title><rect x="54.9142%" y="3173" width="0.0162%" height="15" fill="rgb(219,113,52)" fg:x="765634" fg:w="226"/><text x="55.1642%" y="3183.50"></text></g><g><title>neural_network.exe`core::alloc::layout::Layout::repeat (226 samples, 0.02%)</title><rect x="54.9142%" y="3157" width="0.0162%" height="15" fill="rgb(214,7,15)" fg:x="765634" fg:w="226"/><text x="55.1642%" y="3167.50"></text></g><g><title>neural_network.exe`core::num::impl$11::checked_mul (226 samples, 0.02%)</title><rect x="54.9142%" y="3141" width="0.0162%" height="15" fill="rgb(235,32,4)" fg:x="765634" fg:w="226"/><text x="55.1642%" y="3151.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_alloc_zeroed (769 samples, 0.06%)</title><rect x="54.9304%" y="3173" width="0.0552%" height="15" fill="rgb(238,90,54)" fg:x="765860" fg:w="769"/><text x="55.1804%" y="3183.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::alloc_zeroed (284 samples, 0.02%)</title><rect x="54.9652%" y="3157" width="0.0204%" height="15" fill="rgb(213,208,19)" fg:x="766345" fg:w="284"/><text x="55.2152%" y="3167.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::allocate (284 samples, 0.02%)</title><rect x="54.9652%" y="3141" width="0.0204%" height="15" fill="rgb(233,156,4)" fg:x="766345" fg:w="284"/><text x="55.2152%" y="3151.50"></text></g><g><title>neural_network.exe`alloc::vec::from_elem (17,558 samples, 1.26%)</title><rect x="53.7634%" y="3253" width="1.2593%" height="15" fill="rgb(207,194,5)" fg:x="749589" fg:w="17558"/><text x="54.0134%" y="3263.50"></text></g><g><title>neural_network.exe`alloc::vec::spec_from_elem::impl$1::from_elem (17,558 samples, 1.26%)</title><rect x="53.7634%" y="3237" width="1.2593%" height="15" fill="rgb(206,111,30)" fg:x="749589" fg:w="17558"/><text x="54.0134%" y="3247.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f32,alloc::alloc::Global&gt;::with_capacity_zeroed_in (17,558 samples, 1.26%)</title><rect x="53.7634%" y="3221" width="1.2593%" height="15" fill="rgb(243,70,54)" fg:x="749589" fg:w="17558"/><text x="54.0134%" y="3231.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_zeroed_in (17,558 samples, 1.26%)</title><rect x="53.7634%" y="3205" width="1.2593%" height="15" fill="rgb(242,28,8)" fg:x="749589" fg:w="17558"/><text x="54.0134%" y="3215.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (17,558 samples, 1.26%)</title><rect x="53.7634%" y="3189" width="1.2593%" height="15" fill="rgb(219,106,18)" fg:x="749589" fg:w="17558"/><text x="54.0134%" y="3199.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::process_heap_alloc (518 samples, 0.04%)</title><rect x="54.9856%" y="3173" width="0.0372%" height="15" fill="rgb(244,222,10)" fg:x="766629" fg:w="518"/><text x="55.2356%" y="3183.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_shape_vec_unchecked(ndarray::shape_builder::Shape&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, alloc::vec::Vec (207 samples, 0.01%)</title><rect x="55.0228%" y="3253" width="0.0148%" height="15" fill="rgb(236,179,52)" fg:x="767147" fg:w="207"/><text x="55.2728%" y="3263.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_vec_dim_stride_unchecked(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;, ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;, alloc::vec::Vec (207 samples, 0.01%)</title><rect x="55.0228%" y="3237" width="0.0148%" height="15" fill="rgb(213,23,39)" fg:x="767147" fg:w="207"/><text x="55.2728%" y="3247.50"></text></g><g><title>neural_network.exe`ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$ (207 samples, 0.01%)</title><rect x="55.0228%" y="3221" width="0.0148%" height="15" fill="rgb(238,48,10)" fg:x="767147" fg:w="207"/><text x="55.2728%" y="3231.50"></text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$1::fold(core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;usize&gt;,core::slice::iter::Iter&lt;usize&gt; &gt;, long long, ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$ (207 samples, 0.01%)</title><rect x="55.0228%" y="3205" width="0.0148%" height="15" fill="rgb(251,196,23)" fg:x="767147" fg:w="207"/><text x="55.2728%" y="3215.50"></text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$4::fold(core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;usize&gt;,core::slice::iter::Iter&lt;usize&gt; &gt;, long long, ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$ (207 samples, 0.01%)</title><rect x="55.0228%" y="3189" width="0.0148%" height="15" fill="rgb(250,152,24)" fg:x="767147" fg:w="207"/><text x="55.2728%" y="3199.50"></text></g><g><title>neural_network.exe`ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure$0(ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, long long, tuple$&lt;ref$&lt;usize&gt;,ref$ (207 samples, 0.01%)</title><rect x="55.0228%" y="3173" width="0.0148%" height="15" fill="rgb(209,150,17)" fg:x="767147" fg:w="207"/><text x="55.2728%" y="3183.50"></text></g><g><title>neural_network.exe`core::iter::adapters::filter::impl$3::try_fold(core::iter::adapters::filter::Filter&lt;core::slice::iter::Iter&lt;usize&gt;,ndarray::dimension::size_of_shape_checked::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;*, unsigned long long, ndarray::dimension::size_of_shape_checked::closure_env$1&lt;ndarray::dimension::dim::Dim&lt;array$ (193 samples, 0.01%)</title><rect x="55.0381%" y="3237" width="0.0138%" height="15" fill="rgb(234,202,34)" fg:x="767361" fg:w="193"/><text x="55.2881%" y="3247.50"></text></g><g><title>neural_network.exe`core::iter::traits::iterator::Iterator::try_fold(core::slice::iter::Iter&lt;usize&gt;*, unsigned long long, core::iter::adapters::filter::filter_try_fold::closure_env$0&lt;ref$&lt;usize&gt;,usize,enum2$&lt;core::option::Option&lt;usize&gt; &gt;,ndarray::dimension::size_of_shape_checked::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::dimension::size_of_shape_checked::closure_env$1&lt;ndarray::dimension::dim::Dim&lt;array$ (193 samples, 0.01%)</title><rect x="55.0381%" y="3221" width="0.0138%" height="15" fill="rgb(253,148,53)" fg:x="767361" fg:w="193"/><text x="55.2881%" y="3231.50"></text></g><g><title>neural_network.exe`neural_network::layers::convolutional_layer::calculate_filter_gradients(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (294,323 samples, 21.11%)</title><rect x="33.9831%" y="3301" width="21.1100%" height="15" fill="rgb(218,129,16)" fg:x="473805" fg:w="294323"/><text x="34.2331%" y="3311.50">neural_network.exe`neural_network..</text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::zeros(tuple$ (18,539 samples, 1.33%)</title><rect x="53.7634%" y="3285" width="1.3297%" height="15" fill="rgb(216,85,19)" fg:x="749589" fg:w="18539"/><text x="54.0134%" y="3295.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_elem(tuple$ (18,539 samples, 1.33%)</title><rect x="53.7634%" y="3269" width="1.3297%" height="15" fill="rgb(235,228,7)" fg:x="749589" fg:w="18539"/><text x="54.0134%" y="3279.50"></text></g><g><title>neural_network.exe`ndarray::dimension::size_of_shape_checked(ndarray::dimension::dim::Dim&lt;array$ (774 samples, 0.06%)</title><rect x="55.0376%" y="3253" width="0.0555%" height="15" fill="rgb(245,175,0)" fg:x="767354" fg:w="774"/><text x="55.2876%" y="3263.50"></text></g><g><title>neural_network.exe`ndarray::dimension::dimension_trait::impl$2::size(ndarray::dimension::dim::Dim&lt;array$ (574 samples, 0.04%)</title><rect x="55.0519%" y="3237" width="0.0412%" height="15" fill="rgb(208,168,36)" fg:x="767554" fg:w="574"/><text x="55.3019%" y="3247.50"></text></g><g><title>neural_network.exe`core::cmp::impls::impl$70::lt (22,861 samples, 1.64%)</title><rect x="68.2777%" y="3253" width="1.6397%" height="15" fill="rgb(246,171,24)" fg:x="951952" fg:w="22861"/><text x="68.5277%" y="3263.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$6::next(core::ops::range::Range (63,254 samples, 4.54%)</title><rect x="65.4313%" y="3285" width="4.5368%" height="15" fill="rgb(215,142,24)" fg:x="912267" fg:w="63254"/><text x="65.6813%" y="3295.50">neura..</text></g><g><title>neural_network.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (63,254 samples, 4.54%)</title><rect x="65.4313%" y="3269" width="4.5368%" height="15" fill="rgb(250,187,7)" fg:x="912267" fg:w="63254"/><text x="65.6813%" y="3279.50">neura..</text></g><g><title>neural_network.exe`core::iter::range::impl$44::forward_unchecked (708 samples, 0.05%)</title><rect x="69.9174%" y="3253" width="0.0508%" height="15" fill="rgb(228,66,33)" fg:x="974813" fg:w="708"/><text x="70.1674%" y="3263.50"></text></g><g><title>neural_network.exe`core::num::impl$5::checked_add_unsigned (708 samples, 0.05%)</title><rect x="69.9174%" y="3237" width="0.0508%" height="15" fill="rgb(234,215,21)" fg:x="974813" fg:w="708"/><text x="70.1674%" y="3247.50"></text></g><g><title>neural_network.exe`core::num::impl$5::overflowing_add_unsigned (708 samples, 0.05%)</title><rect x="69.9174%" y="3221" width="0.0508%" height="15" fill="rgb(222,191,20)" fg:x="974813" fg:w="708"/><text x="70.1674%" y="3231.50"></text></g><g><title>neural_network.exe`core::num::impl$5::overflowing_add (708 samples, 0.05%)</title><rect x="69.9174%" y="3205" width="0.0508%" height="15" fill="rgb(245,79,54)" fg:x="974813" fg:w="708"/><text x="70.1674%" y="3215.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::dim (4,587 samples, 0.33%)</title><rect x="69.9681%" y="3285" width="0.3290%" height="15" fill="rgb(240,10,37)" fg:x="975521" fg:w="4587"/><text x="70.2181%" y="3295.50"></text></g><g><title>neural_network.exe`ndarray::dimension::dim::impl$4::clone(ndarray::dimension::dim::Dim&lt;array$ (4,587 samples, 0.33%)</title><rect x="69.9681%" y="3269" width="0.3290%" height="15" fill="rgb(214,192,32)" fg:x="975521" fg:w="4587"/><text x="70.2181%" y="3279.50"></text></g><g><title>neural_network.exe`core::array::impl$20::clone (4,587 samples, 0.33%)</title><rect x="69.9681%" y="3253" width="0.3290%" height="15" fill="rgb(209,36,54)" fg:x="975521" fg:w="4587"/><text x="70.2181%" y="3263.50"></text></g><g><title>neural_network.exe`core::array::impl$22::clone (4,587 samples, 0.33%)</title><rect x="69.9681%" y="3237" width="0.3290%" height="15" fill="rgb(220,10,11)" fg:x="975521" fg:w="4587"/><text x="70.2181%" y="3247.50"></text></g><g><title>`0x7FF97E62CAF0 (315 samples, 0.02%)</title><rect x="70.3236%" y="3173" width="0.0226%" height="15" fill="rgb(221,106,17)" fg:x="980477" fg:w="315"/><text x="70.5736%" y="3183.50"></text></g><g><title>`0x7FF97E62CAF5 (255 samples, 0.02%)</title><rect x="70.3462%" y="3173" width="0.0183%" height="15" fill="rgb(251,142,44)" fg:x="980792" fg:w="255"/><text x="70.5962%" y="3183.50"></text></g><g><title>`0x7FF97E62CB07 (232 samples, 0.02%)</title><rect x="70.3691%" y="3173" width="0.0166%" height="15" fill="rgb(238,13,15)" fg:x="981111" fg:w="232"/><text x="70.6191%" y="3183.50"></text></g><g><title>`0x7FF97E62CB0A (187 samples, 0.01%)</title><rect x="70.3857%" y="3173" width="0.0134%" height="15" fill="rgb(208,107,27)" fg:x="981343" fg:w="187"/><text x="70.6357%" y="3183.50"></text></g><g><title>`0x7FF97E62CB2E (150 samples, 0.01%)</title><rect x="70.4026%" y="3173" width="0.0108%" height="15" fill="rgb(205,136,37)" fg:x="981579" fg:w="150"/><text x="70.6526%" y="3183.50"></text></g><g><title>`0x7FF97E62CB33 (149 samples, 0.01%)</title><rect x="70.4134%" y="3173" width="0.0107%" height="15" fill="rgb(250,205,27)" fg:x="981729" fg:w="149"/><text x="70.6634%" y="3183.50"></text></g><g><title>`0x7FF97E62CB92 (205 samples, 0.01%)</title><rect x="70.4462%" y="3173" width="0.0147%" height="15" fill="rgb(210,80,43)" fg:x="982186" fg:w="205"/><text x="70.6962%" y="3183.50"></text></g><g><title>`0x7FF97E62CBBC (147 samples, 0.01%)</title><rect x="70.4618%" y="3173" width="0.0105%" height="15" fill="rgb(247,160,36)" fg:x="982404" fg:w="147"/><text x="70.7118%" y="3183.50"></text></g><g><title>`0x7FF97E62D5E2 (5,798 samples, 0.42%)</title><rect x="70.5028%" y="3157" width="0.4159%" height="15" fill="rgb(234,13,49)" fg:x="982975" fg:w="5798"/><text x="70.7528%" y="3167.50"></text></g><g><title>`0x7FF97E62D609 (256 samples, 0.02%)</title><rect x="70.9191%" y="3157" width="0.0184%" height="15" fill="rgb(234,122,0)" fg:x="988780" fg:w="256"/><text x="71.1691%" y="3167.50"></text></g><g><title>`0x7FF97E62D657 (158 samples, 0.01%)</title><rect x="70.9498%" y="3157" width="0.0113%" height="15" fill="rgb(207,146,38)" fg:x="989208" fg:w="158"/><text x="71.1998%" y="3167.50"></text></g><g><title>`0x7FF97E62D681 (190 samples, 0.01%)</title><rect x="70.9632%" y="3157" width="0.0136%" height="15" fill="rgb(207,177,25)" fg:x="989394" fg:w="190"/><text x="71.2132%" y="3167.50"></text></g><g><title>`0x7FF97E68F871 (195 samples, 0.01%)</title><rect x="70.9789%" y="3141" width="0.0140%" height="15" fill="rgb(211,178,42)" fg:x="989614" fg:w="195"/><text x="71.2289%" y="3151.50"></text></g><g><title>`0x7FF97E68F8DE (184 samples, 0.01%)</title><rect x="70.9947%" y="3141" width="0.0132%" height="15" fill="rgb(230,69,54)" fg:x="989834" fg:w="184"/><text x="71.2447%" y="3151.50"></text></g><g><title>`0x7FF97E62D68A (877 samples, 0.06%)</title><rect x="70.9768%" y="3157" width="0.0629%" height="15" fill="rgb(214,135,41)" fg:x="989584" fg:w="877"/><text x="71.2268%" y="3167.50"></text></g><g><title>`0x7FF97E696E00 (167 samples, 0.01%)</title><rect x="71.0810%" y="3141" width="0.0120%" height="15" fill="rgb(237,67,25)" fg:x="991037" fg:w="167"/><text x="71.3310%" y="3151.50"></text></g><g><title>`0x7FF97E696E23 (2,144 samples, 0.15%)</title><rect x="71.0934%" y="3141" width="0.1538%" height="15" fill="rgb(222,189,50)" fg:x="991210" fg:w="2144"/><text x="71.3434%" y="3151.50"></text></g><g><title>`0x7FF97E696E2C (262 samples, 0.02%)</title><rect x="71.2472%" y="3141" width="0.0188%" height="15" fill="rgb(245,148,34)" fg:x="993354" fg:w="262"/><text x="71.4972%" y="3151.50"></text></g><g><title>`0x7FF97E696E6D (268 samples, 0.02%)</title><rect x="71.2714%" y="3141" width="0.0192%" height="15" fill="rgb(222,29,6)" fg:x="993691" fg:w="268"/><text x="71.5214%" y="3151.50"></text></g><g><title>`0x7FF97E62D7B9 (3,173 samples, 0.23%)</title><rect x="71.0809%" y="3157" width="0.2276%" height="15" fill="rgb(221,189,43)" fg:x="991036" fg:w="3173"/><text x="71.3309%" y="3167.50"></text></g><g><title>`0x7FF97E62CC9A (11,421 samples, 0.82%)</title><rect x="70.4917%" y="3173" width="0.8192%" height="15" fill="rgb(207,36,27)" fg:x="982820" fg:w="11421"/><text x="70.7417%" y="3183.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::layout_array (572 samples, 0.04%)</title><rect x="71.3363%" y="3173" width="0.0410%" height="15" fill="rgb(217,90,24)" fg:x="994596" fg:w="572"/><text x="71.5863%" y="3183.50"></text></g><g><title>neural_network.exe`core::alloc::layout::Layout::repeat (572 samples, 0.04%)</title><rect x="71.3363%" y="3157" width="0.0410%" height="15" fill="rgb(224,66,35)" fg:x="994596" fg:w="572"/><text x="71.5863%" y="3167.50"></text></g><g><title>neural_network.exe`core::num::impl$11::checked_mul (572 samples, 0.04%)</title><rect x="71.3363%" y="3141" width="0.0410%" height="15" fill="rgb(221,13,50)" fg:x="994596" fg:w="572"/><text x="71.5863%" y="3151.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_alloc_zeroed (1,399 samples, 0.10%)</title><rect x="71.3773%" y="3173" width="0.1003%" height="15" fill="rgb(236,68,49)" fg:x="995168" fg:w="1399"/><text x="71.6273%" y="3183.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::alloc_zeroed (734 samples, 0.05%)</title><rect x="71.4250%" y="3157" width="0.0526%" height="15" fill="rgb(229,146,28)" fg:x="995833" fg:w="734"/><text x="71.6750%" y="3167.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::allocate (734 samples, 0.05%)</title><rect x="71.4250%" y="3141" width="0.0526%" height="15" fill="rgb(225,31,38)" fg:x="995833" fg:w="734"/><text x="71.6750%" y="3151.50"></text></g><g><title>neural_network.exe`alloc::vec::from_elem (16,548 samples, 1.19%)</title><rect x="70.2971%" y="3253" width="1.1869%" height="15" fill="rgb(250,208,3)" fg:x="980108" fg:w="16548"/><text x="70.5471%" y="3263.50"></text></g><g><title>neural_network.exe`alloc::vec::spec_from_elem::impl$1::from_elem (16,548 samples, 1.19%)</title><rect x="70.2971%" y="3237" width="1.1869%" height="15" fill="rgb(246,54,23)" fg:x="980108" fg:w="16548"/><text x="70.5471%" y="3247.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f32,alloc::alloc::Global&gt;::with_capacity_zeroed_in (16,548 samples, 1.19%)</title><rect x="70.2971%" y="3221" width="1.1869%" height="15" fill="rgb(243,76,11)" fg:x="980108" fg:w="16548"/><text x="70.5471%" y="3231.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_zeroed_in (16,548 samples, 1.19%)</title><rect x="70.2971%" y="3205" width="1.1869%" height="15" fill="rgb(245,21,50)" fg:x="980108" fg:w="16548"/><text x="70.5471%" y="3215.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (16,548 samples, 1.19%)</title><rect x="70.2971%" y="3189" width="1.1869%" height="15" fill="rgb(228,9,43)" fg:x="980108" fg:w="16548"/><text x="70.5471%" y="3199.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::zeros(tuple$ (17,497 samples, 1.25%)</title><rect x="70.2971%" y="3285" width="1.2550%" height="15" fill="rgb(208,100,47)" fg:x="980108" fg:w="17497"/><text x="70.5471%" y="3295.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_elem(tuple$ (17,497 samples, 1.25%)</title><rect x="70.2971%" y="3269" width="1.2550%" height="15" fill="rgb(232,26,8)" fg:x="980108" fg:w="17497"/><text x="70.5471%" y="3279.50"></text></g><g><title>neural_network.exe`ndarray::dimension::size_of_shape_checked(ndarray::dimension::dim::Dim&lt;array$ (917 samples, 0.07%)</title><rect x="71.4863%" y="3253" width="0.0658%" height="15" fill="rgb(216,166,38)" fg:x="996688" fg:w="917"/><text x="71.7363%" y="3263.50"></text></g><g><title>neural_network.exe`ndarray::dimension::dimension_trait::impl$2::size(ndarray::dimension::dim::Dim&lt;array$ (804 samples, 0.06%)</title><rect x="71.4944%" y="3237" width="0.0577%" height="15" fill="rgb(251,202,51)" fg:x="996801" fg:w="804"/><text x="71.7444%" y="3247.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (691,028 samples, 49.56%)</title><rect x="23.7248%" y="3365" width="49.5632%" height="15" fill="rgb(254,216,34)" fg:x="330780" fg:w="691028"/><text x="23.9748%" y="3375.50">neural_network.exe`core::ptr::drop_in_place(ndarray::ArrayBase&lt;ndarray::data_repr:..</text></g><g><title>neural_network.exe`core::ptr::drop_in_place(ndarray::data_repr::OwnedRepr (691,028 samples, 49.56%)</title><rect x="23.7248%" y="3349" width="49.5632%" height="15" fill="rgb(251,32,27)" fg:x="330780" fg:w="691028"/><text x="23.9748%" y="3359.50">neural_network.exe`core::ptr::drop_in_place(ndarray::data_repr::OwnedRepr</text></g><g><title>neural_network.exe`ndarray::data_repr::impl$2::drop(ndarray::data_repr::OwnedRepr (691,028 samples, 49.56%)</title><rect x="23.7248%" y="3333" width="49.5632%" height="15" fill="rgb(208,127,28)" fg:x="330780" fg:w="691028"/><text x="23.9748%" y="3343.50">neural_network.exe`ndarray::data_repr::impl$2::drop(ndarray::data_repr::OwnedRepr</text></g><g><title>neural_network.exe`neural_network::layers::convolutional_layer::ConvolutionalLayer::backpropagate(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt; &gt;*, ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt; &gt;*, ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (690,684 samples, 49.54%)</title><rect x="23.7495%" y="3317" width="49.5385%" height="15" fill="rgb(224,137,22)" fg:x="331124" fg:w="690684"/><text x="23.9995%" y="3327.50">neural_network.exe`neural_network::layers::convolutional_layer::ConvolutionalLaye..</text></g><g><title>neural_network.exe`neural_network::layers::convolutional_layer::convolve_and_slide(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (253,680 samples, 18.19%)</title><rect x="55.0931%" y="3301" width="18.1949%" height="15" fill="rgb(254,70,32)" fg:x="768128" fg:w="253680"/><text x="55.3431%" y="3311.50">neural_network.exe`neural_ne..</text></g><g><title>neural_network.exe`ndarray::arraytraits::impl$0::index(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (24,203 samples, 1.74%)</title><rect x="71.5521%" y="3285" width="1.7359%" height="15" fill="rgb(229,75,37)" fg:x="997605" fg:w="24203"/><text x="71.8021%" y="3295.50"></text></g><g><title>neural_network.exe`ndarray::dimension::ndindex::impl$16::index_checked(unsigned long long[2]*, ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$ (24,203 samples, 1.74%)</title><rect x="71.5521%" y="3269" width="1.7359%" height="15" fill="rgb(252,64,23)" fg:x="997605" fg:w="24203"/><text x="71.8021%" y="3279.50"></text></g><g><title>neural_network.exe`ndarray::dimension::dimension_trait::impl$2::stride_offset_checked(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$ (24,203 samples, 1.74%)</title><rect x="71.5521%" y="3253" width="1.7359%" height="15" fill="rgb(232,162,48)" fg:x="997605" fg:w="24203"/><text x="71.8021%" y="3263.50"></text></g><g><title>`0x7FF968D511FB (226 samples, 0.02%)</title><rect x="73.2880%" y="3333" width="0.0162%" height="15" fill="rgb(246,160,12)" fg:x="1021808" fg:w="226"/><text x="73.5380%" y="3343.50"></text></g><g><title>neural_network.exe`ndarray::impl_clone::impl$0::clone(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (230 samples, 0.02%)</title><rect x="73.2880%" y="3365" width="0.0165%" height="15" fill="rgb(247,166,0)" fg:x="1021808" fg:w="230"/><text x="73.5380%" y="3375.50"></text></g><g><title>neural_network.exe`ndarray::data_traits::impl$14::clone_with_ptr(ndarray::data_repr::OwnedRepr&lt;f32&gt;*, core::ptr::non_null::NonNull (230 samples, 0.02%)</title><rect x="73.2880%" y="3349" width="0.0165%" height="15" fill="rgb(249,219,21)" fg:x="1021808" fg:w="230"/><text x="73.5380%" y="3359.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$6::next(core::ops::range::Range (324 samples, 0.02%)</title><rect x="73.3123%" y="3349" width="0.0232%" height="15" fill="rgb(205,209,3)" fg:x="1022146" fg:w="324"/><text x="73.5623%" y="3359.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (324 samples, 0.02%)</title><rect x="73.3123%" y="3333" width="0.0232%" height="15" fill="rgb(243,44,1)" fg:x="1022146" fg:w="324"/><text x="73.5623%" y="3343.50"></text></g><g><title>neural_network.exe`core::cmp::impls::impl$58::lt (324 samples, 0.02%)</title><rect x="73.3123%" y="3317" width="0.0232%" height="15" fill="rgb(206,159,16)" fg:x="1022146" fg:w="324"/><text x="73.5623%" y="3327.50"></text></g><g><title>`0x7FF97E62C324 (220 samples, 0.02%)</title><rect x="73.3355%" y="3285" width="0.0158%" height="15" fill="rgb(244,77,30)" fg:x="1022470" fg:w="220"/><text x="73.5855%" y="3295.50"></text></g><g><title>`0x7FF97E62A10C (220 samples, 0.02%)</title><rect x="73.3355%" y="3269" width="0.0158%" height="15" fill="rgb(218,69,12)" fg:x="1022470" fg:w="220"/><text x="73.5855%" y="3279.50"></text></g><g><title>`0x7FF97E636AC6 (220 samples, 0.02%)</title><rect x="73.3355%" y="3253" width="0.0158%" height="15" fill="rgb(212,87,7)" fg:x="1022470" fg:w="220"/><text x="73.5855%" y="3263.50"></text></g><g><title>`0x7FF97E690364 (220 samples, 0.02%)</title><rect x="73.3355%" y="3237" width="0.0158%" height="15" fill="rgb(245,114,25)" fg:x="1022470" fg:w="220"/><text x="73.5855%" y="3247.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (221 samples, 0.02%)</title><rect x="73.3355%" y="3349" width="0.0159%" height="15" fill="rgb(210,61,42)" fg:x="1022470" fg:w="221"/><text x="73.5855%" y="3359.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(ndarray::data_repr::OwnedRepr (221 samples, 0.02%)</title><rect x="73.3355%" y="3333" width="0.0159%" height="15" fill="rgb(211,52,33)" fg:x="1022470" fg:w="221"/><text x="73.5855%" y="3343.50"></text></g><g><title>neural_network.exe`ndarray::data_repr::impl$2::drop(ndarray::data_repr::OwnedRepr (221 samples, 0.02%)</title><rect x="73.3355%" y="3317" width="0.0159%" height="15" fill="rgb(234,58,33)" fg:x="1022470" fg:w="221"/><text x="73.5855%" y="3327.50"></text></g><g><title>`0x7FF97E62AFF1 (221 samples, 0.02%)</title><rect x="73.3355%" y="3301" width="0.0159%" height="15" fill="rgb(220,115,36)" fg:x="1022470" fg:w="221"/><text x="73.5855%" y="3311.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping (848 samples, 0.06%)</title><rect x="73.3576%" y="3253" width="0.0608%" height="15" fill="rgb(243,153,54)" fg:x="1022778" fg:w="848"/><text x="73.6076%" y="3263.50"></text></g><g><title>neural_network.exe`matrixmultiply::packing::pack_avx2&lt;matrixmultiply::kernel::U8,f32&gt;(unsigned long long, unsigned long long, ref_mut$&lt;slice2$ (904 samples, 0.06%)</title><rect x="73.3548%" y="3285" width="0.0648%" height="15" fill="rgb(251,47,18)" fg:x="1022739" fg:w="904"/><text x="73.6048%" y="3295.50"></text></g><g><title>neural_network.exe`matrixmultiply::packing::pack_impl(unsigned long long, unsigned long long, ref_mut$&lt;slice2$ (904 samples, 0.06%)</title><rect x="73.3548%" y="3269" width="0.0648%" height="15" fill="rgb(242,102,42)" fg:x="1022739" fg:w="904"/><text x="73.6048%" y="3279.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping (320 samples, 0.02%)</title><rect x="73.4206%" y="3205" width="0.0230%" height="15" fill="rgb(234,31,38)" fg:x="1023656" fg:w="320"/><text x="73.6706%" y="3215.50"></text></g><g><title>neural_network.exe`matrixmultiply::gemm::gemm_loop::closure$1(matrixmultiply::gemm::gemm_loop::closure_env$1&lt;matrixmultiply::sgemm_kernel::KernelFmaAvx2&gt;*, tuple$&lt;&gt;*, matrixmultiply::ptr::Ptr&lt;ptr_mut$ (341 samples, 0.02%)</title><rect x="73.4196%" y="3269" width="0.0245%" height="15" fill="rgb(221,117,51)" fg:x="1023643" fg:w="341"/><text x="73.6696%" y="3279.50"></text></g><g><title>neural_network.exe`rawpointer::PointerExt::stride_offset(matrixmultiply::ptr::Ptr&lt;ptr_mut$ (341 samples, 0.02%)</title><rect x="73.4196%" y="3253" width="0.0245%" height="15" fill="rgb(212,20,18)" fg:x="1023643" fg:w="341"/><text x="73.6696%" y="3263.50"></text></g><g><title>neural_network.exe`matrixmultiply::packing::pack_avx2&lt;matrixmultiply::kernel::U8,f32&gt;(unsigned long long, unsigned long long, ref_mut$&lt;slice2$ (341 samples, 0.02%)</title><rect x="73.4196%" y="3237" width="0.0245%" height="15" fill="rgb(245,133,36)" fg:x="1023643" fg:w="341"/><text x="73.6696%" y="3247.50"></text></g><g><title>neural_network.exe`matrixmultiply::packing::pack_impl(unsigned long long, unsigned long long, ref_mut$&lt;slice2$ (341 samples, 0.02%)</title><rect x="73.4196%" y="3221" width="0.0245%" height="15" fill="rgb(212,6,19)" fg:x="1023643" fg:w="341"/><text x="73.6696%" y="3231.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_load_ps (1,332 samples, 0.10%)</title><rect x="73.4566%" y="3173" width="0.0955%" height="15" fill="rgb(218,1,36)" fg:x="1024158" fg:w="1332"/><text x="73.7066%" y="3183.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_movehdup_ps (326 samples, 0.02%)</title><rect x="73.5535%" y="3173" width="0.0234%" height="15" fill="rgb(246,84,54)" fg:x="1025510" fg:w="326"/><text x="73.8035%" y="3183.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_moveldup_ps (1,138 samples, 0.08%)</title><rect x="73.5769%" y="3173" width="0.0816%" height="15" fill="rgb(242,110,6)" fg:x="1025836" fg:w="1138"/><text x="73.8269%" y="3183.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_permute2f128_ps (6,188 samples, 0.44%)</title><rect x="73.6617%" y="3173" width="0.4438%" height="15" fill="rgb(214,47,5)" fg:x="1027018" fg:w="6188"/><text x="73.9117%" y="3183.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_permute_ps (2,002 samples, 0.14%)</title><rect x="74.1055%" y="3173" width="0.1436%" height="15" fill="rgb(218,159,25)" fg:x="1033206" fg:w="2002"/><text x="74.3555%" y="3183.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_storeu_ps (736 samples, 0.05%)</title><rect x="74.2512%" y="3173" width="0.0528%" height="15" fill="rgb(215,211,28)" fg:x="1035237" fg:w="736"/><text x="74.5012%" y="3183.50"></text></g><g><title>neural_network.exe`core::ptr::mut_ptr::impl$0::write_unaligned (736 samples, 0.05%)</title><rect x="74.2512%" y="3157" width="0.0528%" height="15" fill="rgb(238,59,32)" fg:x="1035237" fg:w="736"/><text x="74.5012%" y="3167.50"></text></g><g><title>neural_network.exe`core::ptr::write_unaligned (736 samples, 0.05%)</title><rect x="74.2512%" y="3141" width="0.0528%" height="15" fill="rgb(226,82,3)" fg:x="1035237" fg:w="736"/><text x="74.5012%" y="3151.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping (736 samples, 0.05%)</title><rect x="74.2512%" y="3125" width="0.0528%" height="15" fill="rgb(240,164,32)" fg:x="1035237" fg:w="736"/><text x="74.5012%" y="3135.50"></text></g><g><title>neural_network.exe`matrixmultiply::sgemm_kernel::impl$2::kernel (14,429 samples, 1.03%)</title><rect x="73.4455%" y="3221" width="1.0349%" height="15" fill="rgb(232,46,7)" fg:x="1024004" fg:w="14429"/><text x="73.6955%" y="3231.50"></text></g><g><title>neural_network.exe`matrixmultiply::sgemm_kernel::kernel_target_fma (14,414 samples, 1.03%)</title><rect x="73.4466%" y="3205" width="1.0338%" height="15" fill="rgb(229,129,53)" fg:x="1024019" fg:w="14414"/><text x="73.6966%" y="3215.50"></text></g><g><title>neural_network.exe`matrixmultiply::sgemm_kernel::kernel_x86_avx (14,336 samples, 1.03%)</title><rect x="73.4522%" y="3189" width="1.0282%" height="15" fill="rgb(234,188,29)" fg:x="1024097" fg:w="14336"/><text x="73.7022%" y="3199.50"></text></g><g><title>neural_network.exe`matrixmultiply::x86::impl$1::multiply_add (2,371 samples, 0.17%)</title><rect x="74.3104%" y="3173" width="0.1701%" height="15" fill="rgb(246,141,4)" fg:x="1036062" fg:w="2371"/><text x="74.5604%" y="3183.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::fma::_mm256_fmadd_ps (2,371 samples, 0.17%)</title><rect x="74.3104%" y="3157" width="0.1701%" height="15" fill="rgb(229,23,39)" fg:x="1036062" fg:w="2371"/><text x="74.5604%" y="3167.50"></text></g><g><title>neural_network.exe`matrixmultiply::gemm::gemm_packed::closure$1(matrixmultiply::gemm::gemm_packed::closure_env$1&lt;matrixmultiply::sgemm_kernel::KernelFmaAvx2&gt;*, tuple$&lt;&gt;*, ref_mut$&lt;slice2$ (14,459 samples, 1.04%)</title><rect x="73.4444%" y="3237" width="1.0371%" height="15" fill="rgb(206,12,3)" fg:x="1023988" fg:w="14459"/><text x="73.6944%" y="3247.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::t (15,766 samples, 1.13%)</title><rect x="73.3514%" y="3349" width="1.1308%" height="15" fill="rgb(252,226,20)" fg:x="1022691" fg:w="15766"/><text x="73.6014%" y="3359.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::reversed_axes(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (15,766 samples, 1.13%)</title><rect x="73.3514%" y="3333" width="1.1308%" height="15" fill="rgb(216,123,35)" fg:x="1022691" fg:w="15766"/><text x="73.6014%" y="3343.50"></text></g><g><title>neural_network.exe`ndarray::linalg::impl_linalg::impl$4::dot&lt;f32,ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt; &gt;(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (15,766 samples, 1.13%)</title><rect x="73.3514%" y="3317" width="1.1308%" height="15" fill="rgb(212,68,40)" fg:x="1022691" fg:w="15766"/><text x="73.6014%" y="3327.50"></text></g><g><title>neural_network.exe`matrixmultiply::gemm::gemm_loop&lt;matrixmultiply::sgemm_kernel::KernelFmaAvx2&gt; (15,720 samples, 1.13%)</title><rect x="73.3547%" y="3301" width="1.1275%" height="15" fill="rgb(254,125,32)" fg:x="1022737" fg:w="15720"/><text x="73.6047%" y="3311.50"></text></g><g><title>neural_network.exe`matrixmultiply::threading::RangeChunkParallel&lt;matrixmultiply::gemm::gemm_loop::closure_env$0&lt;matrixmultiply::sgemm_kernel::KernelFmaAvx2&gt; &gt;::for_each(matrixmultiply::threading::RangeChunkParallel&lt;matrixmultiply::gemm::gemm_loop::closure_env$0&lt;matrixmultiply::sgemm_kernel::KernelFmaAvx2&gt; &gt;, matrixmultiply::gemm::gemm_loop::closure_env$1 (14,814 samples, 1.06%)</title><rect x="73.4196%" y="3285" width="1.0625%" height="15" fill="rgb(253,97,22)" fg:x="1023643" fg:w="14814"/><text x="73.6696%" y="3295.50"></text></g><g><title>neural_network.exe`matrixmultiply::util::impl$0::next (14,473 samples, 1.04%)</title><rect x="73.4441%" y="3269" width="1.0381%" height="15" fill="rgb(241,101,14)" fg:x="1023984" fg:w="14473"/><text x="73.6941%" y="3279.50"></text></g><g><title>neural_network.exe`matrixmultiply::threading::RangeChunkParallel&lt;matrixmultiply::gemm::gemm_packed::closure_env$0&lt;matrixmultiply::sgemm_kernel::KernelFmaAvx2&gt; &gt;::for_each&lt;matrixmultiply::gemm::gemm_packed::closure_env$0&lt;matrixmultiply::sgemm_kernel::KernelFmaAvx2&gt;,ref_mut$&lt;slice2$&lt;f32&gt; &gt;,matrixmultiply::gemm::gemm_packed::closure_env$1&lt;matrixmultiply::sgemm_kernel::KernelFmaAvx2&gt; &gt;(matrixmultiply::threading::RangeChunkParallel&lt;matrixmultiply::gemm::gemm_packed::closure_env$0&lt;matrixmultiply::sgemm_kernel::KernelFmaAvx2&gt; &gt;, matrixmultiply::gemm::gemm_packed::closure_env$1 (14,471 samples, 1.04%)</title><rect x="73.4442%" y="3253" width="1.0379%" height="15" fill="rgb(238,103,29)" fg:x="1023986" fg:w="14471"/><text x="73.6942%" y="3263.50"></text></g><g><title>`0x7FF968D511FB (362 samples, 0.03%)</title><rect x="74.4832%" y="3237" width="0.0260%" height="15" fill="rgb(233,195,47)" fg:x="1038471" fg:w="362"/><text x="74.7332%" y="3247.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::to_owned&lt;f32,ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; (377 samples, 0.03%)</title><rect x="74.4822%" y="3349" width="0.0270%" height="15" fill="rgb(246,218,30)" fg:x="1038457" fg:w="377"/><text x="74.7322%" y="3359.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_shape_vec_unchecked(ndarray::shape_builder::StrideShape&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, alloc::vec::Vec (363 samples, 0.03%)</title><rect x="74.4832%" y="3333" width="0.0260%" height="15" fill="rgb(219,145,47)" fg:x="1038471" fg:w="363"/><text x="74.7332%" y="3343.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_vec_dim_stride_unchecked(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;, ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;, alloc::vec::Vec (363 samples, 0.03%)</title><rect x="74.4832%" y="3317" width="0.0260%" height="15" fill="rgb(243,12,26)" fg:x="1038471" fg:w="363"/><text x="74.7332%" y="3327.50"></text></g><g><title>neural_network.exe`ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$ (363 samples, 0.03%)</title><rect x="74.4832%" y="3301" width="0.0260%" height="15" fill="rgb(214,87,16)" fg:x="1038471" fg:w="363"/><text x="74.7332%" y="3311.50"></text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$1::fold(core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;usize&gt;,core::slice::iter::Iter&lt;usize&gt; &gt;, long long, ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$ (363 samples, 0.03%)</title><rect x="74.4832%" y="3285" width="0.0260%" height="15" fill="rgb(208,99,42)" fg:x="1038471" fg:w="363"/><text x="74.7332%" y="3295.50"></text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$4::fold(core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;usize&gt;,core::slice::iter::Iter&lt;usize&gt; &gt;, long long, ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$ (363 samples, 0.03%)</title><rect x="74.4832%" y="3269" width="0.0260%" height="15" fill="rgb(253,99,2)" fg:x="1038471" fg:w="363"/><text x="74.7332%" y="3279.50"></text></g><g><title>neural_network.exe`ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure$0(ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, long long, tuple$&lt;ref$&lt;usize&gt;,ref$ (363 samples, 0.03%)</title><rect x="74.4832%" y="3253" width="0.0260%" height="15" fill="rgb(220,168,23)" fg:x="1038471" fg:w="363"/><text x="74.7332%" y="3263.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,1&gt; &gt; &gt;::len (181 samples, 0.01%)</title><rect x="74.5092%" y="3349" width="0.0130%" height="15" fill="rgb(242,38,24)" fg:x="1038834" fg:w="181"/><text x="74.7592%" y="3359.50"></text></g><g><title>neural_network.exe`ndarray::dimension::dimension_trait::impl$1::size(ndarray::dimension::dim::Dim&lt;array$ (181 samples, 0.01%)</title><rect x="74.5092%" y="3333" width="0.0130%" height="15" fill="rgb(225,182,9)" fg:x="1038834" fg:w="181"/><text x="74.7592%" y="3343.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::zip_mut_with_same_shape&lt;f32,ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f32,ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::linalg::impl_linalg::impl$6::scaled_add::closure_env$0&lt;f32,ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::linalg::impl_linalg::impl$6::scaled_add::closure_env$0&lt;f32,ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (181 samples, 0.01%)</title><rect x="74.5092%" y="3317" width="0.0130%" height="15" fill="rgb(243,178,37)" fg:x="1038834" fg:w="181"/><text x="74.7592%" y="3327.50"></text></g><g><title>neural_network.exe`core::ptr::mut_ptr::impl$0::write (207 samples, 0.01%)</title><rect x="74.5380%" y="3157" width="0.0148%" height="15" fill="rgb(232,139,19)" fg:x="1039236" fg:w="207"/><text x="74.7880%" y="3167.50"></text></g><g><title>neural_network.exe`core::ptr::write (207 samples, 0.01%)</title><rect x="74.5380%" y="3141" width="0.0148%" height="15" fill="rgb(225,201,24)" fg:x="1039236" fg:w="207"/><text x="74.7880%" y="3151.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::t (278 samples, 0.02%)</title><rect x="74.5340%" y="3349" width="0.0199%" height="15" fill="rgb(221,47,46)" fg:x="1039180" fg:w="278"/><text x="74.7840%" y="3359.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::view (278 samples, 0.02%)</title><rect x="74.5340%" y="3333" width="0.0199%" height="15" fill="rgb(249,23,13)" fg:x="1039180" fg:w="278"/><text x="74.7840%" y="3343.50"></text></g><g><title>neural_network.exe`ndarray::impl_ops::arithmetic_ops::impl$19::mul&lt;f32,f32,ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (278 samples, 0.02%)</title><rect x="74.5340%" y="3317" width="0.0199%" height="15" fill="rgb(219,9,5)" fg:x="1039180" fg:w="278"/><text x="74.7840%" y="3327.50"></text></g><g><title>neural_network.exe`ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::map_collect_owned&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::data_repr::OwnedRepr&lt;f32&gt;,f32,ndarray::impl_ops::arithmetic_ops::clone_opf::closure_env$0&lt;f32,f32,f32,f32 (*)(f32,f32)&gt; &gt;(ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, ndarray::impl_ops::arithmetic_ops::clone_opf::closure_env$0&lt;f32,f32,f32,f32 (*) (278 samples, 0.02%)</title><rect x="74.5340%" y="3301" width="0.0199%" height="15" fill="rgb(254,171,16)" fg:x="1039180" fg:w="278"/><text x="74.7840%" y="3311.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::build_uninit(ndarray::shape_builder::Shape&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, ndarray::zip::impl$26::map_collect_owned::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::data_repr::OwnedRepr&lt;f32&gt;,f32,ndarray::impl_ops::arithmetic_ops::clone_opf::closure_env$0&lt;f32,f32,f32,f32 (*) (278 samples, 0.02%)</title><rect x="74.5340%" y="3285" width="0.0199%" height="15" fill="rgb(230,171,20)" fg:x="1039180" fg:w="278"/><text x="74.7840%" y="3295.50"></text></g><g><title>neural_network.exe`ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::collect_with_partial&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,f32,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::impl_ops::arithmetic_ops::clone_opf::closure_env$0&lt;f32,f32,f32,f32 (*)(f32,f32)&gt; &gt;(ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, ndarray::impl_ops::arithmetic_ops::clone_opf::closure_env$0&lt;f32,f32,f32,f32 (*) (275 samples, 0.02%)</title><rect x="74.5342%" y="3269" width="0.0197%" height="15" fill="rgb(210,71,41)" fg:x="1039183" fg:w="275"/><text x="74.7842%" y="3279.50"></text></g><g><title>neural_network.exe`ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::for_each(ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, ndarray::zip::impl$42::collect_with_partial::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,f32,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::impl_ops::arithmetic_ops::clone_opf::closure_env$0&lt;f32,f32,f32,f32 (*) (275 samples, 0.02%)</title><rect x="74.5342%" y="3253" width="0.0197%" height="15" fill="rgb(206,173,20)" fg:x="1039183" fg:w="275"/><text x="74.7842%" y="3263.50"></text></g><g><title>neural_network.exe`ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::for_each_core(tuple$&lt;&gt;, ndarray::zip::impl$29::for_each::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::zip::impl$42::collect_with_partial::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,f32,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::impl_ops::arithmetic_ops::clone_opf::closure_env$0&lt;f32,f32,f32,f32 (*) (275 samples, 0.02%)</title><rect x="74.5342%" y="3237" width="0.0197%" height="15" fill="rgb(233,88,34)" fg:x="1039183" fg:w="275"/><text x="74.7842%" y="3247.50"></text></g><g><title>neural_network.exe`ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::for_each_core_contiguous(tuple$&lt;&gt;, ndarray::zip::impl$29::for_each::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::zip::impl$42::collect_with_partial::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,f32,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::impl_ops::arithmetic_ops::clone_opf::closure_env$0&lt;f32,f32,f32,f32 (*) (275 samples, 0.02%)</title><rect x="74.5342%" y="3221" width="0.0197%" height="15" fill="rgb(223,209,46)" fg:x="1039183" fg:w="275"/><text x="74.7842%" y="3231.50"></text></g><g><title>neural_network.exe`ndarray::zip::Zip&lt;tuple$&lt;ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::inner(tuple$&lt;&gt;, tuple$&lt;ptr_mut$&lt;f32&gt;,ptr_mut$&lt;f32&gt;,ptr_mut$&lt;f32&gt; &gt;, tuple$&lt;isize,isize,isize&gt;, unsigned long long, ndarray::zip::impl$29::for_each::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::zip::impl$42::collect_with_partial::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,f32,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::impl_ops::arithmetic_ops::clone_opf::closure_env$0&lt;f32,f32,f32,f32 (*) (275 samples, 0.02%)</title><rect x="74.5342%" y="3205" width="0.0197%" height="15" fill="rgb(250,43,18)" fg:x="1039183" fg:w="275"/><text x="74.7842%" y="3215.50"></text></g><g><title>neural_network.exe`ndarray::zip::impl$29::for_each::closure$0(ndarray::zip::impl$29::for_each::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::zip::impl$42::collect_with_partial::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,f32,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::impl_ops::arithmetic_ops::clone_opf::closure_env$0&lt;f32,f32,f32,f32 (*)(f32,f32)&gt; &gt; &gt;*, tuple$&lt;&gt;, tuple$&lt;ref$&lt;f32&gt;,ref$&lt;f32&gt;,ptr_mut$ (254 samples, 0.02%)</title><rect x="74.5357%" y="3189" width="0.0182%" height="15" fill="rgb(208,13,10)" fg:x="1039204" fg:w="254"/><text x="74.7857%" y="3199.50"></text></g><g><title>neural_network.exe`ndarray::zip::impl$42::collect_with_partial::closure$0(ndarray::zip::impl$42::collect_with_partial::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::ArrayBase&lt;ndarray::RawViewRepr&lt;ptr_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,f32,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::impl_ops::arithmetic_ops::clone_opf::closure_env$0&lt;f32,f32,f32,f32 (*) (222 samples, 0.02%)</title><rect x="74.5380%" y="3173" width="0.0159%" height="15" fill="rgb(212,200,36)" fg:x="1039236" fg:w="222"/><text x="74.7880%" y="3183.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::zip_mut_with_same_shape&lt;f32,ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f32,ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::linalg::impl_linalg::impl$6::scaled_add::closure_env$0&lt;f32,ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::linalg::impl_linalg::impl$6::scaled_add::closure_env$0&lt;f32,ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (371 samples, 0.03%)</title><rect x="74.5540%" y="3349" width="0.0266%" height="15" fill="rgb(225,90,30)" fg:x="1039459" fg:w="371"/><text x="74.8040%" y="3359.50"></text></g><g><title>neural_network.exe`ndarray::linalg::impl_linalg::impl$6::scaled_add::closure$0(ndarray::linalg::impl_linalg::impl$6::scaled_add::closure_env$0&lt;f32,ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (207 samples, 0.01%)</title><rect x="74.5658%" y="3333" width="0.0148%" height="15" fill="rgb(236,182,39)" fg:x="1039623" fg:w="207"/><text x="74.8158%" y="3343.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping (163 samples, 0.01%)</title><rect x="74.5843%" y="3285" width="0.0117%" height="15" fill="rgb(212,144,35)" fg:x="1039881" fg:w="163"/><text x="74.8343%" y="3295.50"></text></g><g><title>neural_network.exe`matrixmultiply::packing::pack_avx2&lt;matrixmultiply::kernel::U8,f32&gt;(unsigned long long, unsigned long long, ref_mut$&lt;slice2$ (218 samples, 0.02%)</title><rect x="74.5828%" y="3317" width="0.0156%" height="15" fill="rgb(228,63,44)" fg:x="1039860" fg:w="218"/><text x="74.8328%" y="3327.50"></text></g><g><title>neural_network.exe`matrixmultiply::packing::pack_impl(unsigned long long, unsigned long long, ref_mut$&lt;slice2$ (218 samples, 0.02%)</title><rect x="74.5828%" y="3301" width="0.0156%" height="15" fill="rgb(228,109,6)" fg:x="1039860" fg:w="218"/><text x="74.8328%" y="3311.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping (516 samples, 0.04%)</title><rect x="74.5994%" y="3237" width="0.0370%" height="15" fill="rgb(238,117,24)" fg:x="1040092" fg:w="516"/><text x="74.8494%" y="3247.50"></text></g><g><title>neural_network.exe`matrixmultiply::gemm::gemm_loop::closure$1(matrixmultiply::gemm::gemm_loop::closure_env$1&lt;matrixmultiply::sgemm_kernel::KernelFmaAvx2&gt;*, tuple$&lt;&gt;*, matrixmultiply::ptr::Ptr&lt;ptr_mut$ (555 samples, 0.04%)</title><rect x="74.5984%" y="3301" width="0.0398%" height="15" fill="rgb(242,26,26)" fg:x="1040078" fg:w="555"/><text x="74.8484%" y="3311.50"></text></g><g><title>neural_network.exe`rawpointer::PointerExt::stride_offset(matrixmultiply::ptr::Ptr&lt;ptr_mut$ (555 samples, 0.04%)</title><rect x="74.5984%" y="3285" width="0.0398%" height="15" fill="rgb(221,92,48)" fg:x="1040078" fg:w="555"/><text x="74.8484%" y="3295.50"></text></g><g><title>neural_network.exe`matrixmultiply::packing::pack_avx2&lt;matrixmultiply::kernel::U8,f32&gt;(unsigned long long, unsigned long long, ref_mut$&lt;slice2$ (555 samples, 0.04%)</title><rect x="74.5984%" y="3269" width="0.0398%" height="15" fill="rgb(209,209,32)" fg:x="1040078" fg:w="555"/><text x="74.8484%" y="3279.50"></text></g><g><title>neural_network.exe`matrixmultiply::packing::pack_impl(unsigned long long, unsigned long long, ref_mut$&lt;slice2$ (555 samples, 0.04%)</title><rect x="74.5984%" y="3253" width="0.0398%" height="15" fill="rgb(221,70,22)" fg:x="1040078" fg:w="555"/><text x="74.8484%" y="3263.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_load_ps (1,376 samples, 0.10%)</title><rect x="74.6515%" y="3205" width="0.0987%" height="15" fill="rgb(248,145,5)" fg:x="1040818" fg:w="1376"/><text x="74.9015%" y="3215.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_movehdup_ps (348 samples, 0.02%)</title><rect x="74.7511%" y="3205" width="0.0250%" height="15" fill="rgb(226,116,26)" fg:x="1042207" fg:w="348"/><text x="75.0011%" y="3215.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_moveldup_ps (1,098 samples, 0.08%)</title><rect x="74.7761%" y="3205" width="0.0788%" height="15" fill="rgb(244,5,17)" fg:x="1042555" fg:w="1098"/><text x="75.0261%" y="3215.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_permute2f128_ps (6,060 samples, 0.43%)</title><rect x="74.8573%" y="3205" width="0.4346%" height="15" fill="rgb(252,159,33)" fg:x="1043687" fg:w="6060"/><text x="75.1073%" y="3215.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_permute_ps (2,115 samples, 0.15%)</title><rect x="75.2919%" y="3205" width="0.1517%" height="15" fill="rgb(206,71,0)" fg:x="1049747" fg:w="2115"/><text x="75.5419%" y="3215.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_storeu_ps (326 samples, 0.02%)</title><rect x="75.4460%" y="3205" width="0.0234%" height="15" fill="rgb(233,118,54)" fg:x="1051895" fg:w="326"/><text x="75.6960%" y="3215.50"></text></g><g><title>neural_network.exe`core::ptr::mut_ptr::impl$0::write_unaligned (326 samples, 0.02%)</title><rect x="75.4460%" y="3189" width="0.0234%" height="15" fill="rgb(234,83,48)" fg:x="1051895" fg:w="326"/><text x="75.6960%" y="3199.50"></text></g><g><title>neural_network.exe`core::ptr::write_unaligned (326 samples, 0.02%)</title><rect x="75.4460%" y="3173" width="0.0234%" height="15" fill="rgb(228,3,54)" fg:x="1051895" fg:w="326"/><text x="75.6960%" y="3183.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping (326 samples, 0.02%)</title><rect x="75.4460%" y="3157" width="0.0234%" height="15" fill="rgb(226,155,13)" fg:x="1051895" fg:w="326"/><text x="75.6960%" y="3167.50"></text></g><g><title>neural_network.exe`matrixmultiply::sgemm_kernel::impl$2::kernel (14,252 samples, 1.02%)</title><rect x="74.6390%" y="3253" width="1.0222%" height="15" fill="rgb(241,28,37)" fg:x="1040644" fg:w="14252"/><text x="74.8890%" y="3263.50"></text></g><g><title>neural_network.exe`matrixmultiply::sgemm_kernel::kernel_target_fma (14,239 samples, 1.02%)</title><rect x="74.6399%" y="3237" width="1.0213%" height="15" fill="rgb(233,93,10)" fg:x="1040657" fg:w="14239"/><text x="74.8899%" y="3247.50"></text></g><g><title>neural_network.exe`matrixmultiply::sgemm_kernel::kernel_x86_avx (14,164 samples, 1.02%)</title><rect x="74.6453%" y="3221" width="1.0159%" height="15" fill="rgb(225,113,19)" fg:x="1040732" fg:w="14164"/><text x="74.8953%" y="3231.50"></text></g><g><title>neural_network.exe`matrixmultiply::x86::impl$1::multiply_add (2,498 samples, 0.18%)</title><rect x="75.4821%" y="3205" width="0.1792%" height="15" fill="rgb(241,2,18)" fg:x="1052398" fg:w="2498"/><text x="75.7321%" y="3215.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::fma::_mm256_fmadd_ps (2,498 samples, 0.18%)</title><rect x="75.4821%" y="3189" width="0.1792%" height="15" fill="rgb(228,207,21)" fg:x="1052398" fg:w="2498"/><text x="75.7321%" y="3199.50"></text></g><g><title>neural_network.exe`matrixmultiply::gemm::gemm_packed::closure$1(matrixmultiply::gemm::gemm_packed::closure_env$1&lt;matrixmultiply::sgemm_kernel::KernelFmaAvx2&gt;*, tuple$&lt;&gt;*, ref_mut$&lt;slice2$ (14,265 samples, 1.02%)</title><rect x="74.6385%" y="3269" width="1.0231%" height="15" fill="rgb(213,211,35)" fg:x="1040637" fg:w="14265"/><text x="74.8885%" y="3279.50"></text></g><g><title>neural_network.exe`matrixmultiply::gemm::gemm_loop&lt;matrixmultiply::sgemm_kernel::KernelFmaAvx2&gt; (15,046 samples, 1.08%)</title><rect x="74.5826%" y="3333" width="1.0792%" height="15" fill="rgb(209,83,10)" fg:x="1039857" fg:w="15046"/><text x="74.8326%" y="3343.50"></text></g><g><title>neural_network.exe`matrixmultiply::threading::RangeChunkParallel&lt;matrixmultiply::gemm::gemm_loop::closure_env$0&lt;matrixmultiply::sgemm_kernel::KernelFmaAvx2&gt; &gt;::for_each(matrixmultiply::threading::RangeChunkParallel&lt;matrixmultiply::gemm::gemm_loop::closure_env$0&lt;matrixmultiply::sgemm_kernel::KernelFmaAvx2&gt; &gt;, matrixmultiply::gemm::gemm_loop::closure_env$1 (14,825 samples, 1.06%)</title><rect x="74.5984%" y="3317" width="1.0633%" height="15" fill="rgb(209,164,1)" fg:x="1040078" fg:w="14825"/><text x="74.8484%" y="3327.50"></text></g><g><title>neural_network.exe`matrixmultiply::util::impl$0::next (14,270 samples, 1.02%)</title><rect x="74.6382%" y="3301" width="1.0235%" height="15" fill="rgb(213,184,43)" fg:x="1040633" fg:w="14270"/><text x="74.8882%" y="3311.50"></text></g><g><title>neural_network.exe`matrixmultiply::threading::RangeChunkParallel&lt;matrixmultiply::gemm::gemm_packed::closure_env$0&lt;matrixmultiply::sgemm_kernel::KernelFmaAvx2&gt; &gt;::for_each&lt;matrixmultiply::gemm::gemm_packed::closure_env$0&lt;matrixmultiply::sgemm_kernel::KernelFmaAvx2&gt;,ref_mut$&lt;slice2$&lt;f32&gt; &gt;,matrixmultiply::gemm::gemm_packed::closure_env$1&lt;matrixmultiply::sgemm_kernel::KernelFmaAvx2&gt; &gt;(matrixmultiply::threading::RangeChunkParallel&lt;matrixmultiply::gemm::gemm_packed::closure_env$0&lt;matrixmultiply::sgemm_kernel::KernelFmaAvx2&gt; &gt;, matrixmultiply::gemm::gemm_packed::closure_env$1 (14,268 samples, 1.02%)</title><rect x="74.6384%" y="3285" width="1.0234%" height="15" fill="rgb(231,61,34)" fg:x="1040635" fg:w="14268"/><text x="74.8884%" y="3295.50"></text></g><g><title>neural_network.exe`ndarray::linalg::impl_linalg::impl$4::dot&lt;f32,ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::data_repr::OwnedRepr&lt;f32&gt; &gt;(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (15,074 samples, 1.08%)</title><rect x="74.5806%" y="3349" width="1.0812%" height="15" fill="rgb(235,75,3)" fg:x="1039830" fg:w="15074"/><text x="74.8306%" y="3359.50"></text></g><g><title>neural_network.exe`neural_network::layers::dense_layer::DenseLayer::backpropagate(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (32,955 samples, 2.36%)</title><rect x="73.3063%" y="3365" width="2.3637%" height="15" fill="rgb(220,106,47)" fg:x="1022063" fg:w="32955"/><text x="73.5563%" y="3375.50">ne..</text></g><g><title>neural_network.exe`neural_network::networks::convolutional_net::ConvolutionalNet::calculate_bce_loss(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (1,660 samples, 0.12%)</title><rect x="75.6700%" y="3365" width="0.1191%" height="15" fill="rgb(210,196,33)" fg:x="1055018" fg:w="1660"/><text x="75.9200%" y="3375.50"></text></g><g><title>neural_network.exe`std::f32::impl$0::ln (668 samples, 0.05%)</title><rect x="75.7411%" y="3349" width="0.0479%" height="15" fill="rgb(229,154,42)" fg:x="1056010" fg:w="668"/><text x="75.9911%" y="3359.50"></text></g><g><title>`0x7FF97E62AFF1 (293 samples, 0.02%)</title><rect x="75.7891%" y="3349" width="0.0210%" height="15" fill="rgb(228,114,26)" fg:x="1056679" fg:w="293"/><text x="76.0391%" y="3359.50"></text></g><g><title>`0x7FF97E62C324 (292 samples, 0.02%)</title><rect x="75.7892%" y="3333" width="0.0209%" height="15" fill="rgb(208,144,1)" fg:x="1056680" fg:w="292"/><text x="76.0392%" y="3343.50"></text></g><g><title>`0x7FF97E62A10C (292 samples, 0.02%)</title><rect x="75.7892%" y="3317" width="0.0209%" height="15" fill="rgb(239,112,37)" fg:x="1056680" fg:w="292"/><text x="76.0392%" y="3327.50"></text></g><g><title>`0x7FF97E636AC6 (292 samples, 0.02%)</title><rect x="75.7892%" y="3301" width="0.0209%" height="15" fill="rgb(210,96,50)" fg:x="1056680" fg:w="292"/><text x="76.0392%" y="3311.50"></text></g><g><title>`0x7FF97E690364 (292 samples, 0.02%)</title><rect x="75.7892%" y="3285" width="0.0209%" height="15" fill="rgb(222,178,2)" fg:x="1056680" fg:w="292"/><text x="76.0392%" y="3295.50"></text></g><g><title>`0x7FF968D5154E (212 samples, 0.02%)</title><rect x="75.8166%" y="3221" width="0.0152%" height="15" fill="rgb(226,74,18)" fg:x="1057062" fg:w="212"/><text x="76.0666%" y="3231.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::to_owned&lt;f32,ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; (463 samples, 0.03%)</title><rect x="75.8101%" y="3333" width="0.0332%" height="15" fill="rgb(225,67,54)" fg:x="1056972" fg:w="463"/><text x="76.0601%" y="3343.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_shape_vec_unchecked(ndarray::shape_builder::StrideShape&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, alloc::vec::Vec (458 samples, 0.03%)</title><rect x="75.8105%" y="3317" width="0.0328%" height="15" fill="rgb(251,92,32)" fg:x="1056977" fg:w="458"/><text x="76.0605%" y="3327.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_vec_dim_stride_unchecked(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;, ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;, alloc::vec::Vec (458 samples, 0.03%)</title><rect x="75.8105%" y="3301" width="0.0328%" height="15" fill="rgb(228,149,22)" fg:x="1056977" fg:w="458"/><text x="76.0605%" y="3311.50"></text></g><g><title>neural_network.exe`ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$ (458 samples, 0.03%)</title><rect x="75.8105%" y="3285" width="0.0328%" height="15" fill="rgb(243,54,13)" fg:x="1056977" fg:w="458"/><text x="76.0605%" y="3295.50"></text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$1::fold(core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;usize&gt;,core::slice::iter::Iter&lt;usize&gt; &gt;, long long, ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$ (458 samples, 0.03%)</title><rect x="75.8105%" y="3269" width="0.0328%" height="15" fill="rgb(243,180,28)" fg:x="1056977" fg:w="458"/><text x="76.0605%" y="3279.50"></text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$4::fold(core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;usize&gt;,core::slice::iter::Iter&lt;usize&gt; &gt;, long long, ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$ (458 samples, 0.03%)</title><rect x="75.8105%" y="3253" width="0.0328%" height="15" fill="rgb(208,167,24)" fg:x="1056977" fg:w="458"/><text x="76.0605%" y="3263.50"></text></g><g><title>neural_network.exe`ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure$0(ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, long long, tuple$&lt;ref$&lt;usize&gt;,ref$ (458 samples, 0.03%)</title><rect x="75.8105%" y="3237" width="0.0328%" height="15" fill="rgb(245,73,45)" fg:x="1056977" fg:w="458"/><text x="76.0605%" y="3247.50"></text></g><g><title>`0x7FF97E696E23 (214 samples, 0.02%)</title><rect x="75.8823%" y="3157" width="0.0153%" height="15" fill="rgb(237,203,48)" fg:x="1057979" fg:w="214"/><text x="76.1323%" y="3167.50"></text></g><g><title>`0x7FF97E62D7B9 (230 samples, 0.02%)</title><rect x="75.8822%" y="3173" width="0.0165%" height="15" fill="rgb(211,197,16)" fg:x="1057977" fg:w="230"/><text x="76.1322%" y="3183.50"></text></g><g><title>`0x7FF97E62CC9A (274 samples, 0.02%)</title><rect x="75.8792%" y="3189" width="0.0197%" height="15" fill="rgb(243,99,51)" fg:x="1057935" fg:w="274"/><text x="76.1292%" y="3199.50"></text></g><g><title>neural_network.exe`alloc::vec::from_elem (277 samples, 0.02%)</title><rect x="75.8791%" y="3317" width="0.0199%" height="15" fill="rgb(215,123,29)" fg:x="1057934" fg:w="277"/><text x="76.1291%" y="3327.50"></text></g><g><title>neural_network.exe`alloc::vec::spec_from_elem::impl$1::from_elem (277 samples, 0.02%)</title><rect x="75.8791%" y="3301" width="0.0199%" height="15" fill="rgb(239,186,37)" fg:x="1057934" fg:w="277"/><text x="76.1291%" y="3311.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f32,alloc::alloc::Global&gt;::with_capacity_zeroed_in (277 samples, 0.02%)</title><rect x="75.8791%" y="3285" width="0.0199%" height="15" fill="rgb(252,136,39)" fg:x="1057934" fg:w="277"/><text x="76.1291%" y="3295.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_zeroed_in (277 samples, 0.02%)</title><rect x="75.8791%" y="3269" width="0.0199%" height="15" fill="rgb(223,213,32)" fg:x="1057934" fg:w="277"/><text x="76.1291%" y="3279.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (277 samples, 0.02%)</title><rect x="75.8791%" y="3253" width="0.0199%" height="15" fill="rgb(233,115,5)" fg:x="1057934" fg:w="277"/><text x="76.1291%" y="3263.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::allocate_zeroed (276 samples, 0.02%)</title><rect x="75.8792%" y="3237" width="0.0198%" height="15" fill="rgb(207,226,44)" fg:x="1057935" fg:w="276"/><text x="76.1292%" y="3247.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::alloc_impl (276 samples, 0.02%)</title><rect x="75.8792%" y="3221" width="0.0198%" height="15" fill="rgb(208,126,0)" fg:x="1057935" fg:w="276"/><text x="76.1292%" y="3231.50"></text></g><g><title>neural_network.exe`alloc::alloc::alloc_zeroed (276 samples, 0.02%)</title><rect x="75.8792%" y="3205" width="0.0198%" height="15" fill="rgb(244,66,21)" fg:x="1057935" fg:w="276"/><text x="76.1292%" y="3215.50"></text></g><g><title>`0x7FF97E62AFF1 (141 samples, 0.01%)</title><rect x="75.9105%" y="3221" width="0.0101%" height="15" fill="rgb(222,97,12)" fg:x="1058372" fg:w="141"/><text x="76.1605%" y="3231.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec (171 samples, 0.01%)</title><rect x="75.9095%" y="3317" width="0.0123%" height="15" fill="rgb(219,213,19)" fg:x="1058357" fg:w="171"/><text x="76.1595%" y="3327.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (171 samples, 0.01%)</title><rect x="75.9095%" y="3301" width="0.0123%" height="15" fill="rgb(252,169,30)" fg:x="1058357" fg:w="171"/><text x="76.1595%" y="3311.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec (171 samples, 0.01%)</title><rect x="75.9095%" y="3285" width="0.0123%" height="15" fill="rgb(206,32,51)" fg:x="1058357" fg:w="171"/><text x="76.1595%" y="3295.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (171 samples, 0.01%)</title><rect x="75.9095%" y="3269" width="0.0123%" height="15" fill="rgb(250,172,42)" fg:x="1058357" fg:w="171"/><text x="76.1595%" y="3279.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (171 samples, 0.01%)</title><rect x="75.9095%" y="3253" width="0.0123%" height="15" fill="rgb(209,34,43)" fg:x="1058357" fg:w="171"/><text x="76.1595%" y="3263.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (171 samples, 0.01%)</title><rect x="75.9095%" y="3237" width="0.0123%" height="15" fill="rgb(223,11,35)" fg:x="1058357" fg:w="171"/><text x="76.1595%" y="3247.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,alloc::alloc::Global&gt;::push(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (1,786 samples, 0.13%)</title><rect x="75.8101%" y="3349" width="0.1281%" height="15" fill="rgb(251,219,26)" fg:x="1056972" fg:w="1786"/><text x="76.0601%" y="3359.50"></text></g><g><title>neural_network.exe`neural_network::layers::softmax_layer::pass(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (1,323 samples, 0.09%)</title><rect x="75.8433%" y="3333" width="0.0949%" height="15" fill="rgb(231,119,3)" fg:x="1057435" fg:w="1323"/><text x="76.0933%" y="3343.50"></text></g><g><title>neural_network.exe`std::f32::impl$0::exp (208 samples, 0.01%)</title><rect x="75.9233%" y="3317" width="0.0149%" height="15" fill="rgb(216,97,11)" fg:x="1058550" fg:w="208"/><text x="76.1733%" y="3327.50"></text></g><g><title>`0x7FF968D511FB (318 samples, 0.02%)</title><rect x="75.9383%" y="3253" width="0.0228%" height="15" fill="rgb(223,59,9)" fg:x="1058759" fg:w="318"/><text x="76.1883%" y="3263.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt; &gt;,alloc::alloc::Global&gt;::push(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (326 samples, 0.02%)</title><rect x="75.9382%" y="3349" width="0.0234%" height="15" fill="rgb(233,93,31)" fg:x="1058758" fg:w="326"/><text x="76.1882%" y="3359.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt; &gt;::to_owned&lt;f32,ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt; &gt; (325 samples, 0.02%)</title><rect x="75.9383%" y="3333" width="0.0233%" height="15" fill="rgb(239,81,33)" fg:x="1058759" fg:w="325"/><text x="76.1883%" y="3343.50"></text></g><g><title>neural_network.exe`alloc::slice::impl$0::to_vec(ref$&lt;slice2$ (325 samples, 0.02%)</title><rect x="75.9383%" y="3317" width="0.0233%" height="15" fill="rgb(213,120,34)" fg:x="1058759" fg:w="325"/><text x="76.1883%" y="3327.50"></text></g><g><title>neural_network.exe`alloc::slice::impl$0::to_vec_in(ref$&lt;slice2$ (325 samples, 0.02%)</title><rect x="75.9383%" y="3301" width="0.0233%" height="15" fill="rgb(243,49,53)" fg:x="1058759" fg:w="325"/><text x="76.1883%" y="3311.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$ (325 samples, 0.02%)</title><rect x="75.9383%" y="3285" width="0.0233%" height="15" fill="rgb(247,216,33)" fg:x="1058759" fg:w="325"/><text x="76.1883%" y="3295.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$ (325 samples, 0.02%)</title><rect x="75.9383%" y="3269" width="0.0233%" height="15" fill="rgb(226,26,14)" fg:x="1058759" fg:w="325"/><text x="76.1883%" y="3279.50"></text></g><g><title>`0x7FF968D5154E (182 samples, 0.01%)</title><rect x="75.9676%" y="3205" width="0.0131%" height="15" fill="rgb(215,49,53)" fg:x="1059167" fg:w="182"/><text x="76.2176%" y="3215.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(ndarray::ArrayBase&lt;enum2$&lt;ndarray::CowRepr&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (420 samples, 0.03%)</title><rect x="75.9616%" y="3349" width="0.0301%" height="15" fill="rgb(245,162,40)" fg:x="1059084" fg:w="420"/><text x="76.2116%" y="3359.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(enum2$&lt;ndarray::CowRepr (420 samples, 0.03%)</title><rect x="75.9616%" y="3333" width="0.0301%" height="15" fill="rgb(229,68,17)" fg:x="1059084" fg:w="420"/><text x="76.2116%" y="3343.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;enum2$&lt;ndarray::CowRepr&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::to_owned&lt;f32,enum2$&lt;ndarray::CowRepr&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; (420 samples, 0.03%)</title><rect x="75.9616%" y="3317" width="0.0301%" height="15" fill="rgb(213,182,10)" fg:x="1059084" fg:w="420"/><text x="76.2116%" y="3327.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_shape_vec_unchecked(ndarray::shape_builder::StrideShape&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, alloc::vec::Vec (414 samples, 0.03%)</title><rect x="75.9620%" y="3301" width="0.0297%" height="15" fill="rgb(245,125,30)" fg:x="1059090" fg:w="414"/><text x="76.2120%" y="3311.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_vec_dim_stride_unchecked(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;, ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;, alloc::vec::Vec (414 samples, 0.03%)</title><rect x="75.9620%" y="3285" width="0.0297%" height="15" fill="rgb(232,202,2)" fg:x="1059090" fg:w="414"/><text x="76.2120%" y="3295.50"></text></g><g><title>neural_network.exe`ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$ (414 samples, 0.03%)</title><rect x="75.9620%" y="3269" width="0.0297%" height="15" fill="rgb(237,140,51)" fg:x="1059090" fg:w="414"/><text x="76.2120%" y="3279.50"></text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$1::fold(core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;usize&gt;,core::slice::iter::Iter&lt;usize&gt; &gt;, long long, ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$ (414 samples, 0.03%)</title><rect x="75.9620%" y="3253" width="0.0297%" height="15" fill="rgb(236,157,25)" fg:x="1059090" fg:w="414"/><text x="76.2120%" y="3263.50"></text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$4::fold(core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;usize&gt;,core::slice::iter::Iter&lt;usize&gt; &gt;, long long, ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$ (414 samples, 0.03%)</title><rect x="75.9620%" y="3237" width="0.0297%" height="15" fill="rgb(219,209,0)" fg:x="1059090" fg:w="414"/><text x="76.2120%" y="3247.50"></text></g><g><title>neural_network.exe`ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure$0(ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, long long, tuple$&lt;ref$&lt;usize&gt;,ref$ (414 samples, 0.03%)</title><rect x="75.9620%" y="3221" width="0.0297%" height="15" fill="rgb(240,116,54)" fg:x="1059090" fg:w="414"/><text x="76.2120%" y="3231.50"></text></g><g><title>`0x7FF97E62BFA7 (298 samples, 0.02%)</title><rect x="76.0764%" y="3125" width="0.0214%" height="15" fill="rgb(216,10,36)" fg:x="1060685" fg:w="298"/><text x="76.3264%" y="3135.50"></text></g><g><title>`0x7FF97E62C342 (250 samples, 0.02%)</title><rect x="76.1077%" y="3125" width="0.0179%" height="15" fill="rgb(222,72,44)" fg:x="1061121" fg:w="250"/><text x="76.3577%" y="3135.50"></text></g><g><title>`0x7FF97E62C350 (298 samples, 0.02%)</title><rect x="76.1257%" y="3125" width="0.0214%" height="15" fill="rgb(232,159,9)" fg:x="1061372" fg:w="298"/><text x="76.3757%" y="3135.50"></text></g><g><title>`0x7FF97E62B077 (293 samples, 0.02%)</title><rect x="76.1261%" y="3109" width="0.0210%" height="15" fill="rgb(210,39,32)" fg:x="1061377" fg:w="293"/><text x="76.3761%" y="3119.50"></text></g><g><title>`0x7FF97E69CBBC (154 samples, 0.01%)</title><rect x="76.1984%" y="3125" width="0.0110%" height="15" fill="rgb(216,194,45)" fg:x="1062385" fg:w="154"/><text x="76.4484%" y="3135.50"></text></g><g><title>`0x7FF97E69CC6F (1,161 samples, 0.08%)</title><rect x="76.2372%" y="3125" width="0.0833%" height="15" fill="rgb(218,18,35)" fg:x="1062927" fg:w="1161"/><text x="76.4872%" y="3135.50"></text></g><g><title>`0x7FF97E69CC81 (190 samples, 0.01%)</title><rect x="76.3206%" y="3125" width="0.0136%" height="15" fill="rgb(207,83,51)" fg:x="1064089" fg:w="190"/><text x="76.5706%" y="3135.50"></text></g><g><title>`0x7FF97E69CC88 (188 samples, 0.01%)</title><rect x="76.3342%" y="3125" width="0.0135%" height="15" fill="rgb(225,63,43)" fg:x="1064279" fg:w="188"/><text x="76.5842%" y="3135.50"></text></g><g><title>`0x7FF97E69CCAF (255 samples, 0.02%)</title><rect x="76.3479%" y="3125" width="0.0183%" height="15" fill="rgb(207,57,36)" fg:x="1064470" fg:w="255"/><text x="76.5979%" y="3135.50"></text></g><g><title>`0x7FF97E69CD0E (163 samples, 0.01%)</title><rect x="76.3792%" y="3125" width="0.0117%" height="15" fill="rgb(216,99,33)" fg:x="1064907" fg:w="163"/><text x="76.6292%" y="3135.50"></text></g><g><title>`0x7FF97E69CD3B (195 samples, 0.01%)</title><rect x="76.3970%" y="3125" width="0.0140%" height="15" fill="rgb(225,42,16)" fg:x="1065155" fg:w="195"/><text x="76.6470%" y="3135.50"></text></g><g><title>`0x7FF97E62AFF1 (4,816 samples, 0.35%)</title><rect x="76.0678%" y="3141" width="0.3454%" height="15" fill="rgb(220,201,45)" fg:x="1060565" fg:w="4816"/><text x="76.3178%" y="3151.50"></text></g><g><title>`0x7FF97E62AFF4 (347 samples, 0.02%)</title><rect x="76.4132%" y="3141" width="0.0249%" height="15" fill="rgb(225,33,4)" fg:x="1065381" fg:w="347"/><text x="76.6632%" y="3151.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (5,368 samples, 0.39%)</title><rect x="76.0592%" y="3173" width="0.3850%" height="15" fill="rgb(224,33,50)" fg:x="1060445" fg:w="5368"/><text x="76.3092%" y="3183.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (5,368 samples, 0.39%)</title><rect x="76.0592%" y="3157" width="0.3850%" height="15" fill="rgb(246,198,51)" fg:x="1060445" fg:w="5368"/><text x="76.3092%" y="3167.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec (5,374 samples, 0.39%)</title><rect x="76.0592%" y="3237" width="0.3854%" height="15" fill="rgb(205,22,4)" fg:x="1060445" fg:w="5374"/><text x="76.3092%" y="3247.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (5,374 samples, 0.39%)</title><rect x="76.0592%" y="3221" width="0.3854%" height="15" fill="rgb(206,3,8)" fg:x="1060445" fg:w="5374"/><text x="76.3092%" y="3231.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec (5,374 samples, 0.39%)</title><rect x="76.0592%" y="3205" width="0.3854%" height="15" fill="rgb(251,23,15)" fg:x="1060445" fg:w="5374"/><text x="76.3092%" y="3215.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (5,374 samples, 0.39%)</title><rect x="76.0592%" y="3189" width="0.3854%" height="15" fill="rgb(252,88,28)" fg:x="1060445" fg:w="5374"/><text x="76.3092%" y="3199.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (5,407 samples, 0.39%)</title><rect x="76.0576%" y="3285" width="0.3878%" height="15" fill="rgb(212,127,14)" fg:x="1060423" fg:w="5407"/><text x="76.3076%" y="3295.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(ndarray::data_repr::OwnedRepr (5,407 samples, 0.39%)</title><rect x="76.0576%" y="3269" width="0.3878%" height="15" fill="rgb(247,145,37)" fg:x="1060423" fg:w="5407"/><text x="76.3076%" y="3279.50"></text></g><g><title>neural_network.exe`ndarray::data_repr::impl$2::drop(ndarray::data_repr::OwnedRepr (5,407 samples, 0.39%)</title><rect x="76.0576%" y="3253" width="0.3878%" height="15" fill="rgb(209,117,53)" fg:x="1060423" fg:w="5407"/><text x="76.3076%" y="3263.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,3&gt; &gt; &gt;::collapse_axis (906 samples, 0.06%)</title><rect x="76.4455%" y="3253" width="0.0650%" height="15" fill="rgb(212,90,42)" fg:x="1065830" fg:w="906"/><text x="76.6955%" y="3263.50"></text></g><g><title>neural_network.exe`ndarray::dimension::do_collapse_axis(ndarray::dimension::dim::Dim&lt;array$&lt;usize,3&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$ (905 samples, 0.06%)</title><rect x="76.4455%" y="3237" width="0.0649%" height="15" fill="rgb(218,164,37)" fg:x="1065831" fg:w="905"/><text x="76.6955%" y="3247.50"></text></g><g><title>neural_network.exe`ndarray::dimension::stride_offset (294 samples, 0.02%)</title><rect x="76.4893%" y="3221" width="0.0211%" height="15" fill="rgb(246,65,34)" fg:x="1066442" fg:w="294"/><text x="76.7393%" y="3231.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,3&gt; &gt; &gt;::index_axis_move(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (1,713 samples, 0.12%)</title><rect x="76.4455%" y="3269" width="0.1229%" height="15" fill="rgb(231,100,33)" fg:x="1065830" fg:w="1713"/><text x="76.6955%" y="3279.50"></text></g><g><title>neural_network.exe`ndarray::dimension::remove_axis::impl$2::remove_axis(ndarray::dimension::dim::Dim&lt;array$ (806 samples, 0.06%)</title><rect x="76.5105%" y="3253" width="0.0578%" height="15" fill="rgb(228,126,14)" fg:x="1066737" fg:w="806"/><text x="76.7605%" y="3263.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::copy_from_slice(ref_mut$&lt;slice2$&lt;usize&gt; &gt;, ref$&lt;slice2$ (806 samples, 0.06%)</title><rect x="76.5105%" y="3237" width="0.0578%" height="15" fill="rgb(215,173,21)" fg:x="1066737" fg:w="806"/><text x="76.7605%" y="3247.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping (806 samples, 0.06%)</title><rect x="76.5105%" y="3221" width="0.0578%" height="15" fill="rgb(210,6,40)" fg:x="1066737" fg:w="806"/><text x="76.7605%" y="3231.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,3&gt; &gt; &gt;::index_axis (26,102 samples, 1.87%)</title><rect x="76.4455%" y="3285" width="1.8721%" height="15" fill="rgb(212,48,18)" fg:x="1065830" fg:w="26102"/><text x="76.6955%" y="3295.50">n..</text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,3&gt; &gt; &gt;::view (24,389 samples, 1.75%)</title><rect x="76.5683%" y="3269" width="1.7493%" height="15" fill="rgb(230,214,11)" fg:x="1067543" fg:w="24389"/><text x="76.8183%" y="3279.50"></text></g><g><title>neural_network.exe`ndarray::dimension::dim::impl$4::clone(ndarray::dimension::dim::Dim&lt;array$ (24,389 samples, 1.75%)</title><rect x="76.5683%" y="3253" width="1.7493%" height="15" fill="rgb(254,105,39)" fg:x="1067543" fg:w="24389"/><text x="76.8183%" y="3263.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,3&gt; &gt; &gt;::index_axis_mut (891 samples, 0.06%)</title><rect x="78.3177%" y="3285" width="0.0639%" height="15" fill="rgb(245,158,5)" fg:x="1091934" fg:w="891"/><text x="78.5677%" y="3295.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,3&gt; &gt; &gt;::index_axis_move(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (891 samples, 0.06%)</title><rect x="78.3177%" y="3269" width="0.0639%" height="15" fill="rgb(249,208,11)" fg:x="1091934" fg:w="891"/><text x="78.5677%" y="3279.50"></text></g><g><title>neural_network.exe`ndarray::dimension::remove_axis::impl$2::remove_axis(ndarray::dimension::dim::Dim&lt;array$ (889 samples, 0.06%)</title><rect x="78.3179%" y="3253" width="0.0638%" height="15" fill="rgb(210,39,28)" fg:x="1091936" fg:w="889"/><text x="78.5679%" y="3263.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::copy_from_slice(ref_mut$&lt;slice2$&lt;usize&gt; &gt;, ref$&lt;slice2$ (889 samples, 0.06%)</title><rect x="78.3179%" y="3237" width="0.0638%" height="15" fill="rgb(211,56,53)" fg:x="1091936" fg:w="889"/><text x="78.5679%" y="3247.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping (889 samples, 0.06%)</title><rect x="78.3179%" y="3221" width="0.0638%" height="15" fill="rgb(226,201,30)" fg:x="1091936" fg:w="889"/><text x="78.5679%" y="3231.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt; &gt;::index_axis (518 samples, 0.04%)</title><rect x="78.3816%" y="3285" width="0.0372%" height="15" fill="rgb(239,101,34)" fg:x="1092825" fg:w="518"/><text x="78.6316%" y="3295.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt; &gt;::index_axis_move(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (518 samples, 0.04%)</title><rect x="78.3816%" y="3269" width="0.0372%" height="15" fill="rgb(226,209,5)" fg:x="1092825" fg:w="518"/><text x="78.6316%" y="3279.50"></text></g><g><title>neural_network.exe`ndarray::dimension::remove_axis::impl$3::remove_axis(ndarray::dimension::dim::Dim&lt;array$ (460 samples, 0.03%)</title><rect x="78.3858%" y="3253" width="0.0330%" height="15" fill="rgb(250,105,47)" fg:x="1092883" fg:w="460"/><text x="78.6358%" y="3263.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::copy_from_slice(ref_mut$&lt;slice2$&lt;usize&gt; &gt;, ref$&lt;slice2$ (460 samples, 0.03%)</title><rect x="78.3858%" y="3237" width="0.0330%" height="15" fill="rgb(230,72,3)" fg:x="1092883" fg:w="460"/><text x="78.6358%" y="3247.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping (460 samples, 0.03%)</title><rect x="78.3858%" y="3221" width="0.0330%" height="15" fill="rgb(232,218,39)" fg:x="1092883" fg:w="460"/><text x="78.6358%" y="3231.50"></text></g><g><title>neural_network.exe`core::cmp::impls::impl$70::lt (22,552 samples, 1.62%)</title><rect x="92.8057%" y="3157" width="1.6175%" height="15" fill="rgb(248,166,6)" fg:x="1293931" fg:w="22552"/><text x="93.0557%" y="3167.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$6::next(core::ops::range::Range (66,563 samples, 4.77%)</title><rect x="89.7126%" y="3189" width="4.7742%" height="15" fill="rgb(247,89,20)" fg:x="1250805" fg:w="66563"/><text x="89.9626%" y="3199.50">neural..</text></g><g><title>neural_network.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (66,563 samples, 4.77%)</title><rect x="89.7126%" y="3173" width="4.7742%" height="15" fill="rgb(248,130,54)" fg:x="1250805" fg:w="66563"/><text x="89.9626%" y="3183.50">neural..</text></g><g><title>neural_network.exe`core::iter::range::impl$44::forward_unchecked (885 samples, 0.06%)</title><rect x="94.4233%" y="3157" width="0.0635%" height="15" fill="rgb(234,196,4)" fg:x="1316483" fg:w="885"/><text x="94.6733%" y="3167.50"></text></g><g><title>neural_network.exe`core::num::impl$5::checked_add_unsigned (885 samples, 0.06%)</title><rect x="94.4233%" y="3141" width="0.0635%" height="15" fill="rgb(250,143,31)" fg:x="1316483" fg:w="885"/><text x="94.6733%" y="3151.50"></text></g><g><title>neural_network.exe`core::num::impl$5::overflowing_add_unsigned (885 samples, 0.06%)</title><rect x="94.4233%" y="3125" width="0.0635%" height="15" fill="rgb(211,110,34)" fg:x="1316483" fg:w="885"/><text x="94.6733%" y="3135.50"></text></g><g><title>neural_network.exe`core::num::impl$5::overflowing_add (885 samples, 0.06%)</title><rect x="94.4233%" y="3109" width="0.0635%" height="15" fill="rgb(215,124,48)" fg:x="1316483" fg:w="885"/><text x="94.6733%" y="3119.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::dim (1,610 samples, 0.12%)</title><rect x="94.4867%" y="3189" width="0.1155%" height="15" fill="rgb(216,46,13)" fg:x="1317368" fg:w="1610"/><text x="94.7367%" y="3199.50"></text></g><g><title>neural_network.exe`ndarray::dimension::dim::impl$4::clone(ndarray::dimension::dim::Dim&lt;array$ (1,610 samples, 0.12%)</title><rect x="94.4867%" y="3173" width="0.1155%" height="15" fill="rgb(205,184,25)" fg:x="1317368" fg:w="1610"/><text x="94.7367%" y="3183.50"></text></g><g><title>neural_network.exe`core::array::impl$20::clone (1,610 samples, 0.12%)</title><rect x="94.4867%" y="3157" width="0.1155%" height="15" fill="rgb(228,1,10)" fg:x="1317368" fg:w="1610"/><text x="94.7367%" y="3167.50"></text></g><g><title>neural_network.exe`core::array::impl$22::clone (1,610 samples, 0.12%)</title><rect x="94.4867%" y="3141" width="0.1155%" height="15" fill="rgb(213,116,27)" fg:x="1317368" fg:w="1610"/><text x="94.7367%" y="3151.50"></text></g><g><title>`0x7FF97E62CB04 (266 samples, 0.02%)</title><rect x="94.6266%" y="3077" width="0.0191%" height="15" fill="rgb(241,95,50)" fg:x="1319318" fg:w="266"/><text x="94.8766%" y="3087.50"></text></g><g><title>`0x7FF97E68F921 (204 samples, 0.01%)</title><rect x="94.7677%" y="3045" width="0.0146%" height="15" fill="rgb(238,48,32)" fg:x="1321285" fg:w="204"/><text x="95.0177%" y="3055.50"></text></g><g><title>`0x7FF97E68F938 (282 samples, 0.02%)</title><rect x="94.7872%" y="3045" width="0.0202%" height="15" fill="rgb(235,113,49)" fg:x="1321557" fg:w="282"/><text x="95.0372%" y="3055.50"></text></g><g><title>`0x7FF97E62D68A (1,077 samples, 0.08%)</title><rect x="94.7332%" y="3061" width="0.0772%" height="15" fill="rgb(205,127,43)" fg:x="1320805" fg:w="1077"/><text x="94.9832%" y="3071.50"></text></g><g><title>`0x7FF97E62D691 (217 samples, 0.02%)</title><rect x="94.8105%" y="3061" width="0.0156%" height="15" fill="rgb(250,162,2)" fg:x="1321882" fg:w="217"/><text x="95.0605%" y="3071.50"></text></g><g><title>`0x7FF97E62D711 (187 samples, 0.01%)</title><rect x="94.8612%" y="3061" width="0.0134%" height="15" fill="rgb(220,13,41)" fg:x="1322589" fg:w="187"/><text x="95.1112%" y="3071.50"></text></g><g><title>`0x7FF97E696E00 (277 samples, 0.02%)</title><rect x="94.8918%" y="3045" width="0.0199%" height="15" fill="rgb(249,221,25)" fg:x="1323015" fg:w="277"/><text x="95.1418%" y="3055.50"></text></g><g><title>`0x7FF97E696E23 (5,474 samples, 0.39%)</title><rect x="94.9120%" y="3045" width="0.3926%" height="15" fill="rgb(215,208,19)" fg:x="1323297" fg:w="5474"/><text x="95.1620%" y="3055.50"></text></g><g><title>`0x7FF97E696E2C (497 samples, 0.04%)</title><rect x="95.3047%" y="3045" width="0.0356%" height="15" fill="rgb(236,175,2)" fg:x="1328772" fg:w="497"/><text x="95.5547%" y="3055.50"></text></g><g><title>`0x7FF97E696E6D (609 samples, 0.04%)</title><rect x="95.3524%" y="3045" width="0.0437%" height="15" fill="rgb(241,52,2)" fg:x="1329437" fg:w="609"/><text x="95.6024%" y="3055.50"></text></g><g><title>`0x7FF97E696E99 (193 samples, 0.01%)</title><rect x="95.3978%" y="3045" width="0.0138%" height="15" fill="rgb(248,140,14)" fg:x="1330070" fg:w="193"/><text x="95.6478%" y="3055.50"></text></g><g><title>`0x7FF97E696EA8 (157 samples, 0.01%)</title><rect x="95.4135%" y="3045" width="0.0113%" height="15" fill="rgb(253,22,42)" fg:x="1330290" fg:w="157"/><text x="95.6635%" y="3055.50"></text></g><g><title>`0x7FF97E62D7B9 (7,921 samples, 0.57%)</title><rect x="94.8918%" y="3061" width="0.5681%" height="15" fill="rgb(234,61,47)" fg:x="1323015" fg:w="7921"/><text x="95.1418%" y="3071.50"></text></g><g><title>`0x7FF97E696EBC (475 samples, 0.03%)</title><rect x="95.4258%" y="3045" width="0.0341%" height="15" fill="rgb(208,226,15)" fg:x="1330461" fg:w="475"/><text x="95.6758%" y="3055.50"></text></g><g><title>`0x7FF97E62CC9A (10,703 samples, 0.77%)</title><rect x="94.6966%" y="3077" width="0.7677%" height="15" fill="rgb(217,221,4)" fg:x="1320294" fg:w="10703"/><text x="94.9466%" y="3087.50"></text></g><g><title>`0x7FF97E62CCCF (160 samples, 0.01%)</title><rect x="95.4701%" y="3077" width="0.0115%" height="15" fill="rgb(212,174,34)" fg:x="1331078" fg:w="160"/><text x="95.7201%" y="3087.50"></text></g><g><title>`0x7FF97E62CCFC (164 samples, 0.01%)</title><rect x="95.4912%" y="3077" width="0.0118%" height="15" fill="rgb(253,83,4)" fg:x="1331373" fg:w="164"/><text x="95.7412%" y="3087.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::layout_array (863 samples, 0.06%)</title><rect x="95.5204%" y="3077" width="0.0619%" height="15" fill="rgb(250,195,49)" fg:x="1331780" fg:w="863"/><text x="95.7704%" y="3087.50"></text></g><g><title>neural_network.exe`core::alloc::layout::Layout::repeat (863 samples, 0.06%)</title><rect x="95.5204%" y="3061" width="0.0619%" height="15" fill="rgb(241,192,25)" fg:x="1331780" fg:w="863"/><text x="95.7704%" y="3071.50"></text></g><g><title>neural_network.exe`core::num::impl$11::checked_mul (863 samples, 0.06%)</title><rect x="95.5204%" y="3045" width="0.0619%" height="15" fill="rgb(208,124,10)" fg:x="1331780" fg:w="863"/><text x="95.7704%" y="3055.50"></text></g><g><title>neural_network.exe`core::num::impl$11::overflowing_mul (498 samples, 0.04%)</title><rect x="95.5466%" y="3029" width="0.0357%" height="15" fill="rgb(222,33,0)" fg:x="1332145" fg:w="498"/><text x="95.7966%" y="3039.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_alloc_zeroed (969 samples, 0.07%)</title><rect x="95.5823%" y="3077" width="0.0695%" height="15" fill="rgb(234,209,28)" fg:x="1332643" fg:w="969"/><text x="95.8323%" y="3087.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::alloc_zeroed (541 samples, 0.04%)</title><rect x="95.6130%" y="3061" width="0.0388%" height="15" fill="rgb(224,11,23)" fg:x="1333071" fg:w="541"/><text x="95.8630%" y="3071.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::allocate (541 samples, 0.04%)</title><rect x="95.6130%" y="3045" width="0.0388%" height="15" fill="rgb(232,99,1)" fg:x="1333071" fg:w="541"/><text x="95.8630%" y="3055.50"></text></g><g><title>neural_network.exe`alloc::vec::from_elem (15,040 samples, 1.08%)</title><rect x="94.6022%" y="3157" width="1.0787%" height="15" fill="rgb(237,95,45)" fg:x="1318978" fg:w="15040"/><text x="94.8522%" y="3167.50"></text></g><g><title>neural_network.exe`alloc::vec::spec_from_elem::impl$1::from_elem (15,040 samples, 1.08%)</title><rect x="94.6022%" y="3141" width="1.0787%" height="15" fill="rgb(208,109,11)" fg:x="1318978" fg:w="15040"/><text x="94.8522%" y="3151.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;f32,alloc::alloc::Global&gt;::with_capacity_zeroed_in (15,040 samples, 1.08%)</title><rect x="94.6022%" y="3125" width="1.0787%" height="15" fill="rgb(216,190,48)" fg:x="1318978" fg:w="15040"/><text x="94.8522%" y="3135.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_zeroed_in (15,040 samples, 1.08%)</title><rect x="94.6022%" y="3109" width="1.0787%" height="15" fill="rgb(251,171,36)" fg:x="1318978" fg:w="15040"/><text x="94.8522%" y="3119.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (15,040 samples, 1.08%)</title><rect x="94.6022%" y="3093" width="1.0787%" height="15" fill="rgb(230,62,22)" fg:x="1318978" fg:w="15040"/><text x="94.8522%" y="3103.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::process_heap_alloc (406 samples, 0.03%)</title><rect x="95.6518%" y="3077" width="0.0291%" height="15" fill="rgb(225,114,35)" fg:x="1333612" fg:w="406"/><text x="95.9018%" y="3087.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;f32&gt;::add(core::ptr::non_null::NonNull (152 samples, 0.01%)</title><rect x="95.6809%" y="3125" width="0.0109%" height="15" fill="rgb(215,118,42)" fg:x="1334018" fg:w="152"/><text x="95.9309%" y="3135.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_shape_vec_unchecked(ndarray::shape_builder::Shape&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;, alloc::vec::Vec (184 samples, 0.01%)</title><rect x="95.6809%" y="3157" width="0.0132%" height="15" fill="rgb(243,119,21)" fg:x="1334018" fg:w="184"/><text x="95.9309%" y="3167.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_vec_dim_stride_unchecked(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;, ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;, alloc::vec::Vec (184 samples, 0.01%)</title><rect x="95.6809%" y="3141" width="0.0132%" height="15" fill="rgb(252,177,53)" fg:x="1334018" fg:w="184"/><text x="95.9309%" y="3151.50"></text></g><g><title>neural_network.exe`core::iter::adapters::filter::impl$3::try_fold(core::iter::adapters::filter::Filter&lt;core::slice::iter::Iter&lt;usize&gt;,ndarray::dimension::size_of_shape_checked::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;*, unsigned long long, ndarray::dimension::size_of_shape_checked::closure_env$1&lt;ndarray::dimension::dim::Dim&lt;array$ (1,027 samples, 0.07%)</title><rect x="95.6941%" y="3141" width="0.0737%" height="15" fill="rgb(237,209,29)" fg:x="1334202" fg:w="1027"/><text x="95.9441%" y="3151.50"></text></g><g><title>neural_network.exe`core::iter::traits::iterator::Iterator::try_fold(core::slice::iter::Iter&lt;usize&gt;*, unsigned long long, core::iter::adapters::filter::filter_try_fold::closure_env$0&lt;ref$&lt;usize&gt;,usize,enum2$&lt;core::option::Option&lt;usize&gt; &gt;,ndarray::dimension::size_of_shape_checked::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,ndarray::dimension::size_of_shape_checked::closure_env$1&lt;ndarray::dimension::dim::Dim&lt;array$ (1,027 samples, 0.07%)</title><rect x="95.6941%" y="3125" width="0.0737%" height="15" fill="rgb(212,65,23)" fg:x="1334202" fg:w="1027"/><text x="95.9441%" y="3135.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::zeros(tuple$ (16,635 samples, 1.19%)</title><rect x="94.6022%" y="3189" width="1.1931%" height="15" fill="rgb(230,222,46)" fg:x="1318978" fg:w="16635"/><text x="94.8522%" y="3199.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::from_elem(tuple$ (16,635 samples, 1.19%)</title><rect x="94.6022%" y="3173" width="1.1931%" height="15" fill="rgb(215,135,32)" fg:x="1318978" fg:w="16635"/><text x="94.8522%" y="3183.50"></text></g><g><title>neural_network.exe`ndarray::dimension::size_of_shape_checked(ndarray::dimension::dim::Dim&lt;array$ (1,411 samples, 0.10%)</title><rect x="95.6941%" y="3157" width="0.1012%" height="15" fill="rgb(246,101,22)" fg:x="1334202" fg:w="1411"/><text x="95.9441%" y="3167.50"></text></g><g><title>neural_network.exe`ndarray::dimension::dimension_trait::impl$2::size(ndarray::dimension::dim::Dim&lt;array$ (384 samples, 0.03%)</title><rect x="95.7678%" y="3141" width="0.0275%" height="15" fill="rgb(206,107,13)" fg:x="1335229" fg:w="384"/><text x="96.0178%" y="3151.50"></text></g><g><title>neural_network.exe`core::cmp::impls::impl$9::eq(ref$&lt;slice2$&lt;usize&gt; &gt;*, ref$&lt;slice2$ (264,616 samples, 18.98%)</title><rect x="78.7238%" y="3253" width="18.9793%" height="15" fill="rgb(250,100,44)" fg:x="1097595" fg:w="264616"/><text x="78.9738%" y="3263.50">neural_network.exe`core::cmp::..</text></g><g><title>neural_network.exe`core::slice::cmp::impl$0::eq(ref$&lt;slice2$&lt;usize&gt; &gt;, ref$&lt;slice2$ (264,616 samples, 18.98%)</title><rect x="78.7238%" y="3237" width="18.9793%" height="15" fill="rgb(231,147,38)" fg:x="1097595" fg:w="264616"/><text x="78.9738%" y="3247.50">neural_network.exe`core::slice..</text></g><g><title>neural_network.exe`core::slice::cmp::impl$5::equal(ref$&lt;slice2$&lt;usize&gt; &gt;, ref$&lt;slice2$ (264,616 samples, 18.98%)</title><rect x="78.7238%" y="3221" width="18.9793%" height="15" fill="rgb(229,8,40)" fg:x="1097595" fg:w="264616"/><text x="78.9738%" y="3231.50">neural_network.exe`core::slice..</text></g><g><title>neural_network.exe`neural_network::layers::convolutional_layer::convolve_and_slide(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (251,167 samples, 18.01%)</title><rect x="79.6884%" y="3205" width="18.0147%" height="15" fill="rgb(221,135,30)" fg:x="1111044" fg:w="251167"/><text x="79.9384%" y="3215.50">neural_network.exe`neural_ne..</text></g><g><title>neural_network.exe`ndarray::arraytraits::impl$0::index(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (26,598 samples, 1.91%)</title><rect x="95.7953%" y="3189" width="1.9077%" height="15" fill="rgb(249,193,18)" fg:x="1335613" fg:w="26598"/><text x="96.0453%" y="3199.50">n..</text></g><g><title>neural_network.exe`ndarray::dimension::ndindex::impl$16::index_checked(unsigned long long[2]*, ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$ (26,598 samples, 1.91%)</title><rect x="95.7953%" y="3173" width="1.9077%" height="15" fill="rgb(209,133,39)" fg:x="1335613" fg:w="26598"/><text x="96.0453%" y="3183.50">n..</text></g><g><title>neural_network.exe`ndarray::dimension::dimension_trait::impl$2::stride_offset_checked(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$ (26,598 samples, 1.91%)</title><rect x="95.7953%" y="3157" width="1.9077%" height="15" fill="rgb(232,100,14)" fg:x="1335613" fg:w="26598"/><text x="96.0453%" y="3167.50">n..</text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$1::next(core::iter::adapters::zip::Zip&lt;core::slice::iter::IterMut&lt;f32&gt;,core::slice::iter::Iter (219 samples, 0.02%)</title><rect x="97.8304%" y="3237" width="0.0157%" height="15" fill="rgb(224,185,1)" fg:x="1363986" fg:w="219"/><text x="98.0804%" y="3247.50"></text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$5::next(core::iter::adapters::zip::Zip&lt;core::slice::iter::IterMut&lt;f32&gt;,core::slice::iter::Iter (219 samples, 0.02%)</title><rect x="97.8304%" y="3221" width="0.0157%" height="15" fill="rgb(223,139,8)" fg:x="1363986" fg:w="219"/><text x="98.0804%" y="3231.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::is_contiguous (922 samples, 0.07%)</title><rect x="97.8461%" y="3205" width="0.0661%" height="15" fill="rgb(232,213,38)" fg:x="1364205" fg:w="922"/><text x="98.0961%" y="3215.50"></text></g><g><title>neural_network.exe`ndarray::dimension::dimension_trait::Dimension::is_contiguous(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$ (922 samples, 0.07%)</title><rect x="97.8461%" y="3189" width="0.0661%" height="15" fill="rgb(207,94,22)" fg:x="1364205" fg:w="922"/><text x="98.0961%" y="3199.50"></text></g><g><title>neural_network.exe`ndarray::dimension::dimension_trait::impl$2::default_strides(ndarray::dimension::dim::Dim&lt;array$ (922 samples, 0.07%)</title><rect x="97.8461%" y="3173" width="0.0661%" height="15" fill="rgb(219,183,54)" fg:x="1364205" fg:w="922"/><text x="98.0961%" y="3183.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::as_slice_memory_order_mut (1,551 samples, 0.11%)</title><rect x="97.8461%" y="3237" width="0.1112%" height="15" fill="rgb(216,185,54)" fg:x="1364205" fg:w="1551"/><text x="98.0961%" y="3247.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::try_as_slice_memory_order_mut (1,551 samples, 0.11%)</title><rect x="97.8461%" y="3221" width="0.1112%" height="15" fill="rgb(254,217,39)" fg:x="1364205" fg:w="1551"/><text x="98.0961%" y="3231.50"></text></g><g><title>neural_network.exe`ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$ (629 samples, 0.05%)</title><rect x="97.9122%" y="3205" width="0.0451%" height="15" fill="rgb(240,178,23)" fg:x="1365127" fg:w="629"/><text x="98.1622%" y="3215.50"></text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$1::fold(core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;usize&gt;,core::slice::iter::Iter&lt;usize&gt; &gt;, long long, ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$ (629 samples, 0.05%)</title><rect x="97.9122%" y="3189" width="0.0451%" height="15" fill="rgb(218,11,47)" fg:x="1365127" fg:w="629"/><text x="98.1622%" y="3199.50"></text></g><g><title>neural_network.exe`core::iter::adapters::zip::impl$4::fold(core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;usize&gt;,core::slice::iter::Iter&lt;usize&gt; &gt;, long long, ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$ (629 samples, 0.05%)</title><rect x="97.9122%" y="3173" width="0.0451%" height="15" fill="rgb(218,51,51)" fg:x="1365127" fg:w="629"/><text x="98.1622%" y="3183.50"></text></g><g><title>neural_network.exe`ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure$0(ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, long long, tuple$&lt;ref$&lt;usize&gt;,ref$ (629 samples, 0.05%)</title><rect x="97.9122%" y="3157" width="0.0451%" height="15" fill="rgb(238,126,27)" fg:x="1365127" fg:w="629"/><text x="98.1622%" y="3167.50"></text></g><g><title>neural_network.exe`ndarray::dimension::dimension_trait::Dimension::strides_equivalent(ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;*, ndarray::dimension::dim::Dim&lt;array$ (1,308 samples, 0.09%)</title><rect x="97.9636%" y="3237" width="0.0938%" height="15" fill="rgb(249,202,22)" fg:x="1365844" fg:w="1308"/><text x="98.2136%" y="3247.50"></text></g><g><title>neural_network.exe`core::iter::traits::iterator::Iterator::all(core::iter::adapters::map::Map&lt;core::iter::adapters::zip::Zip&lt;core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;usize&gt;,core::slice::iter::Iter&lt;usize&gt; &gt;,core::slice::iter::Iter&lt;usize&gt; &gt;,ndarray::dimension::dimension_trait::Dimension::strides_equivalent::closure_env$1&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;*, ndarray::dimension::dimension_trait::Dimension::strides_equivalent::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (1,308 samples, 0.09%)</title><rect x="97.9636%" y="3221" width="0.0938%" height="15" fill="rgb(254,195,49)" fg:x="1365844" fg:w="1308"/><text x="98.2136%" y="3231.50"></text></g><g><title>neural_network.exe`core::iter::adapters::map::impl$2::try_fold(core::iter::adapters::map::Map&lt;core::iter::adapters::zip::Zip&lt;core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;usize&gt;,core::slice::iter::Iter&lt;usize&gt; &gt;,core::slice::iter::Iter&lt;usize&gt; &gt;,ndarray::dimension::dimension_trait::Dimension::strides_equivalent::closure_env$1&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;*, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::all::check::closure_env$0&lt;tuple$&lt;ref$&lt;usize&gt;,ref$&lt;usize&gt;,ref$&lt;usize&gt; &gt;,ndarray::dimension::dimension_trait::Dimension::strides_equivalent::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (1,308 samples, 0.09%)</title><rect x="97.9636%" y="3205" width="0.0938%" height="15" fill="rgb(208,123,14)" fg:x="1365844" fg:w="1308"/><text x="98.2136%" y="3215.50"></text></g><g><title>neural_network.exe`core::iter::traits::iterator::Iterator::try_fold(core::iter::adapters::zip::Zip&lt;core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;usize&gt;,core::slice::iter::Iter&lt;usize&gt; &gt;,core::slice::iter::Iter&lt;usize&gt; &gt;*, tuple$&lt;&gt;, core::iter::adapters::map::map_try_fold::closure_env$0&lt;tuple$&lt;tuple$&lt;ref$&lt;usize&gt;,ref$&lt;usize&gt; &gt;,ref$&lt;usize&gt; &gt;,tuple$&lt;ref$&lt;usize&gt;,ref$&lt;usize&gt;,ref$&lt;usize&gt; &gt;,tuple$&lt;&gt;,enum2$&lt;core::ops::control_flow::ControlFlow&lt;tuple$&lt;&gt;,tuple$&lt;&gt; &gt; &gt;,ndarray::dimension::dimension_trait::Dimension::strides_equivalent::closure_env$1&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,core::iter::traits::iterator::Iterator::all::check::closure_env$0&lt;tuple$&lt;ref$&lt;usize&gt;,ref$&lt;usize&gt;,ref$&lt;usize&gt; &gt;,ndarray::dimension::dimension_trait::Dimension::strides_equivalent::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (1,308 samples, 0.09%)</title><rect x="97.9636%" y="3189" width="0.0938%" height="15" fill="rgb(224,200,8)" fg:x="1365844" fg:w="1308"/><text x="98.2136%" y="3199.50"></text></g><g><title>neural_network.exe`core::iter::adapters::map::map_try_fold::closure$0(core::iter::adapters::map::map_try_fold::closure_env$0&lt;tuple$&lt;tuple$&lt;ref$&lt;usize&gt;,ref$&lt;usize&gt; &gt;,ref$&lt;usize&gt; &gt;,tuple$&lt;ref$&lt;usize&gt;,ref$&lt;usize&gt;,ref$&lt;usize&gt; &gt;,tuple$&lt;&gt;,enum2$&lt;core::ops::control_flow::ControlFlow&lt;tuple$&lt;&gt;,tuple$&lt;&gt; &gt; &gt;,ndarray::dimension::dimension_trait::Dimension::strides_equivalent::closure_env$1&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;,core::iter::traits::iterator::Iterator::all::check::closure_env$0&lt;tuple$&lt;ref$&lt;usize&gt;,ref$&lt;usize&gt;,ref$&lt;usize&gt; &gt;,ndarray::dimension::dimension_trait::Dimension::strides_equivalent::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt; &gt;*, tuple$&lt;&gt;, tuple$&lt;tuple$&lt;ref$&lt;usize&gt;,ref$&lt;usize&gt; &gt;,ref$ (1,307 samples, 0.09%)</title><rect x="97.9637%" y="3173" width="0.0937%" height="15" fill="rgb(217,61,36)" fg:x="1365845" fg:w="1307"/><text x="98.2137%" y="3183.50"></text></g><g><title>neural_network.exe`core::iter::traits::iterator::Iterator::all::check::closure$0(core::iter::traits::iterator::Iterator::all::check::closure_env$0&lt;tuple$&lt;ref$&lt;usize&gt;,ref$&lt;usize&gt;,ref$&lt;usize&gt; &gt;,ndarray::dimension::dimension_trait::Dimension::strides_equivalent::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;*, tuple$&lt;&gt;, tuple$&lt;ref$&lt;usize&gt;,ref$&lt;usize&gt;,ref$ (1,307 samples, 0.09%)</title><rect x="97.9637%" y="3157" width="0.0937%" height="15" fill="rgb(206,35,45)" fg:x="1365845" fg:w="1307"/><text x="98.2137%" y="3167.50"></text></g><g><title>neural_network.exe`ndarray::dimension::dimension_trait::Dimension::strides_equivalent::closure$0(ndarray::dimension::dimension_trait::Dimension::strides_equivalent::closure_env$0&lt;ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;ref$&lt;usize&gt;,ref$&lt;usize&gt;,ref$ (1,307 samples, 0.09%)</title><rect x="97.9637%" y="3141" width="0.0937%" height="15" fill="rgb(217,65,33)" fg:x="1365845" fg:w="1307"/><text x="98.2137%" y="3151.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (308,127 samples, 22.10%)</title><rect x="75.9917%" y="3349" width="22.1001%" height="15" fill="rgb(222,158,48)" fg:x="1059504" fg:w="308127"/><text x="76.2417%" y="3359.50">neural_network.exe`core::ptr::drop_..</text></g><g><title>neural_network.exe`core::ptr::drop_in_place(ndarray::data_repr::OwnedRepr (308,127 samples, 22.10%)</title><rect x="75.9917%" y="3333" width="22.1001%" height="15" fill="rgb(254,2,54)" fg:x="1059504" fg:w="308127"/><text x="76.2417%" y="3343.50">neural_network.exe`core::ptr::drop_..</text></g><g><title>neural_network.exe`ndarray::data_repr::impl$2::drop(ndarray::data_repr::OwnedRepr (308,127 samples, 22.10%)</title><rect x="75.9917%" y="3317" width="22.1001%" height="15" fill="rgb(250,143,38)" fg:x="1059504" fg:w="308127"/><text x="76.2417%" y="3327.50">neural_network.exe`ndarray::data_re..</text></g><g><title>neural_network.exe`neural_network::layers::convolutional_layer::ConvolutionalLayer::im_ready_to_pass_regular_rick(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (308,017 samples, 22.09%)</title><rect x="75.9996%" y="3301" width="22.0922%" height="15" fill="rgb(248,25,0)" fg:x="1059614" fg:w="308017"/><text x="76.2496%" y="3311.50">neural_network.exe`neural_network::..</text></g><g><title>neural_network.exe`ndarray::impl_ops::assign_ops::impl$0::add_assign(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (274,261 samples, 19.67%)</title><rect x="78.4207%" y="3285" width="19.6711%" height="15" fill="rgb(206,152,27)" fg:x="1093370" fg:w="274261"/><text x="78.6707%" y="3295.50">neural_network.exe`ndarray::imp..</text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::zip_mut_with(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::impl_ops::assign_ops::impl$0::add_assign::closure_env$0&lt;f32,ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (274,261 samples, 19.67%)</title><rect x="78.4207%" y="3269" width="19.6711%" height="15" fill="rgb(240,77,30)" fg:x="1093370" fg:w="274261"/><text x="78.6707%" y="3279.50">neural_network.exe`ndarray::Arr..</text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;::zip_mut_with_same_shape&lt;f32,ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,f32,ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::impl_ops::assign_ops::impl$0::add_assign::closure_env$0&lt;f32,ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt; &gt;(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::impl_ops::assign_ops::impl$0::add_assign::closure_env$0&lt;f32,ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (5,420 samples, 0.39%)</title><rect x="97.7030%" y="3253" width="0.3887%" height="15" fill="rgb(231,5,3)" fg:x="1362211" fg:w="5420"/><text x="97.9530%" y="3263.50"></text></g><g><title>neural_network.exe`ndarray::impl_ops::assign_ops::impl$0::add_assign::closure$0(ndarray::impl_ops::assign_ops::impl$0::add_assign::closure_env$0&lt;f32,ndarray::ViewRepr&lt;ref_mut$&lt;f32&gt; &gt;,ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (479 samples, 0.03%)</title><rect x="98.0574%" y="3237" width="0.0344%" height="15" fill="rgb(207,226,32)" fg:x="1367152" fg:w="479"/><text x="98.3074%" y="3247.50"></text></g><g><title>neural_network.exe`core::ops::arith::impl$353::add_assign (479 samples, 0.03%)</title><rect x="98.0574%" y="3221" width="0.0344%" height="15" fill="rgb(222,207,47)" fg:x="1367152" fg:w="479"/><text x="98.3074%" y="3231.50"></text></g><g><title>`0x7FF968D511FB (169 samples, 0.01%)</title><rect x="98.0918%" y="3269" width="0.0121%" height="15" fill="rgb(229,115,45)" fg:x="1367631" fg:w="169"/><text x="98.3418%" y="3279.50"></text></g><g><title>neural_network.exe`ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt; &gt;::to_owned&lt;f32,ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt; &gt; (171 samples, 0.01%)</title><rect x="98.0918%" y="3349" width="0.0123%" height="15" fill="rgb(224,191,6)" fg:x="1367631" fg:w="171"/><text x="98.3418%" y="3359.50"></text></g><g><title>neural_network.exe`alloc::slice::impl$0::to_vec(ref$&lt;slice2$ (171 samples, 0.01%)</title><rect x="98.0918%" y="3333" width="0.0123%" height="15" fill="rgb(230,227,24)" fg:x="1367631" fg:w="171"/><text x="98.3418%" y="3343.50"></text></g><g><title>neural_network.exe`alloc::slice::impl$0::to_vec_in(ref$&lt;slice2$ (171 samples, 0.01%)</title><rect x="98.0918%" y="3317" width="0.0123%" height="15" fill="rgb(228,80,19)" fg:x="1367631" fg:w="171"/><text x="98.3418%" y="3327.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$ (171 samples, 0.01%)</title><rect x="98.0918%" y="3301" width="0.0123%" height="15" fill="rgb(247,229,0)" fg:x="1367631" fg:w="171"/><text x="98.3418%" y="3311.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$ (171 samples, 0.01%)</title><rect x="98.0918%" y="3285" width="0.0123%" height="15" fill="rgb(237,194,15)" fg:x="1367631" fg:w="171"/><text x="98.3418%" y="3295.50"></text></g><g><title>`0x7FF968D511FB (555 samples, 0.04%)</title><rect x="98.1041%" y="3317" width="0.0398%" height="15" fill="rgb(219,203,20)" fg:x="1367802" fg:w="555"/><text x="98.3541%" y="3327.50"></text></g><g><title>`0x7FF968D5154E (451 samples, 0.03%)</title><rect x="98.1546%" y="3317" width="0.0323%" height="15" fill="rgb(234,128,8)" fg:x="1368507" fg:w="451"/><text x="98.4046%" y="3327.50"></text></g><g><title>`0x7FF968D51556 (258 samples, 0.02%)</title><rect x="98.1870%" y="3317" width="0.0185%" height="15" fill="rgb(248,202,8)" fg:x="1368958" fg:w="258"/><text x="98.4370%" y="3327.50"></text></g><g><title>neural_network.exe`ndarray::impl_clone::impl$0::clone(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (1,525 samples, 0.11%)</title><rect x="98.1041%" y="3349" width="0.1094%" height="15" fill="rgb(206,104,37)" fg:x="1367802" fg:w="1525"/><text x="98.3541%" y="3359.50"></text></g><g><title>neural_network.exe`ndarray::data_traits::impl$14::clone_with_ptr(ndarray::data_repr::OwnedRepr&lt;f32&gt;*, core::ptr::non_null::NonNull (1,525 samples, 0.11%)</title><rect x="98.1041%" y="3333" width="0.1094%" height="15" fill="rgb(223,8,27)" fg:x="1367802" fg:w="1525"/><text x="98.3541%" y="3343.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping (768 samples, 0.06%)</title><rect x="98.2201%" y="3237" width="0.0551%" height="15" fill="rgb(216,217,28)" fg:x="1369420" fg:w="768"/><text x="98.4701%" y="3247.50"></text></g><g><title>neural_network.exe`matrixmultiply::packing::pack_avx2&lt;matrixmultiply::kernel::U8,f32&gt;(unsigned long long, unsigned long long, ref_mut$&lt;slice2$ (882 samples, 0.06%)</title><rect x="98.2167%" y="3269" width="0.0633%" height="15" fill="rgb(249,199,1)" fg:x="1369373" fg:w="882"/><text x="98.4667%" y="3279.50"></text></g><g><title>neural_network.exe`matrixmultiply::packing::pack_impl(unsigned long long, unsigned long long, ref_mut$&lt;slice2$ (882 samples, 0.06%)</title><rect x="98.2167%" y="3253" width="0.0633%" height="15" fill="rgb(240,85,17)" fg:x="1369373" fg:w="882"/><text x="98.4667%" y="3263.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping (404 samples, 0.03%)</title><rect x="98.2811%" y="3189" width="0.0290%" height="15" fill="rgb(206,108,45)" fg:x="1370270" fg:w="404"/><text x="98.5311%" y="3199.50"></text></g><g><title>neural_network.exe`matrixmultiply::packing::pack_avx2&lt;matrixmultiply::kernel::U8,f32&gt;(unsigned long long, unsigned long long, ref_mut$&lt;slice2$ (438 samples, 0.03%)</title><rect x="98.2801%" y="3221" width="0.0314%" height="15" fill="rgb(245,210,41)" fg:x="1370256" fg:w="438"/><text x="98.5301%" y="3231.50"></text></g><g><title>neural_network.exe`matrixmultiply::packing::pack_impl(unsigned long long, unsigned long long, ref_mut$&lt;slice2$ (438 samples, 0.03%)</title><rect x="98.2801%" y="3205" width="0.0314%" height="15" fill="rgb(206,13,37)" fg:x="1370256" fg:w="438"/><text x="98.5301%" y="3215.50"></text></g><g><title>neural_network.exe`matrixmultiply::gemm::gemm_loop::closure$1(matrixmultiply::gemm::gemm_loop::closure_env$1&lt;matrixmultiply::sgemm_kernel::KernelFmaAvx2&gt;*, tuple$&lt;&gt;*, matrixmultiply::ptr::Ptr&lt;ptr_mut$ (440 samples, 0.03%)</title><rect x="98.2800%" y="3253" width="0.0316%" height="15" fill="rgb(250,61,18)" fg:x="1370255" fg:w="440"/><text x="98.5300%" y="3263.50"></text></g><g><title>neural_network.exe`rawpointer::PointerExt::stride_offset(matrixmultiply::ptr::Ptr&lt;ptr_mut$ (439 samples, 0.03%)</title><rect x="98.2801%" y="3237" width="0.0315%" height="15" fill="rgb(235,172,48)" fg:x="1370256" fg:w="439"/><text x="98.5301%" y="3247.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_load_ps (1,358 samples, 0.10%)</title><rect x="98.3253%" y="3157" width="0.0974%" height="15" fill="rgb(249,201,17)" fg:x="1370887" fg:w="1358"/><text x="98.5753%" y="3167.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_movehdup_ps (358 samples, 0.03%)</title><rect x="98.4240%" y="3157" width="0.0257%" height="15" fill="rgb(219,208,6)" fg:x="1372263" fg:w="358"/><text x="98.6740%" y="3167.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_moveldup_ps (1,105 samples, 0.08%)</title><rect x="98.4497%" y="3157" width="0.0793%" height="15" fill="rgb(248,31,23)" fg:x="1372621" fg:w="1105"/><text x="98.6997%" y="3167.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_permute2f128_ps (6,012 samples, 0.43%)</title><rect x="98.5344%" y="3157" width="0.4312%" height="15" fill="rgb(245,15,42)" fg:x="1373802" fg:w="6012"/><text x="98.7844%" y="3167.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::avx::_mm256_permute_ps (2,046 samples, 0.15%)</title><rect x="98.9656%" y="3157" width="0.1467%" height="15" fill="rgb(222,217,39)" fg:x="1379814" fg:w="2046"/><text x="99.2156%" y="3167.50"></text></g><g><title>neural_network.exe`matrixmultiply::sgemm_kernel::impl$2::kernel (13,848 samples, 0.99%)</title><rect x="98.3122%" y="3205" width="0.9932%" height="15" fill="rgb(210,219,27)" fg:x="1370704" fg:w="13848"/><text x="98.5622%" y="3215.50"></text></g><g><title>neural_network.exe`matrixmultiply::sgemm_kernel::kernel_target_fma (13,839 samples, 0.99%)</title><rect x="98.3128%" y="3189" width="0.9926%" height="15" fill="rgb(252,166,36)" fg:x="1370713" fg:w="13839"/><text x="98.5628%" y="3199.50"></text></g><g><title>neural_network.exe`matrixmultiply::sgemm_kernel::kernel_x86_avx (13,746 samples, 0.99%)</title><rect x="98.3195%" y="3173" width="0.9859%" height="15" fill="rgb(245,132,34)" fg:x="1370806" fg:w="13746"/><text x="98.5695%" y="3183.50"></text></g><g><title>neural_network.exe`matrixmultiply::x86::impl$1::multiply_add (2,414 samples, 0.17%)</title><rect x="99.1323%" y="3157" width="0.1731%" height="15" fill="rgb(236,54,3)" fg:x="1382138" fg:w="2414"/><text x="99.3823%" y="3167.50"></text></g><g><title>neural_network.exe`core::core_arch::x86::fma::_mm256_fmadd_ps (2,414 samples, 0.17%)</title><rect x="99.1323%" y="3141" width="0.1731%" height="15" fill="rgb(241,173,43)" fg:x="1382138" fg:w="2414"/><text x="99.3823%" y="3151.50"></text></g><g><title>neural_network.exe`matrixmultiply::gemm::gemm_packed::closure$1(matrixmultiply::gemm::gemm_packed::closure_env$1&lt;matrixmultiply::sgemm_kernel::KernelFmaAvx2&gt;*, tuple$&lt;&gt;*, ref_mut$&lt;slice2$ (13,861 samples, 0.99%)</title><rect x="98.3117%" y="3221" width="0.9942%" height="15" fill="rgb(215,190,9)" fg:x="1370697" fg:w="13861"/><text x="98.5617%" y="3231.50"></text></g><g><title>neural_network.exe`ndarray::impl_clone::impl$0::clone(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (15,233 samples, 1.09%)</title><rect x="98.2134%" y="3333" width="1.0926%" height="15" fill="rgb(242,101,16)" fg:x="1369327" fg:w="15233"/><text x="98.4634%" y="3343.50"></text></g><g><title>neural_network.exe`ndarray::data_traits::impl$14::clone_with_ptr(ndarray::data_repr::OwnedRepr&lt;f32&gt;*, core::ptr::non_null::NonNull (15,233 samples, 1.09%)</title><rect x="98.2134%" y="3317" width="1.0926%" height="15" fill="rgb(223,190,21)" fg:x="1369327" fg:w="15233"/><text x="98.4634%" y="3327.50"></text></g><g><title>neural_network.exe`ndarray::linalg::impl_linalg::impl$4::dot&lt;f32,ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::data_repr::OwnedRepr&lt;f32&gt; &gt;(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (15,228 samples, 1.09%)</title><rect x="98.2138%" y="3301" width="1.0922%" height="15" fill="rgb(215,228,25)" fg:x="1369332" fg:w="15228"/><text x="98.4638%" y="3311.50"></text></g><g><title>neural_network.exe`matrixmultiply::gemm::gemm_loop&lt;matrixmultiply::sgemm_kernel::KernelFmaAvx2&gt; (15,192 samples, 1.09%)</title><rect x="98.2164%" y="3285" width="1.0896%" height="15" fill="rgb(225,36,22)" fg:x="1369368" fg:w="15192"/><text x="98.4664%" y="3295.50"></text></g><g><title>neural_network.exe`matrixmultiply::threading::RangeChunkParallel&lt;matrixmultiply::gemm::gemm_loop::closure_env$0&lt;matrixmultiply::sgemm_kernel::KernelFmaAvx2&gt; &gt;::for_each(matrixmultiply::threading::RangeChunkParallel&lt;matrixmultiply::gemm::gemm_loop::closure_env$0&lt;matrixmultiply::sgemm_kernel::KernelFmaAvx2&gt; &gt;, matrixmultiply::gemm::gemm_loop::closure_env$1 (14,305 samples, 1.03%)</title><rect x="98.2800%" y="3269" width="1.0260%" height="15" fill="rgb(251,106,46)" fg:x="1370255" fg:w="14305"/><text x="98.5300%" y="3279.50"></text></g><g><title>neural_network.exe`matrixmultiply::util::impl$0::next (13,865 samples, 0.99%)</title><rect x="98.3115%" y="3253" width="0.9945%" height="15" fill="rgb(208,90,1)" fg:x="1370695" fg:w="13865"/><text x="98.5615%" y="3263.50"></text></g><g><title>neural_network.exe`matrixmultiply::threading::RangeChunkParallel&lt;matrixmultiply::gemm::gemm_packed::closure_env$0&lt;matrixmultiply::sgemm_kernel::KernelFmaAvx2&gt; &gt;::for_each&lt;matrixmultiply::gemm::gemm_packed::closure_env$0&lt;matrixmultiply::sgemm_kernel::KernelFmaAvx2&gt;,ref_mut$&lt;slice2$&lt;f32&gt; &gt;,matrixmultiply::gemm::gemm_packed::closure_env$1&lt;matrixmultiply::sgemm_kernel::KernelFmaAvx2&gt; &gt;(matrixmultiply::threading::RangeChunkParallel&lt;matrixmultiply::gemm::gemm_packed::closure_env$0&lt;matrixmultiply::sgemm_kernel::KernelFmaAvx2&gt; &gt;, matrixmultiply::gemm::gemm_packed::closure_env$1 (13,864 samples, 0.99%)</title><rect x="98.3116%" y="3237" width="0.9944%" height="15" fill="rgb(243,10,4)" fg:x="1370696" fg:w="13864"/><text x="98.5616%" y="3247.50"></text></g><g><title>neural_network.exe`neural_network::networks::convolutional_net::ConvolutionalNet::back_prop(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,4&gt; &gt; &gt;*, ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (1,054,824 samples, 75.66%)</title><rect x="23.6557%" y="3381" width="75.6561%" height="15" fill="rgb(212,137,27)" fg:x="329816" fg:w="1054824"/><text x="23.9057%" y="3391.50">neural_network.exe`neural_network::networks::convolutional_net::ConvolutionalNet::back_prop(ndarray::ArrayBase&lt;ndarray::ViewRe..</text></g><g><title>neural_network.exe`neural_network::networks::convolutional_net::ConvolutionalNet::forward_pass(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (327,962 samples, 23.52%)</title><rect x="75.7890%" y="3365" width="23.5227%" height="15" fill="rgb(231,220,49)" fg:x="1056678" fg:w="327962"/><text x="76.0390%" y="3375.50">neural_network.exe`neural_network::ne..</text></g><g><title>neural_network.exe`neural_network::layers::dense_layer::DenseLayer::pass(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (15,313 samples, 1.10%)</title><rect x="98.2134%" y="3349" width="1.0983%" height="15" fill="rgb(237,96,20)" fg:x="1369327" fg:w="15313"/><text x="98.4634%" y="3359.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$6::next(core::ops::range::Range (156 samples, 0.01%)</title><rect x="99.3751%" y="3365" width="0.0112%" height="15" fill="rgb(239,229,30)" fg:x="1385523" fg:w="156"/><text x="99.6251%" y="3375.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (156 samples, 0.01%)</title><rect x="99.3751%" y="3349" width="0.0112%" height="15" fill="rgb(219,65,33)" fg:x="1385523" fg:w="156"/><text x="99.6251%" y="3359.50"></text></g><g><title>neural_network.exe`core::cmp::impls::impl$58::lt (154 samples, 0.01%)</title><rect x="99.3752%" y="3333" width="0.0110%" height="15" fill="rgb(243,134,7)" fg:x="1385525" fg:w="154"/><text x="99.6252%" y="3343.50"></text></g><g><title>neural_network.exe`neural_network::networks::convolutional_net::ConvolutionalNet::calculate_bce_loss(ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;ref$&lt;f32&gt; &gt;,ndarray::dimension::dim::Dim&lt;array$ (1,697 samples, 0.12%)</title><rect x="99.3117%" y="3381" width="0.1217%" height="15" fill="rgb(216,177,54)" fg:x="1384640" fg:w="1697"/><text x="99.5617%" y="3391.50"></text></g><g><title>neural_network.exe`std::f32::impl$0::ln (654 samples, 0.05%)</title><rect x="99.3865%" y="3365" width="0.0469%" height="15" fill="rgb(211,160,20)" fg:x="1385683" fg:w="654"/><text x="99.6365%" y="3375.50"></text></g><g><title>neural_network.exe`__scrt_common_main_seh() (1,386,273 samples, 99.43%)</title><rect x="0.0087%" y="3589" width="99.4289%" height="15" fill="rgb(239,85,39)" fg:x="121" fg:w="1386273"/><text x="0.2587%" y="3599.50">neural_network.exe`__scrt_common_main_seh()</text></g><g><title>neural_network.exe`invoke_main() (1,386,268 samples, 99.43%)</title><rect x="0.0090%" y="3573" width="99.4285%" height="15" fill="rgb(232,125,22)" fg:x="126" fg:w="1386268"/><text x="0.2590%" y="3583.50">neural_network.exe`invoke_main()</text></g><g><title>neural_network.exe`main (1,386,268 samples, 99.43%)</title><rect x="0.0090%" y="3557" width="99.4285%" height="15" fill="rgb(244,57,34)" fg:x="126" fg:w="1386268"/><text x="0.2590%" y="3567.50">neural_network.exe`main</text></g><g><title>neural_network.exe`std::rt::lang_start_internal (1,386,268 samples, 99.43%)</title><rect x="0.0090%" y="3541" width="99.4285%" height="15" fill="rgb(214,203,32)" fg:x="126" fg:w="1386268"/><text x="0.2590%" y="3551.50">neural_network.exe`std::rt::lang_start_internal</text></g><g><title>neural_network.exe`std::panic::catch_unwind (1,386,268 samples, 99.43%)</title><rect x="0.0090%" y="3525" width="99.4285%" height="15" fill="rgb(207,58,43)" fg:x="126" fg:w="1386268"/><text x="0.2590%" y="3535.50">neural_network.exe`std::panic::catch_unwind</text></g><g><title>neural_network.exe`std::panicking::try (1,386,268 samples, 99.43%)</title><rect x="0.0090%" y="3509" width="99.4285%" height="15" fill="rgb(215,193,15)" fg:x="126" fg:w="1386268"/><text x="0.2590%" y="3519.50">neural_network.exe`std::panicking::try</text></g><g><title>neural_network.exe`std::panicking::try::do_call (1,386,268 samples, 99.43%)</title><rect x="0.0090%" y="3493" width="99.4285%" height="15" fill="rgb(232,15,44)" fg:x="126" fg:w="1386268"/><text x="0.2590%" y="3503.50">neural_network.exe`std::panicking::try::do_call</text></g><g><title>neural_network.exe`std::rt::lang_start_internal::closure$2 (1,386,268 samples, 99.43%)</title><rect x="0.0090%" y="3477" width="99.4285%" height="15" fill="rgb(212,3,48)" fg:x="126" fg:w="1386268"/><text x="0.2590%" y="3487.50">neural_network.exe`std::rt::lang_start_internal::closure$2</text></g><g><title>neural_network.exe`std::panic::catch_unwind (1,386,268 samples, 99.43%)</title><rect x="0.0090%" y="3461" width="99.4285%" height="15" fill="rgb(218,128,7)" fg:x="126" fg:w="1386268"/><text x="0.2590%" y="3471.50">neural_network.exe`std::panic::catch_unwind</text></g><g><title>neural_network.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$ (1,386,268 samples, 99.43%)</title><rect x="0.0090%" y="3445" width="99.4285%" height="15" fill="rgb(226,216,39)" fg:x="126" fg:w="1386268"/><text x="0.2590%" y="3455.50">neural_network.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$</text></g><g><title>neural_network.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (1,386,268 samples, 99.43%)</title><rect x="0.0090%" y="3429" width="99.4285%" height="15" fill="rgb(243,47,51)" fg:x="126" fg:w="1386268"/><text x="0.2590%" y="3439.50">neural_network.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*)</text></g><g><title>neural_network.exe`neural_network::main (1,386,268 samples, 99.43%)</title><rect x="0.0090%" y="3413" width="99.4285%" height="15" fill="rgb(241,183,40)" fg:x="126" fg:w="1386268"/><text x="0.2590%" y="3423.50">neural_network.exe`neural_network::main</text></g><g><title>neural_network.exe`neural_network::make_convolutional_net (1,386,268 samples, 99.43%)</title><rect x="0.0090%" y="3397" width="99.4285%" height="15" fill="rgb(231,217,32)" fg:x="126" fg:w="1386268"/><text x="0.2590%" y="3407.50">neural_network.exe`neural_network::make_convolutional_net</text></g><g><title>neural_network.exe`enum2$&lt;core::result::Result&lt;tuple$&lt;&gt;,ndarray::error::ShapeError&gt; &gt;::unwrap(enum2$&lt;core::result::Result&lt;tuple$ (145 samples, 0.01%)</title><rect x="99.4500%" y="3381" width="0.0104%" height="15" fill="rgb(229,61,38)" fg:x="1386568" fg:w="145"/><text x="99.7000%" y="3391.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (166 samples, 0.01%)</title><rect x="99.4723%" y="3221" width="0.0119%" height="15" fill="rgb(225,210,5)" fg:x="1386879" fg:w="166"/><text x="99.7223%" y="3231.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (158 samples, 0.01%)</title><rect x="99.6103%" y="1045" width="0.0113%" height="15" fill="rgb(231,79,45)" fg:x="1388802" fg:w="158"/><text x="99.8603%" y="1055.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (158 samples, 0.01%)</title><rect x="99.6103%" y="1029" width="0.0113%" height="15" fill="rgb(224,100,7)" fg:x="1388802" fg:w="158"/><text x="99.8603%" y="1039.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (158 samples, 0.01%)</title><rect x="99.6103%" y="1013" width="0.0113%" height="15" fill="rgb(241,198,18)" fg:x="1388802" fg:w="158"/><text x="99.8603%" y="1023.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (158 samples, 0.01%)</title><rect x="99.6103%" y="997" width="0.0113%" height="15" fill="rgb(252,97,53)" fg:x="1388802" fg:w="158"/><text x="99.8603%" y="1007.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (158 samples, 0.01%)</title><rect x="99.6103%" y="981" width="0.0113%" height="15" fill="rgb(220,88,7)" fg:x="1388802" fg:w="158"/><text x="99.8603%" y="991.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (158 samples, 0.01%)</title><rect x="99.6103%" y="965" width="0.0113%" height="15" fill="rgb(213,176,14)" fg:x="1388802" fg:w="158"/><text x="99.8603%" y="975.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (158 samples, 0.01%)</title><rect x="99.6103%" y="949" width="0.0113%" height="15" fill="rgb(246,73,7)" fg:x="1388802" fg:w="158"/><text x="99.8603%" y="959.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (162 samples, 0.01%)</title><rect x="99.6103%" y="1061" width="0.0116%" height="15" fill="rgb(245,64,36)" fg:x="1388802" fg:w="162"/><text x="99.8603%" y="1071.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (202 samples, 0.01%)</title><rect x="99.6077%" y="1173" width="0.0145%" height="15" fill="rgb(245,80,10)" fg:x="1388767" fg:w="202"/><text x="99.8577%" y="1183.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (202 samples, 0.01%)</title><rect x="99.6077%" y="1157" width="0.0145%" height="15" fill="rgb(232,107,50)" fg:x="1388767" fg:w="202"/><text x="99.8577%" y="1167.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (202 samples, 0.01%)</title><rect x="99.6077%" y="1141" width="0.0145%" height="15" fill="rgb(253,3,0)" fg:x="1388767" fg:w="202"/><text x="99.8577%" y="1151.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (202 samples, 0.01%)</title><rect x="99.6077%" y="1125" width="0.0145%" height="15" fill="rgb(212,99,53)" fg:x="1388767" fg:w="202"/><text x="99.8577%" y="1135.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (202 samples, 0.01%)</title><rect x="99.6077%" y="1109" width="0.0145%" height="15" fill="rgb(249,111,54)" fg:x="1388767" fg:w="202"/><text x="99.8577%" y="1119.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (202 samples, 0.01%)</title><rect x="99.6077%" y="1093" width="0.0145%" height="15" fill="rgb(249,55,30)" fg:x="1388767" fg:w="202"/><text x="99.8577%" y="1103.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (202 samples, 0.01%)</title><rect x="99.6077%" y="1077" width="0.0145%" height="15" fill="rgb(237,47,42)" fg:x="1388767" fg:w="202"/><text x="99.8577%" y="1087.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (204 samples, 0.01%)</title><rect x="99.6077%" y="1189" width="0.0146%" height="15" fill="rgb(211,20,18)" fg:x="1388767" fg:w="204"/><text x="99.8577%" y="1199.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (253 samples, 0.02%)</title><rect x="99.6049%" y="1317" width="0.0181%" height="15" fill="rgb(231,203,46)" fg:x="1388727" fg:w="253"/><text x="99.8549%" y="1327.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (253 samples, 0.02%)</title><rect x="99.6049%" y="1301" width="0.0181%" height="15" fill="rgb(237,142,3)" fg:x="1388727" fg:w="253"/><text x="99.8549%" y="1311.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (253 samples, 0.02%)</title><rect x="99.6049%" y="1285" width="0.0181%" height="15" fill="rgb(241,107,1)" fg:x="1388727" fg:w="253"/><text x="99.8549%" y="1295.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (253 samples, 0.02%)</title><rect x="99.6049%" y="1269" width="0.0181%" height="15" fill="rgb(229,83,13)" fg:x="1388727" fg:w="253"/><text x="99.8549%" y="1279.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (253 samples, 0.02%)</title><rect x="99.6049%" y="1253" width="0.0181%" height="15" fill="rgb(241,91,40)" fg:x="1388727" fg:w="253"/><text x="99.8549%" y="1263.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (253 samples, 0.02%)</title><rect x="99.6049%" y="1237" width="0.0181%" height="15" fill="rgb(225,3,45)" fg:x="1388727" fg:w="253"/><text x="99.8549%" y="1247.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (253 samples, 0.02%)</title><rect x="99.6049%" y="1221" width="0.0181%" height="15" fill="rgb(244,223,14)" fg:x="1388727" fg:w="253"/><text x="99.8549%" y="1231.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (253 samples, 0.02%)</title><rect x="99.6049%" y="1205" width="0.0181%" height="15" fill="rgb(224,124,37)" fg:x="1388727" fg:w="253"/><text x="99.8549%" y="1215.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (311 samples, 0.02%)</title><rect x="99.6012%" y="1429" width="0.0223%" height="15" fill="rgb(251,171,30)" fg:x="1388676" fg:w="311"/><text x="99.8512%" y="1439.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (311 samples, 0.02%)</title><rect x="99.6012%" y="1413" width="0.0223%" height="15" fill="rgb(236,46,54)" fg:x="1388676" fg:w="311"/><text x="99.8512%" y="1423.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (311 samples, 0.02%)</title><rect x="99.6012%" y="1397" width="0.0223%" height="15" fill="rgb(245,213,5)" fg:x="1388676" fg:w="311"/><text x="99.8512%" y="1407.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (311 samples, 0.02%)</title><rect x="99.6012%" y="1381" width="0.0223%" height="15" fill="rgb(230,144,27)" fg:x="1388676" fg:w="311"/><text x="99.8512%" y="1391.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (311 samples, 0.02%)</title><rect x="99.6012%" y="1365" width="0.0223%" height="15" fill="rgb(220,86,6)" fg:x="1388676" fg:w="311"/><text x="99.8512%" y="1375.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (311 samples, 0.02%)</title><rect x="99.6012%" y="1349" width="0.0223%" height="15" fill="rgb(240,20,13)" fg:x="1388676" fg:w="311"/><text x="99.8512%" y="1359.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (311 samples, 0.02%)</title><rect x="99.6012%" y="1333" width="0.0223%" height="15" fill="rgb(217,89,34)" fg:x="1388676" fg:w="311"/><text x="99.8512%" y="1343.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (317 samples, 0.02%)</title><rect x="99.6012%" y="1445" width="0.0227%" height="15" fill="rgb(229,13,5)" fg:x="1388676" fg:w="317"/><text x="99.8512%" y="1455.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (347 samples, 0.02%)</title><rect x="99.5991%" y="1557" width="0.0249%" height="15" fill="rgb(244,67,35)" fg:x="1388647" fg:w="347"/><text x="99.8491%" y="1567.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (347 samples, 0.02%)</title><rect x="99.5991%" y="1541" width="0.0249%" height="15" fill="rgb(221,40,2)" fg:x="1388647" fg:w="347"/><text x="99.8491%" y="1551.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (347 samples, 0.02%)</title><rect x="99.5991%" y="1525" width="0.0249%" height="15" fill="rgb(237,157,21)" fg:x="1388647" fg:w="347"/><text x="99.8491%" y="1535.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (347 samples, 0.02%)</title><rect x="99.5991%" y="1509" width="0.0249%" height="15" fill="rgb(222,94,11)" fg:x="1388647" fg:w="347"/><text x="99.8491%" y="1519.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (347 samples, 0.02%)</title><rect x="99.5991%" y="1493" width="0.0249%" height="15" fill="rgb(249,113,6)" fg:x="1388647" fg:w="347"/><text x="99.8491%" y="1503.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (347 samples, 0.02%)</title><rect x="99.5991%" y="1477" width="0.0249%" height="15" fill="rgb(238,137,36)" fg:x="1388647" fg:w="347"/><text x="99.8491%" y="1487.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (347 samples, 0.02%)</title><rect x="99.5991%" y="1461" width="0.0249%" height="15" fill="rgb(210,102,26)" fg:x="1388647" fg:w="347"/><text x="99.8491%" y="1471.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (351 samples, 0.03%)</title><rect x="99.5991%" y="1573" width="0.0252%" height="15" fill="rgb(218,30,30)" fg:x="1388647" fg:w="351"/><text x="99.8491%" y="1583.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (398 samples, 0.03%)</title><rect x="99.5962%" y="1685" width="0.0285%" height="15" fill="rgb(214,67,26)" fg:x="1388606" fg:w="398"/><text x="99.8462%" y="1695.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (398 samples, 0.03%)</title><rect x="99.5962%" y="1669" width="0.0285%" height="15" fill="rgb(251,9,53)" fg:x="1388606" fg:w="398"/><text x="99.8462%" y="1679.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (398 samples, 0.03%)</title><rect x="99.5962%" y="1653" width="0.0285%" height="15" fill="rgb(228,204,25)" fg:x="1388606" fg:w="398"/><text x="99.8462%" y="1663.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (398 samples, 0.03%)</title><rect x="99.5962%" y="1637" width="0.0285%" height="15" fill="rgb(207,153,8)" fg:x="1388606" fg:w="398"/><text x="99.8462%" y="1647.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (398 samples, 0.03%)</title><rect x="99.5962%" y="1621" width="0.0285%" height="15" fill="rgb(242,9,16)" fg:x="1388606" fg:w="398"/><text x="99.8462%" y="1631.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (398 samples, 0.03%)</title><rect x="99.5962%" y="1605" width="0.0285%" height="15" fill="rgb(217,211,10)" fg:x="1388606" fg:w="398"/><text x="99.8462%" y="1615.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (398 samples, 0.03%)</title><rect x="99.5962%" y="1589" width="0.0285%" height="15" fill="rgb(219,228,52)" fg:x="1388606" fg:w="398"/><text x="99.8462%" y="1599.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (403 samples, 0.03%)</title><rect x="99.5962%" y="1701" width="0.0289%" height="15" fill="rgb(231,92,29)" fg:x="1388606" fg:w="403"/><text x="99.8462%" y="1711.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (457 samples, 0.03%)</title><rect x="99.5928%" y="1813" width="0.0328%" height="15" fill="rgb(232,8,23)" fg:x="1388558" fg:w="457"/><text x="99.8428%" y="1823.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (457 samples, 0.03%)</title><rect x="99.5928%" y="1797" width="0.0328%" height="15" fill="rgb(216,211,34)" fg:x="1388558" fg:w="457"/><text x="99.8428%" y="1807.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (457 samples, 0.03%)</title><rect x="99.5928%" y="1781" width="0.0328%" height="15" fill="rgb(236,151,0)" fg:x="1388558" fg:w="457"/><text x="99.8428%" y="1791.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (457 samples, 0.03%)</title><rect x="99.5928%" y="1765" width="0.0328%" height="15" fill="rgb(209,168,3)" fg:x="1388558" fg:w="457"/><text x="99.8428%" y="1775.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (457 samples, 0.03%)</title><rect x="99.5928%" y="1749" width="0.0328%" height="15" fill="rgb(208,129,28)" fg:x="1388558" fg:w="457"/><text x="99.8428%" y="1759.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (457 samples, 0.03%)</title><rect x="99.5928%" y="1733" width="0.0328%" height="15" fill="rgb(229,78,22)" fg:x="1388558" fg:w="457"/><text x="99.8428%" y="1743.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (457 samples, 0.03%)</title><rect x="99.5928%" y="1717" width="0.0328%" height="15" fill="rgb(228,187,13)" fg:x="1388558" fg:w="457"/><text x="99.8428%" y="1727.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (459 samples, 0.03%)</title><rect x="99.5928%" y="1829" width="0.0329%" height="15" fill="rgb(240,119,24)" fg:x="1388558" fg:w="459"/><text x="99.8428%" y="1839.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (556 samples, 0.04%)</title><rect x="99.5867%" y="1941" width="0.0399%" height="15" fill="rgb(209,194,42)" fg:x="1388473" fg:w="556"/><text x="99.8367%" y="1951.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (556 samples, 0.04%)</title><rect x="99.5867%" y="1925" width="0.0399%" height="15" fill="rgb(247,200,46)" fg:x="1388473" fg:w="556"/><text x="99.8367%" y="1935.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (556 samples, 0.04%)</title><rect x="99.5867%" y="1909" width="0.0399%" height="15" fill="rgb(218,76,16)" fg:x="1388473" fg:w="556"/><text x="99.8367%" y="1919.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (556 samples, 0.04%)</title><rect x="99.5867%" y="1893" width="0.0399%" height="15" fill="rgb(225,21,48)" fg:x="1388473" fg:w="556"/><text x="99.8367%" y="1903.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (556 samples, 0.04%)</title><rect x="99.5867%" y="1877" width="0.0399%" height="15" fill="rgb(239,223,50)" fg:x="1388473" fg:w="556"/><text x="99.8367%" y="1887.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (556 samples, 0.04%)</title><rect x="99.5867%" y="1861" width="0.0399%" height="15" fill="rgb(244,45,21)" fg:x="1388473" fg:w="556"/><text x="99.8367%" y="1871.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (556 samples, 0.04%)</title><rect x="99.5867%" y="1845" width="0.0399%" height="15" fill="rgb(232,33,43)" fg:x="1388473" fg:w="556"/><text x="99.8367%" y="1855.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (564 samples, 0.04%)</title><rect x="99.5867%" y="1957" width="0.0405%" height="15" fill="rgb(209,8,3)" fg:x="1388473" fg:w="564"/><text x="99.8367%" y="1967.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (656 samples, 0.05%)</title><rect x="99.5810%" y="2069" width="0.0471%" height="15" fill="rgb(214,25,53)" fg:x="1388394" fg:w="656"/><text x="99.8310%" y="2079.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (656 samples, 0.05%)</title><rect x="99.5810%" y="2053" width="0.0471%" height="15" fill="rgb(254,186,54)" fg:x="1388394" fg:w="656"/><text x="99.8310%" y="2063.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (656 samples, 0.05%)</title><rect x="99.5810%" y="2037" width="0.0471%" height="15" fill="rgb(208,174,49)" fg:x="1388394" fg:w="656"/><text x="99.8310%" y="2047.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (656 samples, 0.05%)</title><rect x="99.5810%" y="2021" width="0.0471%" height="15" fill="rgb(233,191,51)" fg:x="1388394" fg:w="656"/><text x="99.8310%" y="2031.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (656 samples, 0.05%)</title><rect x="99.5810%" y="2005" width="0.0471%" height="15" fill="rgb(222,134,10)" fg:x="1388394" fg:w="656"/><text x="99.8310%" y="2015.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (656 samples, 0.05%)</title><rect x="99.5810%" y="1989" width="0.0471%" height="15" fill="rgb(230,226,20)" fg:x="1388394" fg:w="656"/><text x="99.8310%" y="1999.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (656 samples, 0.05%)</title><rect x="99.5810%" y="1973" width="0.0471%" height="15" fill="rgb(251,111,25)" fg:x="1388394" fg:w="656"/><text x="99.8310%" y="1983.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (659 samples, 0.05%)</title><rect x="99.5810%" y="2085" width="0.0473%" height="15" fill="rgb(224,40,46)" fg:x="1388394" fg:w="659"/><text x="99.8310%" y="2095.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (728 samples, 0.05%)</title><rect x="99.5765%" y="2197" width="0.0522%" height="15" fill="rgb(236,108,47)" fg:x="1388332" fg:w="728"/><text x="99.8265%" y="2207.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (728 samples, 0.05%)</title><rect x="99.5765%" y="2181" width="0.0522%" height="15" fill="rgb(234,93,0)" fg:x="1388332" fg:w="728"/><text x="99.8265%" y="2191.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (728 samples, 0.05%)</title><rect x="99.5765%" y="2165" width="0.0522%" height="15" fill="rgb(224,213,32)" fg:x="1388332" fg:w="728"/><text x="99.8265%" y="2175.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (728 samples, 0.05%)</title><rect x="99.5765%" y="2149" width="0.0522%" height="15" fill="rgb(251,11,48)" fg:x="1388332" fg:w="728"/><text x="99.8265%" y="2159.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (728 samples, 0.05%)</title><rect x="99.5765%" y="2133" width="0.0522%" height="15" fill="rgb(236,173,5)" fg:x="1388332" fg:w="728"/><text x="99.8265%" y="2143.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (728 samples, 0.05%)</title><rect x="99.5765%" y="2117" width="0.0522%" height="15" fill="rgb(230,95,12)" fg:x="1388332" fg:w="728"/><text x="99.8265%" y="2127.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (728 samples, 0.05%)</title><rect x="99.5765%" y="2101" width="0.0522%" height="15" fill="rgb(232,209,1)" fg:x="1388332" fg:w="728"/><text x="99.8265%" y="2111.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (733 samples, 0.05%)</title><rect x="99.5765%" y="2213" width="0.0526%" height="15" fill="rgb(232,6,1)" fg:x="1388332" fg:w="733"/><text x="99.8265%" y="2223.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (809 samples, 0.06%)</title><rect x="99.5719%" y="2325" width="0.0580%" height="15" fill="rgb(210,224,50)" fg:x="1388267" fg:w="809"/><text x="99.8219%" y="2335.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (809 samples, 0.06%)</title><rect x="99.5719%" y="2309" width="0.0580%" height="15" fill="rgb(228,127,35)" fg:x="1388267" fg:w="809"/><text x="99.8219%" y="2319.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (809 samples, 0.06%)</title><rect x="99.5719%" y="2293" width="0.0580%" height="15" fill="rgb(245,102,45)" fg:x="1388267" fg:w="809"/><text x="99.8219%" y="2303.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (809 samples, 0.06%)</title><rect x="99.5719%" y="2277" width="0.0580%" height="15" fill="rgb(214,1,49)" fg:x="1388267" fg:w="809"/><text x="99.8219%" y="2287.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (809 samples, 0.06%)</title><rect x="99.5719%" y="2261" width="0.0580%" height="15" fill="rgb(226,163,40)" fg:x="1388267" fg:w="809"/><text x="99.8219%" y="2271.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (809 samples, 0.06%)</title><rect x="99.5719%" y="2245" width="0.0580%" height="15" fill="rgb(239,212,28)" fg:x="1388267" fg:w="809"/><text x="99.8219%" y="2255.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (809 samples, 0.06%)</title><rect x="99.5719%" y="2229" width="0.0580%" height="15" fill="rgb(220,20,13)" fg:x="1388267" fg:w="809"/><text x="99.8219%" y="2239.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (816 samples, 0.06%)</title><rect x="99.5719%" y="2341" width="0.0585%" height="15" fill="rgb(210,164,35)" fg:x="1388267" fg:w="816"/><text x="99.8219%" y="2351.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (926 samples, 0.07%)</title><rect x="99.5649%" y="2453" width="0.0664%" height="15" fill="rgb(248,109,41)" fg:x="1388169" fg:w="926"/><text x="99.8149%" y="2463.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (926 samples, 0.07%)</title><rect x="99.5649%" y="2437" width="0.0664%" height="15" fill="rgb(238,23,50)" fg:x="1388169" fg:w="926"/><text x="99.8149%" y="2447.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (926 samples, 0.07%)</title><rect x="99.5649%" y="2421" width="0.0664%" height="15" fill="rgb(211,48,49)" fg:x="1388169" fg:w="926"/><text x="99.8149%" y="2431.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (926 samples, 0.07%)</title><rect x="99.5649%" y="2405" width="0.0664%" height="15" fill="rgb(223,36,21)" fg:x="1388169" fg:w="926"/><text x="99.8149%" y="2415.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (926 samples, 0.07%)</title><rect x="99.5649%" y="2389" width="0.0664%" height="15" fill="rgb(207,123,46)" fg:x="1388169" fg:w="926"/><text x="99.8149%" y="2399.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (926 samples, 0.07%)</title><rect x="99.5649%" y="2373" width="0.0664%" height="15" fill="rgb(240,218,32)" fg:x="1388169" fg:w="926"/><text x="99.8149%" y="2383.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (926 samples, 0.07%)</title><rect x="99.5649%" y="2357" width="0.0664%" height="15" fill="rgb(252,5,43)" fg:x="1388169" fg:w="926"/><text x="99.8149%" y="2367.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (936 samples, 0.07%)</title><rect x="99.5649%" y="2469" width="0.0671%" height="15" fill="rgb(252,84,19)" fg:x="1388169" fg:w="936"/><text x="99.8149%" y="2479.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (1,050 samples, 0.08%)</title><rect x="99.5572%" y="2581" width="0.0753%" height="15" fill="rgb(243,152,39)" fg:x="1388063" fg:w="1050"/><text x="99.8072%" y="2591.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (1,050 samples, 0.08%)</title><rect x="99.5572%" y="2565" width="0.0753%" height="15" fill="rgb(234,160,15)" fg:x="1388063" fg:w="1050"/><text x="99.8072%" y="2575.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (1,049 samples, 0.08%)</title><rect x="99.5573%" y="2549" width="0.0752%" height="15" fill="rgb(237,34,20)" fg:x="1388064" fg:w="1049"/><text x="99.8073%" y="2559.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (1,049 samples, 0.08%)</title><rect x="99.5573%" y="2533" width="0.0752%" height="15" fill="rgb(229,97,13)" fg:x="1388064" fg:w="1049"/><text x="99.8073%" y="2543.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (1,049 samples, 0.08%)</title><rect x="99.5573%" y="2517" width="0.0752%" height="15" fill="rgb(234,71,50)" fg:x="1388064" fg:w="1049"/><text x="99.8073%" y="2527.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (1,049 samples, 0.08%)</title><rect x="99.5573%" y="2501" width="0.0752%" height="15" fill="rgb(253,155,4)" fg:x="1388064" fg:w="1049"/><text x="99.8073%" y="2511.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (1,049 samples, 0.08%)</title><rect x="99.5573%" y="2485" width="0.0752%" height="15" fill="rgb(222,185,37)" fg:x="1388064" fg:w="1049"/><text x="99.8073%" y="2495.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (1,056 samples, 0.08%)</title><rect x="99.5572%" y="2597" width="0.0757%" height="15" fill="rgb(251,177,13)" fg:x="1388063" fg:w="1056"/><text x="99.8072%" y="2607.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (1,179 samples, 0.08%)</title><rect x="99.5493%" y="2709" width="0.0846%" height="15" fill="rgb(250,179,40)" fg:x="1387952" fg:w="1179"/><text x="99.7993%" y="2719.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (1,179 samples, 0.08%)</title><rect x="99.5493%" y="2693" width="0.0846%" height="15" fill="rgb(242,44,2)" fg:x="1387952" fg:w="1179"/><text x="99.7993%" y="2703.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (1,179 samples, 0.08%)</title><rect x="99.5493%" y="2677" width="0.0846%" height="15" fill="rgb(216,177,13)" fg:x="1387952" fg:w="1179"/><text x="99.7993%" y="2687.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (1,179 samples, 0.08%)</title><rect x="99.5493%" y="2661" width="0.0846%" height="15" fill="rgb(216,106,43)" fg:x="1387952" fg:w="1179"/><text x="99.7993%" y="2671.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (1,179 samples, 0.08%)</title><rect x="99.5493%" y="2645" width="0.0846%" height="15" fill="rgb(216,183,2)" fg:x="1387952" fg:w="1179"/><text x="99.7993%" y="2655.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (1,179 samples, 0.08%)</title><rect x="99.5493%" y="2629" width="0.0846%" height="15" fill="rgb(249,75,3)" fg:x="1387952" fg:w="1179"/><text x="99.7993%" y="2639.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (1,179 samples, 0.08%)</title><rect x="99.5493%" y="2613" width="0.0846%" height="15" fill="rgb(219,67,39)" fg:x="1387952" fg:w="1179"/><text x="99.7993%" y="2623.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (1,197 samples, 0.09%)</title><rect x="99.5493%" y="2725" width="0.0859%" height="15" fill="rgb(253,228,2)" fg:x="1387952" fg:w="1197"/><text x="99.7993%" y="2735.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (1,362 samples, 0.10%)</title><rect x="99.5385%" y="2837" width="0.0977%" height="15" fill="rgb(235,138,27)" fg:x="1387801" fg:w="1362"/><text x="99.7885%" y="2847.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (1,362 samples, 0.10%)</title><rect x="99.5385%" y="2821" width="0.0977%" height="15" fill="rgb(236,97,51)" fg:x="1387801" fg:w="1362"/><text x="99.7885%" y="2831.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (1,362 samples, 0.10%)</title><rect x="99.5385%" y="2805" width="0.0977%" height="15" fill="rgb(240,80,30)" fg:x="1387801" fg:w="1362"/><text x="99.7885%" y="2815.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (1,362 samples, 0.10%)</title><rect x="99.5385%" y="2789" width="0.0977%" height="15" fill="rgb(230,178,19)" fg:x="1387801" fg:w="1362"/><text x="99.7885%" y="2799.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (1,362 samples, 0.10%)</title><rect x="99.5385%" y="2773" width="0.0977%" height="15" fill="rgb(210,190,27)" fg:x="1387801" fg:w="1362"/><text x="99.7885%" y="2783.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (1,362 samples, 0.10%)</title><rect x="99.5385%" y="2757" width="0.0977%" height="15" fill="rgb(222,107,31)" fg:x="1387801" fg:w="1362"/><text x="99.7885%" y="2767.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (1,362 samples, 0.10%)</title><rect x="99.5385%" y="2741" width="0.0977%" height="15" fill="rgb(216,127,34)" fg:x="1387801" fg:w="1362"/><text x="99.7885%" y="2751.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (1,378 samples, 0.10%)</title><rect x="99.5385%" y="2853" width="0.0988%" height="15" fill="rgb(234,116,52)" fg:x="1387801" fg:w="1378"/><text x="99.7885%" y="2863.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (1,539 samples, 0.11%)</title><rect x="99.5285%" y="2965" width="0.1104%" height="15" fill="rgb(222,124,15)" fg:x="1387662" fg:w="1539"/><text x="99.7785%" y="2975.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (1,539 samples, 0.11%)</title><rect x="99.5285%" y="2949" width="0.1104%" height="15" fill="rgb(231,179,28)" fg:x="1387662" fg:w="1539"/><text x="99.7785%" y="2959.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (1,539 samples, 0.11%)</title><rect x="99.5285%" y="2933" width="0.1104%" height="15" fill="rgb(226,93,45)" fg:x="1387662" fg:w="1539"/><text x="99.7785%" y="2943.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (1,539 samples, 0.11%)</title><rect x="99.5285%" y="2917" width="0.1104%" height="15" fill="rgb(215,8,51)" fg:x="1387662" fg:w="1539"/><text x="99.7785%" y="2927.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (1,539 samples, 0.11%)</title><rect x="99.5285%" y="2901" width="0.1104%" height="15" fill="rgb(223,106,5)" fg:x="1387662" fg:w="1539"/><text x="99.7785%" y="2911.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (1,539 samples, 0.11%)</title><rect x="99.5285%" y="2885" width="0.1104%" height="15" fill="rgb(250,191,5)" fg:x="1387662" fg:w="1539"/><text x="99.7785%" y="2895.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (1,539 samples, 0.11%)</title><rect x="99.5285%" y="2869" width="0.1104%" height="15" fill="rgb(242,132,44)" fg:x="1387662" fg:w="1539"/><text x="99.7785%" y="2879.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (1,554 samples, 0.11%)</title><rect x="99.5285%" y="2981" width="0.1115%" height="15" fill="rgb(251,152,29)" fg:x="1387662" fg:w="1554"/><text x="99.7785%" y="2991.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (1,736 samples, 0.12%)</title><rect x="99.5167%" y="3093" width="0.1245%" height="15" fill="rgb(218,179,5)" fg:x="1387497" fg:w="1736"/><text x="99.7667%" y="3103.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (1,736 samples, 0.12%)</title><rect x="99.5167%" y="3077" width="0.1245%" height="15" fill="rgb(227,67,19)" fg:x="1387497" fg:w="1736"/><text x="99.7667%" y="3087.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (1,736 samples, 0.12%)</title><rect x="99.5167%" y="3061" width="0.1245%" height="15" fill="rgb(233,119,31)" fg:x="1387497" fg:w="1736"/><text x="99.7667%" y="3071.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (1,736 samples, 0.12%)</title><rect x="99.5167%" y="3045" width="0.1245%" height="15" fill="rgb(241,120,22)" fg:x="1387497" fg:w="1736"/><text x="99.7667%" y="3055.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (1,736 samples, 0.12%)</title><rect x="99.5167%" y="3029" width="0.1245%" height="15" fill="rgb(224,102,30)" fg:x="1387497" fg:w="1736"/><text x="99.7667%" y="3039.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (1,736 samples, 0.12%)</title><rect x="99.5167%" y="3013" width="0.1245%" height="15" fill="rgb(210,164,37)" fg:x="1387497" fg:w="1736"/><text x="99.7667%" y="3023.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (1,736 samples, 0.12%)</title><rect x="99.5167%" y="2997" width="0.1245%" height="15" fill="rgb(226,191,16)" fg:x="1387497" fg:w="1736"/><text x="99.7667%" y="3007.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (1,758 samples, 0.13%)</title><rect x="99.5167%" y="3109" width="0.1261%" height="15" fill="rgb(214,40,45)" fg:x="1387497" fg:w="1758"/><text x="99.7667%" y="3119.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (2,024 samples, 0.15%)</title><rect x="99.4992%" y="3157" width="0.1452%" height="15" fill="rgb(244,29,26)" fg:x="1387253" fg:w="2024"/><text x="99.7492%" y="3167.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (2,017 samples, 0.14%)</title><rect x="99.4997%" y="3141" width="0.1447%" height="15" fill="rgb(216,16,5)" fg:x="1387260" fg:w="2017"/><text x="99.7497%" y="3151.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (2,017 samples, 0.14%)</title><rect x="99.4997%" y="3125" width="0.1447%" height="15" fill="rgb(249,76,35)" fg:x="1387260" fg:w="2017"/><text x="99.7497%" y="3135.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;tuple$ (2,025 samples, 0.15%)</title><rect x="99.4992%" y="3221" width="0.1452%" height="15" fill="rgb(207,11,44)" fg:x="1387253" fg:w="2025"/><text x="99.7492%" y="3231.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (2,025 samples, 0.15%)</title><rect x="99.4992%" y="3205" width="0.1452%" height="15" fill="rgb(228,190,49)" fg:x="1387253" fg:w="2025"/><text x="99.7492%" y="3215.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (2,025 samples, 0.15%)</title><rect x="99.4992%" y="3189" width="0.1452%" height="15" fill="rgb(214,173,12)" fg:x="1387253" fg:w="2025"/><text x="99.7492%" y="3199.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (2,025 samples, 0.15%)</title><rect x="99.4992%" y="3173" width="0.1452%" height="15" fill="rgb(218,26,35)" fg:x="1387253" fg:w="2025"/><text x="99.7492%" y="3183.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;alloc::vec::Vec&lt;tuple$ (2,504 samples, 0.18%)</title><rect x="99.4649%" y="3365" width="0.1796%" height="15" fill="rgb(220,200,19)" fg:x="1386775" fg:w="2504"/><text x="99.7149%" y="3375.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$25::drop(alloc::vec::Vec&lt;alloc::vec::Vec&lt;tuple$ (2,504 samples, 0.18%)</title><rect x="99.4649%" y="3349" width="0.1796%" height="15" fill="rgb(239,95,49)" fg:x="1386775" fg:w="2504"/><text x="99.7149%" y="3359.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(ptr_mut$&lt;slice2$&lt;alloc::vec::Vec&lt;tuple$ (2,504 samples, 0.18%)</title><rect x="99.4649%" y="3333" width="0.1796%" height="15" fill="rgb(235,85,53)" fg:x="1386775" fg:w="2504"/><text x="99.7149%" y="3343.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;tuple$ (2,504 samples, 0.18%)</title><rect x="99.4649%" y="3317" width="0.1796%" height="15" fill="rgb(233,133,31)" fg:x="1386775" fg:w="2504"/><text x="99.7149%" y="3327.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (2,504 samples, 0.18%)</title><rect x="99.4649%" y="3301" width="0.1796%" height="15" fill="rgb(218,25,20)" fg:x="1386775" fg:w="2504"/><text x="99.7149%" y="3311.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (2,504 samples, 0.18%)</title><rect x="99.4649%" y="3285" width="0.1796%" height="15" fill="rgb(252,210,38)" fg:x="1386775" fg:w="2504"/><text x="99.7149%" y="3295.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (2,504 samples, 0.18%)</title><rect x="99.4649%" y="3269" width="0.1796%" height="15" fill="rgb(242,134,21)" fg:x="1386775" fg:w="2504"/><text x="99.7149%" y="3279.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::current_memory (2,485 samples, 0.18%)</title><rect x="99.4662%" y="3253" width="0.1782%" height="15" fill="rgb(213,28,48)" fg:x="1386794" fg:w="2485"/><text x="99.7162%" y="3263.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::find_reachable(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (2,483 samples, 0.18%)</title><rect x="99.4664%" y="3237" width="0.1781%" height="15" fill="rgb(250,196,2)" fg:x="1386796" fg:w="2483"/><text x="99.7164%" y="3247.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (216 samples, 0.02%)</title><rect x="99.7249%" y="2645" width="0.0155%" height="15" fill="rgb(227,5,17)" fg:x="1390401" fg:w="216"/><text x="99.9749%" y="2655.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (216 samples, 0.02%)</title><rect x="99.7249%" y="2629" width="0.0155%" height="15" fill="rgb(221,226,24)" fg:x="1390401" fg:w="216"/><text x="99.9749%" y="2639.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (216 samples, 0.02%)</title><rect x="99.7249%" y="2613" width="0.0155%" height="15" fill="rgb(211,5,48)" fg:x="1390401" fg:w="216"/><text x="99.9749%" y="2623.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (158 samples, 0.01%)</title><rect x="99.7291%" y="2597" width="0.0113%" height="15" fill="rgb(219,150,6)" fg:x="1390459" fg:w="158"/><text x="99.9791%" y="2607.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (158 samples, 0.01%)</title><rect x="99.7291%" y="2581" width="0.0113%" height="15" fill="rgb(251,46,16)" fg:x="1390459" fg:w="158"/><text x="99.9791%" y="2591.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (158 samples, 0.01%)</title><rect x="99.7291%" y="2565" width="0.0113%" height="15" fill="rgb(220,204,40)" fg:x="1390459" fg:w="158"/><text x="99.9791%" y="2575.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (407 samples, 0.03%)</title><rect x="99.7114%" y="2789" width="0.0292%" height="15" fill="rgb(211,85,2)" fg:x="1390212" fg:w="407"/><text x="99.9614%" y="2799.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (407 samples, 0.03%)</title><rect x="99.7114%" y="2773" width="0.0292%" height="15" fill="rgb(229,17,7)" fg:x="1390212" fg:w="407"/><text x="99.9614%" y="2783.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (407 samples, 0.03%)</title><rect x="99.7114%" y="2757" width="0.0292%" height="15" fill="rgb(239,72,28)" fg:x="1390212" fg:w="407"/><text x="99.9614%" y="2767.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (339 samples, 0.02%)</title><rect x="99.7163%" y="2741" width="0.0243%" height="15" fill="rgb(230,47,54)" fg:x="1390280" fg:w="339"/><text x="99.9663%" y="2751.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (339 samples, 0.02%)</title><rect x="99.7163%" y="2725" width="0.0243%" height="15" fill="rgb(214,50,8)" fg:x="1390280" fg:w="339"/><text x="99.9663%" y="2735.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (339 samples, 0.02%)</title><rect x="99.7163%" y="2709" width="0.0243%" height="15" fill="rgb(216,198,43)" fg:x="1390280" fg:w="339"/><text x="99.9663%" y="2719.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (276 samples, 0.02%)</title><rect x="99.7208%" y="2693" width="0.0198%" height="15" fill="rgb(234,20,35)" fg:x="1390343" fg:w="276"/><text x="99.9708%" y="2703.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (276 samples, 0.02%)</title><rect x="99.7208%" y="2677" width="0.0198%" height="15" fill="rgb(254,45,19)" fg:x="1390343" fg:w="276"/><text x="99.9708%" y="2687.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (276 samples, 0.02%)</title><rect x="99.7208%" y="2661" width="0.0198%" height="15" fill="rgb(219,14,44)" fg:x="1390343" fg:w="276"/><text x="99.9708%" y="2671.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (528 samples, 0.04%)</title><rect x="99.7028%" y="2885" width="0.0379%" height="15" fill="rgb(217,220,26)" fg:x="1390092" fg:w="528"/><text x="99.9528%" y="2895.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (528 samples, 0.04%)</title><rect x="99.7028%" y="2869" width="0.0379%" height="15" fill="rgb(213,158,28)" fg:x="1390092" fg:w="528"/><text x="99.9528%" y="2879.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (528 samples, 0.04%)</title><rect x="99.7028%" y="2853" width="0.0379%" height="15" fill="rgb(252,51,52)" fg:x="1390092" fg:w="528"/><text x="99.9528%" y="2863.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (468 samples, 0.03%)</title><rect x="99.7071%" y="2837" width="0.0336%" height="15" fill="rgb(246,89,16)" fg:x="1390152" fg:w="468"/><text x="99.9571%" y="2847.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (468 samples, 0.03%)</title><rect x="99.7071%" y="2821" width="0.0336%" height="15" fill="rgb(216,158,49)" fg:x="1390152" fg:w="468"/><text x="99.9571%" y="2831.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (468 samples, 0.03%)</title><rect x="99.7071%" y="2805" width="0.0336%" height="15" fill="rgb(236,107,19)" fg:x="1390152" fg:w="468"/><text x="99.9571%" y="2815.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (601 samples, 0.04%)</title><rect x="99.6977%" y="2933" width="0.0431%" height="15" fill="rgb(228,185,30)" fg:x="1390021" fg:w="601"/><text x="99.9477%" y="2943.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (601 samples, 0.04%)</title><rect x="99.6977%" y="2917" width="0.0431%" height="15" fill="rgb(246,134,8)" fg:x="1390021" fg:w="601"/><text x="99.9477%" y="2927.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (601 samples, 0.04%)</title><rect x="99.6977%" y="2901" width="0.0431%" height="15" fill="rgb(214,143,50)" fg:x="1390021" fg:w="601"/><text x="99.9477%" y="2911.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (1,182 samples, 0.08%)</title><rect x="99.6561%" y="3269" width="0.0848%" height="15" fill="rgb(228,75,8)" fg:x="1389441" fg:w="1182"/><text x="99.9061%" y="3279.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (1,182 samples, 0.08%)</title><rect x="99.6561%" y="3253" width="0.0848%" height="15" fill="rgb(207,175,4)" fg:x="1389441" fg:w="1182"/><text x="99.9061%" y="3263.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (1,182 samples, 0.08%)</title><rect x="99.6561%" y="3237" width="0.0848%" height="15" fill="rgb(205,108,24)" fg:x="1389441" fg:w="1182"/><text x="99.9061%" y="3247.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (1,088 samples, 0.08%)</title><rect x="99.6628%" y="3221" width="0.0780%" height="15" fill="rgb(244,120,49)" fg:x="1389535" fg:w="1088"/><text x="99.9128%" y="3231.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (1,088 samples, 0.08%)</title><rect x="99.6628%" y="3205" width="0.0780%" height="15" fill="rgb(223,47,38)" fg:x="1389535" fg:w="1088"/><text x="99.9128%" y="3215.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (1,088 samples, 0.08%)</title><rect x="99.6628%" y="3189" width="0.0780%" height="15" fill="rgb(229,179,11)" fg:x="1389535" fg:w="1088"/><text x="99.9128%" y="3199.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (1,018 samples, 0.07%)</title><rect x="99.6678%" y="3173" width="0.0730%" height="15" fill="rgb(231,122,1)" fg:x="1389605" fg:w="1018"/><text x="99.9178%" y="3183.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (1,018 samples, 0.07%)</title><rect x="99.6678%" y="3157" width="0.0730%" height="15" fill="rgb(245,119,9)" fg:x="1389605" fg:w="1018"/><text x="99.9178%" y="3167.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (1,018 samples, 0.07%)</title><rect x="99.6678%" y="3141" width="0.0730%" height="15" fill="rgb(241,163,25)" fg:x="1389605" fg:w="1018"/><text x="99.9178%" y="3151.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (945 samples, 0.07%)</title><rect x="99.6731%" y="3125" width="0.0678%" height="15" fill="rgb(217,214,3)" fg:x="1389678" fg:w="945"/><text x="99.9231%" y="3135.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (945 samples, 0.07%)</title><rect x="99.6731%" y="3109" width="0.0678%" height="15" fill="rgb(240,86,28)" fg:x="1389678" fg:w="945"/><text x="99.9231%" y="3119.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (945 samples, 0.07%)</title><rect x="99.6731%" y="3093" width="0.0678%" height="15" fill="rgb(215,47,9)" fg:x="1389678" fg:w="945"/><text x="99.9231%" y="3103.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (871 samples, 0.06%)</title><rect x="99.6784%" y="3077" width="0.0625%" height="15" fill="rgb(252,25,45)" fg:x="1389752" fg:w="871"/><text x="99.9284%" y="3087.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (871 samples, 0.06%)</title><rect x="99.6784%" y="3061" width="0.0625%" height="15" fill="rgb(251,164,9)" fg:x="1389752" fg:w="871"/><text x="99.9284%" y="3071.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (871 samples, 0.06%)</title><rect x="99.6784%" y="3045" width="0.0625%" height="15" fill="rgb(233,194,0)" fg:x="1389752" fg:w="871"/><text x="99.9284%" y="3055.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (797 samples, 0.06%)</title><rect x="99.6837%" y="3029" width="0.0572%" height="15" fill="rgb(249,111,24)" fg:x="1389826" fg:w="797"/><text x="99.9337%" y="3039.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (797 samples, 0.06%)</title><rect x="99.6837%" y="3013" width="0.0572%" height="15" fill="rgb(250,223,3)" fg:x="1389826" fg:w="797"/><text x="99.9337%" y="3023.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (797 samples, 0.06%)</title><rect x="99.6837%" y="2997" width="0.0572%" height="15" fill="rgb(236,178,37)" fg:x="1389826" fg:w="797"/><text x="99.9337%" y="3007.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (722 samples, 0.05%)</title><rect x="99.6891%" y="2981" width="0.0518%" height="15" fill="rgb(241,158,50)" fg:x="1389901" fg:w="722"/><text x="99.9391%" y="2991.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (722 samples, 0.05%)</title><rect x="99.6891%" y="2965" width="0.0518%" height="15" fill="rgb(213,121,41)" fg:x="1389901" fg:w="722"/><text x="99.9391%" y="2975.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (722 samples, 0.05%)</title><rect x="99.6891%" y="2949" width="0.0518%" height="15" fill="rgb(240,92,3)" fg:x="1389901" fg:w="722"/><text x="99.9391%" y="2959.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (1,242 samples, 0.09%)</title><rect x="99.6519%" y="3317" width="0.0891%" height="15" fill="rgb(205,123,3)" fg:x="1389382" fg:w="1242"/><text x="99.9019%" y="3327.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (1,242 samples, 0.09%)</title><rect x="99.6519%" y="3301" width="0.0891%" height="15" fill="rgb(205,97,47)" fg:x="1389382" fg:w="1242"/><text x="99.9019%" y="3311.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (1,242 samples, 0.09%)</title><rect x="99.6519%" y="3285" width="0.0891%" height="15" fill="rgb(247,152,14)" fg:x="1389382" fg:w="1242"/><text x="99.9019%" y="3295.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (1,336 samples, 0.10%)</title><rect x="99.6453%" y="3365" width="0.0958%" height="15" fill="rgb(248,195,53)" fg:x="1389291" fg:w="1336"/><text x="99.8953%" y="3375.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (1,336 samples, 0.10%)</title><rect x="99.6453%" y="3349" width="0.0958%" height="15" fill="rgb(226,201,16)" fg:x="1389291" fg:w="1336"/><text x="99.8953%" y="3359.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (1,335 samples, 0.10%)</title><rect x="99.6454%" y="3333" width="0.0958%" height="15" fill="rgb(205,98,0)" fg:x="1389292" fg:w="1335"/><text x="99.8954%" y="3343.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (140 samples, 0.01%)</title><rect x="99.8603%" y="37" width="0.0100%" height="15" fill="rgb(214,191,48)" fg:x="1392288" fg:w="140"/><text x="100.1103%" y="47.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (183 samples, 0.01%)</title><rect x="99.8577%" y="149" width="0.0131%" height="15" fill="rgb(237,112,39)" fg:x="1392252" fg:w="183"/><text x="100.1077%" y="159.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (183 samples, 0.01%)</title><rect x="99.8577%" y="133" width="0.0131%" height="15" fill="rgb(247,203,27)" fg:x="1392252" fg:w="183"/><text x="100.1077%" y="143.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (183 samples, 0.01%)</title><rect x="99.8577%" y="117" width="0.0131%" height="15" fill="rgb(235,124,28)" fg:x="1392252" fg:w="183"/><text x="100.1077%" y="127.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (183 samples, 0.01%)</title><rect x="99.8577%" y="101" width="0.0131%" height="15" fill="rgb(208,207,46)" fg:x="1392252" fg:w="183"/><text x="100.1077%" y="111.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (183 samples, 0.01%)</title><rect x="99.8577%" y="85" width="0.0131%" height="15" fill="rgb(234,176,4)" fg:x="1392252" fg:w="183"/><text x="100.1077%" y="95.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (183 samples, 0.01%)</title><rect x="99.8577%" y="69" width="0.0131%" height="15" fill="rgb(230,133,28)" fg:x="1392252" fg:w="183"/><text x="100.1077%" y="79.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (183 samples, 0.01%)</title><rect x="99.8577%" y="53" width="0.0131%" height="15" fill="rgb(211,137,40)" fg:x="1392252" fg:w="183"/><text x="100.1077%" y="63.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (185 samples, 0.01%)</title><rect x="99.8577%" y="165" width="0.0133%" height="15" fill="rgb(254,35,13)" fg:x="1392252" fg:w="185"/><text x="100.1077%" y="175.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (256 samples, 0.02%)</title><rect x="99.8530%" y="277" width="0.0184%" height="15" fill="rgb(225,49,51)" fg:x="1392186" fg:w="256"/><text x="100.1030%" y="287.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (256 samples, 0.02%)</title><rect x="99.8530%" y="261" width="0.0184%" height="15" fill="rgb(251,10,15)" fg:x="1392186" fg:w="256"/><text x="100.1030%" y="271.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (256 samples, 0.02%)</title><rect x="99.8530%" y="245" width="0.0184%" height="15" fill="rgb(228,207,15)" fg:x="1392186" fg:w="256"/><text x="100.1030%" y="255.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (256 samples, 0.02%)</title><rect x="99.8530%" y="229" width="0.0184%" height="15" fill="rgb(241,99,19)" fg:x="1392186" fg:w="256"/><text x="100.1030%" y="239.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (256 samples, 0.02%)</title><rect x="99.8530%" y="213" width="0.0184%" height="15" fill="rgb(207,104,49)" fg:x="1392186" fg:w="256"/><text x="100.1030%" y="223.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (256 samples, 0.02%)</title><rect x="99.8530%" y="197" width="0.0184%" height="15" fill="rgb(234,99,18)" fg:x="1392186" fg:w="256"/><text x="100.1030%" y="207.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (256 samples, 0.02%)</title><rect x="99.8530%" y="181" width="0.0184%" height="15" fill="rgb(213,191,49)" fg:x="1392186" fg:w="256"/><text x="100.1030%" y="191.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (257 samples, 0.02%)</title><rect x="99.8530%" y="293" width="0.0184%" height="15" fill="rgb(210,226,19)" fg:x="1392186" fg:w="257"/><text x="100.1030%" y="303.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (318 samples, 0.02%)</title><rect x="99.8488%" y="405" width="0.0228%" height="15" fill="rgb(229,97,18)" fg:x="1392128" fg:w="318"/><text x="100.0988%" y="415.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (318 samples, 0.02%)</title><rect x="99.8488%" y="389" width="0.0228%" height="15" fill="rgb(211,167,15)" fg:x="1392128" fg:w="318"/><text x="100.0988%" y="399.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (318 samples, 0.02%)</title><rect x="99.8488%" y="373" width="0.0228%" height="15" fill="rgb(210,169,34)" fg:x="1392128" fg:w="318"/><text x="100.0988%" y="383.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (318 samples, 0.02%)</title><rect x="99.8488%" y="357" width="0.0228%" height="15" fill="rgb(241,121,31)" fg:x="1392128" fg:w="318"/><text x="100.0988%" y="367.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (318 samples, 0.02%)</title><rect x="99.8488%" y="341" width="0.0228%" height="15" fill="rgb(232,40,11)" fg:x="1392128" fg:w="318"/><text x="100.0988%" y="351.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (318 samples, 0.02%)</title><rect x="99.8488%" y="325" width="0.0228%" height="15" fill="rgb(205,86,26)" fg:x="1392128" fg:w="318"/><text x="100.0988%" y="335.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (318 samples, 0.02%)</title><rect x="99.8488%" y="309" width="0.0228%" height="15" fill="rgb(231,126,28)" fg:x="1392128" fg:w="318"/><text x="100.0988%" y="319.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (321 samples, 0.02%)</title><rect x="99.8488%" y="421" width="0.0230%" height="15" fill="rgb(219,221,18)" fg:x="1392128" fg:w="321"/><text x="100.0988%" y="431.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (383 samples, 0.03%)</title><rect x="99.8448%" y="533" width="0.0275%" height="15" fill="rgb(211,40,0)" fg:x="1392072" fg:w="383"/><text x="100.0948%" y="543.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (383 samples, 0.03%)</title><rect x="99.8448%" y="517" width="0.0275%" height="15" fill="rgb(239,85,43)" fg:x="1392072" fg:w="383"/><text x="100.0948%" y="527.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (383 samples, 0.03%)</title><rect x="99.8448%" y="501" width="0.0275%" height="15" fill="rgb(231,55,21)" fg:x="1392072" fg:w="383"/><text x="100.0948%" y="511.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (383 samples, 0.03%)</title><rect x="99.8448%" y="485" width="0.0275%" height="15" fill="rgb(225,184,43)" fg:x="1392072" fg:w="383"/><text x="100.0948%" y="495.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (383 samples, 0.03%)</title><rect x="99.8448%" y="469" width="0.0275%" height="15" fill="rgb(251,158,41)" fg:x="1392072" fg:w="383"/><text x="100.0948%" y="479.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (383 samples, 0.03%)</title><rect x="99.8448%" y="453" width="0.0275%" height="15" fill="rgb(234,159,37)" fg:x="1392072" fg:w="383"/><text x="100.0948%" y="463.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (383 samples, 0.03%)</title><rect x="99.8448%" y="437" width="0.0275%" height="15" fill="rgb(216,204,22)" fg:x="1392072" fg:w="383"/><text x="100.0948%" y="447.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (388 samples, 0.03%)</title><rect x="99.8448%" y="549" width="0.0278%" height="15" fill="rgb(214,17,3)" fg:x="1392072" fg:w="388"/><text x="100.0948%" y="559.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (465 samples, 0.03%)</title><rect x="99.8398%" y="661" width="0.0334%" height="15" fill="rgb(212,111,17)" fg:x="1392003" fg:w="465"/><text x="100.0898%" y="671.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (465 samples, 0.03%)</title><rect x="99.8398%" y="645" width="0.0334%" height="15" fill="rgb(221,157,24)" fg:x="1392003" fg:w="465"/><text x="100.0898%" y="655.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (465 samples, 0.03%)</title><rect x="99.8398%" y="629" width="0.0334%" height="15" fill="rgb(252,16,13)" fg:x="1392003" fg:w="465"/><text x="100.0898%" y="639.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (465 samples, 0.03%)</title><rect x="99.8398%" y="613" width="0.0334%" height="15" fill="rgb(221,62,2)" fg:x="1392003" fg:w="465"/><text x="100.0898%" y="623.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (465 samples, 0.03%)</title><rect x="99.8398%" y="597" width="0.0334%" height="15" fill="rgb(247,87,22)" fg:x="1392003" fg:w="465"/><text x="100.0898%" y="607.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (465 samples, 0.03%)</title><rect x="99.8398%" y="581" width="0.0334%" height="15" fill="rgb(215,73,9)" fg:x="1392003" fg:w="465"/><text x="100.0898%" y="591.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (465 samples, 0.03%)</title><rect x="99.8398%" y="565" width="0.0334%" height="15" fill="rgb(207,175,33)" fg:x="1392003" fg:w="465"/><text x="100.0898%" y="575.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (469 samples, 0.03%)</title><rect x="99.8398%" y="677" width="0.0336%" height="15" fill="rgb(243,129,54)" fg:x="1392003" fg:w="469"/><text x="100.0898%" y="687.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (554 samples, 0.04%)</title><rect x="99.8342%" y="789" width="0.0397%" height="15" fill="rgb(227,119,45)" fg:x="1391925" fg:w="554"/><text x="100.0842%" y="799.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (554 samples, 0.04%)</title><rect x="99.8342%" y="773" width="0.0397%" height="15" fill="rgb(205,109,36)" fg:x="1391925" fg:w="554"/><text x="100.0842%" y="783.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (554 samples, 0.04%)</title><rect x="99.8342%" y="757" width="0.0397%" height="15" fill="rgb(205,6,39)" fg:x="1391925" fg:w="554"/><text x="100.0842%" y="767.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (554 samples, 0.04%)</title><rect x="99.8342%" y="741" width="0.0397%" height="15" fill="rgb(221,32,16)" fg:x="1391925" fg:w="554"/><text x="100.0842%" y="751.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (554 samples, 0.04%)</title><rect x="99.8342%" y="725" width="0.0397%" height="15" fill="rgb(228,144,50)" fg:x="1391925" fg:w="554"/><text x="100.0842%" y="735.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (554 samples, 0.04%)</title><rect x="99.8342%" y="709" width="0.0397%" height="15" fill="rgb(229,201,53)" fg:x="1391925" fg:w="554"/><text x="100.0842%" y="719.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (554 samples, 0.04%)</title><rect x="99.8342%" y="693" width="0.0397%" height="15" fill="rgb(249,153,27)" fg:x="1391925" fg:w="554"/><text x="100.0842%" y="703.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (556 samples, 0.04%)</title><rect x="99.8342%" y="805" width="0.0399%" height="15" fill="rgb(227,106,25)" fg:x="1391925" fg:w="556"/><text x="100.0842%" y="815.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (609 samples, 0.04%)</title><rect x="99.8308%" y="917" width="0.0437%" height="15" fill="rgb(230,65,29)" fg:x="1391877" fg:w="609"/><text x="100.0808%" y="927.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (609 samples, 0.04%)</title><rect x="99.8308%" y="901" width="0.0437%" height="15" fill="rgb(221,57,46)" fg:x="1391877" fg:w="609"/><text x="100.0808%" y="911.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (609 samples, 0.04%)</title><rect x="99.8308%" y="885" width="0.0437%" height="15" fill="rgb(229,161,17)" fg:x="1391877" fg:w="609"/><text x="100.0808%" y="895.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (609 samples, 0.04%)</title><rect x="99.8308%" y="869" width="0.0437%" height="15" fill="rgb(222,213,11)" fg:x="1391877" fg:w="609"/><text x="100.0808%" y="879.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (609 samples, 0.04%)</title><rect x="99.8308%" y="853" width="0.0437%" height="15" fill="rgb(235,35,13)" fg:x="1391877" fg:w="609"/><text x="100.0808%" y="863.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (609 samples, 0.04%)</title><rect x="99.8308%" y="837" width="0.0437%" height="15" fill="rgb(233,158,34)" fg:x="1391877" fg:w="609"/><text x="100.0808%" y="847.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (609 samples, 0.04%)</title><rect x="99.8308%" y="821" width="0.0437%" height="15" fill="rgb(215,151,48)" fg:x="1391877" fg:w="609"/><text x="100.0808%" y="831.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (612 samples, 0.04%)</title><rect x="99.8308%" y="933" width="0.0439%" height="15" fill="rgb(229,84,14)" fg:x="1391877" fg:w="612"/><text x="100.0808%" y="943.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (682 samples, 0.05%)</title><rect x="99.8262%" y="1045" width="0.0489%" height="15" fill="rgb(229,68,14)" fg:x="1391813" fg:w="682"/><text x="100.0762%" y="1055.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (682 samples, 0.05%)</title><rect x="99.8262%" y="1029" width="0.0489%" height="15" fill="rgb(243,106,26)" fg:x="1391813" fg:w="682"/><text x="100.0762%" y="1039.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (682 samples, 0.05%)</title><rect x="99.8262%" y="1013" width="0.0489%" height="15" fill="rgb(206,45,38)" fg:x="1391813" fg:w="682"/><text x="100.0762%" y="1023.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (682 samples, 0.05%)</title><rect x="99.8262%" y="997" width="0.0489%" height="15" fill="rgb(226,6,15)" fg:x="1391813" fg:w="682"/><text x="100.0762%" y="1007.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (682 samples, 0.05%)</title><rect x="99.8262%" y="981" width="0.0489%" height="15" fill="rgb(232,22,54)" fg:x="1391813" fg:w="682"/><text x="100.0762%" y="991.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (682 samples, 0.05%)</title><rect x="99.8262%" y="965" width="0.0489%" height="15" fill="rgb(229,222,32)" fg:x="1391813" fg:w="682"/><text x="100.0762%" y="975.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (682 samples, 0.05%)</title><rect x="99.8262%" y="949" width="0.0489%" height="15" fill="rgb(228,62,29)" fg:x="1391813" fg:w="682"/><text x="100.0762%" y="959.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (685 samples, 0.05%)</title><rect x="99.8262%" y="1061" width="0.0491%" height="15" fill="rgb(251,103,34)" fg:x="1391813" fg:w="685"/><text x="100.0762%" y="1071.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (747 samples, 0.05%)</title><rect x="99.8221%" y="1173" width="0.0536%" height="15" fill="rgb(233,12,30)" fg:x="1391755" fg:w="747"/><text x="100.0721%" y="1183.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (747 samples, 0.05%)</title><rect x="99.8221%" y="1157" width="0.0536%" height="15" fill="rgb(238,52,0)" fg:x="1391755" fg:w="747"/><text x="100.0721%" y="1167.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (747 samples, 0.05%)</title><rect x="99.8221%" y="1141" width="0.0536%" height="15" fill="rgb(223,98,5)" fg:x="1391755" fg:w="747"/><text x="100.0721%" y="1151.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (747 samples, 0.05%)</title><rect x="99.8221%" y="1125" width="0.0536%" height="15" fill="rgb(228,75,37)" fg:x="1391755" fg:w="747"/><text x="100.0721%" y="1135.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (747 samples, 0.05%)</title><rect x="99.8221%" y="1109" width="0.0536%" height="15" fill="rgb(205,115,49)" fg:x="1391755" fg:w="747"/><text x="100.0721%" y="1119.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (747 samples, 0.05%)</title><rect x="99.8221%" y="1093" width="0.0536%" height="15" fill="rgb(250,154,43)" fg:x="1391755" fg:w="747"/><text x="100.0721%" y="1103.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (747 samples, 0.05%)</title><rect x="99.8221%" y="1077" width="0.0536%" height="15" fill="rgb(226,43,29)" fg:x="1391755" fg:w="747"/><text x="100.0721%" y="1087.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (752 samples, 0.05%)</title><rect x="99.8221%" y="1189" width="0.0539%" height="15" fill="rgb(249,228,39)" fg:x="1391755" fg:w="752"/><text x="100.0721%" y="1199.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (808 samples, 0.06%)</title><rect x="99.8185%" y="1301" width="0.0580%" height="15" fill="rgb(216,79,43)" fg:x="1391705" fg:w="808"/><text x="100.0685%" y="1311.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (808 samples, 0.06%)</title><rect x="99.8185%" y="1285" width="0.0580%" height="15" fill="rgb(228,95,12)" fg:x="1391705" fg:w="808"/><text x="100.0685%" y="1295.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (808 samples, 0.06%)</title><rect x="99.8185%" y="1269" width="0.0580%" height="15" fill="rgb(249,221,15)" fg:x="1391705" fg:w="808"/><text x="100.0685%" y="1279.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (808 samples, 0.06%)</title><rect x="99.8185%" y="1253" width="0.0580%" height="15" fill="rgb(233,34,13)" fg:x="1391705" fg:w="808"/><text x="100.0685%" y="1263.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (808 samples, 0.06%)</title><rect x="99.8185%" y="1237" width="0.0580%" height="15" fill="rgb(214,103,39)" fg:x="1391705" fg:w="808"/><text x="100.0685%" y="1247.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (808 samples, 0.06%)</title><rect x="99.8185%" y="1221" width="0.0580%" height="15" fill="rgb(251,126,39)" fg:x="1391705" fg:w="808"/><text x="100.0685%" y="1231.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (808 samples, 0.06%)</title><rect x="99.8185%" y="1205" width="0.0580%" height="15" fill="rgb(214,216,36)" fg:x="1391705" fg:w="808"/><text x="100.0685%" y="1215.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (814 samples, 0.06%)</title><rect x="99.8185%" y="1317" width="0.0584%" height="15" fill="rgb(220,221,8)" fg:x="1391705" fg:w="814"/><text x="100.0685%" y="1327.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (892 samples, 0.06%)</title><rect x="99.8132%" y="1429" width="0.0640%" height="15" fill="rgb(240,216,3)" fg:x="1391631" fg:w="892"/><text x="100.0632%" y="1439.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (892 samples, 0.06%)</title><rect x="99.8132%" y="1413" width="0.0640%" height="15" fill="rgb(232,218,17)" fg:x="1391631" fg:w="892"/><text x="100.0632%" y="1423.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (892 samples, 0.06%)</title><rect x="99.8132%" y="1397" width="0.0640%" height="15" fill="rgb(229,163,45)" fg:x="1391631" fg:w="892"/><text x="100.0632%" y="1407.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (892 samples, 0.06%)</title><rect x="99.8132%" y="1381" width="0.0640%" height="15" fill="rgb(231,110,42)" fg:x="1391631" fg:w="892"/><text x="100.0632%" y="1391.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (892 samples, 0.06%)</title><rect x="99.8132%" y="1365" width="0.0640%" height="15" fill="rgb(208,170,48)" fg:x="1391631" fg:w="892"/><text x="100.0632%" y="1375.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (892 samples, 0.06%)</title><rect x="99.8132%" y="1349" width="0.0640%" height="15" fill="rgb(239,116,25)" fg:x="1391631" fg:w="892"/><text x="100.0632%" y="1359.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (892 samples, 0.06%)</title><rect x="99.8132%" y="1333" width="0.0640%" height="15" fill="rgb(219,200,50)" fg:x="1391631" fg:w="892"/><text x="100.0632%" y="1343.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (901 samples, 0.06%)</title><rect x="99.8132%" y="1445" width="0.0646%" height="15" fill="rgb(245,200,0)" fg:x="1391631" fg:w="901"/><text x="100.0632%" y="1455.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (986 samples, 0.07%)</title><rect x="99.8079%" y="1557" width="0.0707%" height="15" fill="rgb(245,119,33)" fg:x="1391558" fg:w="986"/><text x="100.0579%" y="1567.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (986 samples, 0.07%)</title><rect x="99.8079%" y="1541" width="0.0707%" height="15" fill="rgb(231,125,12)" fg:x="1391558" fg:w="986"/><text x="100.0579%" y="1551.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (986 samples, 0.07%)</title><rect x="99.8079%" y="1525" width="0.0707%" height="15" fill="rgb(216,96,41)" fg:x="1391558" fg:w="986"/><text x="100.0579%" y="1535.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (986 samples, 0.07%)</title><rect x="99.8079%" y="1509" width="0.0707%" height="15" fill="rgb(248,43,45)" fg:x="1391558" fg:w="986"/><text x="100.0579%" y="1519.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (986 samples, 0.07%)</title><rect x="99.8079%" y="1493" width="0.0707%" height="15" fill="rgb(217,222,7)" fg:x="1391558" fg:w="986"/><text x="100.0579%" y="1503.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (986 samples, 0.07%)</title><rect x="99.8079%" y="1477" width="0.0707%" height="15" fill="rgb(233,28,6)" fg:x="1391558" fg:w="986"/><text x="100.0579%" y="1487.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (986 samples, 0.07%)</title><rect x="99.8079%" y="1461" width="0.0707%" height="15" fill="rgb(231,218,15)" fg:x="1391558" fg:w="986"/><text x="100.0579%" y="1471.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (993 samples, 0.07%)</title><rect x="99.8079%" y="1573" width="0.0712%" height="15" fill="rgb(226,171,48)" fg:x="1391558" fg:w="993"/><text x="100.0579%" y="1583.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (1,067 samples, 0.08%)</title><rect x="99.8029%" y="1685" width="0.0765%" height="15" fill="rgb(235,201,9)" fg:x="1391488" fg:w="1067"/><text x="100.0529%" y="1695.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (1,067 samples, 0.08%)</title><rect x="99.8029%" y="1669" width="0.0765%" height="15" fill="rgb(217,80,15)" fg:x="1391488" fg:w="1067"/><text x="100.0529%" y="1679.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (1,067 samples, 0.08%)</title><rect x="99.8029%" y="1653" width="0.0765%" height="15" fill="rgb(219,152,8)" fg:x="1391488" fg:w="1067"/><text x="100.0529%" y="1663.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (1,067 samples, 0.08%)</title><rect x="99.8029%" y="1637" width="0.0765%" height="15" fill="rgb(243,107,38)" fg:x="1391488" fg:w="1067"/><text x="100.0529%" y="1647.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (1,067 samples, 0.08%)</title><rect x="99.8029%" y="1621" width="0.0765%" height="15" fill="rgb(231,17,5)" fg:x="1391488" fg:w="1067"/><text x="100.0529%" y="1631.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (1,067 samples, 0.08%)</title><rect x="99.8029%" y="1605" width="0.0765%" height="15" fill="rgb(209,25,54)" fg:x="1391488" fg:w="1067"/><text x="100.0529%" y="1615.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (1,067 samples, 0.08%)</title><rect x="99.8029%" y="1589" width="0.0765%" height="15" fill="rgb(219,0,2)" fg:x="1391488" fg:w="1067"/><text x="100.0529%" y="1599.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (1,073 samples, 0.08%)</title><rect x="99.8029%" y="1701" width="0.0770%" height="15" fill="rgb(246,9,5)" fg:x="1391488" fg:w="1073"/><text x="100.0529%" y="1711.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (1,171 samples, 0.08%)</title><rect x="99.7963%" y="1813" width="0.0840%" height="15" fill="rgb(226,159,4)" fg:x="1391396" fg:w="1171"/><text x="100.0463%" y="1823.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (1,171 samples, 0.08%)</title><rect x="99.7963%" y="1797" width="0.0840%" height="15" fill="rgb(219,175,34)" fg:x="1391396" fg:w="1171"/><text x="100.0463%" y="1807.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (1,171 samples, 0.08%)</title><rect x="99.7963%" y="1781" width="0.0840%" height="15" fill="rgb(236,10,46)" fg:x="1391396" fg:w="1171"/><text x="100.0463%" y="1791.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (1,171 samples, 0.08%)</title><rect x="99.7963%" y="1765" width="0.0840%" height="15" fill="rgb(240,211,16)" fg:x="1391396" fg:w="1171"/><text x="100.0463%" y="1775.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (1,171 samples, 0.08%)</title><rect x="99.7963%" y="1749" width="0.0840%" height="15" fill="rgb(205,3,43)" fg:x="1391396" fg:w="1171"/><text x="100.0463%" y="1759.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (1,171 samples, 0.08%)</title><rect x="99.7963%" y="1733" width="0.0840%" height="15" fill="rgb(245,7,22)" fg:x="1391396" fg:w="1171"/><text x="100.0463%" y="1743.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (1,171 samples, 0.08%)</title><rect x="99.7963%" y="1717" width="0.0840%" height="15" fill="rgb(239,132,32)" fg:x="1391396" fg:w="1171"/><text x="100.0463%" y="1727.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (1,177 samples, 0.08%)</title><rect x="99.7963%" y="1829" width="0.0844%" height="15" fill="rgb(228,202,34)" fg:x="1391396" fg:w="1177"/><text x="100.0463%" y="1839.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (1,260 samples, 0.09%)</title><rect x="99.7908%" y="1941" width="0.0904%" height="15" fill="rgb(254,200,22)" fg:x="1391319" fg:w="1260"/><text x="100.0408%" y="1951.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (1,260 samples, 0.09%)</title><rect x="99.7908%" y="1925" width="0.0904%" height="15" fill="rgb(219,10,39)" fg:x="1391319" fg:w="1260"/><text x="100.0408%" y="1935.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (1,260 samples, 0.09%)</title><rect x="99.7908%" y="1909" width="0.0904%" height="15" fill="rgb(226,210,39)" fg:x="1391319" fg:w="1260"/><text x="100.0408%" y="1919.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (1,260 samples, 0.09%)</title><rect x="99.7908%" y="1893" width="0.0904%" height="15" fill="rgb(208,219,16)" fg:x="1391319" fg:w="1260"/><text x="100.0408%" y="1903.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (1,260 samples, 0.09%)</title><rect x="99.7908%" y="1877" width="0.0904%" height="15" fill="rgb(216,158,51)" fg:x="1391319" fg:w="1260"/><text x="100.0408%" y="1887.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (1,260 samples, 0.09%)</title><rect x="99.7908%" y="1861" width="0.0904%" height="15" fill="rgb(233,14,44)" fg:x="1391319" fg:w="1260"/><text x="100.0408%" y="1871.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (1,260 samples, 0.09%)</title><rect x="99.7908%" y="1845" width="0.0904%" height="15" fill="rgb(237,97,39)" fg:x="1391319" fg:w="1260"/><text x="100.0408%" y="1855.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (1,267 samples, 0.09%)</title><rect x="99.7908%" y="1957" width="0.0909%" height="15" fill="rgb(218,198,43)" fg:x="1391319" fg:w="1267"/><text x="100.0408%" y="1967.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (1,371 samples, 0.10%)</title><rect x="99.7836%" y="2069" width="0.0983%" height="15" fill="rgb(231,104,20)" fg:x="1391219" fg:w="1371"/><text x="100.0336%" y="2079.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (1,371 samples, 0.10%)</title><rect x="99.7836%" y="2053" width="0.0983%" height="15" fill="rgb(254,36,13)" fg:x="1391219" fg:w="1371"/><text x="100.0336%" y="2063.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (1,371 samples, 0.10%)</title><rect x="99.7836%" y="2037" width="0.0983%" height="15" fill="rgb(248,14,50)" fg:x="1391219" fg:w="1371"/><text x="100.0336%" y="2047.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (1,371 samples, 0.10%)</title><rect x="99.7836%" y="2021" width="0.0983%" height="15" fill="rgb(217,107,29)" fg:x="1391219" fg:w="1371"/><text x="100.0336%" y="2031.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (1,371 samples, 0.10%)</title><rect x="99.7836%" y="2005" width="0.0983%" height="15" fill="rgb(251,169,33)" fg:x="1391219" fg:w="1371"/><text x="100.0336%" y="2015.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (1,371 samples, 0.10%)</title><rect x="99.7836%" y="1989" width="0.0983%" height="15" fill="rgb(217,108,32)" fg:x="1391219" fg:w="1371"/><text x="100.0336%" y="1999.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (1,371 samples, 0.10%)</title><rect x="99.7836%" y="1973" width="0.0983%" height="15" fill="rgb(219,66,42)" fg:x="1391219" fg:w="1371"/><text x="100.0336%" y="1983.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (1,386 samples, 0.10%)</title><rect x="99.7836%" y="2085" width="0.0994%" height="15" fill="rgb(206,180,7)" fg:x="1391219" fg:w="1386"/><text x="100.0336%" y="2095.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (1,476 samples, 0.11%)</title><rect x="99.7775%" y="2197" width="0.1059%" height="15" fill="rgb(208,226,31)" fg:x="1391134" fg:w="1476"/><text x="100.0275%" y="2207.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (1,476 samples, 0.11%)</title><rect x="99.7775%" y="2181" width="0.1059%" height="15" fill="rgb(218,26,49)" fg:x="1391134" fg:w="1476"/><text x="100.0275%" y="2191.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (1,476 samples, 0.11%)</title><rect x="99.7775%" y="2165" width="0.1059%" height="15" fill="rgb(233,197,48)" fg:x="1391134" fg:w="1476"/><text x="100.0275%" y="2175.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (1,476 samples, 0.11%)</title><rect x="99.7775%" y="2149" width="0.1059%" height="15" fill="rgb(252,181,51)" fg:x="1391134" fg:w="1476"/><text x="100.0275%" y="2159.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (1,476 samples, 0.11%)</title><rect x="99.7775%" y="2133" width="0.1059%" height="15" fill="rgb(253,90,19)" fg:x="1391134" fg:w="1476"/><text x="100.0275%" y="2143.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (1,476 samples, 0.11%)</title><rect x="99.7775%" y="2117" width="0.1059%" height="15" fill="rgb(215,171,30)" fg:x="1391134" fg:w="1476"/><text x="100.0275%" y="2127.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (1,476 samples, 0.11%)</title><rect x="99.7775%" y="2101" width="0.1059%" height="15" fill="rgb(214,222,9)" fg:x="1391134" fg:w="1476"/><text x="100.0275%" y="2111.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (1,484 samples, 0.11%)</title><rect x="99.7775%" y="2213" width="0.1064%" height="15" fill="rgb(223,3,22)" fg:x="1391134" fg:w="1484"/><text x="100.0275%" y="2223.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (1,553 samples, 0.11%)</title><rect x="99.7729%" y="2325" width="0.1114%" height="15" fill="rgb(225,196,46)" fg:x="1391070" fg:w="1553"/><text x="100.0229%" y="2335.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (1,553 samples, 0.11%)</title><rect x="99.7729%" y="2309" width="0.1114%" height="15" fill="rgb(209,110,37)" fg:x="1391070" fg:w="1553"/><text x="100.0229%" y="2319.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (1,553 samples, 0.11%)</title><rect x="99.7729%" y="2293" width="0.1114%" height="15" fill="rgb(249,89,12)" fg:x="1391070" fg:w="1553"/><text x="100.0229%" y="2303.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (1,553 samples, 0.11%)</title><rect x="99.7729%" y="2277" width="0.1114%" height="15" fill="rgb(226,27,33)" fg:x="1391070" fg:w="1553"/><text x="100.0229%" y="2287.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (1,553 samples, 0.11%)</title><rect x="99.7729%" y="2261" width="0.1114%" height="15" fill="rgb(213,82,22)" fg:x="1391070" fg:w="1553"/><text x="100.0229%" y="2271.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (1,553 samples, 0.11%)</title><rect x="99.7729%" y="2245" width="0.1114%" height="15" fill="rgb(248,140,0)" fg:x="1391070" fg:w="1553"/><text x="100.0229%" y="2255.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (1,553 samples, 0.11%)</title><rect x="99.7729%" y="2229" width="0.1114%" height="15" fill="rgb(228,106,3)" fg:x="1391070" fg:w="1553"/><text x="100.0229%" y="2239.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (1,564 samples, 0.11%)</title><rect x="99.7729%" y="2341" width="0.1122%" height="15" fill="rgb(209,23,37)" fg:x="1391070" fg:w="1564"/><text x="100.0229%" y="2351.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (1,598 samples, 0.11%)</title><rect x="99.7706%" y="2453" width="0.1146%" height="15" fill="rgb(241,93,50)" fg:x="1391038" fg:w="1598"/><text x="100.0206%" y="2463.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (1,598 samples, 0.11%)</title><rect x="99.7706%" y="2437" width="0.1146%" height="15" fill="rgb(253,46,43)" fg:x="1391038" fg:w="1598"/><text x="100.0206%" y="2447.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (1,598 samples, 0.11%)</title><rect x="99.7706%" y="2421" width="0.1146%" height="15" fill="rgb(226,206,43)" fg:x="1391038" fg:w="1598"/><text x="100.0206%" y="2431.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (1,598 samples, 0.11%)</title><rect x="99.7706%" y="2405" width="0.1146%" height="15" fill="rgb(217,54,7)" fg:x="1391038" fg:w="1598"/><text x="100.0206%" y="2415.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (1,598 samples, 0.11%)</title><rect x="99.7706%" y="2389" width="0.1146%" height="15" fill="rgb(223,5,52)" fg:x="1391038" fg:w="1598"/><text x="100.0206%" y="2399.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (1,598 samples, 0.11%)</title><rect x="99.7706%" y="2373" width="0.1146%" height="15" fill="rgb(206,52,46)" fg:x="1391038" fg:w="1598"/><text x="100.0206%" y="2383.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (1,598 samples, 0.11%)</title><rect x="99.7706%" y="2357" width="0.1146%" height="15" fill="rgb(253,136,11)" fg:x="1391038" fg:w="1598"/><text x="100.0206%" y="2367.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (1,612 samples, 0.12%)</title><rect x="99.7706%" y="2469" width="0.1156%" height="15" fill="rgb(208,106,33)" fg:x="1391038" fg:w="1612"/><text x="100.0206%" y="2479.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (1,674 samples, 0.12%)</title><rect x="99.7668%" y="2581" width="0.1201%" height="15" fill="rgb(206,54,4)" fg:x="1390984" fg:w="1674"/><text x="100.0168%" y="2591.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (1,674 samples, 0.12%)</title><rect x="99.7668%" y="2565" width="0.1201%" height="15" fill="rgb(213,3,15)" fg:x="1390984" fg:w="1674"/><text x="100.0168%" y="2575.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (1,674 samples, 0.12%)</title><rect x="99.7668%" y="2549" width="0.1201%" height="15" fill="rgb(252,211,39)" fg:x="1390984" fg:w="1674"/><text x="100.0168%" y="2559.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (1,674 samples, 0.12%)</title><rect x="99.7668%" y="2533" width="0.1201%" height="15" fill="rgb(223,6,36)" fg:x="1390984" fg:w="1674"/><text x="100.0168%" y="2543.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (1,674 samples, 0.12%)</title><rect x="99.7668%" y="2517" width="0.1201%" height="15" fill="rgb(252,169,45)" fg:x="1390984" fg:w="1674"/><text x="100.0168%" y="2527.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (1,674 samples, 0.12%)</title><rect x="99.7668%" y="2501" width="0.1201%" height="15" fill="rgb(212,48,26)" fg:x="1390984" fg:w="1674"/><text x="100.0168%" y="2511.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (1,674 samples, 0.12%)</title><rect x="99.7668%" y="2485" width="0.1201%" height="15" fill="rgb(251,102,48)" fg:x="1390984" fg:w="1674"/><text x="100.0168%" y="2495.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (1,691 samples, 0.12%)</title><rect x="99.7668%" y="2597" width="0.1213%" height="15" fill="rgb(243,208,16)" fg:x="1390984" fg:w="1691"/><text x="100.0168%" y="2607.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (1,734 samples, 0.12%)</title><rect x="99.7640%" y="2709" width="0.1244%" height="15" fill="rgb(219,96,24)" fg:x="1390945" fg:w="1734"/><text x="100.0140%" y="2719.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (1,734 samples, 0.12%)</title><rect x="99.7640%" y="2693" width="0.1244%" height="15" fill="rgb(219,33,29)" fg:x="1390945" fg:w="1734"/><text x="100.0140%" y="2703.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (1,734 samples, 0.12%)</title><rect x="99.7640%" y="2677" width="0.1244%" height="15" fill="rgb(223,176,5)" fg:x="1390945" fg:w="1734"/><text x="100.0140%" y="2687.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (1,734 samples, 0.12%)</title><rect x="99.7640%" y="2661" width="0.1244%" height="15" fill="rgb(228,140,14)" fg:x="1390945" fg:w="1734"/><text x="100.0140%" y="2671.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (1,734 samples, 0.12%)</title><rect x="99.7640%" y="2645" width="0.1244%" height="15" fill="rgb(217,179,31)" fg:x="1390945" fg:w="1734"/><text x="100.0140%" y="2655.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (1,734 samples, 0.12%)</title><rect x="99.7640%" y="2629" width="0.1244%" height="15" fill="rgb(230,9,30)" fg:x="1390945" fg:w="1734"/><text x="100.0140%" y="2639.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (1,734 samples, 0.12%)</title><rect x="99.7640%" y="2613" width="0.1244%" height="15" fill="rgb(230,136,20)" fg:x="1390945" fg:w="1734"/><text x="100.0140%" y="2623.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (1,742 samples, 0.12%)</title><rect x="99.7640%" y="2725" width="0.1249%" height="15" fill="rgb(215,210,22)" fg:x="1390945" fg:w="1742"/><text x="100.0140%" y="2735.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (1,783 samples, 0.13%)</title><rect x="99.7614%" y="2837" width="0.1279%" height="15" fill="rgb(218,43,5)" fg:x="1390909" fg:w="1783"/><text x="100.0114%" y="2847.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (1,783 samples, 0.13%)</title><rect x="99.7614%" y="2821" width="0.1279%" height="15" fill="rgb(216,11,5)" fg:x="1390909" fg:w="1783"/><text x="100.0114%" y="2831.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (1,783 samples, 0.13%)</title><rect x="99.7614%" y="2805" width="0.1279%" height="15" fill="rgb(209,82,29)" fg:x="1390909" fg:w="1783"/><text x="100.0114%" y="2815.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (1,783 samples, 0.13%)</title><rect x="99.7614%" y="2789" width="0.1279%" height="15" fill="rgb(244,115,12)" fg:x="1390909" fg:w="1783"/><text x="100.0114%" y="2799.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (1,783 samples, 0.13%)</title><rect x="99.7614%" y="2773" width="0.1279%" height="15" fill="rgb(222,82,18)" fg:x="1390909" fg:w="1783"/><text x="100.0114%" y="2783.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (1,783 samples, 0.13%)</title><rect x="99.7614%" y="2757" width="0.1279%" height="15" fill="rgb(249,227,8)" fg:x="1390909" fg:w="1783"/><text x="100.0114%" y="2767.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (1,783 samples, 0.13%)</title><rect x="99.7614%" y="2741" width="0.1279%" height="15" fill="rgb(253,141,45)" fg:x="1390909" fg:w="1783"/><text x="100.0114%" y="2751.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (1,832 samples, 0.13%)</title><rect x="99.7584%" y="2965" width="0.1314%" height="15" fill="rgb(234,184,4)" fg:x="1390867" fg:w="1832"/><text x="100.0084%" y="2975.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (1,832 samples, 0.13%)</title><rect x="99.7584%" y="2949" width="0.1314%" height="15" fill="rgb(218,194,23)" fg:x="1390867" fg:w="1832"/><text x="100.0084%" y="2959.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (1,832 samples, 0.13%)</title><rect x="99.7584%" y="2933" width="0.1314%" height="15" fill="rgb(235,66,41)" fg:x="1390867" fg:w="1832"/><text x="100.0084%" y="2943.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (1,832 samples, 0.13%)</title><rect x="99.7584%" y="2917" width="0.1314%" height="15" fill="rgb(245,217,1)" fg:x="1390867" fg:w="1832"/><text x="100.0084%" y="2927.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (1,832 samples, 0.13%)</title><rect x="99.7584%" y="2901" width="0.1314%" height="15" fill="rgb(229,91,1)" fg:x="1390867" fg:w="1832"/><text x="100.0084%" y="2911.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (1,832 samples, 0.13%)</title><rect x="99.7584%" y="2885" width="0.1314%" height="15" fill="rgb(207,101,30)" fg:x="1390867" fg:w="1832"/><text x="100.0084%" y="2895.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (1,832 samples, 0.13%)</title><rect x="99.7584%" y="2869" width="0.1314%" height="15" fill="rgb(223,82,49)" fg:x="1390867" fg:w="1832"/><text x="100.0084%" y="2879.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (1,790 samples, 0.13%)</title><rect x="99.7614%" y="2853" width="0.1284%" height="15" fill="rgb(218,167,17)" fg:x="1390909" fg:w="1790"/><text x="100.0114%" y="2863.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (1,855 samples, 0.13%)</title><rect x="99.7584%" y="2981" width="0.1330%" height="15" fill="rgb(208,103,14)" fg:x="1390867" fg:w="1855"/><text x="100.0084%" y="2991.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (1,900 samples, 0.14%)</title><rect x="99.7553%" y="3093" width="0.1363%" height="15" fill="rgb(238,20,8)" fg:x="1390824" fg:w="1900"/><text x="100.0053%" y="3103.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (1,900 samples, 0.14%)</title><rect x="99.7553%" y="3077" width="0.1363%" height="15" fill="rgb(218,80,54)" fg:x="1390824" fg:w="1900"/><text x="100.0053%" y="3087.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (1,900 samples, 0.14%)</title><rect x="99.7553%" y="3061" width="0.1363%" height="15" fill="rgb(240,144,17)" fg:x="1390824" fg:w="1900"/><text x="100.0053%" y="3071.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (1,900 samples, 0.14%)</title><rect x="99.7553%" y="3045" width="0.1363%" height="15" fill="rgb(245,27,50)" fg:x="1390824" fg:w="1900"/><text x="100.0053%" y="3055.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (1,900 samples, 0.14%)</title><rect x="99.7553%" y="3029" width="0.1363%" height="15" fill="rgb(251,51,7)" fg:x="1390824" fg:w="1900"/><text x="100.0053%" y="3039.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (1,900 samples, 0.14%)</title><rect x="99.7553%" y="3013" width="0.1363%" height="15" fill="rgb(245,217,29)" fg:x="1390824" fg:w="1900"/><text x="100.0053%" y="3023.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (1,900 samples, 0.14%)</title><rect x="99.7553%" y="2997" width="0.1363%" height="15" fill="rgb(221,176,29)" fg:x="1390824" fg:w="1900"/><text x="100.0053%" y="3007.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (1,910 samples, 0.14%)</title><rect x="99.7553%" y="3109" width="0.1370%" height="15" fill="rgb(212,180,24)" fg:x="1390824" fg:w="1910"/><text x="100.0053%" y="3119.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (1,955 samples, 0.14%)</title><rect x="99.7523%" y="3221" width="0.1402%" height="15" fill="rgb(254,24,2)" fg:x="1390782" fg:w="1955"/><text x="100.0023%" y="3231.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (1,955 samples, 0.14%)</title><rect x="99.7523%" y="3205" width="0.1402%" height="15" fill="rgb(230,100,2)" fg:x="1390782" fg:w="1955"/><text x="100.0023%" y="3215.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (1,955 samples, 0.14%)</title><rect x="99.7523%" y="3189" width="0.1402%" height="15" fill="rgb(219,142,25)" fg:x="1390782" fg:w="1955"/><text x="100.0023%" y="3199.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (1,955 samples, 0.14%)</title><rect x="99.7523%" y="3173" width="0.1402%" height="15" fill="rgb(240,73,43)" fg:x="1390782" fg:w="1955"/><text x="100.0023%" y="3183.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (1,955 samples, 0.14%)</title><rect x="99.7523%" y="3157" width="0.1402%" height="15" fill="rgb(214,114,15)" fg:x="1390782" fg:w="1955"/><text x="100.0023%" y="3167.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (1,955 samples, 0.14%)</title><rect x="99.7523%" y="3141" width="0.1402%" height="15" fill="rgb(207,130,4)" fg:x="1390782" fg:w="1955"/><text x="100.0023%" y="3151.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (1,955 samples, 0.14%)</title><rect x="99.7523%" y="3125" width="0.1402%" height="15" fill="rgb(221,25,40)" fg:x="1390782" fg:w="1955"/><text x="100.0023%" y="3135.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (1,967 samples, 0.14%)</title><rect x="99.7523%" y="3237" width="0.1411%" height="15" fill="rgb(241,184,7)" fg:x="1390782" fg:w="1967"/><text x="100.0023%" y="3247.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::find_reachable(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (2,140 samples, 0.15%)</title><rect x="99.7430%" y="3365" width="0.1535%" height="15" fill="rgb(235,159,4)" fg:x="1390653" fg:w="2140"/><text x="99.9930%" y="3375.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;tuple$ (2,045 samples, 0.15%)</title><rect x="99.7498%" y="3349" width="0.1467%" height="15" fill="rgb(214,87,48)" fg:x="1390748" fg:w="2045"/><text x="99.9998%" y="3359.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (2,045 samples, 0.15%)</title><rect x="99.7498%" y="3333" width="0.1467%" height="15" fill="rgb(246,198,24)" fg:x="1390748" fg:w="2045"/><text x="99.9998%" y="3343.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (2,045 samples, 0.15%)</title><rect x="99.7498%" y="3317" width="0.1467%" height="15" fill="rgb(209,66,40)" fg:x="1390748" fg:w="2045"/><text x="99.9998%" y="3327.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (2,045 samples, 0.15%)</title><rect x="99.7498%" y="3301" width="0.1467%" height="15" fill="rgb(233,147,39)" fg:x="1390748" fg:w="2045"/><text x="99.9998%" y="3311.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (2,045 samples, 0.15%)</title><rect x="99.7498%" y="3285" width="0.1467%" height="15" fill="rgb(231,145,52)" fg:x="1390748" fg:w="2045"/><text x="99.9998%" y="3295.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (2,045 samples, 0.15%)</title><rect x="99.7498%" y="3269" width="0.1467%" height="15" fill="rgb(206,20,26)" fg:x="1390748" fg:w="2045"/><text x="99.9998%" y="3279.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (2,045 samples, 0.15%)</title><rect x="99.7498%" y="3253" width="0.1467%" height="15" fill="rgb(238,220,4)" fg:x="1390748" fg:w="2045"/><text x="99.9998%" y="3263.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_solution (6,093 samples, 0.44%)</title><rect x="99.4604%" y="3381" width="0.4370%" height="15" fill="rgb(252,195,42)" fg:x="1386713" fg:w="6093"/><text x="99.7104%" y="3391.50"></text></g><g><title>neural_network.exe`alloc::sync::impl$29::deref(alloc::sync::Arc&lt;std::thread::Packet&lt;tuple$ (6,378 samples, 0.46%)</title><rect x="99.4453%" y="3461" width="0.4575%" height="15" fill="rgb(209,10,6)" fg:x="1386502" fg:w="6378"/><text x="99.6953%" y="3471.50"></text></g><g><title>neural_network.exe`alloc::sync::Arc&lt;std::thread::Packet&lt;tuple$&lt;&gt; &gt;,alloc::alloc::Global&gt;::inner (6,378 samples, 0.46%)</title><rect x="99.4453%" y="3445" width="0.4575%" height="15" fill="rgb(229,3,52)" fg:x="1386502" fg:w="6378"/><text x="99.6953%" y="3455.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;alloc::sync::ArcInner&lt;std::thread::Packet&lt;tuple$&lt;&gt; &gt; &gt; &gt;::as_ref (6,378 samples, 0.46%)</title><rect x="99.4453%" y="3429" width="0.4575%" height="15" fill="rgb(253,49,37)" fg:x="1386502" fg:w="6378"/><text x="99.6953%" y="3439.50"></text></g><g><title>neural_network.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;neural_network::flow::flow_ai::generate_puzzles_3d::closure_env$0,tuple$&lt;&gt; &gt; (6,378 samples, 0.46%)</title><rect x="99.4453%" y="3413" width="0.4575%" height="15" fill="rgb(240,103,49)" fg:x="1386502" fg:w="6378"/><text x="99.6953%" y="3423.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_puzzles_3d::closure$0 (6,378 samples, 0.46%)</title><rect x="99.4453%" y="3397" width="0.4575%" height="15" fill="rgb(250,182,30)" fg:x="1386502" fg:w="6378"/><text x="99.6953%" y="3407.50"></text></g><g><title>neural_network.exe`alloc::boxed::impl$48::call_once (6,390 samples, 0.46%)</title><rect x="99.4452%" y="3557" width="0.4583%" height="15" fill="rgb(248,8,30)" fg:x="1386501" fg:w="6390"/><text x="99.6952%" y="3567.50"></text></g><g><title>neural_network.exe`alloc::boxed::impl$8::drop (6,390 samples, 0.46%)</title><rect x="99.4452%" y="3541" width="0.4583%" height="15" fill="rgb(237,120,30)" fg:x="1386501" fg:w="6390"/><text x="99.6952%" y="3551.50"></text></g><g><title>neural_network.exe`core::alloc::layout::Layout::for_value_raw (6,390 samples, 0.46%)</title><rect x="99.4452%" y="3525" width="0.4583%" height="15" fill="rgb(221,146,34)" fg:x="1386501" fg:w="6390"/><text x="99.6952%" y="3535.50"></text></g><g><title>neural_network.exe`core::mem::size_of_val_raw (6,390 samples, 0.46%)</title><rect x="99.4452%" y="3509" width="0.4583%" height="15" fill="rgb(242,55,13)" fg:x="1386501" fg:w="6390"/><text x="99.6952%" y="3519.50"></text></g><g><title>neural_network.exe`core::ops::function::FnOnce::call_once&lt;std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;neural_network::flow::flow_ai::generate_puzzles_3d::closure_env$0,tuple$&lt;&gt; &gt;,tuple$&lt;&gt; &gt;(std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;neural_network::flow::flow_ai::generate_puzzles_3d::closure_env$0,tuple$ (6,390 samples, 0.46%)</title><rect x="99.4452%" y="3493" width="0.4583%" height="15" fill="rgb(242,112,31)" fg:x="1386501" fg:w="6390"/><text x="99.6952%" y="3503.50"></text></g><g><title>neural_network.exe`std::thread::impl$0::spawn_unchecked_::closure$1(std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;neural_network::flow::flow_ai::generate_puzzles_3d::closure_env$0,tuple$ (6,389 samples, 0.46%)</title><rect x="99.4453%" y="3477" width="0.4582%" height="15" fill="rgb(249,192,27)" fg:x="1386502" fg:w="6389"/><text x="99.6953%" y="3487.50"></text></g><g><title>`0x7FF97DFB257D (1,392,786 samples, 99.90%)</title><rect x="0.0077%" y="3605" width="99.8960%" height="15" fill="rgb(208,204,44)" fg:x="108" fg:w="1392786"/><text x="0.2577%" y="3615.50">`0x7FF97DFB257D</text></g><g><title>neural_network.exe`std::sys::pal::windows::thread::impl$0::new::thread_start (6,500 samples, 0.47%)</title><rect x="99.4375%" y="3589" width="0.4662%" height="15" fill="rgb(208,93,54)" fg:x="1386394" fg:w="6500"/><text x="99.6875%" y="3599.50"></text></g><g><title>neural_network.exe`alloc::boxed::impl$48::call_once (6,494 samples, 0.47%)</title><rect x="99.4380%" y="3573" width="0.4658%" height="15" fill="rgb(242,1,31)" fg:x="1386400" fg:w="6494"/><text x="99.6880%" y="3583.50"></text></g><g><title>`0x7FF97E64AF9E (279 samples, 0.02%)</title><rect x="99.9054%" y="3589" width="0.0200%" height="15" fill="rgb(241,83,25)" fg:x="1392917" fg:w="279"/><text x="100.1554%" y="3599.50"></text></g><g><title>`0x7FF97E64AF28 (1,393,094 samples, 99.92%)</title><rect x="0.0077%" y="3621" width="99.9181%" height="15" fill="rgb(205,169,50)" fg:x="108" fg:w="1393094"/><text x="0.2577%" y="3631.50">`0x7FF97E64AF28</text></g><g><title>`0x7FF97DFB2586 (308 samples, 0.02%)</title><rect x="99.9037%" y="3605" width="0.0221%" height="15" fill="rgb(239,186,37)" fg:x="1392894" fg:w="308"/><text x="100.1537%" y="3615.50"></text></g><g><title>`0x7FF97E6642A0 (148 samples, 0.01%)</title><rect x="99.9258%" y="3621" width="0.0106%" height="15" fill="rgb(205,221,10)" fg:x="1393202" fg:w="148"/><text x="100.1758%" y="3631.50"></text></g><g><title>`0x7FF97E618867 (163 samples, 0.01%)</title><rect x="99.9387%" y="3573" width="0.0117%" height="15" fill="rgb(218,196,15)" fg:x="1393382" fg:w="163"/><text x="100.1887%" y="3583.50"></text></g><g><title>`0x7FF97B952BA8 (326 samples, 0.02%)</title><rect x="99.9597%" y="3509" width="0.0234%" height="15" fill="rgb(218,196,35)" fg:x="1393674" fg:w="326"/><text x="100.2097%" y="3519.50"></text></g><g><title>`0x7FF97B952EB4 (315 samples, 0.02%)</title><rect x="99.9605%" y="3493" width="0.0226%" height="15" fill="rgb(233,63,24)" fg:x="1393685" fg:w="315"/><text x="100.2105%" y="3503.50"></text></g><g><title>`0x7FF97B952FA9 (294 samples, 0.02%)</title><rect x="99.9620%" y="3477" width="0.0211%" height="15" fill="rgb(225,8,4)" fg:x="1393706" fg:w="294"/><text x="100.2120%" y="3487.50"></text></g><g><title>`0x7FF97E690084 (294 samples, 0.02%)</title><rect x="99.9620%" y="3461" width="0.0211%" height="15" fill="rgb(234,105,35)" fg:x="1393706" fg:w="294"/><text x="100.2120%" y="3471.50"></text></g><g><title>`0x7FF97B951DCD (342 samples, 0.02%)</title><rect x="99.9588%" y="3541" width="0.0245%" height="15" fill="rgb(236,21,32)" fg:x="1393661" fg:w="342"/><text x="100.2088%" y="3551.50"></text></g><g><title>`0x7FF97B952048 (338 samples, 0.02%)</title><rect x="99.9590%" y="3525" width="0.0242%" height="15" fill="rgb(228,109,6)" fg:x="1393665" fg:w="338"/><text x="100.2090%" y="3535.50"></text></g><g><title>`0x7FF97E618B7F (470 samples, 0.03%)</title><rect x="99.9571%" y="3557" width="0.0337%" height="15" fill="rgb(229,215,31)" fg:x="1393638" fg:w="470"/><text x="100.2071%" y="3567.50"></text></g><g><title>`0x7FF97E61895F (479 samples, 0.03%)</title><rect x="99.9570%" y="3573" width="0.0344%" height="15" fill="rgb(221,52,54)" fg:x="1393637" fg:w="479"/><text x="100.2070%" y="3583.50"></text></g><g><title>`0x7FF97E66444F (829 samples, 0.06%)</title><rect x="99.9377%" y="3589" width="0.0595%" height="15" fill="rgb(252,129,43)" fg:x="1393368" fg:w="829"/><text x="100.1877%" y="3599.50"></text></g><g><title>`0x7FF97E6642AE (879 samples, 0.06%)</title><rect x="99.9365%" y="3621" width="0.0630%" height="15" fill="rgb(248,183,27)" fg:x="1393350" fg:w="879"/><text x="100.1865%" y="3631.50"></text></g><g><title>`0x7FF97E664383 (872 samples, 0.06%)</title><rect x="99.9370%" y="3605" width="0.0625%" height="15" fill="rgb(250,0,22)" fg:x="1393357" fg:w="872"/><text x="100.1870%" y="3615.50"></text></g><g><title>all (1,394,236 samples, 100%)</title><rect x="0.0000%" y="3637" width="100.0000%" height="15" fill="rgb(213,166,10)" fg:x="0" fg:w="1394236"/><text x="0.2500%" y="3647.50"></text></g></svg></svg>