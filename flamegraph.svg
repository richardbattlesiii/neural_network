<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="8918" onload="init(evt)" viewBox="0 0 1200 8918" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="8918" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="8901.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="8901.00"> </text><svg id="frames" x="10" width="1180" total_samples="279847"><g><title>neural_network.exe`__scrt_common_main_seh() (33 samples, 0.01%)</title><rect x="0.0046%" y="8821" width="0.0118%" height="15" fill="rgb(227,0,7)" fg:x="13" fg:w="33"/><text x="0.2546%" y="8831.50"></text></g><g><title>neural_network.exe`invoke_main() (28 samples, 0.01%)</title><rect x="0.0064%" y="8805" width="0.0100%" height="15" fill="rgb(217,0,24)" fg:x="18" fg:w="28"/><text x="0.2564%" y="8815.50"></text></g><g><title>neural_network.exe`main (28 samples, 0.01%)</title><rect x="0.0064%" y="8789" width="0.0100%" height="15" fill="rgb(221,193,54)" fg:x="18" fg:w="28"/><text x="0.2564%" y="8799.50"></text></g><g><title>neural_network.exe`std::rt::lang_start_internal (28 samples, 0.01%)</title><rect x="0.0064%" y="8773" width="0.0100%" height="15" fill="rgb(248,212,6)" fg:x="18" fg:w="28"/><text x="0.2564%" y="8783.50"></text></g><g><title>neural_network.exe`std::panic::catch_unwind (28 samples, 0.01%)</title><rect x="0.0064%" y="8757" width="0.0100%" height="15" fill="rgb(208,68,35)" fg:x="18" fg:w="28"/><text x="0.2564%" y="8767.50"></text></g><g><title>neural_network.exe`std::panicking::try (28 samples, 0.01%)</title><rect x="0.0064%" y="8741" width="0.0100%" height="15" fill="rgb(232,128,0)" fg:x="18" fg:w="28"/><text x="0.2564%" y="8751.50"></text></g><g><title>neural_network.exe`std::panicking::try::do_call (28 samples, 0.01%)</title><rect x="0.0064%" y="8725" width="0.0100%" height="15" fill="rgb(207,160,47)" fg:x="18" fg:w="28"/><text x="0.2564%" y="8735.50"></text></g><g><title>neural_network.exe`std::rt::lang_start_internal::closure$2 (28 samples, 0.01%)</title><rect x="0.0064%" y="8709" width="0.0100%" height="15" fill="rgb(228,23,34)" fg:x="18" fg:w="28"/><text x="0.2564%" y="8719.50"></text></g><g><title>neural_network.exe`std::panic::catch_unwind (28 samples, 0.01%)</title><rect x="0.0064%" y="8693" width="0.0100%" height="15" fill="rgb(218,30,26)" fg:x="18" fg:w="28"/><text x="0.2564%" y="8703.50"></text></g><g><title>neural_network.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$ (28 samples, 0.01%)</title><rect x="0.0064%" y="8677" width="0.0100%" height="15" fill="rgb(220,122,19)" fg:x="18" fg:w="28"/><text x="0.2564%" y="8687.50"></text></g><g><title>neural_network.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (28 samples, 0.01%)</title><rect x="0.0064%" y="8661" width="0.0100%" height="15" fill="rgb(250,228,42)" fg:x="18" fg:w="28"/><text x="0.2564%" y="8671.50"></text></g><g><title>neural_network.exe`neural_network::main (28 samples, 0.01%)</title><rect x="0.0064%" y="8645" width="0.0100%" height="15" fill="rgb(240,193,28)" fg:x="18" fg:w="28"/><text x="0.2564%" y="8655.50"></text></g><g><title>`0x7FF97E63218A (32 samples, 0.01%)</title><rect x="0.0447%" y="8245" width="0.0114%" height="15" fill="rgb(216,20,37)" fg:x="125" fg:w="32"/><text x="0.2947%" y="8255.50"></text></g><g><title>`0x7FF97E6322C7 (32 samples, 0.01%)</title><rect x="0.0447%" y="8229" width="0.0114%" height="15" fill="rgb(206,188,39)" fg:x="125" fg:w="32"/><text x="0.2947%" y="8239.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_mut_ptr (36 samples, 0.01%)</title><rect x="0.0436%" y="8437" width="0.0129%" height="15" fill="rgb(217,207,13)" fg:x="122" fg:w="36"/><text x="0.2936%" y="8447.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (36 samples, 0.01%)</title><rect x="0.0436%" y="8421" width="0.0129%" height="15" fill="rgb(231,73,38)" fg:x="122" fg:w="36"/><text x="0.2936%" y="8431.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (36 samples, 0.01%)</title><rect x="0.0436%" y="8405" width="0.0129%" height="15" fill="rgb(225,20,46)" fg:x="122" fg:w="36"/><text x="0.2936%" y="8415.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (36 samples, 0.01%)</title><rect x="0.0436%" y="8389" width="0.0129%" height="15" fill="rgb(210,31,41)" fg:x="122" fg:w="36"/><text x="0.2936%" y="8399.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::grow_one&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; (36 samples, 0.01%)</title><rect x="0.0436%" y="8373" width="0.0129%" height="15" fill="rgb(221,200,47)" fg:x="122" fg:w="36"/><text x="0.2936%" y="8383.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (35 samples, 0.01%)</title><rect x="0.0440%" y="8357" width="0.0125%" height="15" fill="rgb(226,26,5)" fg:x="123" fg:w="35"/><text x="0.2940%" y="8367.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (35 samples, 0.01%)</title><rect x="0.0440%" y="8341" width="0.0125%" height="15" fill="rgb(249,33,26)" fg:x="123" fg:w="35"/><text x="0.2940%" y="8351.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (35 samples, 0.01%)</title><rect x="0.0440%" y="8325" width="0.0125%" height="15" fill="rgb(235,183,28)" fg:x="123" fg:w="35"/><text x="0.2940%" y="8335.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (35 samples, 0.01%)</title><rect x="0.0440%" y="8309" width="0.0125%" height="15" fill="rgb(221,5,38)" fg:x="123" fg:w="35"/><text x="0.2940%" y="8319.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (35 samples, 0.01%)</title><rect x="0.0440%" y="8293" width="0.0125%" height="15" fill="rgb(247,18,42)" fg:x="123" fg:w="35"/><text x="0.2940%" y="8303.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (35 samples, 0.01%)</title><rect x="0.0440%" y="8277" width="0.0125%" height="15" fill="rgb(241,131,45)" fg:x="123" fg:w="35"/><text x="0.2940%" y="8287.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (35 samples, 0.01%)</title><rect x="0.0440%" y="8261" width="0.0125%" height="15" fill="rgb(249,31,29)" fg:x="123" fg:w="35"/><text x="0.2940%" y="8271.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (46 samples, 0.02%)</title><rect x="0.0407%" y="8453" width="0.0164%" height="15" fill="rgb(225,111,53)" fg:x="114" fg:w="46"/><text x="0.2907%" y="8463.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (90 samples, 0.03%)</title><rect x="0.0636%" y="8453" width="0.0322%" height="15" fill="rgb(238,160,17)" fg:x="178" fg:w="90"/><text x="0.3136%" y="8463.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (90 samples, 0.03%)</title><rect x="0.0636%" y="8437" width="0.0322%" height="15" fill="rgb(214,148,48)" fg:x="178" fg:w="90"/><text x="0.3136%" y="8447.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (90 samples, 0.03%)</title><rect x="0.0636%" y="8421" width="0.0322%" height="15" fill="rgb(232,36,49)" fg:x="178" fg:w="90"/><text x="0.3136%" y="8431.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (34 samples, 0.01%)</title><rect x="0.3177%" y="3333" width="0.0121%" height="15" fill="rgb(209,103,24)" fg:x="889" fg:w="34"/><text x="0.5677%" y="3343.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (34 samples, 0.01%)</title><rect x="0.3177%" y="3317" width="0.0121%" height="15" fill="rgb(229,88,8)" fg:x="889" fg:w="34"/><text x="0.5677%" y="3327.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (34 samples, 0.01%)</title><rect x="0.3177%" y="3301" width="0.0121%" height="15" fill="rgb(213,181,19)" fg:x="889" fg:w="34"/><text x="0.5677%" y="3311.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (34 samples, 0.01%)</title><rect x="0.3177%" y="3285" width="0.0121%" height="15" fill="rgb(254,191,54)" fg:x="889" fg:w="34"/><text x="0.5677%" y="3295.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (34 samples, 0.01%)</title><rect x="0.3177%" y="3269" width="0.0121%" height="15" fill="rgb(241,83,37)" fg:x="889" fg:w="34"/><text x="0.5677%" y="3279.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (34 samples, 0.01%)</title><rect x="0.3177%" y="3253" width="0.0121%" height="15" fill="rgb(233,36,39)" fg:x="889" fg:w="34"/><text x="0.5677%" y="3263.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (34 samples, 0.01%)</title><rect x="0.3177%" y="3237" width="0.0121%" height="15" fill="rgb(226,3,54)" fg:x="889" fg:w="34"/><text x="0.5677%" y="3247.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (31 samples, 0.01%)</title><rect x="0.3187%" y="3221" width="0.0111%" height="15" fill="rgb(245,192,40)" fg:x="892" fg:w="31"/><text x="0.5687%" y="3231.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (31 samples, 0.01%)</title><rect x="0.3187%" y="3205" width="0.0111%" height="15" fill="rgb(238,167,29)" fg:x="892" fg:w="31"/><text x="0.5687%" y="3215.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (31 samples, 0.01%)</title><rect x="0.3187%" y="3189" width="0.0111%" height="15" fill="rgb(232,182,51)" fg:x="892" fg:w="31"/><text x="0.5687%" y="3199.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (31 samples, 0.01%)</title><rect x="0.3187%" y="3173" width="0.0111%" height="15" fill="rgb(231,60,39)" fg:x="892" fg:w="31"/><text x="0.5687%" y="3183.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (31 samples, 0.01%)</title><rect x="0.3187%" y="3157" width="0.0111%" height="15" fill="rgb(208,69,12)" fg:x="892" fg:w="31"/><text x="0.5687%" y="3167.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (31 samples, 0.01%)</title><rect x="0.3187%" y="3141" width="0.0111%" height="15" fill="rgb(235,93,37)" fg:x="892" fg:w="31"/><text x="0.5687%" y="3151.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (31 samples, 0.01%)</title><rect x="0.3187%" y="3125" width="0.0111%" height="15" fill="rgb(213,116,39)" fg:x="892" fg:w="31"/><text x="0.5687%" y="3135.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (31 samples, 0.01%)</title><rect x="0.3187%" y="3109" width="0.0111%" height="15" fill="rgb(222,207,29)" fg:x="892" fg:w="31"/><text x="0.5687%" y="3119.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (28 samples, 0.01%)</title><rect x="0.3198%" y="3093" width="0.0100%" height="15" fill="rgb(206,96,30)" fg:x="895" fg:w="28"/><text x="0.5698%" y="3103.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (28 samples, 0.01%)</title><rect x="0.3198%" y="3077" width="0.0100%" height="15" fill="rgb(218,138,4)" fg:x="895" fg:w="28"/><text x="0.5698%" y="3087.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (28 samples, 0.01%)</title><rect x="0.3198%" y="3061" width="0.0100%" height="15" fill="rgb(250,191,14)" fg:x="895" fg:w="28"/><text x="0.5698%" y="3071.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (28 samples, 0.01%)</title><rect x="0.3198%" y="3045" width="0.0100%" height="15" fill="rgb(239,60,40)" fg:x="895" fg:w="28"/><text x="0.5698%" y="3055.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (28 samples, 0.01%)</title><rect x="0.3198%" y="3029" width="0.0100%" height="15" fill="rgb(206,27,48)" fg:x="895" fg:w="28"/><text x="0.5698%" y="3039.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (28 samples, 0.01%)</title><rect x="0.3198%" y="3013" width="0.0100%" height="15" fill="rgb(225,35,8)" fg:x="895" fg:w="28"/><text x="0.5698%" y="3023.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (28 samples, 0.01%)</title><rect x="0.3198%" y="2997" width="0.0100%" height="15" fill="rgb(250,213,24)" fg:x="895" fg:w="28"/><text x="0.5698%" y="3007.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (28 samples, 0.01%)</title><rect x="0.3198%" y="2981" width="0.0100%" height="15" fill="rgb(247,123,22)" fg:x="895" fg:w="28"/><text x="0.5698%" y="2991.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (35 samples, 0.01%)</title><rect x="0.3177%" y="3349" width="0.0125%" height="15" fill="rgb(231,138,38)" fg:x="889" fg:w="35"/><text x="0.5677%" y="3359.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (40 samples, 0.01%)</title><rect x="0.3162%" y="3461" width="0.0143%" height="15" fill="rgb(231,145,46)" fg:x="885" fg:w="40"/><text x="0.5662%" y="3471.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (40 samples, 0.01%)</title><rect x="0.3162%" y="3445" width="0.0143%" height="15" fill="rgb(251,118,11)" fg:x="885" fg:w="40"/><text x="0.5662%" y="3455.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (40 samples, 0.01%)</title><rect x="0.3162%" y="3429" width="0.0143%" height="15" fill="rgb(217,147,25)" fg:x="885" fg:w="40"/><text x="0.5662%" y="3439.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (40 samples, 0.01%)</title><rect x="0.3162%" y="3413" width="0.0143%" height="15" fill="rgb(247,81,37)" fg:x="885" fg:w="40"/><text x="0.5662%" y="3423.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (40 samples, 0.01%)</title><rect x="0.3162%" y="3397" width="0.0143%" height="15" fill="rgb(209,12,38)" fg:x="885" fg:w="40"/><text x="0.5662%" y="3407.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (40 samples, 0.01%)</title><rect x="0.3162%" y="3381" width="0.0143%" height="15" fill="rgb(227,1,9)" fg:x="885" fg:w="40"/><text x="0.5662%" y="3391.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (40 samples, 0.01%)</title><rect x="0.3162%" y="3365" width="0.0143%" height="15" fill="rgb(248,47,43)" fg:x="885" fg:w="40"/><text x="0.5662%" y="3375.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (46 samples, 0.02%)</title><rect x="0.3145%" y="3733" width="0.0164%" height="15" fill="rgb(221,10,30)" fg:x="880" fg:w="46"/><text x="0.5645%" y="3743.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (46 samples, 0.02%)</title><rect x="0.3145%" y="3717" width="0.0164%" height="15" fill="rgb(210,229,1)" fg:x="880" fg:w="46"/><text x="0.5645%" y="3727.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (46 samples, 0.02%)</title><rect x="0.3145%" y="3701" width="0.0164%" height="15" fill="rgb(222,148,37)" fg:x="880" fg:w="46"/><text x="0.5645%" y="3711.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (46 samples, 0.02%)</title><rect x="0.3145%" y="3685" width="0.0164%" height="15" fill="rgb(234,67,33)" fg:x="880" fg:w="46"/><text x="0.5645%" y="3695.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (46 samples, 0.02%)</title><rect x="0.3145%" y="3669" width="0.0164%" height="15" fill="rgb(247,98,35)" fg:x="880" fg:w="46"/><text x="0.5645%" y="3679.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (46 samples, 0.02%)</title><rect x="0.3145%" y="3653" width="0.0164%" height="15" fill="rgb(247,138,52)" fg:x="880" fg:w="46"/><text x="0.5645%" y="3663.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (46 samples, 0.02%)</title><rect x="0.3145%" y="3637" width="0.0164%" height="15" fill="rgb(213,79,30)" fg:x="880" fg:w="46"/><text x="0.5645%" y="3647.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (46 samples, 0.02%)</title><rect x="0.3145%" y="3621" width="0.0164%" height="15" fill="rgb(246,177,23)" fg:x="880" fg:w="46"/><text x="0.5645%" y="3631.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (41 samples, 0.01%)</title><rect x="0.3162%" y="3605" width="0.0147%" height="15" fill="rgb(230,62,27)" fg:x="885" fg:w="41"/><text x="0.5662%" y="3615.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (41 samples, 0.01%)</title><rect x="0.3162%" y="3589" width="0.0147%" height="15" fill="rgb(216,154,8)" fg:x="885" fg:w="41"/><text x="0.5662%" y="3599.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (41 samples, 0.01%)</title><rect x="0.3162%" y="3573" width="0.0147%" height="15" fill="rgb(244,35,45)" fg:x="885" fg:w="41"/><text x="0.5662%" y="3583.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (41 samples, 0.01%)</title><rect x="0.3162%" y="3557" width="0.0147%" height="15" fill="rgb(251,115,12)" fg:x="885" fg:w="41"/><text x="0.5662%" y="3567.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (41 samples, 0.01%)</title><rect x="0.3162%" y="3541" width="0.0147%" height="15" fill="rgb(240,54,50)" fg:x="885" fg:w="41"/><text x="0.5662%" y="3551.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (41 samples, 0.01%)</title><rect x="0.3162%" y="3525" width="0.0147%" height="15" fill="rgb(233,84,52)" fg:x="885" fg:w="41"/><text x="0.5662%" y="3535.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (41 samples, 0.01%)</title><rect x="0.3162%" y="3509" width="0.0147%" height="15" fill="rgb(207,117,47)" fg:x="885" fg:w="41"/><text x="0.5662%" y="3519.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (41 samples, 0.01%)</title><rect x="0.3162%" y="3493" width="0.0147%" height="15" fill="rgb(249,43,39)" fg:x="885" fg:w="41"/><text x="0.5662%" y="3503.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (41 samples, 0.01%)</title><rect x="0.3162%" y="3477" width="0.0147%" height="15" fill="rgb(209,38,44)" fg:x="885" fg:w="41"/><text x="0.5662%" y="3487.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (50 samples, 0.02%)</title><rect x="0.3134%" y="3845" width="0.0179%" height="15" fill="rgb(236,212,23)" fg:x="877" fg:w="50"/><text x="0.5634%" y="3855.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (50 samples, 0.02%)</title><rect x="0.3134%" y="3829" width="0.0179%" height="15" fill="rgb(242,79,21)" fg:x="877" fg:w="50"/><text x="0.5634%" y="3839.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (50 samples, 0.02%)</title><rect x="0.3134%" y="3813" width="0.0179%" height="15" fill="rgb(211,96,35)" fg:x="877" fg:w="50"/><text x="0.5634%" y="3823.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (50 samples, 0.02%)</title><rect x="0.3134%" y="3797" width="0.0179%" height="15" fill="rgb(253,215,40)" fg:x="877" fg:w="50"/><text x="0.5634%" y="3807.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (50 samples, 0.02%)</title><rect x="0.3134%" y="3781" width="0.0179%" height="15" fill="rgb(211,81,21)" fg:x="877" fg:w="50"/><text x="0.5634%" y="3791.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (50 samples, 0.02%)</title><rect x="0.3134%" y="3765" width="0.0179%" height="15" fill="rgb(208,190,38)" fg:x="877" fg:w="50"/><text x="0.5634%" y="3775.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (50 samples, 0.02%)</title><rect x="0.3134%" y="3749" width="0.0179%" height="15" fill="rgb(235,213,38)" fg:x="877" fg:w="50"/><text x="0.5634%" y="3759.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (56 samples, 0.02%)</title><rect x="0.3116%" y="4101" width="0.0200%" height="15" fill="rgb(237,122,38)" fg:x="872" fg:w="56"/><text x="0.5616%" y="4111.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (56 samples, 0.02%)</title><rect x="0.3116%" y="4085" width="0.0200%" height="15" fill="rgb(244,218,35)" fg:x="872" fg:w="56"/><text x="0.5616%" y="4095.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (56 samples, 0.02%)</title><rect x="0.3116%" y="4069" width="0.0200%" height="15" fill="rgb(240,68,47)" fg:x="872" fg:w="56"/><text x="0.5616%" y="4079.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (56 samples, 0.02%)</title><rect x="0.3116%" y="4053" width="0.0200%" height="15" fill="rgb(210,16,53)" fg:x="872" fg:w="56"/><text x="0.5616%" y="4063.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (56 samples, 0.02%)</title><rect x="0.3116%" y="4037" width="0.0200%" height="15" fill="rgb(235,124,12)" fg:x="872" fg:w="56"/><text x="0.5616%" y="4047.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (56 samples, 0.02%)</title><rect x="0.3116%" y="4021" width="0.0200%" height="15" fill="rgb(224,169,11)" fg:x="872" fg:w="56"/><text x="0.5616%" y="4031.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (56 samples, 0.02%)</title><rect x="0.3116%" y="4005" width="0.0200%" height="15" fill="rgb(250,166,2)" fg:x="872" fg:w="56"/><text x="0.5616%" y="4015.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (53 samples, 0.02%)</title><rect x="0.3127%" y="3989" width="0.0189%" height="15" fill="rgb(242,216,29)" fg:x="875" fg:w="53"/><text x="0.5627%" y="3999.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (53 samples, 0.02%)</title><rect x="0.3127%" y="3973" width="0.0189%" height="15" fill="rgb(230,116,27)" fg:x="875" fg:w="53"/><text x="0.5627%" y="3983.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (53 samples, 0.02%)</title><rect x="0.3127%" y="3957" width="0.0189%" height="15" fill="rgb(228,99,48)" fg:x="875" fg:w="53"/><text x="0.5627%" y="3967.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (53 samples, 0.02%)</title><rect x="0.3127%" y="3941" width="0.0189%" height="15" fill="rgb(253,11,6)" fg:x="875" fg:w="53"/><text x="0.5627%" y="3951.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (53 samples, 0.02%)</title><rect x="0.3127%" y="3925" width="0.0189%" height="15" fill="rgb(247,143,39)" fg:x="875" fg:w="53"/><text x="0.5627%" y="3935.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (53 samples, 0.02%)</title><rect x="0.3127%" y="3909" width="0.0189%" height="15" fill="rgb(236,97,10)" fg:x="875" fg:w="53"/><text x="0.5627%" y="3919.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (53 samples, 0.02%)</title><rect x="0.3127%" y="3893" width="0.0189%" height="15" fill="rgb(233,208,19)" fg:x="875" fg:w="53"/><text x="0.5627%" y="3903.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (53 samples, 0.02%)</title><rect x="0.3127%" y="3877" width="0.0189%" height="15" fill="rgb(216,164,2)" fg:x="875" fg:w="53"/><text x="0.5627%" y="3887.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (51 samples, 0.02%)</title><rect x="0.3134%" y="3861" width="0.0182%" height="15" fill="rgb(220,129,5)" fg:x="877" fg:w="51"/><text x="0.5634%" y="3871.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (58 samples, 0.02%)</title><rect x="0.3112%" y="4245" width="0.0207%" height="15" fill="rgb(242,17,10)" fg:x="871" fg:w="58"/><text x="0.5612%" y="4255.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (58 samples, 0.02%)</title><rect x="0.3112%" y="4229" width="0.0207%" height="15" fill="rgb(242,107,0)" fg:x="871" fg:w="58"/><text x="0.5612%" y="4239.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (58 samples, 0.02%)</title><rect x="0.3112%" y="4213" width="0.0207%" height="15" fill="rgb(251,28,31)" fg:x="871" fg:w="58"/><text x="0.5612%" y="4223.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (58 samples, 0.02%)</title><rect x="0.3112%" y="4197" width="0.0207%" height="15" fill="rgb(233,223,10)" fg:x="871" fg:w="58"/><text x="0.5612%" y="4207.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (58 samples, 0.02%)</title><rect x="0.3112%" y="4181" width="0.0207%" height="15" fill="rgb(215,21,27)" fg:x="871" fg:w="58"/><text x="0.5612%" y="4191.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (58 samples, 0.02%)</title><rect x="0.3112%" y="4165" width="0.0207%" height="15" fill="rgb(232,23,21)" fg:x="871" fg:w="58"/><text x="0.5612%" y="4175.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (58 samples, 0.02%)</title><rect x="0.3112%" y="4149" width="0.0207%" height="15" fill="rgb(244,5,23)" fg:x="871" fg:w="58"/><text x="0.5612%" y="4159.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (58 samples, 0.02%)</title><rect x="0.3112%" y="4133" width="0.0207%" height="15" fill="rgb(226,81,46)" fg:x="871" fg:w="58"/><text x="0.5612%" y="4143.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (57 samples, 0.02%)</title><rect x="0.3116%" y="4117" width="0.0204%" height="15" fill="rgb(247,70,30)" fg:x="872" fg:w="57"/><text x="0.5616%" y="4127.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (62 samples, 0.02%)</title><rect x="0.3102%" y="4357" width="0.0222%" height="15" fill="rgb(212,68,19)" fg:x="868" fg:w="62"/><text x="0.5602%" y="4367.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (62 samples, 0.02%)</title><rect x="0.3102%" y="4341" width="0.0222%" height="15" fill="rgb(240,187,13)" fg:x="868" fg:w="62"/><text x="0.5602%" y="4351.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (62 samples, 0.02%)</title><rect x="0.3102%" y="4325" width="0.0222%" height="15" fill="rgb(223,113,26)" fg:x="868" fg:w="62"/><text x="0.5602%" y="4335.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (62 samples, 0.02%)</title><rect x="0.3102%" y="4309" width="0.0222%" height="15" fill="rgb(206,192,2)" fg:x="868" fg:w="62"/><text x="0.5602%" y="4319.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (62 samples, 0.02%)</title><rect x="0.3102%" y="4293" width="0.0222%" height="15" fill="rgb(241,108,4)" fg:x="868" fg:w="62"/><text x="0.5602%" y="4303.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (62 samples, 0.02%)</title><rect x="0.3102%" y="4277" width="0.0222%" height="15" fill="rgb(247,173,49)" fg:x="868" fg:w="62"/><text x="0.5602%" y="4287.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (62 samples, 0.02%)</title><rect x="0.3102%" y="4261" width="0.0222%" height="15" fill="rgb(224,114,35)" fg:x="868" fg:w="62"/><text x="0.5602%" y="4271.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (76 samples, 0.03%)</title><rect x="0.3055%" y="4613" width="0.0272%" height="15" fill="rgb(245,159,27)" fg:x="855" fg:w="76"/><text x="0.5555%" y="4623.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (76 samples, 0.03%)</title><rect x="0.3055%" y="4597" width="0.0272%" height="15" fill="rgb(245,172,44)" fg:x="855" fg:w="76"/><text x="0.5555%" y="4607.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (76 samples, 0.03%)</title><rect x="0.3055%" y="4581" width="0.0272%" height="15" fill="rgb(236,23,11)" fg:x="855" fg:w="76"/><text x="0.5555%" y="4591.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (76 samples, 0.03%)</title><rect x="0.3055%" y="4565" width="0.0272%" height="15" fill="rgb(205,117,38)" fg:x="855" fg:w="76"/><text x="0.5555%" y="4575.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (76 samples, 0.03%)</title><rect x="0.3055%" y="4549" width="0.0272%" height="15" fill="rgb(237,72,25)" fg:x="855" fg:w="76"/><text x="0.5555%" y="4559.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (76 samples, 0.03%)</title><rect x="0.3055%" y="4533" width="0.0272%" height="15" fill="rgb(244,70,9)" fg:x="855" fg:w="76"/><text x="0.5555%" y="4543.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (76 samples, 0.03%)</title><rect x="0.3055%" y="4517" width="0.0272%" height="15" fill="rgb(217,125,39)" fg:x="855" fg:w="76"/><text x="0.5555%" y="4527.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (70 samples, 0.03%)</title><rect x="0.3077%" y="4501" width="0.0250%" height="15" fill="rgb(235,36,10)" fg:x="861" fg:w="70"/><text x="0.5577%" y="4511.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (70 samples, 0.03%)</title><rect x="0.3077%" y="4485" width="0.0250%" height="15" fill="rgb(251,123,47)" fg:x="861" fg:w="70"/><text x="0.5577%" y="4495.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (70 samples, 0.03%)</title><rect x="0.3077%" y="4469" width="0.0250%" height="15" fill="rgb(221,13,13)" fg:x="861" fg:w="70"/><text x="0.5577%" y="4479.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (70 samples, 0.03%)</title><rect x="0.3077%" y="4453" width="0.0250%" height="15" fill="rgb(238,131,9)" fg:x="861" fg:w="70"/><text x="0.5577%" y="4463.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (70 samples, 0.03%)</title><rect x="0.3077%" y="4437" width="0.0250%" height="15" fill="rgb(211,50,8)" fg:x="861" fg:w="70"/><text x="0.5577%" y="4447.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (70 samples, 0.03%)</title><rect x="0.3077%" y="4421" width="0.0250%" height="15" fill="rgb(245,182,24)" fg:x="861" fg:w="70"/><text x="0.5577%" y="4431.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (70 samples, 0.03%)</title><rect x="0.3077%" y="4405" width="0.0250%" height="15" fill="rgb(242,14,37)" fg:x="861" fg:w="70"/><text x="0.5577%" y="4415.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (70 samples, 0.03%)</title><rect x="0.3077%" y="4389" width="0.0250%" height="15" fill="rgb(246,228,12)" fg:x="861" fg:w="70"/><text x="0.5577%" y="4399.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (63 samples, 0.02%)</title><rect x="0.3102%" y="4373" width="0.0225%" height="15" fill="rgb(213,55,15)" fg:x="868" fg:w="63"/><text x="0.5602%" y="4383.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (117 samples, 0.04%)</title><rect x="0.2912%" y="5125" width="0.0418%" height="15" fill="rgb(209,9,3)" fg:x="815" fg:w="117"/><text x="0.5412%" y="5135.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (117 samples, 0.04%)</title><rect x="0.2912%" y="5109" width="0.0418%" height="15" fill="rgb(230,59,30)" fg:x="815" fg:w="117"/><text x="0.5412%" y="5119.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (117 samples, 0.04%)</title><rect x="0.2912%" y="5093" width="0.0418%" height="15" fill="rgb(209,121,21)" fg:x="815" fg:w="117"/><text x="0.5412%" y="5103.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (117 samples, 0.04%)</title><rect x="0.2912%" y="5077" width="0.0418%" height="15" fill="rgb(220,109,13)" fg:x="815" fg:w="117"/><text x="0.5412%" y="5087.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (117 samples, 0.04%)</title><rect x="0.2912%" y="5061" width="0.0418%" height="15" fill="rgb(232,18,1)" fg:x="815" fg:w="117"/><text x="0.5412%" y="5071.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (117 samples, 0.04%)</title><rect x="0.2912%" y="5045" width="0.0418%" height="15" fill="rgb(215,41,42)" fg:x="815" fg:w="117"/><text x="0.5412%" y="5055.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (117 samples, 0.04%)</title><rect x="0.2912%" y="5029" width="0.0418%" height="15" fill="rgb(224,123,36)" fg:x="815" fg:w="117"/><text x="0.5412%" y="5039.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (102 samples, 0.04%)</title><rect x="0.2966%" y="5013" width="0.0364%" height="15" fill="rgb(240,125,3)" fg:x="830" fg:w="102"/><text x="0.5466%" y="5023.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (102 samples, 0.04%)</title><rect x="0.2966%" y="4997" width="0.0364%" height="15" fill="rgb(205,98,50)" fg:x="830" fg:w="102"/><text x="0.5466%" y="5007.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (102 samples, 0.04%)</title><rect x="0.2966%" y="4981" width="0.0364%" height="15" fill="rgb(205,185,37)" fg:x="830" fg:w="102"/><text x="0.5466%" y="4991.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (102 samples, 0.04%)</title><rect x="0.2966%" y="4965" width="0.0364%" height="15" fill="rgb(238,207,15)" fg:x="830" fg:w="102"/><text x="0.5466%" y="4975.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (102 samples, 0.04%)</title><rect x="0.2966%" y="4949" width="0.0364%" height="15" fill="rgb(213,199,42)" fg:x="830" fg:w="102"/><text x="0.5466%" y="4959.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (102 samples, 0.04%)</title><rect x="0.2966%" y="4933" width="0.0364%" height="15" fill="rgb(235,201,11)" fg:x="830" fg:w="102"/><text x="0.5466%" y="4943.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (102 samples, 0.04%)</title><rect x="0.2966%" y="4917" width="0.0364%" height="15" fill="rgb(207,46,11)" fg:x="830" fg:w="102"/><text x="0.5466%" y="4927.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (102 samples, 0.04%)</title><rect x="0.2966%" y="4901" width="0.0364%" height="15" fill="rgb(241,35,35)" fg:x="830" fg:w="102"/><text x="0.5466%" y="4911.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (89 samples, 0.03%)</title><rect x="0.3012%" y="4885" width="0.0318%" height="15" fill="rgb(243,32,47)" fg:x="843" fg:w="89"/><text x="0.5512%" y="4895.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (89 samples, 0.03%)</title><rect x="0.3012%" y="4869" width="0.0318%" height="15" fill="rgb(247,202,23)" fg:x="843" fg:w="89"/><text x="0.5512%" y="4879.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (89 samples, 0.03%)</title><rect x="0.3012%" y="4853" width="0.0318%" height="15" fill="rgb(219,102,11)" fg:x="843" fg:w="89"/><text x="0.5512%" y="4863.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (88 samples, 0.03%)</title><rect x="0.3016%" y="4837" width="0.0314%" height="15" fill="rgb(243,110,44)" fg:x="844" fg:w="88"/><text x="0.5516%" y="4847.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (88 samples, 0.03%)</title><rect x="0.3016%" y="4821" width="0.0314%" height="15" fill="rgb(222,74,54)" fg:x="844" fg:w="88"/><text x="0.5516%" y="4831.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (88 samples, 0.03%)</title><rect x="0.3016%" y="4805" width="0.0314%" height="15" fill="rgb(216,99,12)" fg:x="844" fg:w="88"/><text x="0.5516%" y="4815.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (88 samples, 0.03%)</title><rect x="0.3016%" y="4789" width="0.0314%" height="15" fill="rgb(226,22,26)" fg:x="844" fg:w="88"/><text x="0.5516%" y="4799.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (88 samples, 0.03%)</title><rect x="0.3016%" y="4773" width="0.0314%" height="15" fill="rgb(217,163,10)" fg:x="844" fg:w="88"/><text x="0.5516%" y="4783.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (80 samples, 0.03%)</title><rect x="0.3045%" y="4757" width="0.0286%" height="15" fill="rgb(213,25,53)" fg:x="852" fg:w="80"/><text x="0.5545%" y="4767.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (80 samples, 0.03%)</title><rect x="0.3045%" y="4741" width="0.0286%" height="15" fill="rgb(252,105,26)" fg:x="852" fg:w="80"/><text x="0.5545%" y="4751.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (80 samples, 0.03%)</title><rect x="0.3045%" y="4725" width="0.0286%" height="15" fill="rgb(220,39,43)" fg:x="852" fg:w="80"/><text x="0.5545%" y="4735.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (80 samples, 0.03%)</title><rect x="0.3045%" y="4709" width="0.0286%" height="15" fill="rgb(229,68,48)" fg:x="852" fg:w="80"/><text x="0.5545%" y="4719.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (80 samples, 0.03%)</title><rect x="0.3045%" y="4693" width="0.0286%" height="15" fill="rgb(252,8,32)" fg:x="852" fg:w="80"/><text x="0.5545%" y="4703.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (80 samples, 0.03%)</title><rect x="0.3045%" y="4677" width="0.0286%" height="15" fill="rgb(223,20,43)" fg:x="852" fg:w="80"/><text x="0.5545%" y="4687.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (80 samples, 0.03%)</title><rect x="0.3045%" y="4661" width="0.0286%" height="15" fill="rgb(229,81,49)" fg:x="852" fg:w="80"/><text x="0.5545%" y="4671.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (80 samples, 0.03%)</title><rect x="0.3045%" y="4645" width="0.0286%" height="15" fill="rgb(236,28,36)" fg:x="852" fg:w="80"/><text x="0.5545%" y="4655.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (77 samples, 0.03%)</title><rect x="0.3055%" y="4629" width="0.0275%" height="15" fill="rgb(249,185,26)" fg:x="855" fg:w="77"/><text x="0.5555%" y="4639.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (118 samples, 0.04%)</title><rect x="0.2912%" y="5141" width="0.0422%" height="15" fill="rgb(249,174,33)" fg:x="815" fg:w="118"/><text x="0.5412%" y="5151.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (124 samples, 0.04%)</title><rect x="0.2894%" y="5269" width="0.0443%" height="15" fill="rgb(233,201,37)" fg:x="810" fg:w="124"/><text x="0.5394%" y="5279.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (124 samples, 0.04%)</title><rect x="0.2894%" y="5253" width="0.0443%" height="15" fill="rgb(221,78,26)" fg:x="810" fg:w="124"/><text x="0.5394%" y="5263.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (124 samples, 0.04%)</title><rect x="0.2894%" y="5237" width="0.0443%" height="15" fill="rgb(250,127,30)" fg:x="810" fg:w="124"/><text x="0.5394%" y="5247.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (124 samples, 0.04%)</title><rect x="0.2894%" y="5221" width="0.0443%" height="15" fill="rgb(230,49,44)" fg:x="810" fg:w="124"/><text x="0.5394%" y="5231.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (124 samples, 0.04%)</title><rect x="0.2894%" y="5205" width="0.0443%" height="15" fill="rgb(229,67,23)" fg:x="810" fg:w="124"/><text x="0.5394%" y="5215.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (124 samples, 0.04%)</title><rect x="0.2894%" y="5189" width="0.0443%" height="15" fill="rgb(249,83,47)" fg:x="810" fg:w="124"/><text x="0.5394%" y="5199.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (124 samples, 0.04%)</title><rect x="0.2894%" y="5173" width="0.0443%" height="15" fill="rgb(215,43,3)" fg:x="810" fg:w="124"/><text x="0.5394%" y="5183.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (124 samples, 0.04%)</title><rect x="0.2894%" y="5157" width="0.0443%" height="15" fill="rgb(238,154,13)" fg:x="810" fg:w="124"/><text x="0.5394%" y="5167.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (138 samples, 0.05%)</title><rect x="0.2848%" y="5397" width="0.0493%" height="15" fill="rgb(219,56,2)" fg:x="797" fg:w="138"/><text x="0.5348%" y="5407.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (138 samples, 0.05%)</title><rect x="0.2848%" y="5381" width="0.0493%" height="15" fill="rgb(233,0,4)" fg:x="797" fg:w="138"/><text x="0.5348%" y="5391.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (138 samples, 0.05%)</title><rect x="0.2848%" y="5365" width="0.0493%" height="15" fill="rgb(235,30,7)" fg:x="797" fg:w="138"/><text x="0.5348%" y="5375.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (138 samples, 0.05%)</title><rect x="0.2848%" y="5349" width="0.0493%" height="15" fill="rgb(250,79,13)" fg:x="797" fg:w="138"/><text x="0.5348%" y="5359.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (138 samples, 0.05%)</title><rect x="0.2848%" y="5333" width="0.0493%" height="15" fill="rgb(211,146,34)" fg:x="797" fg:w="138"/><text x="0.5348%" y="5343.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (138 samples, 0.05%)</title><rect x="0.2848%" y="5317" width="0.0493%" height="15" fill="rgb(228,22,38)" fg:x="797" fg:w="138"/><text x="0.5348%" y="5327.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (138 samples, 0.05%)</title><rect x="0.2848%" y="5301" width="0.0493%" height="15" fill="rgb(235,168,5)" fg:x="797" fg:w="138"/><text x="0.5348%" y="5311.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (138 samples, 0.05%)</title><rect x="0.2848%" y="5285" width="0.0493%" height="15" fill="rgb(221,155,16)" fg:x="797" fg:w="138"/><text x="0.5348%" y="5295.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (144 samples, 0.05%)</title><rect x="0.2830%" y="5509" width="0.0515%" height="15" fill="rgb(215,215,53)" fg:x="792" fg:w="144"/><text x="0.5330%" y="5519.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (144 samples, 0.05%)</title><rect x="0.2830%" y="5493" width="0.0515%" height="15" fill="rgb(223,4,10)" fg:x="792" fg:w="144"/><text x="0.5330%" y="5503.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (144 samples, 0.05%)</title><rect x="0.2830%" y="5477" width="0.0515%" height="15" fill="rgb(234,103,6)" fg:x="792" fg:w="144"/><text x="0.5330%" y="5487.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (144 samples, 0.05%)</title><rect x="0.2830%" y="5461" width="0.0515%" height="15" fill="rgb(227,97,0)" fg:x="792" fg:w="144"/><text x="0.5330%" y="5471.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (144 samples, 0.05%)</title><rect x="0.2830%" y="5445" width="0.0515%" height="15" fill="rgb(234,150,53)" fg:x="792" fg:w="144"/><text x="0.5330%" y="5455.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (144 samples, 0.05%)</title><rect x="0.2830%" y="5429" width="0.0515%" height="15" fill="rgb(228,201,54)" fg:x="792" fg:w="144"/><text x="0.5330%" y="5439.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (144 samples, 0.05%)</title><rect x="0.2830%" y="5413" width="0.0515%" height="15" fill="rgb(222,22,37)" fg:x="792" fg:w="144"/><text x="0.5330%" y="5423.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (145 samples, 0.05%)</title><rect x="0.2830%" y="5525" width="0.0518%" height="15" fill="rgb(237,53,32)" fg:x="792" fg:w="145"/><text x="0.5330%" y="5535.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (156 samples, 0.06%)</title><rect x="0.2798%" y="5637" width="0.0557%" height="15" fill="rgb(233,25,53)" fg:x="783" fg:w="156"/><text x="0.5298%" y="5647.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (156 samples, 0.06%)</title><rect x="0.2798%" y="5621" width="0.0557%" height="15" fill="rgb(210,40,34)" fg:x="783" fg:w="156"/><text x="0.5298%" y="5631.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (156 samples, 0.06%)</title><rect x="0.2798%" y="5605" width="0.0557%" height="15" fill="rgb(241,220,44)" fg:x="783" fg:w="156"/><text x="0.5298%" y="5615.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (156 samples, 0.06%)</title><rect x="0.2798%" y="5589" width="0.0557%" height="15" fill="rgb(235,28,35)" fg:x="783" fg:w="156"/><text x="0.5298%" y="5599.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (156 samples, 0.06%)</title><rect x="0.2798%" y="5573" width="0.0557%" height="15" fill="rgb(210,56,17)" fg:x="783" fg:w="156"/><text x="0.5298%" y="5583.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (156 samples, 0.06%)</title><rect x="0.2798%" y="5557" width="0.0557%" height="15" fill="rgb(224,130,29)" fg:x="783" fg:w="156"/><text x="0.5298%" y="5567.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (156 samples, 0.06%)</title><rect x="0.2798%" y="5541" width="0.0557%" height="15" fill="rgb(235,212,8)" fg:x="783" fg:w="156"/><text x="0.5298%" y="5551.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (167 samples, 0.06%)</title><rect x="0.2762%" y="5765" width="0.0597%" height="15" fill="rgb(223,33,50)" fg:x="773" fg:w="167"/><text x="0.5262%" y="5775.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (167 samples, 0.06%)</title><rect x="0.2762%" y="5749" width="0.0597%" height="15" fill="rgb(219,149,13)" fg:x="773" fg:w="167"/><text x="0.5262%" y="5759.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (167 samples, 0.06%)</title><rect x="0.2762%" y="5733" width="0.0597%" height="15" fill="rgb(250,156,29)" fg:x="773" fg:w="167"/><text x="0.5262%" y="5743.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (167 samples, 0.06%)</title><rect x="0.2762%" y="5717" width="0.0597%" height="15" fill="rgb(216,193,19)" fg:x="773" fg:w="167"/><text x="0.5262%" y="5727.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (167 samples, 0.06%)</title><rect x="0.2762%" y="5701" width="0.0597%" height="15" fill="rgb(216,135,14)" fg:x="773" fg:w="167"/><text x="0.5262%" y="5711.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (167 samples, 0.06%)</title><rect x="0.2762%" y="5685" width="0.0597%" height="15" fill="rgb(241,47,5)" fg:x="773" fg:w="167"/><text x="0.5262%" y="5695.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (167 samples, 0.06%)</title><rect x="0.2762%" y="5669" width="0.0597%" height="15" fill="rgb(233,42,35)" fg:x="773" fg:w="167"/><text x="0.5262%" y="5679.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (157 samples, 0.06%)</title><rect x="0.2798%" y="5653" width="0.0561%" height="15" fill="rgb(231,13,6)" fg:x="783" fg:w="157"/><text x="0.5298%" y="5663.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (184 samples, 0.07%)</title><rect x="0.2719%" y="5909" width="0.0658%" height="15" fill="rgb(207,181,40)" fg:x="761" fg:w="184"/><text x="0.5219%" y="5919.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (184 samples, 0.07%)</title><rect x="0.2719%" y="5893" width="0.0658%" height="15" fill="rgb(254,173,49)" fg:x="761" fg:w="184"/><text x="0.5219%" y="5903.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (184 samples, 0.07%)</title><rect x="0.2719%" y="5877" width="0.0658%" height="15" fill="rgb(221,1,38)" fg:x="761" fg:w="184"/><text x="0.5219%" y="5887.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (184 samples, 0.07%)</title><rect x="0.2719%" y="5861" width="0.0658%" height="15" fill="rgb(206,124,46)" fg:x="761" fg:w="184"/><text x="0.5219%" y="5871.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (184 samples, 0.07%)</title><rect x="0.2719%" y="5845" width="0.0658%" height="15" fill="rgb(249,21,11)" fg:x="761" fg:w="184"/><text x="0.5219%" y="5855.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (184 samples, 0.07%)</title><rect x="0.2719%" y="5829" width="0.0658%" height="15" fill="rgb(222,201,40)" fg:x="761" fg:w="184"/><text x="0.5219%" y="5839.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (184 samples, 0.07%)</title><rect x="0.2719%" y="5813" width="0.0658%" height="15" fill="rgb(235,61,29)" fg:x="761" fg:w="184"/><text x="0.5219%" y="5823.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (184 samples, 0.07%)</title><rect x="0.2719%" y="5797" width="0.0658%" height="15" fill="rgb(219,207,3)" fg:x="761" fg:w="184"/><text x="0.5219%" y="5807.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (172 samples, 0.06%)</title><rect x="0.2762%" y="5781" width="0.0615%" height="15" fill="rgb(222,56,46)" fg:x="773" fg:w="172"/><text x="0.5262%" y="5791.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (212 samples, 0.08%)</title><rect x="0.2626%" y="6149" width="0.0758%" height="15" fill="rgb(239,76,54)" fg:x="735" fg:w="212"/><text x="0.5126%" y="6159.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (212 samples, 0.08%)</title><rect x="0.2626%" y="6133" width="0.0758%" height="15" fill="rgb(231,124,27)" fg:x="735" fg:w="212"/><text x="0.5126%" y="6143.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (212 samples, 0.08%)</title><rect x="0.2626%" y="6117" width="0.0758%" height="15" fill="rgb(249,195,6)" fg:x="735" fg:w="212"/><text x="0.5126%" y="6127.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (212 samples, 0.08%)</title><rect x="0.2626%" y="6101" width="0.0758%" height="15" fill="rgb(237,174,47)" fg:x="735" fg:w="212"/><text x="0.5126%" y="6111.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (212 samples, 0.08%)</title><rect x="0.2626%" y="6085" width="0.0758%" height="15" fill="rgb(206,201,31)" fg:x="735" fg:w="212"/><text x="0.5126%" y="6095.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (212 samples, 0.08%)</title><rect x="0.2626%" y="6069" width="0.0758%" height="15" fill="rgb(231,57,52)" fg:x="735" fg:w="212"/><text x="0.5126%" y="6079.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (212 samples, 0.08%)</title><rect x="0.2626%" y="6053" width="0.0758%" height="15" fill="rgb(248,177,22)" fg:x="735" fg:w="212"/><text x="0.5126%" y="6063.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (201 samples, 0.07%)</title><rect x="0.2666%" y="6037" width="0.0718%" height="15" fill="rgb(215,211,37)" fg:x="746" fg:w="201"/><text x="0.5166%" y="6047.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (201 samples, 0.07%)</title><rect x="0.2666%" y="6021" width="0.0718%" height="15" fill="rgb(241,128,51)" fg:x="746" fg:w="201"/><text x="0.5166%" y="6031.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (201 samples, 0.07%)</title><rect x="0.2666%" y="6005" width="0.0718%" height="15" fill="rgb(227,165,31)" fg:x="746" fg:w="201"/><text x="0.5166%" y="6015.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (201 samples, 0.07%)</title><rect x="0.2666%" y="5989" width="0.0718%" height="15" fill="rgb(228,167,24)" fg:x="746" fg:w="201"/><text x="0.5166%" y="5999.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (201 samples, 0.07%)</title><rect x="0.2666%" y="5973" width="0.0718%" height="15" fill="rgb(228,143,12)" fg:x="746" fg:w="201"/><text x="0.5166%" y="5983.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (201 samples, 0.07%)</title><rect x="0.2666%" y="5957" width="0.0718%" height="15" fill="rgb(249,149,8)" fg:x="746" fg:w="201"/><text x="0.5166%" y="5967.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (201 samples, 0.07%)</title><rect x="0.2666%" y="5941" width="0.0718%" height="15" fill="rgb(243,35,44)" fg:x="746" fg:w="201"/><text x="0.5166%" y="5951.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (201 samples, 0.07%)</title><rect x="0.2666%" y="5925" width="0.0718%" height="15" fill="rgb(246,89,9)" fg:x="746" fg:w="201"/><text x="0.5166%" y="5935.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (231 samples, 0.08%)</title><rect x="0.2562%" y="6277" width="0.0825%" height="15" fill="rgb(233,213,13)" fg:x="717" fg:w="231"/><text x="0.5062%" y="6287.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (231 samples, 0.08%)</title><rect x="0.2562%" y="6261" width="0.0825%" height="15" fill="rgb(233,141,41)" fg:x="717" fg:w="231"/><text x="0.5062%" y="6271.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (231 samples, 0.08%)</title><rect x="0.2562%" y="6245" width="0.0825%" height="15" fill="rgb(239,167,4)" fg:x="717" fg:w="231"/><text x="0.5062%" y="6255.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (231 samples, 0.08%)</title><rect x="0.2562%" y="6229" width="0.0825%" height="15" fill="rgb(209,217,16)" fg:x="717" fg:w="231"/><text x="0.5062%" y="6239.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (231 samples, 0.08%)</title><rect x="0.2562%" y="6213" width="0.0825%" height="15" fill="rgb(219,88,35)" fg:x="717" fg:w="231"/><text x="0.5062%" y="6223.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (231 samples, 0.08%)</title><rect x="0.2562%" y="6197" width="0.0825%" height="15" fill="rgb(220,193,23)" fg:x="717" fg:w="231"/><text x="0.5062%" y="6207.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (231 samples, 0.08%)</title><rect x="0.2562%" y="6181" width="0.0825%" height="15" fill="rgb(230,90,52)" fg:x="717" fg:w="231"/><text x="0.5062%" y="6191.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (213 samples, 0.08%)</title><rect x="0.2626%" y="6165" width="0.0761%" height="15" fill="rgb(252,106,19)" fg:x="735" fg:w="213"/><text x="0.5126%" y="6175.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (233 samples, 0.08%)</title><rect x="0.2562%" y="6293" width="0.0833%" height="15" fill="rgb(206,74,20)" fg:x="717" fg:w="233"/><text x="0.5062%" y="6303.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (252 samples, 0.09%)</title><rect x="0.2505%" y="6405" width="0.0900%" height="15" fill="rgb(230,138,44)" fg:x="701" fg:w="252"/><text x="0.5005%" y="6415.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (252 samples, 0.09%)</title><rect x="0.2505%" y="6389" width="0.0900%" height="15" fill="rgb(235,182,43)" fg:x="701" fg:w="252"/><text x="0.5005%" y="6399.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (252 samples, 0.09%)</title><rect x="0.2505%" y="6373" width="0.0900%" height="15" fill="rgb(242,16,51)" fg:x="701" fg:w="252"/><text x="0.5005%" y="6383.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (252 samples, 0.09%)</title><rect x="0.2505%" y="6357" width="0.0900%" height="15" fill="rgb(248,9,4)" fg:x="701" fg:w="252"/><text x="0.5005%" y="6367.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (252 samples, 0.09%)</title><rect x="0.2505%" y="6341" width="0.0900%" height="15" fill="rgb(210,31,22)" fg:x="701" fg:w="252"/><text x="0.5005%" y="6351.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (252 samples, 0.09%)</title><rect x="0.2505%" y="6325" width="0.0900%" height="15" fill="rgb(239,54,39)" fg:x="701" fg:w="252"/><text x="0.5005%" y="6335.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (252 samples, 0.09%)</title><rect x="0.2505%" y="6309" width="0.0900%" height="15" fill="rgb(230,99,41)" fg:x="701" fg:w="252"/><text x="0.5005%" y="6319.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (253 samples, 0.09%)</title><rect x="0.2505%" y="6421" width="0.0904%" height="15" fill="rgb(253,106,12)" fg:x="701" fg:w="253"/><text x="0.5005%" y="6431.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (274 samples, 0.10%)</title><rect x="0.2433%" y="6533" width="0.0979%" height="15" fill="rgb(213,46,41)" fg:x="681" fg:w="274"/><text x="0.4933%" y="6543.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (274 samples, 0.10%)</title><rect x="0.2433%" y="6517" width="0.0979%" height="15" fill="rgb(215,133,35)" fg:x="681" fg:w="274"/><text x="0.4933%" y="6527.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (274 samples, 0.10%)</title><rect x="0.2433%" y="6501" width="0.0979%" height="15" fill="rgb(213,28,5)" fg:x="681" fg:w="274"/><text x="0.4933%" y="6511.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (274 samples, 0.10%)</title><rect x="0.2433%" y="6485" width="0.0979%" height="15" fill="rgb(215,77,49)" fg:x="681" fg:w="274"/><text x="0.4933%" y="6495.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (274 samples, 0.10%)</title><rect x="0.2433%" y="6469" width="0.0979%" height="15" fill="rgb(248,100,22)" fg:x="681" fg:w="274"/><text x="0.4933%" y="6479.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (274 samples, 0.10%)</title><rect x="0.2433%" y="6453" width="0.0979%" height="15" fill="rgb(208,67,9)" fg:x="681" fg:w="274"/><text x="0.4933%" y="6463.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (274 samples, 0.10%)</title><rect x="0.2433%" y="6437" width="0.0979%" height="15" fill="rgb(219,133,21)" fg:x="681" fg:w="274"/><text x="0.4933%" y="6447.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (275 samples, 0.10%)</title><rect x="0.2433%" y="6549" width="0.0983%" height="15" fill="rgb(246,46,29)" fg:x="681" fg:w="275"/><text x="0.4933%" y="6559.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (294 samples, 0.11%)</title><rect x="0.2369%" y="6661" width="0.1051%" height="15" fill="rgb(246,185,52)" fg:x="663" fg:w="294"/><text x="0.4869%" y="6671.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (294 samples, 0.11%)</title><rect x="0.2369%" y="6645" width="0.1051%" height="15" fill="rgb(252,136,11)" fg:x="663" fg:w="294"/><text x="0.4869%" y="6655.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (294 samples, 0.11%)</title><rect x="0.2369%" y="6629" width="0.1051%" height="15" fill="rgb(219,138,53)" fg:x="663" fg:w="294"/><text x="0.4869%" y="6639.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (294 samples, 0.11%)</title><rect x="0.2369%" y="6613" width="0.1051%" height="15" fill="rgb(211,51,23)" fg:x="663" fg:w="294"/><text x="0.4869%" y="6623.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (294 samples, 0.11%)</title><rect x="0.2369%" y="6597" width="0.1051%" height="15" fill="rgb(247,221,28)" fg:x="663" fg:w="294"/><text x="0.4869%" y="6607.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (294 samples, 0.11%)</title><rect x="0.2369%" y="6581" width="0.1051%" height="15" fill="rgb(251,222,45)" fg:x="663" fg:w="294"/><text x="0.4869%" y="6591.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (294 samples, 0.11%)</title><rect x="0.2369%" y="6565" width="0.1051%" height="15" fill="rgb(217,162,53)" fg:x="663" fg:w="294"/><text x="0.4869%" y="6575.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (295 samples, 0.11%)</title><rect x="0.2369%" y="6677" width="0.1054%" height="15" fill="rgb(229,93,14)" fg:x="663" fg:w="295"/><text x="0.4869%" y="6687.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (310 samples, 0.11%)</title><rect x="0.2323%" y="6789" width="0.1108%" height="15" fill="rgb(209,67,49)" fg:x="650" fg:w="310"/><text x="0.4823%" y="6799.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (310 samples, 0.11%)</title><rect x="0.2323%" y="6773" width="0.1108%" height="15" fill="rgb(213,87,29)" fg:x="650" fg:w="310"/><text x="0.4823%" y="6783.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (310 samples, 0.11%)</title><rect x="0.2323%" y="6757" width="0.1108%" height="15" fill="rgb(205,151,52)" fg:x="650" fg:w="310"/><text x="0.4823%" y="6767.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (310 samples, 0.11%)</title><rect x="0.2323%" y="6741" width="0.1108%" height="15" fill="rgb(253,215,39)" fg:x="650" fg:w="310"/><text x="0.4823%" y="6751.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (310 samples, 0.11%)</title><rect x="0.2323%" y="6725" width="0.1108%" height="15" fill="rgb(221,220,41)" fg:x="650" fg:w="310"/><text x="0.4823%" y="6735.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (310 samples, 0.11%)</title><rect x="0.2323%" y="6709" width="0.1108%" height="15" fill="rgb(218,133,21)" fg:x="650" fg:w="310"/><text x="0.4823%" y="6719.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (310 samples, 0.11%)</title><rect x="0.2323%" y="6693" width="0.1108%" height="15" fill="rgb(221,193,43)" fg:x="650" fg:w="310"/><text x="0.4823%" y="6703.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (313 samples, 0.11%)</title><rect x="0.2323%" y="6805" width="0.1118%" height="15" fill="rgb(240,128,52)" fg:x="650" fg:w="313"/><text x="0.4823%" y="6815.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (333 samples, 0.12%)</title><rect x="0.2255%" y="6917" width="0.1190%" height="15" fill="rgb(253,114,12)" fg:x="631" fg:w="333"/><text x="0.4755%" y="6927.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (333 samples, 0.12%)</title><rect x="0.2255%" y="6901" width="0.1190%" height="15" fill="rgb(215,223,47)" fg:x="631" fg:w="333"/><text x="0.4755%" y="6911.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (333 samples, 0.12%)</title><rect x="0.2255%" y="6885" width="0.1190%" height="15" fill="rgb(248,225,23)" fg:x="631" fg:w="333"/><text x="0.4755%" y="6895.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (333 samples, 0.12%)</title><rect x="0.2255%" y="6869" width="0.1190%" height="15" fill="rgb(250,108,0)" fg:x="631" fg:w="333"/><text x="0.4755%" y="6879.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (333 samples, 0.12%)</title><rect x="0.2255%" y="6853" width="0.1190%" height="15" fill="rgb(228,208,7)" fg:x="631" fg:w="333"/><text x="0.4755%" y="6863.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (333 samples, 0.12%)</title><rect x="0.2255%" y="6837" width="0.1190%" height="15" fill="rgb(244,45,10)" fg:x="631" fg:w="333"/><text x="0.4755%" y="6847.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (333 samples, 0.12%)</title><rect x="0.2255%" y="6821" width="0.1190%" height="15" fill="rgb(207,125,25)" fg:x="631" fg:w="333"/><text x="0.4755%" y="6831.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (336 samples, 0.12%)</title><rect x="0.2255%" y="6933" width="0.1201%" height="15" fill="rgb(210,195,18)" fg:x="631" fg:w="336"/><text x="0.4755%" y="6943.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (347 samples, 0.12%)</title><rect x="0.2219%" y="7045" width="0.1240%" height="15" fill="rgb(249,80,12)" fg:x="621" fg:w="347"/><text x="0.4719%" y="7055.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (347 samples, 0.12%)</title><rect x="0.2219%" y="7029" width="0.1240%" height="15" fill="rgb(221,65,9)" fg:x="621" fg:w="347"/><text x="0.4719%" y="7039.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (347 samples, 0.12%)</title><rect x="0.2219%" y="7013" width="0.1240%" height="15" fill="rgb(235,49,36)" fg:x="621" fg:w="347"/><text x="0.4719%" y="7023.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (347 samples, 0.12%)</title><rect x="0.2219%" y="6997" width="0.1240%" height="15" fill="rgb(225,32,20)" fg:x="621" fg:w="347"/><text x="0.4719%" y="7007.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (347 samples, 0.12%)</title><rect x="0.2219%" y="6981" width="0.1240%" height="15" fill="rgb(215,141,46)" fg:x="621" fg:w="347"/><text x="0.4719%" y="6991.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (347 samples, 0.12%)</title><rect x="0.2219%" y="6965" width="0.1240%" height="15" fill="rgb(250,160,47)" fg:x="621" fg:w="347"/><text x="0.4719%" y="6975.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (347 samples, 0.12%)</title><rect x="0.2219%" y="6949" width="0.1240%" height="15" fill="rgb(216,222,40)" fg:x="621" fg:w="347"/><text x="0.4719%" y="6959.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (350 samples, 0.13%)</title><rect x="0.2219%" y="7061" width="0.1251%" height="15" fill="rgb(234,217,39)" fg:x="621" fg:w="350"/><text x="0.4719%" y="7071.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (373 samples, 0.13%)</title><rect x="0.2155%" y="7173" width="0.1333%" height="15" fill="rgb(207,178,40)" fg:x="603" fg:w="373"/><text x="0.4655%" y="7183.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (373 samples, 0.13%)</title><rect x="0.2155%" y="7157" width="0.1333%" height="15" fill="rgb(221,136,13)" fg:x="603" fg:w="373"/><text x="0.4655%" y="7167.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (373 samples, 0.13%)</title><rect x="0.2155%" y="7141" width="0.1333%" height="15" fill="rgb(249,199,10)" fg:x="603" fg:w="373"/><text x="0.4655%" y="7151.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (373 samples, 0.13%)</title><rect x="0.2155%" y="7125" width="0.1333%" height="15" fill="rgb(249,222,13)" fg:x="603" fg:w="373"/><text x="0.4655%" y="7135.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (373 samples, 0.13%)</title><rect x="0.2155%" y="7109" width="0.1333%" height="15" fill="rgb(244,185,38)" fg:x="603" fg:w="373"/><text x="0.4655%" y="7119.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (373 samples, 0.13%)</title><rect x="0.2155%" y="7093" width="0.1333%" height="15" fill="rgb(236,202,9)" fg:x="603" fg:w="373"/><text x="0.4655%" y="7103.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (373 samples, 0.13%)</title><rect x="0.2155%" y="7077" width="0.1333%" height="15" fill="rgb(250,229,37)" fg:x="603" fg:w="373"/><text x="0.4655%" y="7087.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (377 samples, 0.13%)</title><rect x="0.2155%" y="7189" width="0.1347%" height="15" fill="rgb(206,174,23)" fg:x="603" fg:w="377"/><text x="0.4655%" y="7199.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (400 samples, 0.14%)</title><rect x="0.2076%" y="7301" width="0.1429%" height="15" fill="rgb(211,33,43)" fg:x="581" fg:w="400"/><text x="0.4576%" y="7311.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (400 samples, 0.14%)</title><rect x="0.2076%" y="7285" width="0.1429%" height="15" fill="rgb(245,58,50)" fg:x="581" fg:w="400"/><text x="0.4576%" y="7295.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (400 samples, 0.14%)</title><rect x="0.2076%" y="7269" width="0.1429%" height="15" fill="rgb(244,68,36)" fg:x="581" fg:w="400"/><text x="0.4576%" y="7279.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (400 samples, 0.14%)</title><rect x="0.2076%" y="7253" width="0.1429%" height="15" fill="rgb(232,229,15)" fg:x="581" fg:w="400"/><text x="0.4576%" y="7263.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (400 samples, 0.14%)</title><rect x="0.2076%" y="7237" width="0.1429%" height="15" fill="rgb(254,30,23)" fg:x="581" fg:w="400"/><text x="0.4576%" y="7247.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (400 samples, 0.14%)</title><rect x="0.2076%" y="7221" width="0.1429%" height="15" fill="rgb(235,160,14)" fg:x="581" fg:w="400"/><text x="0.4576%" y="7231.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (400 samples, 0.14%)</title><rect x="0.2076%" y="7205" width="0.1429%" height="15" fill="rgb(212,155,44)" fg:x="581" fg:w="400"/><text x="0.4576%" y="7215.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (402 samples, 0.14%)</title><rect x="0.2076%" y="7317" width="0.1436%" height="15" fill="rgb(226,2,50)" fg:x="581" fg:w="402"/><text x="0.4576%" y="7327.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (431 samples, 0.15%)</title><rect x="0.1983%" y="7429" width="0.1540%" height="15" fill="rgb(234,177,6)" fg:x="555" fg:w="431"/><text x="0.4483%" y="7439.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (431 samples, 0.15%)</title><rect x="0.1983%" y="7413" width="0.1540%" height="15" fill="rgb(217,24,9)" fg:x="555" fg:w="431"/><text x="0.4483%" y="7423.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (431 samples, 0.15%)</title><rect x="0.1983%" y="7397" width="0.1540%" height="15" fill="rgb(220,13,46)" fg:x="555" fg:w="431"/><text x="0.4483%" y="7407.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (431 samples, 0.15%)</title><rect x="0.1983%" y="7381" width="0.1540%" height="15" fill="rgb(239,221,27)" fg:x="555" fg:w="431"/><text x="0.4483%" y="7391.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (431 samples, 0.15%)</title><rect x="0.1983%" y="7365" width="0.1540%" height="15" fill="rgb(222,198,25)" fg:x="555" fg:w="431"/><text x="0.4483%" y="7375.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (431 samples, 0.15%)</title><rect x="0.1983%" y="7349" width="0.1540%" height="15" fill="rgb(211,99,13)" fg:x="555" fg:w="431"/><text x="0.4483%" y="7359.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (431 samples, 0.15%)</title><rect x="0.1983%" y="7333" width="0.1540%" height="15" fill="rgb(232,111,31)" fg:x="555" fg:w="431"/><text x="0.4483%" y="7343.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (454 samples, 0.16%)</title><rect x="0.1908%" y="7557" width="0.1622%" height="15" fill="rgb(245,82,37)" fg:x="534" fg:w="454"/><text x="0.4408%" y="7567.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (454 samples, 0.16%)</title><rect x="0.1908%" y="7541" width="0.1622%" height="15" fill="rgb(227,149,46)" fg:x="534" fg:w="454"/><text x="0.4408%" y="7551.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (454 samples, 0.16%)</title><rect x="0.1908%" y="7525" width="0.1622%" height="15" fill="rgb(218,36,50)" fg:x="534" fg:w="454"/><text x="0.4408%" y="7535.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (454 samples, 0.16%)</title><rect x="0.1908%" y="7509" width="0.1622%" height="15" fill="rgb(226,80,48)" fg:x="534" fg:w="454"/><text x="0.4408%" y="7519.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (454 samples, 0.16%)</title><rect x="0.1908%" y="7493" width="0.1622%" height="15" fill="rgb(238,224,15)" fg:x="534" fg:w="454"/><text x="0.4408%" y="7503.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (454 samples, 0.16%)</title><rect x="0.1908%" y="7477" width="0.1622%" height="15" fill="rgb(241,136,10)" fg:x="534" fg:w="454"/><text x="0.4408%" y="7487.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (454 samples, 0.16%)</title><rect x="0.1908%" y="7461" width="0.1622%" height="15" fill="rgb(208,32,45)" fg:x="534" fg:w="454"/><text x="0.4408%" y="7471.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (433 samples, 0.15%)</title><rect x="0.1983%" y="7445" width="0.1547%" height="15" fill="rgb(207,135,9)" fg:x="555" fg:w="433"/><text x="0.4483%" y="7455.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (458 samples, 0.16%)</title><rect x="0.1908%" y="7573" width="0.1637%" height="15" fill="rgb(206,86,44)" fg:x="534" fg:w="458"/><text x="0.4408%" y="7583.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (486 samples, 0.17%)</title><rect x="0.1826%" y="7685" width="0.1737%" height="15" fill="rgb(245,177,15)" fg:x="511" fg:w="486"/><text x="0.4326%" y="7695.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (486 samples, 0.17%)</title><rect x="0.1826%" y="7669" width="0.1737%" height="15" fill="rgb(206,64,50)" fg:x="511" fg:w="486"/><text x="0.4326%" y="7679.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (486 samples, 0.17%)</title><rect x="0.1826%" y="7653" width="0.1737%" height="15" fill="rgb(234,36,40)" fg:x="511" fg:w="486"/><text x="0.4326%" y="7663.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (486 samples, 0.17%)</title><rect x="0.1826%" y="7637" width="0.1737%" height="15" fill="rgb(213,64,8)" fg:x="511" fg:w="486"/><text x="0.4326%" y="7647.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (486 samples, 0.17%)</title><rect x="0.1826%" y="7621" width="0.1737%" height="15" fill="rgb(210,75,36)" fg:x="511" fg:w="486"/><text x="0.4326%" y="7631.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (486 samples, 0.17%)</title><rect x="0.1826%" y="7605" width="0.1737%" height="15" fill="rgb(229,88,21)" fg:x="511" fg:w="486"/><text x="0.4326%" y="7615.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (486 samples, 0.17%)</title><rect x="0.1826%" y="7589" width="0.1737%" height="15" fill="rgb(252,204,47)" fg:x="511" fg:w="486"/><text x="0.4326%" y="7599.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (492 samples, 0.18%)</title><rect x="0.1826%" y="7701" width="0.1758%" height="15" fill="rgb(208,77,27)" fg:x="511" fg:w="492"/><text x="0.4326%" y="7711.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (518 samples, 0.19%)</title><rect x="0.1744%" y="7813" width="0.1851%" height="15" fill="rgb(221,76,26)" fg:x="488" fg:w="518"/><text x="0.4244%" y="7823.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (518 samples, 0.19%)</title><rect x="0.1744%" y="7797" width="0.1851%" height="15" fill="rgb(225,139,18)" fg:x="488" fg:w="518"/><text x="0.4244%" y="7807.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (518 samples, 0.19%)</title><rect x="0.1744%" y="7781" width="0.1851%" height="15" fill="rgb(230,137,11)" fg:x="488" fg:w="518"/><text x="0.4244%" y="7791.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (518 samples, 0.19%)</title><rect x="0.1744%" y="7765" width="0.1851%" height="15" fill="rgb(212,28,1)" fg:x="488" fg:w="518"/><text x="0.4244%" y="7775.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (518 samples, 0.19%)</title><rect x="0.1744%" y="7749" width="0.1851%" height="15" fill="rgb(248,164,17)" fg:x="488" fg:w="518"/><text x="0.4244%" y="7759.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (518 samples, 0.19%)</title><rect x="0.1744%" y="7733" width="0.1851%" height="15" fill="rgb(222,171,42)" fg:x="488" fg:w="518"/><text x="0.4244%" y="7743.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (518 samples, 0.19%)</title><rect x="0.1744%" y="7717" width="0.1851%" height="15" fill="rgb(243,84,45)" fg:x="488" fg:w="518"/><text x="0.4244%" y="7727.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (521 samples, 0.19%)</title><rect x="0.1744%" y="7829" width="0.1862%" height="15" fill="rgb(252,49,23)" fg:x="488" fg:w="521"/><text x="0.4244%" y="7839.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (562 samples, 0.20%)</title><rect x="0.1604%" y="7941" width="0.2008%" height="15" fill="rgb(215,19,7)" fg:x="449" fg:w="562"/><text x="0.4104%" y="7951.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (562 samples, 0.20%)</title><rect x="0.1604%" y="7925" width="0.2008%" height="15" fill="rgb(238,81,41)" fg:x="449" fg:w="562"/><text x="0.4104%" y="7935.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (562 samples, 0.20%)</title><rect x="0.1604%" y="7909" width="0.2008%" height="15" fill="rgb(210,199,37)" fg:x="449" fg:w="562"/><text x="0.4104%" y="7919.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (562 samples, 0.20%)</title><rect x="0.1604%" y="7893" width="0.2008%" height="15" fill="rgb(244,192,49)" fg:x="449" fg:w="562"/><text x="0.4104%" y="7903.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (562 samples, 0.20%)</title><rect x="0.1604%" y="7877" width="0.2008%" height="15" fill="rgb(226,211,11)" fg:x="449" fg:w="562"/><text x="0.4104%" y="7887.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (562 samples, 0.20%)</title><rect x="0.1604%" y="7861" width="0.2008%" height="15" fill="rgb(236,162,54)" fg:x="449" fg:w="562"/><text x="0.4104%" y="7871.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (562 samples, 0.20%)</title><rect x="0.1604%" y="7845" width="0.2008%" height="15" fill="rgb(220,229,9)" fg:x="449" fg:w="562"/><text x="0.4104%" y="7855.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (604 samples, 0.22%)</title><rect x="0.1469%" y="8069" width="0.2158%" height="15" fill="rgb(250,87,22)" fg:x="411" fg:w="604"/><text x="0.3969%" y="8079.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (604 samples, 0.22%)</title><rect x="0.1469%" y="8053" width="0.2158%" height="15" fill="rgb(239,43,17)" fg:x="411" fg:w="604"/><text x="0.3969%" y="8063.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (604 samples, 0.22%)</title><rect x="0.1469%" y="8037" width="0.2158%" height="15" fill="rgb(231,177,25)" fg:x="411" fg:w="604"/><text x="0.3969%" y="8047.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (604 samples, 0.22%)</title><rect x="0.1469%" y="8021" width="0.2158%" height="15" fill="rgb(219,179,1)" fg:x="411" fg:w="604"/><text x="0.3969%" y="8031.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (604 samples, 0.22%)</title><rect x="0.1469%" y="8005" width="0.2158%" height="15" fill="rgb(238,219,53)" fg:x="411" fg:w="604"/><text x="0.3969%" y="8015.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (604 samples, 0.22%)</title><rect x="0.1469%" y="7989" width="0.2158%" height="15" fill="rgb(232,167,36)" fg:x="411" fg:w="604"/><text x="0.3969%" y="7999.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (604 samples, 0.22%)</title><rect x="0.1469%" y="7973" width="0.2158%" height="15" fill="rgb(244,19,51)" fg:x="411" fg:w="604"/><text x="0.3969%" y="7983.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (566 samples, 0.20%)</title><rect x="0.1604%" y="7957" width="0.2023%" height="15" fill="rgb(224,6,22)" fg:x="449" fg:w="566"/><text x="0.4104%" y="7967.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (612 samples, 0.22%)</title><rect x="0.1469%" y="8085" width="0.2187%" height="15" fill="rgb(224,145,5)" fg:x="411" fg:w="612"/><text x="0.3969%" y="8095.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (654 samples, 0.23%)</title><rect x="0.1340%" y="8197" width="0.2337%" height="15" fill="rgb(234,130,49)" fg:x="375" fg:w="654"/><text x="0.3840%" y="8207.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (654 samples, 0.23%)</title><rect x="0.1340%" y="8181" width="0.2337%" height="15" fill="rgb(254,6,2)" fg:x="375" fg:w="654"/><text x="0.3840%" y="8191.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (654 samples, 0.23%)</title><rect x="0.1340%" y="8165" width="0.2337%" height="15" fill="rgb(208,96,46)" fg:x="375" fg:w="654"/><text x="0.3840%" y="8175.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (654 samples, 0.23%)</title><rect x="0.1340%" y="8149" width="0.2337%" height="15" fill="rgb(239,3,39)" fg:x="375" fg:w="654"/><text x="0.3840%" y="8159.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (654 samples, 0.23%)</title><rect x="0.1340%" y="8133" width="0.2337%" height="15" fill="rgb(233,210,1)" fg:x="375" fg:w="654"/><text x="0.3840%" y="8143.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (654 samples, 0.23%)</title><rect x="0.1340%" y="8117" width="0.2337%" height="15" fill="rgb(244,137,37)" fg:x="375" fg:w="654"/><text x="0.3840%" y="8127.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (654 samples, 0.23%)</title><rect x="0.1340%" y="8101" width="0.2337%" height="15" fill="rgb(240,136,2)" fg:x="375" fg:w="654"/><text x="0.3840%" y="8111.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (661 samples, 0.24%)</title><rect x="0.1340%" y="8213" width="0.2362%" height="15" fill="rgb(239,18,37)" fg:x="375" fg:w="661"/><text x="0.3840%" y="8223.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (705 samples, 0.25%)</title><rect x="0.1190%" y="8325" width="0.2519%" height="15" fill="rgb(218,185,22)" fg:x="333" fg:w="705"/><text x="0.3690%" y="8335.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (705 samples, 0.25%)</title><rect x="0.1190%" y="8309" width="0.2519%" height="15" fill="rgb(225,218,4)" fg:x="333" fg:w="705"/><text x="0.3690%" y="8319.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (705 samples, 0.25%)</title><rect x="0.1190%" y="8293" width="0.2519%" height="15" fill="rgb(230,182,32)" fg:x="333" fg:w="705"/><text x="0.3690%" y="8303.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (705 samples, 0.25%)</title><rect x="0.1190%" y="8277" width="0.2519%" height="15" fill="rgb(242,56,43)" fg:x="333" fg:w="705"/><text x="0.3690%" y="8287.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (705 samples, 0.25%)</title><rect x="0.1190%" y="8261" width="0.2519%" height="15" fill="rgb(233,99,24)" fg:x="333" fg:w="705"/><text x="0.3690%" y="8271.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (705 samples, 0.25%)</title><rect x="0.1190%" y="8245" width="0.2519%" height="15" fill="rgb(234,209,42)" fg:x="333" fg:w="705"/><text x="0.3690%" y="8255.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (705 samples, 0.25%)</title><rect x="0.1190%" y="8229" width="0.2519%" height="15" fill="rgb(227,7,12)" fg:x="333" fg:w="705"/><text x="0.3690%" y="8239.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (709 samples, 0.25%)</title><rect x="0.1190%" y="8341" width="0.2534%" height="15" fill="rgb(245,203,43)" fg:x="333" fg:w="709"/><text x="0.3690%" y="8351.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;alloc::vec::Vec&lt;tuple$ (957 samples, 0.34%)</title><rect x="0.0332%" y="8597" width="0.3420%" height="15" fill="rgb(238,205,33)" fg:x="93" fg:w="957"/><text x="0.2832%" y="8607.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$25::drop(alloc::vec::Vec&lt;alloc::vec::Vec&lt;tuple$ (957 samples, 0.34%)</title><rect x="0.0332%" y="8581" width="0.3420%" height="15" fill="rgb(231,56,7)" fg:x="93" fg:w="957"/><text x="0.2832%" y="8591.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(ptr_mut$&lt;slice2$&lt;alloc::vec::Vec&lt;tuple$ (957 samples, 0.34%)</title><rect x="0.0332%" y="8565" width="0.3420%" height="15" fill="rgb(244,186,29)" fg:x="93" fg:w="957"/><text x="0.2832%" y="8575.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;tuple$ (957 samples, 0.34%)</title><rect x="0.0332%" y="8549" width="0.3420%" height="15" fill="rgb(234,111,31)" fg:x="93" fg:w="957"/><text x="0.2832%" y="8559.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (957 samples, 0.34%)</title><rect x="0.0332%" y="8533" width="0.3420%" height="15" fill="rgb(241,149,10)" fg:x="93" fg:w="957"/><text x="0.2832%" y="8543.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (957 samples, 0.34%)</title><rect x="0.0332%" y="8517" width="0.3420%" height="15" fill="rgb(249,206,44)" fg:x="93" fg:w="957"/><text x="0.2832%" y="8527.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (957 samples, 0.34%)</title><rect x="0.0332%" y="8501" width="0.3420%" height="15" fill="rgb(251,153,30)" fg:x="93" fg:w="957"/><text x="0.2832%" y="8511.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::current_memory (952 samples, 0.34%)</title><rect x="0.0350%" y="8485" width="0.3402%" height="15" fill="rgb(239,152,38)" fg:x="98" fg:w="952"/><text x="0.2850%" y="8495.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::find_reachable(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (952 samples, 0.34%)</title><rect x="0.0350%" y="8469" width="0.3402%" height="15" fill="rgb(249,139,47)" fg:x="98" fg:w="952"/><text x="0.2850%" y="8479.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;tuple$ (778 samples, 0.28%)</title><rect x="0.0972%" y="8453" width="0.2780%" height="15" fill="rgb(244,64,35)" fg:x="272" fg:w="778"/><text x="0.3472%" y="8463.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (778 samples, 0.28%)</title><rect x="0.0972%" y="8437" width="0.2780%" height="15" fill="rgb(216,46,15)" fg:x="272" fg:w="778"/><text x="0.3472%" y="8447.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (778 samples, 0.28%)</title><rect x="0.0972%" y="8421" width="0.2780%" height="15" fill="rgb(250,74,19)" fg:x="272" fg:w="778"/><text x="0.3472%" y="8431.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (778 samples, 0.28%)</title><rect x="0.0972%" y="8405" width="0.2780%" height="15" fill="rgb(249,42,33)" fg:x="272" fg:w="778"/><text x="0.3472%" y="8415.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (778 samples, 0.28%)</title><rect x="0.0972%" y="8389" width="0.2780%" height="15" fill="rgb(242,149,17)" fg:x="272" fg:w="778"/><text x="0.3472%" y="8399.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (775 samples, 0.28%)</title><rect x="0.0983%" y="8373" width="0.2769%" height="15" fill="rgb(244,29,21)" fg:x="275" fg:w="775"/><text x="0.3483%" y="8383.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (775 samples, 0.28%)</title><rect x="0.0983%" y="8357" width="0.2769%" height="15" fill="rgb(220,130,37)" fg:x="275" fg:w="775"/><text x="0.3483%" y="8367.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (29 samples, 0.01%)</title><rect x="0.4874%" y="7781" width="0.0104%" height="15" fill="rgb(211,67,2)" fg:x="1364" fg:w="29"/><text x="0.7374%" y="7791.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (33 samples, 0.01%)</title><rect x="0.5139%" y="7573" width="0.0118%" height="15" fill="rgb(235,68,52)" fg:x="1438" fg:w="33"/><text x="0.7639%" y="7583.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (33 samples, 0.01%)</title><rect x="0.5139%" y="7557" width="0.0118%" height="15" fill="rgb(246,142,3)" fg:x="1438" fg:w="33"/><text x="0.7639%" y="7567.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (33 samples, 0.01%)</title><rect x="0.5139%" y="7541" width="0.0118%" height="15" fill="rgb(241,25,7)" fg:x="1438" fg:w="33"/><text x="0.7639%" y="7551.50"></text></g><g><title>`0x7FF97E63218A (29 samples, 0.01%)</title><rect x="0.5153%" y="7525" width="0.0104%" height="15" fill="rgb(242,119,39)" fg:x="1442" fg:w="29"/><text x="0.7653%" y="7535.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_mut_ptr (35 samples, 0.01%)</title><rect x="0.5135%" y="7717" width="0.0125%" height="15" fill="rgb(241,98,45)" fg:x="1437" fg:w="35"/><text x="0.7635%" y="7727.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (35 samples, 0.01%)</title><rect x="0.5135%" y="7701" width="0.0125%" height="15" fill="rgb(254,28,30)" fg:x="1437" fg:w="35"/><text x="0.7635%" y="7711.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (35 samples, 0.01%)</title><rect x="0.5135%" y="7685" width="0.0125%" height="15" fill="rgb(241,142,54)" fg:x="1437" fg:w="35"/><text x="0.7635%" y="7695.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (35 samples, 0.01%)</title><rect x="0.5135%" y="7669" width="0.0125%" height="15" fill="rgb(222,85,15)" fg:x="1437" fg:w="35"/><text x="0.7635%" y="7679.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::grow_one&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; (35 samples, 0.01%)</title><rect x="0.5135%" y="7653" width="0.0125%" height="15" fill="rgb(210,85,47)" fg:x="1437" fg:w="35"/><text x="0.7635%" y="7663.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (34 samples, 0.01%)</title><rect x="0.5139%" y="7637" width="0.0121%" height="15" fill="rgb(224,206,25)" fg:x="1438" fg:w="34"/><text x="0.7639%" y="7647.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (34 samples, 0.01%)</title><rect x="0.5139%" y="7621" width="0.0121%" height="15" fill="rgb(243,201,19)" fg:x="1438" fg:w="34"/><text x="0.7639%" y="7631.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (34 samples, 0.01%)</title><rect x="0.5139%" y="7605" width="0.0121%" height="15" fill="rgb(236,59,4)" fg:x="1438" fg:w="34"/><text x="0.7639%" y="7615.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (34 samples, 0.01%)</title><rect x="0.5139%" y="7589" width="0.0121%" height="15" fill="rgb(254,179,45)" fg:x="1438" fg:w="34"/><text x="0.7639%" y="7599.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (41 samples, 0.01%)</title><rect x="0.5135%" y="7733" width="0.0147%" height="15" fill="rgb(226,14,10)" fg:x="1437" fg:w="41"/><text x="0.7635%" y="7743.50"></text></g><g><title>`0x7FF97E633505 (28 samples, 0.01%)</title><rect x="0.5499%" y="7445" width="0.0100%" height="15" fill="rgb(244,27,41)" fg:x="1539" fg:w="28"/><text x="0.7999%" y="7455.50"></text></g><g><title>`0x7FF97E6322C7 (36 samples, 0.01%)</title><rect x="0.5499%" y="7461" width="0.0129%" height="15" fill="rgb(235,35,32)" fg:x="1539" fg:w="36"/><text x="0.7999%" y="7471.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (47 samples, 0.02%)</title><rect x="0.5467%" y="7525" width="0.0168%" height="15" fill="rgb(218,68,31)" fg:x="1530" fg:w="47"/><text x="0.7967%" y="7535.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (47 samples, 0.02%)</title><rect x="0.5467%" y="7509" width="0.0168%" height="15" fill="rgb(207,120,37)" fg:x="1530" fg:w="47"/><text x="0.7967%" y="7519.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (47 samples, 0.02%)</title><rect x="0.5467%" y="7493" width="0.0168%" height="15" fill="rgb(227,98,0)" fg:x="1530" fg:w="47"/><text x="0.7967%" y="7503.50"></text></g><g><title>`0x7FF97E63218A (40 samples, 0.01%)</title><rect x="0.5492%" y="7477" width="0.0143%" height="15" fill="rgb(207,7,3)" fg:x="1537" fg:w="40"/><text x="0.7992%" y="7487.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_mut_ptr (52 samples, 0.02%)</title><rect x="0.5457%" y="7669" width="0.0186%" height="15" fill="rgb(206,98,19)" fg:x="1527" fg:w="52"/><text x="0.7957%" y="7679.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (52 samples, 0.02%)</title><rect x="0.5457%" y="7653" width="0.0186%" height="15" fill="rgb(217,5,26)" fg:x="1527" fg:w="52"/><text x="0.7957%" y="7663.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (52 samples, 0.02%)</title><rect x="0.5457%" y="7637" width="0.0186%" height="15" fill="rgb(235,190,38)" fg:x="1527" fg:w="52"/><text x="0.7957%" y="7647.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (52 samples, 0.02%)</title><rect x="0.5457%" y="7621" width="0.0186%" height="15" fill="rgb(247,86,24)" fg:x="1527" fg:w="52"/><text x="0.7957%" y="7631.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::grow_one&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; (52 samples, 0.02%)</title><rect x="0.5457%" y="7605" width="0.0186%" height="15" fill="rgb(205,101,16)" fg:x="1527" fg:w="52"/><text x="0.7957%" y="7615.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (51 samples, 0.02%)</title><rect x="0.5460%" y="7589" width="0.0182%" height="15" fill="rgb(246,168,33)" fg:x="1528" fg:w="51"/><text x="0.7960%" y="7599.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (51 samples, 0.02%)</title><rect x="0.5460%" y="7573" width="0.0182%" height="15" fill="rgb(231,114,1)" fg:x="1528" fg:w="51"/><text x="0.7960%" y="7583.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (50 samples, 0.02%)</title><rect x="0.5464%" y="7557" width="0.0179%" height="15" fill="rgb(207,184,53)" fg:x="1529" fg:w="50"/><text x="0.7964%" y="7567.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (50 samples, 0.02%)</title><rect x="0.5464%" y="7541" width="0.0179%" height="15" fill="rgb(224,95,51)" fg:x="1529" fg:w="50"/><text x="0.7964%" y="7551.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (56 samples, 0.02%)</title><rect x="0.5457%" y="7685" width="0.0200%" height="15" fill="rgb(212,188,45)" fg:x="1527" fg:w="56"/><text x="0.7957%" y="7695.50"></text></g><g><title>`0x7FF97E633505 (32 samples, 0.01%)</title><rect x="0.6007%" y="7397" width="0.0114%" height="15" fill="rgb(223,154,38)" fg:x="1681" fg:w="32"/><text x="0.8507%" y="7407.50"></text></g><g><title>`0x7FF97E6322C7 (36 samples, 0.01%)</title><rect x="0.6007%" y="7413" width="0.0129%" height="15" fill="rgb(251,22,52)" fg:x="1681" fg:w="36"/><text x="0.8507%" y="7423.50"></text></g><g><title>`0x7FF97E63218A (41 samples, 0.01%)</title><rect x="0.6003%" y="7429" width="0.0147%" height="15" fill="rgb(229,209,22)" fg:x="1680" fg:w="41"/><text x="0.8503%" y="7439.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (52 samples, 0.02%)</title><rect x="0.5968%" y="7477" width="0.0186%" height="15" fill="rgb(234,138,34)" fg:x="1670" fg:w="52"/><text x="0.8468%" y="7487.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (52 samples, 0.02%)</title><rect x="0.5968%" y="7461" width="0.0186%" height="15" fill="rgb(212,95,11)" fg:x="1670" fg:w="52"/><text x="0.8468%" y="7471.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (51 samples, 0.02%)</title><rect x="0.5971%" y="7445" width="0.0182%" height="15" fill="rgb(240,179,47)" fg:x="1671" fg:w="51"/><text x="0.8471%" y="7455.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_mut_ptr (59 samples, 0.02%)</title><rect x="0.5946%" y="7621" width="0.0211%" height="15" fill="rgb(240,163,11)" fg:x="1664" fg:w="59"/><text x="0.8446%" y="7631.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (59 samples, 0.02%)</title><rect x="0.5946%" y="7605" width="0.0211%" height="15" fill="rgb(236,37,12)" fg:x="1664" fg:w="59"/><text x="0.8446%" y="7615.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (59 samples, 0.02%)</title><rect x="0.5946%" y="7589" width="0.0211%" height="15" fill="rgb(232,164,16)" fg:x="1664" fg:w="59"/><text x="0.8446%" y="7599.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (59 samples, 0.02%)</title><rect x="0.5946%" y="7573" width="0.0211%" height="15" fill="rgb(244,205,15)" fg:x="1664" fg:w="59"/><text x="0.8446%" y="7583.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::grow_one&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; (59 samples, 0.02%)</title><rect x="0.5946%" y="7557" width="0.0211%" height="15" fill="rgb(223,117,47)" fg:x="1664" fg:w="59"/><text x="0.8446%" y="7567.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (58 samples, 0.02%)</title><rect x="0.5950%" y="7541" width="0.0207%" height="15" fill="rgb(244,107,35)" fg:x="1665" fg:w="58"/><text x="0.8450%" y="7551.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (57 samples, 0.02%)</title><rect x="0.5953%" y="7525" width="0.0204%" height="15" fill="rgb(205,140,8)" fg:x="1666" fg:w="57"/><text x="0.8453%" y="7535.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (54 samples, 0.02%)</title><rect x="0.5964%" y="7509" width="0.0193%" height="15" fill="rgb(228,84,46)" fg:x="1669" fg:w="54"/><text x="0.8464%" y="7519.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (54 samples, 0.02%)</title><rect x="0.5964%" y="7493" width="0.0193%" height="15" fill="rgb(254,188,9)" fg:x="1669" fg:w="54"/><text x="0.8464%" y="7503.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (66 samples, 0.02%)</title><rect x="0.5946%" y="7637" width="0.0236%" height="15" fill="rgb(206,112,54)" fg:x="1664" fg:w="66"/><text x="0.8446%" y="7647.50"></text></g><g><title>`0x7FF97E62CC9A (37 samples, 0.01%)</title><rect x="0.6725%" y="7333" width="0.0132%" height="15" fill="rgb(216,84,49)" fg:x="1882" fg:w="37"/><text x="0.9225%" y="7343.50"></text></g><g><title>`0x7FF97E633505 (52 samples, 0.02%)</title><rect x="0.6675%" y="7349" width="0.0186%" height="15" fill="rgb(214,194,35)" fg:x="1868" fg:w="52"/><text x="0.9175%" y="7359.50"></text></g><g><title>`0x7FF97E6322C7 (78 samples, 0.03%)</title><rect x="0.6668%" y="7365" width="0.0279%" height="15" fill="rgb(249,28,3)" fg:x="1866" fg:w="78"/><text x="0.9168%" y="7375.50"></text></g><g><title>`0x7FF97E63218A (89 samples, 0.03%)</title><rect x="0.6650%" y="7381" width="0.0318%" height="15" fill="rgb(222,56,52)" fg:x="1861" fg:w="89"/><text x="0.9150%" y="7391.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (99 samples, 0.04%)</title><rect x="0.6618%" y="7429" width="0.0354%" height="15" fill="rgb(245,217,50)" fg:x="1852" fg:w="99"/><text x="0.9118%" y="7439.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (99 samples, 0.04%)</title><rect x="0.6618%" y="7413" width="0.0354%" height="15" fill="rgb(213,201,24)" fg:x="1852" fg:w="99"/><text x="0.9118%" y="7423.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (99 samples, 0.04%)</title><rect x="0.6618%" y="7397" width="0.0354%" height="15" fill="rgb(248,116,28)" fg:x="1852" fg:w="99"/><text x="0.9118%" y="7407.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_mut_ptr (105 samples, 0.04%)</title><rect x="0.6600%" y="7573" width="0.0375%" height="15" fill="rgb(219,72,43)" fg:x="1847" fg:w="105"/><text x="0.9100%" y="7583.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (105 samples, 0.04%)</title><rect x="0.6600%" y="7557" width="0.0375%" height="15" fill="rgb(209,138,14)" fg:x="1847" fg:w="105"/><text x="0.9100%" y="7567.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (105 samples, 0.04%)</title><rect x="0.6600%" y="7541" width="0.0375%" height="15" fill="rgb(222,18,33)" fg:x="1847" fg:w="105"/><text x="0.9100%" y="7551.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (105 samples, 0.04%)</title><rect x="0.6600%" y="7525" width="0.0375%" height="15" fill="rgb(213,199,7)" fg:x="1847" fg:w="105"/><text x="0.9100%" y="7535.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::grow_one&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; (105 samples, 0.04%)</title><rect x="0.6600%" y="7509" width="0.0375%" height="15" fill="rgb(250,110,10)" fg:x="1847" fg:w="105"/><text x="0.9100%" y="7519.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (104 samples, 0.04%)</title><rect x="0.6604%" y="7493" width="0.0372%" height="15" fill="rgb(248,123,6)" fg:x="1848" fg:w="104"/><text x="0.9104%" y="7503.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (104 samples, 0.04%)</title><rect x="0.6604%" y="7477" width="0.0372%" height="15" fill="rgb(206,91,31)" fg:x="1848" fg:w="104"/><text x="0.9104%" y="7487.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (101 samples, 0.04%)</title><rect x="0.6614%" y="7461" width="0.0361%" height="15" fill="rgb(211,154,13)" fg:x="1851" fg:w="101"/><text x="0.9114%" y="7471.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (101 samples, 0.04%)</title><rect x="0.6614%" y="7445" width="0.0361%" height="15" fill="rgb(225,148,7)" fg:x="1851" fg:w="101"/><text x="0.9114%" y="7455.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (117 samples, 0.04%)</title><rect x="0.6600%" y="7589" width="0.0418%" height="15" fill="rgb(220,160,43)" fg:x="1847" fg:w="117"/><text x="0.9100%" y="7599.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$11::clone(alloc::vec::Vec&lt;tuple$ (41 samples, 0.01%)</title><rect x="0.7018%" y="7589" width="0.0147%" height="15" fill="rgb(213,52,39)" fg:x="1964" fg:w="41"/><text x="0.9518%" y="7599.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (41 samples, 0.01%)</title><rect x="0.7018%" y="7573" width="0.0147%" height="15" fill="rgb(243,137,7)" fg:x="1964" fg:w="41"/><text x="0.9518%" y="7583.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$&lt;tuple$ (41 samples, 0.01%)</title><rect x="0.7018%" y="7557" width="0.0147%" height="15" fill="rgb(230,79,13)" fg:x="1964" fg:w="41"/><text x="0.9518%" y="7567.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$&lt;tuple$ (41 samples, 0.01%)</title><rect x="0.7018%" y="7541" width="0.0147%" height="15" fill="rgb(247,105,23)" fg:x="1964" fg:w="41"/><text x="0.9518%" y="7551.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (35 samples, 0.01%)</title><rect x="0.7040%" y="7525" width="0.0125%" height="15" fill="rgb(223,179,41)" fg:x="1970" fg:w="35"/><text x="0.9540%" y="7535.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (35 samples, 0.01%)</title><rect x="0.7040%" y="7509" width="0.0125%" height="15" fill="rgb(218,9,34)" fg:x="1970" fg:w="35"/><text x="0.9540%" y="7519.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (35 samples, 0.01%)</title><rect x="0.7040%" y="7493" width="0.0125%" height="15" fill="rgb(222,106,8)" fg:x="1970" fg:w="35"/><text x="0.9540%" y="7503.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (35 samples, 0.01%)</title><rect x="0.7040%" y="7477" width="0.0125%" height="15" fill="rgb(211,220,0)" fg:x="1970" fg:w="35"/><text x="0.9540%" y="7487.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$ (30 samples, 0.01%)</title><rect x="0.7165%" y="7589" width="0.0107%" height="15" fill="rgb(229,52,16)" fg:x="2005" fg:w="30"/><text x="0.9665%" y="7599.50"></text></g><g><title>`0x7FF97E62AFF1 (30 samples, 0.01%)</title><rect x="0.7333%" y="7493" width="0.0107%" height="15" fill="rgb(212,155,18)" fg:x="2052" fg:w="30"/><text x="0.9833%" y="7503.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (34 samples, 0.01%)</title><rect x="0.7325%" y="7525" width="0.0121%" height="15" fill="rgb(242,21,14)" fg:x="2050" fg:w="34"/><text x="0.9825%" y="7535.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (34 samples, 0.01%)</title><rect x="0.7325%" y="7509" width="0.0121%" height="15" fill="rgb(222,19,48)" fg:x="2050" fg:w="34"/><text x="0.9825%" y="7519.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;tuple$ (36 samples, 0.01%)</title><rect x="0.7322%" y="7589" width="0.0129%" height="15" fill="rgb(232,45,27)" fg:x="2049" fg:w="36"/><text x="0.9822%" y="7599.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (36 samples, 0.01%)</title><rect x="0.7322%" y="7573" width="0.0129%" height="15" fill="rgb(249,103,42)" fg:x="2049" fg:w="36"/><text x="0.9822%" y="7583.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (36 samples, 0.01%)</title><rect x="0.7322%" y="7557" width="0.0129%" height="15" fill="rgb(246,81,33)" fg:x="2049" fg:w="36"/><text x="0.9822%" y="7567.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (35 samples, 0.01%)</title><rect x="0.7325%" y="7541" width="0.0125%" height="15" fill="rgb(252,33,42)" fg:x="2050" fg:w="35"/><text x="0.9825%" y="7551.50"></text></g><g><title>`0x7FF97E62CC9A (45 samples, 0.02%)</title><rect x="0.7722%" y="7333" width="0.0161%" height="15" fill="rgb(209,212,41)" fg:x="2161" fg:w="45"/><text x="1.0222%" y="7343.50"></text></g><g><title>`0x7FF97E62CC9A (40 samples, 0.01%)</title><rect x="0.7990%" y="7285" width="0.0143%" height="15" fill="rgb(207,154,6)" fg:x="2236" fg:w="40"/><text x="1.0490%" y="7295.50"></text></g><g><title>`0x7FF97E633505 (68 samples, 0.02%)</title><rect x="0.7901%" y="7301" width="0.0243%" height="15" fill="rgb(223,64,47)" fg:x="2211" fg:w="68"/><text x="1.0401%" y="7311.50"></text></g><g><title>`0x7FF97E6322C7 (84 samples, 0.03%)</title><rect x="0.7894%" y="7317" width="0.0300%" height="15" fill="rgb(211,161,38)" fg:x="2209" fg:w="84"/><text x="1.0394%" y="7327.50"></text></g><g><title>`0x7FF97E63218A (91 samples, 0.03%)</title><rect x="0.7886%" y="7333" width="0.0325%" height="15" fill="rgb(219,138,40)" fg:x="2207" fg:w="91"/><text x="1.0386%" y="7343.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (141 samples, 0.05%)</title><rect x="0.7715%" y="7381" width="0.0504%" height="15" fill="rgb(241,228,46)" fg:x="2159" fg:w="141"/><text x="1.0215%" y="7391.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (141 samples, 0.05%)</title><rect x="0.7715%" y="7365" width="0.0504%" height="15" fill="rgb(223,209,38)" fg:x="2159" fg:w="141"/><text x="1.0215%" y="7375.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (141 samples, 0.05%)</title><rect x="0.7715%" y="7349" width="0.0504%" height="15" fill="rgb(236,164,45)" fg:x="2159" fg:w="141"/><text x="1.0215%" y="7359.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_mut_ptr (158 samples, 0.06%)</title><rect x="0.7676%" y="7525" width="0.0565%" height="15" fill="rgb(231,15,5)" fg:x="2148" fg:w="158"/><text x="1.0176%" y="7535.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (158 samples, 0.06%)</title><rect x="0.7676%" y="7509" width="0.0565%" height="15" fill="rgb(252,35,15)" fg:x="2148" fg:w="158"/><text x="1.0176%" y="7519.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (158 samples, 0.06%)</title><rect x="0.7676%" y="7493" width="0.0565%" height="15" fill="rgb(248,181,18)" fg:x="2148" fg:w="158"/><text x="1.0176%" y="7503.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (158 samples, 0.06%)</title><rect x="0.7676%" y="7477" width="0.0565%" height="15" fill="rgb(233,39,42)" fg:x="2148" fg:w="158"/><text x="1.0176%" y="7487.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::grow_one&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; (158 samples, 0.06%)</title><rect x="0.7676%" y="7461" width="0.0565%" height="15" fill="rgb(238,110,33)" fg:x="2148" fg:w="158"/><text x="1.0176%" y="7471.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (153 samples, 0.05%)</title><rect x="0.7693%" y="7445" width="0.0547%" height="15" fill="rgb(233,195,10)" fg:x="2153" fg:w="153"/><text x="1.0193%" y="7455.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (152 samples, 0.05%)</title><rect x="0.7697%" y="7429" width="0.0543%" height="15" fill="rgb(254,105,3)" fg:x="2154" fg:w="152"/><text x="1.0197%" y="7439.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (150 samples, 0.05%)</title><rect x="0.7704%" y="7413" width="0.0536%" height="15" fill="rgb(221,225,9)" fg:x="2156" fg:w="150"/><text x="1.0204%" y="7423.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (148 samples, 0.05%)</title><rect x="0.7711%" y="7397" width="0.0529%" height="15" fill="rgb(224,227,45)" fg:x="2158" fg:w="148"/><text x="1.0211%" y="7407.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (173 samples, 0.06%)</title><rect x="0.7676%" y="7541" width="0.0618%" height="15" fill="rgb(229,198,43)" fg:x="2148" fg:w="173"/><text x="1.0176%" y="7551.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$11::clone(alloc::vec::Vec&lt;tuple$ (44 samples, 0.02%)</title><rect x="0.8294%" y="7541" width="0.0157%" height="15" fill="rgb(206,209,35)" fg:x="2321" fg:w="44"/><text x="1.0794%" y="7551.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (44 samples, 0.02%)</title><rect x="0.8294%" y="7525" width="0.0157%" height="15" fill="rgb(245,195,53)" fg:x="2321" fg:w="44"/><text x="1.0794%" y="7535.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$&lt;tuple$ (44 samples, 0.02%)</title><rect x="0.8294%" y="7509" width="0.0157%" height="15" fill="rgb(240,92,26)" fg:x="2321" fg:w="44"/><text x="1.0794%" y="7519.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$&lt;tuple$ (44 samples, 0.02%)</title><rect x="0.8294%" y="7493" width="0.0157%" height="15" fill="rgb(207,40,23)" fg:x="2321" fg:w="44"/><text x="1.0794%" y="7503.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (33 samples, 0.01%)</title><rect x="0.8333%" y="7477" width="0.0118%" height="15" fill="rgb(223,111,35)" fg:x="2332" fg:w="33"/><text x="1.0833%" y="7487.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (33 samples, 0.01%)</title><rect x="0.8333%" y="7461" width="0.0118%" height="15" fill="rgb(229,147,28)" fg:x="2332" fg:w="33"/><text x="1.0833%" y="7471.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (33 samples, 0.01%)</title><rect x="0.8333%" y="7445" width="0.0118%" height="15" fill="rgb(211,29,28)" fg:x="2332" fg:w="33"/><text x="1.0833%" y="7455.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (33 samples, 0.01%)</title><rect x="0.8333%" y="7429" width="0.0118%" height="15" fill="rgb(228,72,33)" fg:x="2332" fg:w="33"/><text x="1.0833%" y="7439.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$ (35 samples, 0.01%)</title><rect x="0.8451%" y="7541" width="0.0125%" height="15" fill="rgb(205,214,31)" fg:x="2365" fg:w="35"/><text x="1.0951%" y="7551.50"></text></g><g><title>`0x7FF97E62AFF1 (39 samples, 0.01%)</title><rect x="0.8683%" y="7445" width="0.0139%" height="15" fill="rgb(224,111,15)" fg:x="2430" fg:w="39"/><text x="1.1183%" y="7455.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;tuple$ (47 samples, 0.02%)</title><rect x="0.8658%" y="7541" width="0.0168%" height="15" fill="rgb(253,21,26)" fg:x="2423" fg:w="47"/><text x="1.1158%" y="7551.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (47 samples, 0.02%)</title><rect x="0.8658%" y="7525" width="0.0168%" height="15" fill="rgb(245,139,43)" fg:x="2423" fg:w="47"/><text x="1.1158%" y="7535.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (47 samples, 0.02%)</title><rect x="0.8658%" y="7509" width="0.0168%" height="15" fill="rgb(252,170,7)" fg:x="2423" fg:w="47"/><text x="1.1158%" y="7519.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (47 samples, 0.02%)</title><rect x="0.8658%" y="7493" width="0.0168%" height="15" fill="rgb(231,118,14)" fg:x="2423" fg:w="47"/><text x="1.1158%" y="7503.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (47 samples, 0.02%)</title><rect x="0.8658%" y="7477" width="0.0168%" height="15" fill="rgb(238,83,0)" fg:x="2423" fg:w="47"/><text x="1.1158%" y="7487.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (47 samples, 0.02%)</title><rect x="0.8658%" y="7461" width="0.0168%" height="15" fill="rgb(221,39,39)" fg:x="2423" fg:w="47"/><text x="1.1158%" y="7471.50"></text></g><g><title>`0x7FF97E62CC9A (82 samples, 0.03%)</title><rect x="0.9255%" y="7237" width="0.0293%" height="15" fill="rgb(222,119,46)" fg:x="2590" fg:w="82"/><text x="1.1755%" y="7247.50"></text></g><g><title>`0x7FF97E633505 (118 samples, 0.04%)</title><rect x="0.9144%" y="7253" width="0.0422%" height="15" fill="rgb(222,165,49)" fg:x="2559" fg:w="118"/><text x="1.1644%" y="7263.50"></text></g><g><title>`0x7FF97E6322C7 (152 samples, 0.05%)</title><rect x="0.9134%" y="7269" width="0.0543%" height="15" fill="rgb(219,113,52)" fg:x="2556" fg:w="152"/><text x="1.1634%" y="7279.50"></text></g><g><title>`0x7FF97E63218A (160 samples, 0.06%)</title><rect x="0.9123%" y="7285" width="0.0572%" height="15" fill="rgb(214,7,15)" fg:x="2553" fg:w="160"/><text x="1.1623%" y="7295.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (187 samples, 0.07%)</title><rect x="0.9048%" y="7333" width="0.0668%" height="15" fill="rgb(235,32,4)" fg:x="2532" fg:w="187"/><text x="1.1548%" y="7343.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (187 samples, 0.07%)</title><rect x="0.9048%" y="7317" width="0.0668%" height="15" fill="rgb(238,90,54)" fg:x="2532" fg:w="187"/><text x="1.1548%" y="7327.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (187 samples, 0.07%)</title><rect x="0.9048%" y="7301" width="0.0668%" height="15" fill="rgb(213,208,19)" fg:x="2532" fg:w="187"/><text x="1.1548%" y="7311.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_mut_ptr (207 samples, 0.07%)</title><rect x="0.9005%" y="7477" width="0.0740%" height="15" fill="rgb(233,156,4)" fg:x="2520" fg:w="207"/><text x="1.1505%" y="7487.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (207 samples, 0.07%)</title><rect x="0.9005%" y="7461" width="0.0740%" height="15" fill="rgb(207,194,5)" fg:x="2520" fg:w="207"/><text x="1.1505%" y="7471.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (207 samples, 0.07%)</title><rect x="0.9005%" y="7445" width="0.0740%" height="15" fill="rgb(206,111,30)" fg:x="2520" fg:w="207"/><text x="1.1505%" y="7455.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (207 samples, 0.07%)</title><rect x="0.9005%" y="7429" width="0.0740%" height="15" fill="rgb(243,70,54)" fg:x="2520" fg:w="207"/><text x="1.1505%" y="7439.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::grow_one&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; (207 samples, 0.07%)</title><rect x="0.9005%" y="7413" width="0.0740%" height="15" fill="rgb(242,28,8)" fg:x="2520" fg:w="207"/><text x="1.1505%" y="7423.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (201 samples, 0.07%)</title><rect x="0.9026%" y="7397" width="0.0718%" height="15" fill="rgb(219,106,18)" fg:x="2526" fg:w="201"/><text x="1.1526%" y="7407.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (201 samples, 0.07%)</title><rect x="0.9026%" y="7381" width="0.0718%" height="15" fill="rgb(244,222,10)" fg:x="2526" fg:w="201"/><text x="1.1526%" y="7391.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (199 samples, 0.07%)</title><rect x="0.9034%" y="7365" width="0.0711%" height="15" fill="rgb(236,179,52)" fg:x="2528" fg:w="199"/><text x="1.1534%" y="7375.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (198 samples, 0.07%)</title><rect x="0.9037%" y="7349" width="0.0708%" height="15" fill="rgb(213,23,39)" fg:x="2529" fg:w="198"/><text x="1.1537%" y="7359.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (228 samples, 0.08%)</title><rect x="0.8998%" y="7493" width="0.0815%" height="15" fill="rgb(238,48,10)" fg:x="2518" fg:w="228"/><text x="1.1498%" y="7503.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (53 samples, 0.02%)</title><rect x="0.9927%" y="7429" width="0.0189%" height="15" fill="rgb(251,196,23)" fg:x="2778" fg:w="53"/><text x="1.2427%" y="7439.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (53 samples, 0.02%)</title><rect x="0.9927%" y="7413" width="0.0189%" height="15" fill="rgb(250,152,24)" fg:x="2778" fg:w="53"/><text x="1.2427%" y="7423.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (53 samples, 0.02%)</title><rect x="0.9927%" y="7397" width="0.0189%" height="15" fill="rgb(209,150,17)" fg:x="2778" fg:w="53"/><text x="1.2427%" y="7407.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (53 samples, 0.02%)</title><rect x="0.9927%" y="7381" width="0.0189%" height="15" fill="rgb(234,202,34)" fg:x="2778" fg:w="53"/><text x="1.2427%" y="7391.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$11::clone(alloc::vec::Vec&lt;tuple$ (87 samples, 0.03%)</title><rect x="0.9813%" y="7493" width="0.0311%" height="15" fill="rgb(253,148,53)" fg:x="2746" fg:w="87"/><text x="1.2313%" y="7503.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (87 samples, 0.03%)</title><rect x="0.9813%" y="7477" width="0.0311%" height="15" fill="rgb(218,129,16)" fg:x="2746" fg:w="87"/><text x="1.2313%" y="7487.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$&lt;tuple$ (86 samples, 0.03%)</title><rect x="0.9816%" y="7461" width="0.0307%" height="15" fill="rgb(216,85,19)" fg:x="2747" fg:w="86"/><text x="1.2316%" y="7471.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$&lt;tuple$ (86 samples, 0.03%)</title><rect x="0.9816%" y="7445" width="0.0307%" height="15" fill="rgb(235,228,7)" fg:x="2747" fg:w="86"/><text x="1.2316%" y="7455.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (50 samples, 0.02%)</title><rect x="1.0134%" y="7477" width="0.0179%" height="15" fill="rgb(245,175,0)" fg:x="2836" fg:w="50"/><text x="1.2634%" y="7487.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (50 samples, 0.02%)</title><rect x="1.0134%" y="7461" width="0.0179%" height="15" fill="rgb(208,168,36)" fg:x="2836" fg:w="50"/><text x="1.2634%" y="7471.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$ (69 samples, 0.02%)</title><rect x="1.0123%" y="7493" width="0.0247%" height="15" fill="rgb(246,171,24)" fg:x="2833" fg:w="69"/><text x="1.2623%" y="7503.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, core::ops::range::Range (32 samples, 0.01%)</title><rect x="1.0370%" y="7493" width="0.0114%" height="15" fill="rgb(215,142,24)" fg:x="2902" fg:w="32"/><text x="1.2870%" y="7503.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (29 samples, 0.01%)</title><rect x="1.0381%" y="7477" width="0.0104%" height="15" fill="rgb(250,187,7)" fg:x="2905" fg:w="29"/><text x="1.2881%" y="7487.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (29 samples, 0.01%)</title><rect x="1.0381%" y="7461" width="0.0104%" height="15" fill="rgb(228,66,33)" fg:x="2905" fg:w="29"/><text x="1.2881%" y="7471.50"></text></g><g><title>`0x7FF97E62AFF1 (81 samples, 0.03%)</title><rect x="1.0527%" y="7397" width="0.0289%" height="15" fill="rgb(234,215,21)" fg:x="2946" fg:w="81"/><text x="1.3027%" y="7407.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;tuple$ (96 samples, 0.03%)</title><rect x="1.0484%" y="7493" width="0.0343%" height="15" fill="rgb(222,191,20)" fg:x="2934" fg:w="96"/><text x="1.2984%" y="7503.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (96 samples, 0.03%)</title><rect x="1.0484%" y="7477" width="0.0343%" height="15" fill="rgb(245,79,54)" fg:x="2934" fg:w="96"/><text x="1.2984%" y="7487.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (96 samples, 0.03%)</title><rect x="1.0484%" y="7461" width="0.0343%" height="15" fill="rgb(240,10,37)" fg:x="2934" fg:w="96"/><text x="1.2984%" y="7471.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (95 samples, 0.03%)</title><rect x="1.0488%" y="7445" width="0.0339%" height="15" fill="rgb(214,192,32)" fg:x="2935" fg:w="95"/><text x="1.2988%" y="7455.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (95 samples, 0.03%)</title><rect x="1.0488%" y="7429" width="0.0339%" height="15" fill="rgb(209,36,54)" fg:x="2935" fg:w="95"/><text x="1.2988%" y="7439.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (95 samples, 0.03%)</title><rect x="1.0488%" y="7413" width="0.0339%" height="15" fill="rgb(220,10,11)" fg:x="2935" fg:w="95"/><text x="1.2988%" y="7423.50"></text></g><g><title>`0x7FF97E62DBBF (29 samples, 0.01%)</title><rect x="1.1810%" y="7173" width="0.0104%" height="15" fill="rgb(221,106,17)" fg:x="3305" fg:w="29"/><text x="1.4310%" y="7183.50"></text></g><g><title>`0x7FF97E62CC9A (104 samples, 0.04%)</title><rect x="1.1592%" y="7189" width="0.0372%" height="15" fill="rgb(251,142,44)" fg:x="3244" fg:w="104"/><text x="1.4092%" y="7199.50"></text></g><g><title>`0x7FF97E633505 (151 samples, 0.05%)</title><rect x="1.1435%" y="7205" width="0.0540%" height="15" fill="rgb(238,13,15)" fg:x="3200" fg:w="151"/><text x="1.3935%" y="7215.50"></text></g><g><title>`0x7FF97E633550 (29 samples, 0.01%)</title><rect x="1.1978%" y="7205" width="0.0104%" height="15" fill="rgb(208,107,27)" fg:x="3352" fg:w="29"/><text x="1.4478%" y="7215.50"></text></g><g><title>`0x7FF97E6322C7 (200 samples, 0.07%)</title><rect x="1.1421%" y="7221" width="0.0715%" height="15" fill="rgb(205,136,37)" fg:x="3196" fg:w="200"/><text x="1.3921%" y="7231.50"></text></g><g><title>`0x7FF97E63218A (223 samples, 0.08%)</title><rect x="1.1399%" y="7237" width="0.0797%" height="15" fill="rgb(250,205,27)" fg:x="3190" fg:w="223"/><text x="1.3899%" y="7247.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (265 samples, 0.09%)</title><rect x="1.1288%" y="7285" width="0.0947%" height="15" fill="rgb(210,80,43)" fg:x="3159" fg:w="265"/><text x="1.3788%" y="7295.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (265 samples, 0.09%)</title><rect x="1.1288%" y="7269" width="0.0947%" height="15" fill="rgb(247,160,36)" fg:x="3159" fg:w="265"/><text x="1.3788%" y="7279.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (265 samples, 0.09%)</title><rect x="1.1288%" y="7253" width="0.0947%" height="15" fill="rgb(234,13,49)" fg:x="3159" fg:w="265"/><text x="1.3788%" y="7263.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_mut_ptr (302 samples, 0.11%)</title><rect x="1.1206%" y="7429" width="0.1079%" height="15" fill="rgb(234,122,0)" fg:x="3136" fg:w="302"/><text x="1.3706%" y="7439.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (302 samples, 0.11%)</title><rect x="1.1206%" y="7413" width="0.1079%" height="15" fill="rgb(207,146,38)" fg:x="3136" fg:w="302"/><text x="1.3706%" y="7423.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (302 samples, 0.11%)</title><rect x="1.1206%" y="7397" width="0.1079%" height="15" fill="rgb(207,177,25)" fg:x="3136" fg:w="302"/><text x="1.3706%" y="7407.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (302 samples, 0.11%)</title><rect x="1.1206%" y="7381" width="0.1079%" height="15" fill="rgb(211,178,42)" fg:x="3136" fg:w="302"/><text x="1.3706%" y="7391.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::grow_one&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; (302 samples, 0.11%)</title><rect x="1.1206%" y="7365" width="0.1079%" height="15" fill="rgb(230,69,54)" fg:x="3136" fg:w="302"/><text x="1.3706%" y="7375.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (294 samples, 0.11%)</title><rect x="1.1235%" y="7349" width="0.1051%" height="15" fill="rgb(214,135,41)" fg:x="3144" fg:w="294"/><text x="1.3735%" y="7359.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (292 samples, 0.10%)</title><rect x="1.1242%" y="7333" width="0.1043%" height="15" fill="rgb(237,67,25)" fg:x="3146" fg:w="292"/><text x="1.3742%" y="7343.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (289 samples, 0.10%)</title><rect x="1.1253%" y="7317" width="0.1033%" height="15" fill="rgb(222,189,50)" fg:x="3149" fg:w="289"/><text x="1.3753%" y="7327.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (287 samples, 0.10%)</title><rect x="1.1260%" y="7301" width="0.1026%" height="15" fill="rgb(245,148,34)" fg:x="3151" fg:w="287"/><text x="1.3760%" y="7311.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (342 samples, 0.12%)</title><rect x="1.1206%" y="7445" width="0.1222%" height="15" fill="rgb(222,29,6)" fg:x="3136" fg:w="342"/><text x="1.3706%" y="7455.50"></text></g><g><title>neural_network.exe`core::ptr::write(tuple$&lt;usize,usize&gt;*, tuple$ (40 samples, 0.01%)</title><rect x="1.2285%" y="7429" width="0.0143%" height="15" fill="rgb(221,189,43)" fg:x="3438" fg:w="40"/><text x="1.4785%" y="7439.50"></text></g><g><title>`0x7FF968D51381 (32 samples, 0.01%)</title><rect x="1.2450%" y="7381" width="0.0114%" height="15" fill="rgb(207,36,27)" fg:x="3484" fg:w="32"/><text x="1.4950%" y="7391.50"></text></g><g><title>`0x7FF97E62CC9A (28 samples, 0.01%)</title><rect x="1.2693%" y="7317" width="0.0100%" height="15" fill="rgb(217,90,24)" fg:x="3552" fg:w="28"/><text x="1.5193%" y="7327.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$11::clone(alloc::vec::Vec&lt;tuple$ (114 samples, 0.04%)</title><rect x="1.2428%" y="7445" width="0.0407%" height="15" fill="rgb(224,66,35)" fg:x="3478" fg:w="114"/><text x="1.4928%" y="7455.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (114 samples, 0.04%)</title><rect x="1.2428%" y="7429" width="0.0407%" height="15" fill="rgb(221,13,50)" fg:x="3478" fg:w="114"/><text x="1.4928%" y="7439.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$&lt;tuple$ (113 samples, 0.04%)</title><rect x="1.2432%" y="7413" width="0.0404%" height="15" fill="rgb(236,68,49)" fg:x="3479" fg:w="113"/><text x="1.4932%" y="7423.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$&lt;tuple$ (113 samples, 0.04%)</title><rect x="1.2432%" y="7397" width="0.0404%" height="15" fill="rgb(229,146,28)" fg:x="3479" fg:w="113"/><text x="1.4932%" y="7407.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (66 samples, 0.02%)</title><rect x="1.2600%" y="7381" width="0.0236%" height="15" fill="rgb(225,31,38)" fg:x="3526" fg:w="66"/><text x="1.5100%" y="7391.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (66 samples, 0.02%)</title><rect x="1.2600%" y="7365" width="0.0236%" height="15" fill="rgb(250,208,3)" fg:x="3526" fg:w="66"/><text x="1.5100%" y="7375.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (66 samples, 0.02%)</title><rect x="1.2600%" y="7349" width="0.0236%" height="15" fill="rgb(246,54,23)" fg:x="3526" fg:w="66"/><text x="1.5100%" y="7359.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (66 samples, 0.02%)</title><rect x="1.2600%" y="7333" width="0.0236%" height="15" fill="rgb(243,76,11)" fg:x="3526" fg:w="66"/><text x="1.5100%" y="7343.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (59 samples, 0.02%)</title><rect x="1.2864%" y="7429" width="0.0211%" height="15" fill="rgb(245,21,50)" fg:x="3600" fg:w="59"/><text x="1.5364%" y="7439.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (59 samples, 0.02%)</title><rect x="1.2864%" y="7413" width="0.0211%" height="15" fill="rgb(228,9,43)" fg:x="3600" fg:w="59"/><text x="1.5364%" y="7423.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$ (91 samples, 0.03%)</title><rect x="1.2836%" y="7445" width="0.0325%" height="15" fill="rgb(208,100,47)" fg:x="3592" fg:w="91"/><text x="1.5336%" y="7455.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, core::ops::range::Range (62 samples, 0.02%)</title><rect x="1.3161%" y="7445" width="0.0222%" height="15" fill="rgb(232,26,8)" fg:x="3683" fg:w="62"/><text x="1.5661%" y="7455.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (55 samples, 0.02%)</title><rect x="1.3186%" y="7429" width="0.0197%" height="15" fill="rgb(216,166,38)" fg:x="3690" fg:w="55"/><text x="1.5686%" y="7439.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (55 samples, 0.02%)</title><rect x="1.3186%" y="7413" width="0.0197%" height="15" fill="rgb(251,202,51)" fg:x="3690" fg:w="55"/><text x="1.5686%" y="7423.50"></text></g><g><title>`0x7FF97E62AFF1 (124 samples, 0.04%)</title><rect x="1.3465%" y="7349" width="0.0443%" height="15" fill="rgb(254,216,34)" fg:x="3768" fg:w="124"/><text x="1.5965%" y="7359.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;tuple$ (151 samples, 0.05%)</title><rect x="1.3382%" y="7445" width="0.0540%" height="15" fill="rgb(251,32,27)" fg:x="3745" fg:w="151"/><text x="1.5882%" y="7455.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (151 samples, 0.05%)</title><rect x="1.3382%" y="7429" width="0.0540%" height="15" fill="rgb(208,127,28)" fg:x="3745" fg:w="151"/><text x="1.5882%" y="7439.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (151 samples, 0.05%)</title><rect x="1.3382%" y="7413" width="0.0540%" height="15" fill="rgb(224,137,22)" fg:x="3745" fg:w="151"/><text x="1.5882%" y="7423.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (149 samples, 0.05%)</title><rect x="1.3389%" y="7397" width="0.0532%" height="15" fill="rgb(254,70,32)" fg:x="3747" fg:w="149"/><text x="1.5889%" y="7407.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (149 samples, 0.05%)</title><rect x="1.3389%" y="7381" width="0.0532%" height="15" fill="rgb(229,75,37)" fg:x="3747" fg:w="149"/><text x="1.5889%" y="7391.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (149 samples, 0.05%)</title><rect x="1.3389%" y="7365" width="0.0532%" height="15" fill="rgb(252,64,23)" fg:x="3747" fg:w="149"/><text x="1.5889%" y="7375.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place (33 samples, 0.01%)</title><rect x="1.3922%" y="7445" width="0.0118%" height="15" fill="rgb(232,162,48)" fg:x="3896" fg:w="33"/><text x="1.6422%" y="7455.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (33 samples, 0.01%)</title><rect x="1.3922%" y="7429" width="0.0118%" height="15" fill="rgb(246,160,12)" fg:x="3896" fg:w="33"/><text x="1.6422%" y="7439.50"></text></g><g><title>neural_network.exe`alloc::rc::impl$30::drop(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (33 samples, 0.01%)</title><rect x="1.3922%" y="7413" width="0.0118%" height="15" fill="rgb(247,166,0)" fg:x="3896" fg:w="33"/><text x="1.6422%" y="7423.50"></text></g><g><title>neural_network.exe`alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;::inner (33 samples, 0.01%)</title><rect x="1.3922%" y="7397" width="0.0118%" height="15" fill="rgb(249,219,21)" fg:x="3896" fg:w="33"/><text x="1.6422%" y="7407.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;alloc::rc::RcBox&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt; &gt; &gt;::as_ref (33 samples, 0.01%)</title><rect x="1.3922%" y="7381" width="0.0118%" height="15" fill="rgb(205,209,3)" fg:x="3896" fg:w="33"/><text x="1.6422%" y="7391.50"></text></g><g><title>neural_network.exe`rand::seq::impl$0::shuffle&lt;tuple$&lt;usize,usize&gt;,rand::rngs::thread::ThreadRng&gt;(ref_mut$&lt;slice2$&lt;tuple$ (33 samples, 0.01%)</title><rect x="1.3922%" y="7365" width="0.0118%" height="15" fill="rgb(243,44,1)" fg:x="3896" fg:w="33"/><text x="1.6422%" y="7375.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::contains(ref$&lt;slice2$&lt;tuple$&lt;usize,usize&gt; &gt; &gt;, tuple$ (34 samples, 0.01%)</title><rect x="1.4040%" y="7445" width="0.0121%" height="15" fill="rgb(206,159,16)" fg:x="3929" fg:w="34"/><text x="1.6540%" y="7455.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (34 samples, 0.01%)</title><rect x="1.4040%" y="7429" width="0.0121%" height="15" fill="rgb(244,77,30)" fg:x="3929" fg:w="34"/><text x="1.6540%" y="7439.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (34 samples, 0.01%)</title><rect x="1.4040%" y="7413" width="0.0121%" height="15" fill="rgb(218,69,12)" fg:x="3929" fg:w="34"/><text x="1.6540%" y="7423.50"></text></g><g><title>`0x7FF97E62AFF1 (32 samples, 0.01%)</title><rect x="1.4279%" y="7397" width="0.0114%" height="15" fill="rgb(212,87,7)" fg:x="3996" fg:w="32"/><text x="1.6779%" y="7407.50"></text></g><g><title>`0x7FF97E62DBBF (39 samples, 0.01%)</title><rect x="1.5333%" y="7125" width="0.0139%" height="15" fill="rgb(245,114,25)" fg:x="4291" fg:w="39"/><text x="1.7833%" y="7135.50"></text></g><g><title>`0x7FF97E62CC9A (161 samples, 0.06%)</title><rect x="1.4997%" y="7141" width="0.0575%" height="15" fill="rgb(210,61,42)" fg:x="4197" fg:w="161"/><text x="1.7497%" y="7151.50"></text></g><g><title>`0x7FF97E62DBDD (28 samples, 0.01%)</title><rect x="1.5473%" y="7125" width="0.0100%" height="15" fill="rgb(211,52,33)" fg:x="4330" fg:w="28"/><text x="1.7973%" y="7135.50"></text></g><g><title>`0x7FF97E633505 (231 samples, 0.08%)</title><rect x="1.4769%" y="7157" width="0.0825%" height="15" fill="rgb(234,58,33)" fg:x="4133" fg:w="231"/><text x="1.7269%" y="7167.50"></text></g><g><title>`0x7FF97E696B96 (30 samples, 0.01%)</title><rect x="1.5598%" y="7141" width="0.0107%" height="15" fill="rgb(220,115,36)" fg:x="4365" fg:w="30"/><text x="1.8098%" y="7151.50"></text></g><g><title>`0x7FF97E633550 (43 samples, 0.02%)</title><rect x="1.5594%" y="7157" width="0.0154%" height="15" fill="rgb(243,153,54)" fg:x="4364" fg:w="43"/><text x="1.8094%" y="7167.50"></text></g><g><title>`0x7FF97E6322C7 (298 samples, 0.11%)</title><rect x="1.4747%" y="7173" width="0.1065%" height="15" fill="rgb(251,47,18)" fg:x="4127" fg:w="298"/><text x="1.7247%" y="7183.50"></text></g><g><title>`0x7FF97E63218A (331 samples, 0.12%)</title><rect x="1.4701%" y="7189" width="0.1183%" height="15" fill="rgb(242,102,42)" fg:x="4114" fg:w="331"/><text x="1.7201%" y="7199.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (377 samples, 0.13%)</title><rect x="1.4583%" y="7237" width="0.1347%" height="15" fill="rgb(234,31,38)" fg:x="4081" fg:w="377"/><text x="1.7083%" y="7247.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (377 samples, 0.13%)</title><rect x="1.4583%" y="7221" width="0.1347%" height="15" fill="rgb(221,117,51)" fg:x="4081" fg:w="377"/><text x="1.7083%" y="7231.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (377 samples, 0.13%)</title><rect x="1.4583%" y="7205" width="0.1347%" height="15" fill="rgb(212,20,18)" fg:x="4081" fg:w="377"/><text x="1.7083%" y="7215.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_mut_ptr (441 samples, 0.16%)</title><rect x="1.4415%" y="7381" width="0.1576%" height="15" fill="rgb(245,133,36)" fg:x="4034" fg:w="441"/><text x="1.6915%" y="7391.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (441 samples, 0.16%)</title><rect x="1.4415%" y="7365" width="0.1576%" height="15" fill="rgb(212,6,19)" fg:x="4034" fg:w="441"/><text x="1.6915%" y="7375.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (441 samples, 0.16%)</title><rect x="1.4415%" y="7349" width="0.1576%" height="15" fill="rgb(218,1,36)" fg:x="4034" fg:w="441"/><text x="1.6915%" y="7359.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (441 samples, 0.16%)</title><rect x="1.4415%" y="7333" width="0.1576%" height="15" fill="rgb(246,84,54)" fg:x="4034" fg:w="441"/><text x="1.6915%" y="7343.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::grow_one&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; (440 samples, 0.16%)</title><rect x="1.4419%" y="7317" width="0.1572%" height="15" fill="rgb(242,110,6)" fg:x="4035" fg:w="440"/><text x="1.6919%" y="7327.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (419 samples, 0.15%)</title><rect x="1.4494%" y="7301" width="0.1497%" height="15" fill="rgb(214,47,5)" fg:x="4056" fg:w="419"/><text x="1.6994%" y="7311.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (418 samples, 0.15%)</title><rect x="1.4497%" y="7285" width="0.1494%" height="15" fill="rgb(218,159,25)" fg:x="4057" fg:w="418"/><text x="1.6997%" y="7295.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (406 samples, 0.15%)</title><rect x="1.4540%" y="7269" width="0.1451%" height="15" fill="rgb(215,211,28)" fg:x="4069" fg:w="406"/><text x="1.7040%" y="7279.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (402 samples, 0.14%)</title><rect x="1.4554%" y="7253" width="0.1436%" height="15" fill="rgb(238,59,32)" fg:x="4073" fg:w="402"/><text x="1.7054%" y="7263.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (523 samples, 0.19%)</title><rect x="1.4401%" y="7397" width="0.1869%" height="15" fill="rgb(226,82,3)" fg:x="4030" fg:w="523"/><text x="1.6901%" y="7407.50"></text></g><g><title>neural_network.exe`core::ptr::write(tuple$&lt;usize,usize&gt;*, tuple$ (78 samples, 0.03%)</title><rect x="1.5991%" y="7381" width="0.0279%" height="15" fill="rgb(240,164,32)" fg:x="4475" fg:w="78"/><text x="1.8491%" y="7391.50"></text></g><g><title>`0x7FF968D51381 (55 samples, 0.02%)</title><rect x="1.6284%" y="7333" width="0.0197%" height="15" fill="rgb(232,46,7)" fg:x="4557" fg:w="55"/><text x="1.8784%" y="7343.50"></text></g><g><title>`0x7FF97E62CC9A (46 samples, 0.02%)</title><rect x="1.6609%" y="7269" width="0.0164%" height="15" fill="rgb(229,129,53)" fg:x="4648" fg:w="46"/><text x="1.9109%" y="7279.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (93 samples, 0.03%)</title><rect x="1.6502%" y="7333" width="0.0332%" height="15" fill="rgb(234,188,29)" fg:x="4618" fg:w="93"/><text x="1.9002%" y="7343.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (93 samples, 0.03%)</title><rect x="1.6502%" y="7317" width="0.0332%" height="15" fill="rgb(246,141,4)" fg:x="4618" fg:w="93"/><text x="1.9002%" y="7327.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (93 samples, 0.03%)</title><rect x="1.6502%" y="7301" width="0.0332%" height="15" fill="rgb(229,23,39)" fg:x="4618" fg:w="93"/><text x="1.9002%" y="7311.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (93 samples, 0.03%)</title><rect x="1.6502%" y="7285" width="0.0332%" height="15" fill="rgb(206,12,3)" fg:x="4618" fg:w="93"/><text x="1.9002%" y="7295.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$11::clone(alloc::vec::Vec&lt;tuple$ (158 samples, 0.06%)</title><rect x="1.6273%" y="7397" width="0.0565%" height="15" fill="rgb(252,226,20)" fg:x="4554" fg:w="158"/><text x="1.8773%" y="7407.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (158 samples, 0.06%)</title><rect x="1.6273%" y="7381" width="0.0565%" height="15" fill="rgb(216,123,35)" fg:x="4554" fg:w="158"/><text x="1.8773%" y="7391.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$&lt;tuple$ (158 samples, 0.06%)</title><rect x="1.6273%" y="7365" width="0.0565%" height="15" fill="rgb(212,68,40)" fg:x="4554" fg:w="158"/><text x="1.8773%" y="7375.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$&lt;tuple$ (158 samples, 0.06%)</title><rect x="1.6273%" y="7349" width="0.0565%" height="15" fill="rgb(254,125,32)" fg:x="4554" fg:w="158"/><text x="1.8773%" y="7359.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (106 samples, 0.04%)</title><rect x="1.6863%" y="7381" width="0.0379%" height="15" fill="rgb(253,97,22)" fg:x="4719" fg:w="106"/><text x="1.9363%" y="7391.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (106 samples, 0.04%)</title><rect x="1.6863%" y="7365" width="0.0379%" height="15" fill="rgb(241,101,14)" fg:x="4719" fg:w="106"/><text x="1.9363%" y="7375.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$ (137 samples, 0.05%)</title><rect x="1.6838%" y="7397" width="0.0490%" height="15" fill="rgb(238,103,29)" fg:x="4712" fg:w="137"/><text x="1.9338%" y="7407.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, core::ops::range::Range (84 samples, 0.03%)</title><rect x="1.7327%" y="7397" width="0.0300%" height="15" fill="rgb(233,195,47)" fg:x="4849" fg:w="84"/><text x="1.9827%" y="7407.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (78 samples, 0.03%)</title><rect x="1.7349%" y="7381" width="0.0279%" height="15" fill="rgb(246,218,30)" fg:x="4855" fg:w="78"/><text x="1.9849%" y="7391.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (78 samples, 0.03%)</title><rect x="1.7349%" y="7365" width="0.0279%" height="15" fill="rgb(219,145,47)" fg:x="4855" fg:w="78"/><text x="1.9849%" y="7375.50"></text></g><g><title>`0x7FF97E62AFF1 (132 samples, 0.05%)</title><rect x="1.7760%" y="7301" width="0.0472%" height="15" fill="rgb(243,12,26)" fg:x="4970" fg:w="132"/><text x="2.0260%" y="7311.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (172 samples, 0.06%)</title><rect x="1.7638%" y="7333" width="0.0615%" height="15" fill="rgb(214,87,16)" fg:x="4936" fg:w="172"/><text x="2.0138%" y="7343.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (172 samples, 0.06%)</title><rect x="1.7638%" y="7317" width="0.0615%" height="15" fill="rgb(208,99,42)" fg:x="4936" fg:w="172"/><text x="2.0138%" y="7327.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;tuple$ (178 samples, 0.06%)</title><rect x="1.7627%" y="7397" width="0.0636%" height="15" fill="rgb(253,99,2)" fg:x="4933" fg:w="178"/><text x="2.0127%" y="7407.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (178 samples, 0.06%)</title><rect x="1.7627%" y="7381" width="0.0636%" height="15" fill="rgb(220,168,23)" fg:x="4933" fg:w="178"/><text x="2.0127%" y="7391.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (178 samples, 0.06%)</title><rect x="1.7627%" y="7365" width="0.0636%" height="15" fill="rgb(242,38,24)" fg:x="4933" fg:w="178"/><text x="2.0127%" y="7375.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (175 samples, 0.06%)</title><rect x="1.7638%" y="7349" width="0.0625%" height="15" fill="rgb(225,182,9)" fg:x="4936" fg:w="175"/><text x="2.0138%" y="7359.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place (48 samples, 0.02%)</title><rect x="1.8264%" y="7397" width="0.0172%" height="15" fill="rgb(243,178,37)" fg:x="5111" fg:w="48"/><text x="2.0764%" y="7407.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (48 samples, 0.02%)</title><rect x="1.8264%" y="7381" width="0.0172%" height="15" fill="rgb(232,139,19)" fg:x="5111" fg:w="48"/><text x="2.0764%" y="7391.50"></text></g><g><title>neural_network.exe`alloc::rc::impl$30::drop(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (48 samples, 0.02%)</title><rect x="1.8264%" y="7365" width="0.0172%" height="15" fill="rgb(225,201,24)" fg:x="5111" fg:w="48"/><text x="2.0764%" y="7375.50"></text></g><g><title>neural_network.exe`alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;::inner (48 samples, 0.02%)</title><rect x="1.8264%" y="7349" width="0.0172%" height="15" fill="rgb(221,47,46)" fg:x="5111" fg:w="48"/><text x="2.0764%" y="7359.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;alloc::rc::RcBox&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt; &gt; &gt;::as_ref (48 samples, 0.02%)</title><rect x="1.8264%" y="7333" width="0.0172%" height="15" fill="rgb(249,23,13)" fg:x="5111" fg:w="48"/><text x="2.0764%" y="7343.50"></text></g><g><title>neural_network.exe`rand::seq::impl$0::shuffle&lt;tuple$&lt;usize,usize&gt;,rand::rngs::thread::ThreadRng&gt;(ref_mut$&lt;slice2$&lt;tuple$ (48 samples, 0.02%)</title><rect x="1.8264%" y="7317" width="0.0172%" height="15" fill="rgb(219,9,5)" fg:x="5111" fg:w="48"/><text x="2.0764%" y="7327.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::contains(ref$&lt;slice2$&lt;tuple$&lt;usize,usize&gt; &gt; &gt;, tuple$ (64 samples, 0.02%)</title><rect x="1.8435%" y="7397" width="0.0229%" height="15" fill="rgb(254,171,16)" fg:x="5159" fg:w="64"/><text x="2.0935%" y="7407.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (64 samples, 0.02%)</title><rect x="1.8435%" y="7381" width="0.0229%" height="15" fill="rgb(230,171,20)" fg:x="5159" fg:w="64"/><text x="2.0935%" y="7391.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (64 samples, 0.02%)</title><rect x="1.8435%" y="7365" width="0.0229%" height="15" fill="rgb(210,71,41)" fg:x="5159" fg:w="64"/><text x="2.0935%" y="7375.50"></text></g><g><title>`0x7FF97E62AFF1 (55 samples, 0.02%)</title><rect x="1.8889%" y="7349" width="0.0197%" height="15" fill="rgb(206,173,20)" fg:x="5286" fg:w="55"/><text x="2.1389%" y="7359.50"></text></g><g><title>`0x7FF97E62CC9A (75 samples, 0.03%)</title><rect x="1.9328%" y="7141" width="0.0268%" height="15" fill="rgb(233,88,34)" fg:x="5409" fg:w="75"/><text x="2.1828%" y="7151.50"></text></g><g><title>`0x7FF97E62DBBF (73 samples, 0.03%)</title><rect x="2.0479%" y="7077" width="0.0261%" height="15" fill="rgb(223,209,46)" fg:x="5731" fg:w="73"/><text x="2.2979%" y="7087.50"></text></g><g><title>`0x7FF97E631B1F (34 samples, 0.01%)</title><rect x="2.0618%" y="7061" width="0.0121%" height="15" fill="rgb(250,43,18)" fg:x="5770" fg:w="34"/><text x="2.3118%" y="7071.50"></text></g><g><title>`0x7FF97E62CC9A (206 samples, 0.07%)</title><rect x="2.0125%" y="7093" width="0.0736%" height="15" fill="rgb(208,13,10)" fg:x="5632" fg:w="206"/><text x="2.2625%" y="7103.50"></text></g><g><title>`0x7FF97E62DBDD (34 samples, 0.01%)</title><rect x="2.0740%" y="7077" width="0.0121%" height="15" fill="rgb(212,200,36)" fg:x="5804" fg:w="34"/><text x="2.3240%" y="7087.50"></text></g><g><title>`0x7FF97E633505 (321 samples, 0.11%)</title><rect x="1.9743%" y="7109" width="0.1147%" height="15" fill="rgb(225,90,30)" fg:x="5525" fg:w="321"/><text x="2.2243%" y="7119.50"></text></g><g><title>`0x7FF97E696B96 (49 samples, 0.02%)</title><rect x="2.0890%" y="7093" width="0.0175%" height="15" fill="rgb(236,182,39)" fg:x="5846" fg:w="49"/><text x="2.3390%" y="7103.50"></text></g><g><title>`0x7FF97E633550 (63 samples, 0.02%)</title><rect x="2.0890%" y="7109" width="0.0225%" height="15" fill="rgb(212,144,35)" fg:x="5846" fg:w="63"/><text x="2.3390%" y="7119.50"></text></g><g><title>`0x7FF97E633562 (34 samples, 0.01%)</title><rect x="2.1115%" y="7109" width="0.0121%" height="15" fill="rgb(228,63,44)" fg:x="5909" fg:w="34"/><text x="2.3615%" y="7119.50"></text></g><g><title>`0x7FF97E6322C7 (432 samples, 0.15%)</title><rect x="1.9696%" y="7125" width="0.1544%" height="15" fill="rgb(228,109,6)" fg:x="5512" fg:w="432"/><text x="2.2196%" y="7135.50"></text></g><g><title>`0x7FF97E63218A (467 samples, 0.17%)</title><rect x="1.9643%" y="7141" width="0.1669%" height="15" fill="rgb(238,117,24)" fg:x="5497" fg:w="467"/><text x="2.2143%" y="7151.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (587 samples, 0.21%)</title><rect x="1.9286%" y="7189" width="0.2098%" height="15" fill="rgb(242,26,26)" fg:x="5397" fg:w="587"/><text x="2.1786%" y="7199.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (587 samples, 0.21%)</title><rect x="1.9286%" y="7173" width="0.2098%" height="15" fill="rgb(221,92,48)" fg:x="5397" fg:w="587"/><text x="2.1786%" y="7183.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (587 samples, 0.21%)</title><rect x="1.9286%" y="7157" width="0.2098%" height="15" fill="rgb(209,209,32)" fg:x="5397" fg:w="587"/><text x="2.1786%" y="7167.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_mut_ptr (663 samples, 0.24%)</title><rect x="1.9096%" y="7333" width="0.2369%" height="15" fill="rgb(221,70,22)" fg:x="5344" fg:w="663"/><text x="2.1596%" y="7343.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (662 samples, 0.24%)</title><rect x="1.9100%" y="7317" width="0.2366%" height="15" fill="rgb(248,145,5)" fg:x="5345" fg:w="662"/><text x="2.1600%" y="7327.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (662 samples, 0.24%)</title><rect x="1.9100%" y="7301" width="0.2366%" height="15" fill="rgb(226,116,26)" fg:x="5345" fg:w="662"/><text x="2.1600%" y="7311.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (662 samples, 0.24%)</title><rect x="1.9100%" y="7285" width="0.2366%" height="15" fill="rgb(244,5,17)" fg:x="5345" fg:w="662"/><text x="2.1600%" y="7295.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::grow_one&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; (662 samples, 0.24%)</title><rect x="1.9100%" y="7269" width="0.2366%" height="15" fill="rgb(252,159,33)" fg:x="5345" fg:w="662"/><text x="2.1600%" y="7279.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (647 samples, 0.23%)</title><rect x="1.9153%" y="7253" width="0.2312%" height="15" fill="rgb(206,71,0)" fg:x="5360" fg:w="647"/><text x="2.1653%" y="7263.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (646 samples, 0.23%)</title><rect x="1.9157%" y="7237" width="0.2308%" height="15" fill="rgb(233,118,54)" fg:x="5361" fg:w="646"/><text x="2.1657%" y="7247.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (632 samples, 0.23%)</title><rect x="1.9207%" y="7221" width="0.2258%" height="15" fill="rgb(234,83,48)" fg:x="5375" fg:w="632"/><text x="2.1707%" y="7231.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (623 samples, 0.22%)</title><rect x="1.9239%" y="7205" width="0.2226%" height="15" fill="rgb(228,3,54)" fg:x="5384" fg:w="623"/><text x="2.1739%" y="7215.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (759 samples, 0.27%)</title><rect x="1.9085%" y="7349" width="0.2712%" height="15" fill="rgb(226,155,13)" fg:x="5341" fg:w="759"/><text x="2.1585%" y="7359.50"></text></g><g><title>neural_network.exe`core::ptr::write(tuple$&lt;usize,usize&gt;*, tuple$ (93 samples, 0.03%)</title><rect x="2.1465%" y="7333" width="0.0332%" height="15" fill="rgb(241,28,37)" fg:x="6007" fg:w="93"/><text x="2.3965%" y="7343.50"></text></g><g><title>`0x7FF968D51381 (89 samples, 0.03%)</title><rect x="2.1837%" y="7285" width="0.0318%" height="15" fill="rgb(233,93,10)" fg:x="6111" fg:w="89"/><text x="2.4337%" y="7295.50"></text></g><g><title>`0x7FF97E62CC9A (68 samples, 0.02%)</title><rect x="2.2412%" y="7221" width="0.0243%" height="15" fill="rgb(225,113,19)" fg:x="6272" fg:w="68"/><text x="2.4912%" y="7231.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (142 samples, 0.05%)</title><rect x="2.2209%" y="7285" width="0.0507%" height="15" fill="rgb(241,2,18)" fg:x="6215" fg:w="142"/><text x="2.4709%" y="7295.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (142 samples, 0.05%)</title><rect x="2.2209%" y="7269" width="0.0507%" height="15" fill="rgb(228,207,21)" fg:x="6215" fg:w="142"/><text x="2.4709%" y="7279.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (142 samples, 0.05%)</title><rect x="2.2209%" y="7253" width="0.0507%" height="15" fill="rgb(213,211,35)" fg:x="6215" fg:w="142"/><text x="2.4709%" y="7263.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (142 samples, 0.05%)</title><rect x="2.2209%" y="7237" width="0.0507%" height="15" fill="rgb(209,83,10)" fg:x="6215" fg:w="142"/><text x="2.4709%" y="7247.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$11::clone(alloc::vec::Vec&lt;tuple$ (256 samples, 0.09%)</title><rect x="2.1808%" y="7349" width="0.0915%" height="15" fill="rgb(209,164,1)" fg:x="6103" fg:w="256"/><text x="2.4308%" y="7359.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (256 samples, 0.09%)</title><rect x="2.1808%" y="7333" width="0.0915%" height="15" fill="rgb(213,184,43)" fg:x="6103" fg:w="256"/><text x="2.4308%" y="7343.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$&lt;tuple$ (255 samples, 0.09%)</title><rect x="2.1812%" y="7317" width="0.0911%" height="15" fill="rgb(231,61,34)" fg:x="6104" fg:w="255"/><text x="2.4312%" y="7327.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$&lt;tuple$ (255 samples, 0.09%)</title><rect x="2.1812%" y="7301" width="0.0911%" height="15" fill="rgb(235,75,3)" fg:x="6104" fg:w="255"/><text x="2.4312%" y="7311.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (116 samples, 0.04%)</title><rect x="2.2795%" y="7333" width="0.0415%" height="15" fill="rgb(220,106,47)" fg:x="6379" fg:w="116"/><text x="2.5295%" y="7343.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (116 samples, 0.04%)</title><rect x="2.2795%" y="7317" width="0.0415%" height="15" fill="rgb(210,196,33)" fg:x="6379" fg:w="116"/><text x="2.5295%" y="7327.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (32 samples, 0.01%)</title><rect x="2.3095%" y="7301" width="0.0114%" height="15" fill="rgb(229,154,42)" fg:x="6463" fg:w="32"/><text x="2.5595%" y="7311.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$ (184 samples, 0.07%)</title><rect x="2.2723%" y="7349" width="0.0658%" height="15" fill="rgb(228,114,26)" fg:x="6359" fg:w="184"/><text x="2.5223%" y="7359.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;tuple$ (48 samples, 0.02%)</title><rect x="2.3209%" y="7333" width="0.0172%" height="15" fill="rgb(208,144,1)" fg:x="6495" fg:w="48"/><text x="2.5709%" y="7343.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;tuple$ (41 samples, 0.01%)</title><rect x="2.3234%" y="7317" width="0.0147%" height="15" fill="rgb(239,112,37)" fg:x="6502" fg:w="41"/><text x="2.5734%" y="7327.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, core::ops::range::Range (129 samples, 0.05%)</title><rect x="2.3381%" y="7349" width="0.0461%" height="15" fill="rgb(210,96,50)" fg:x="6543" fg:w="129"/><text x="2.5881%" y="7359.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (120 samples, 0.04%)</title><rect x="2.3413%" y="7333" width="0.0429%" height="15" fill="rgb(222,178,2)" fg:x="6552" fg:w="120"/><text x="2.5913%" y="7343.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (120 samples, 0.04%)</title><rect x="2.3413%" y="7317" width="0.0429%" height="15" fill="rgb(226,74,18)" fg:x="6552" fg:w="120"/><text x="2.5913%" y="7327.50"></text></g><g><title>`0x7FF97E62BB84 (32 samples, 0.01%)</title><rect x="2.4135%" y="7237" width="0.0114%" height="15" fill="rgb(225,67,54)" fg:x="6754" fg:w="32"/><text x="2.6635%" y="7247.50"></text></g><g><title>`0x7FF97E62C2B1 (34 samples, 0.01%)</title><rect x="2.4260%" y="7237" width="0.0121%" height="15" fill="rgb(251,92,32)" fg:x="6789" fg:w="34"/><text x="2.6760%" y="7247.50"></text></g><g><title>`0x7FF97E62C38A (33 samples, 0.01%)</title><rect x="2.4395%" y="7237" width="0.0118%" height="15" fill="rgb(228,149,22)" fg:x="6827" fg:w="33"/><text x="2.6895%" y="7247.50"></text></g><g><title>`0x7FF97E62AFF1 (227 samples, 0.08%)</title><rect x="2.4027%" y="7253" width="0.0811%" height="15" fill="rgb(243,54,13)" fg:x="6724" fg:w="227"/><text x="2.6527%" y="7263.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (282 samples, 0.10%)</title><rect x="2.3859%" y="7285" width="0.1008%" height="15" fill="rgb(243,180,28)" fg:x="6677" fg:w="282"/><text x="2.6359%" y="7295.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (282 samples, 0.10%)</title><rect x="2.3859%" y="7269" width="0.1008%" height="15" fill="rgb(208,167,24)" fg:x="6677" fg:w="282"/><text x="2.6359%" y="7279.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;tuple$ (292 samples, 0.10%)</title><rect x="2.3845%" y="7349" width="0.1043%" height="15" fill="rgb(245,73,45)" fg:x="6673" fg:w="292"/><text x="2.6345%" y="7359.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (292 samples, 0.10%)</title><rect x="2.3845%" y="7333" width="0.1043%" height="15" fill="rgb(237,203,48)" fg:x="6673" fg:w="292"/><text x="2.6345%" y="7343.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (292 samples, 0.10%)</title><rect x="2.3845%" y="7317" width="0.1043%" height="15" fill="rgb(211,197,16)" fg:x="6673" fg:w="292"/><text x="2.6345%" y="7327.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (288 samples, 0.10%)</title><rect x="2.3859%" y="7301" width="0.1029%" height="15" fill="rgb(243,99,51)" fg:x="6677" fg:w="288"/><text x="2.6359%" y="7311.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place (85 samples, 0.03%)</title><rect x="2.4889%" y="7349" width="0.0304%" height="15" fill="rgb(215,123,29)" fg:x="6965" fg:w="85"/><text x="2.7389%" y="7359.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (85 samples, 0.03%)</title><rect x="2.4889%" y="7333" width="0.0304%" height="15" fill="rgb(239,186,37)" fg:x="6965" fg:w="85"/><text x="2.7389%" y="7343.50"></text></g><g><title>neural_network.exe`alloc::rc::impl$30::drop(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (85 samples, 0.03%)</title><rect x="2.4889%" y="7317" width="0.0304%" height="15" fill="rgb(252,136,39)" fg:x="6965" fg:w="85"/><text x="2.7389%" y="7327.50"></text></g><g><title>neural_network.exe`alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;::inner (85 samples, 0.03%)</title><rect x="2.4889%" y="7301" width="0.0304%" height="15" fill="rgb(223,213,32)" fg:x="6965" fg:w="85"/><text x="2.7389%" y="7311.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;alloc::rc::RcBox&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt; &gt; &gt;::as_ref (85 samples, 0.03%)</title><rect x="2.4889%" y="7285" width="0.0304%" height="15" fill="rgb(233,115,5)" fg:x="6965" fg:w="85"/><text x="2.7389%" y="7295.50"></text></g><g><title>neural_network.exe`rand::seq::impl$0::shuffle&lt;tuple$&lt;usize,usize&gt;,rand::rngs::thread::ThreadRng&gt;(ref_mut$&lt;slice2$&lt;tuple$ (85 samples, 0.03%)</title><rect x="2.4889%" y="7269" width="0.0304%" height="15" fill="rgb(207,226,44)" fg:x="6965" fg:w="85"/><text x="2.7389%" y="7279.50"></text></g><g><title>neural_network.exe`rand::seq::gen_index (50 samples, 0.02%)</title><rect x="2.5014%" y="7253" width="0.0179%" height="15" fill="rgb(208,126,0)" fg:x="7000" fg:w="50"/><text x="2.7514%" y="7263.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen_range(rand::rngs::thread::ThreadRng*, core::ops::range::Range (49 samples, 0.02%)</title><rect x="2.5017%" y="7237" width="0.0175%" height="15" fill="rgb(244,66,21)" fg:x="7001" fg:w="49"/><text x="2.7517%" y="7247.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$6::sample_single(core::ops::range::Range (49 samples, 0.02%)</title><rect x="2.5017%" y="7221" width="0.0175%" height="15" fill="rgb(222,97,12)" fg:x="7001" fg:w="49"/><text x="2.7517%" y="7231.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single (49 samples, 0.02%)</title><rect x="2.5017%" y="7205" width="0.0175%" height="15" fill="rgb(219,213,19)" fg:x="7001" fg:w="49"/><text x="2.7517%" y="7215.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single_inclusive (49 samples, 0.02%)</title><rect x="2.5017%" y="7189" width="0.0175%" height="15" fill="rgb(252,169,30)" fg:x="7001" fg:w="49"/><text x="2.7517%" y="7199.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen (33 samples, 0.01%)</title><rect x="2.5074%" y="7173" width="0.0118%" height="15" fill="rgb(206,32,51)" fg:x="7017" fg:w="33"/><text x="2.7574%" y="7183.50"></text></g><g><title>neural_network.exe`rand::distributions::integer::impl$2::sample (33 samples, 0.01%)</title><rect x="2.5074%" y="7157" width="0.0118%" height="15" fill="rgb(250,172,42)" fg:x="7017" fg:w="33"/><text x="2.7574%" y="7167.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::impl$1::next_u32 (33 samples, 0.01%)</title><rect x="2.5074%" y="7141" width="0.0118%" height="15" fill="rgb(209,34,43)" fg:x="7017" fg:w="33"/><text x="2.7574%" y="7151.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$1::next_u32(rand::rngs::adapter::reseeding::ReseedingRng (33 samples, 0.01%)</title><rect x="2.5074%" y="7125" width="0.0118%" height="15" fill="rgb(223,11,35)" fg:x="7017" fg:w="33"/><text x="2.7574%" y="7135.50"></text></g><g><title>neural_network.exe`rand_core::block::impl$2::next_u32(rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore (33 samples, 0.01%)</title><rect x="2.5074%" y="7109" width="0.0118%" height="15" fill="rgb(251,219,26)" fg:x="7017" fg:w="33"/><text x="2.7574%" y="7119.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::contains(ref$&lt;slice2$&lt;tuple$&lt;usize,usize&gt; &gt; &gt;, tuple$ (82 samples, 0.03%)</title><rect x="2.5192%" y="7349" width="0.0293%" height="15" fill="rgb(231,119,3)" fg:x="7050" fg:w="82"/><text x="2.7692%" y="7359.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (82 samples, 0.03%)</title><rect x="2.5192%" y="7333" width="0.0293%" height="15" fill="rgb(216,97,11)" fg:x="7050" fg:w="82"/><text x="2.7692%" y="7343.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (82 samples, 0.03%)</title><rect x="2.5192%" y="7317" width="0.0293%" height="15" fill="rgb(223,59,9)" fg:x="7050" fg:w="82"/><text x="2.7692%" y="7327.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (49 samples, 0.02%)</title><rect x="2.5485%" y="7349" width="0.0175%" height="15" fill="rgb(233,93,31)" fg:x="7132" fg:w="49"/><text x="2.7985%" y="7359.50"></text></g><g><title>`0x7FF97E62AFF1 (72 samples, 0.03%)</title><rect x="2.5886%" y="7301" width="0.0257%" height="15" fill="rgb(239,81,33)" fg:x="7244" fg:w="72"/><text x="2.8386%" y="7311.50"></text></g><g><title>`0x7FF97E62D68A (33 samples, 0.01%)</title><rect x="2.6486%" y="7077" width="0.0118%" height="15" fill="rgb(213,120,34)" fg:x="7412" fg:w="33"/><text x="2.8986%" y="7087.50"></text></g><g><title>`0x7FF97E62CC9A (116 samples, 0.04%)</title><rect x="2.6361%" y="7093" width="0.0415%" height="15" fill="rgb(243,49,53)" fg:x="7377" fg:w="116"/><text x="2.8861%" y="7103.50"></text></g><g><title>`0x7FF97E631B1F (31 samples, 0.01%)</title><rect x="2.8062%" y="7013" width="0.0111%" height="15" fill="rgb(247,216,33)" fg:x="7853" fg:w="31"/><text x="3.0562%" y="7023.50"></text></g><g><title>`0x7FF97E62DBBF (61 samples, 0.02%)</title><rect x="2.7958%" y="7029" width="0.0218%" height="15" fill="rgb(226,26,14)" fg:x="7824" fg:w="61"/><text x="3.0458%" y="7039.50"></text></g><g><title>`0x7FF97E62CC9A (249 samples, 0.09%)</title><rect x="2.7444%" y="7045" width="0.0890%" height="15" fill="rgb(215,49,53)" fg:x="7680" fg:w="249"/><text x="2.9944%" y="7055.50"></text></g><g><title>`0x7FF97E62DBDD (44 samples, 0.02%)</title><rect x="2.8176%" y="7029" width="0.0157%" height="15" fill="rgb(245,162,40)" fg:x="7885" fg:w="44"/><text x="3.0676%" y="7039.50"></text></g><g><title>`0x7FF97E633505 (392 samples, 0.14%)</title><rect x="2.6990%" y="7061" width="0.1401%" height="15" fill="rgb(229,68,17)" fg:x="7553" fg:w="392"/><text x="2.9490%" y="7071.50"></text></g><g><title>`0x7FF97E696B96 (56 samples, 0.02%)</title><rect x="2.8391%" y="7045" width="0.0200%" height="15" fill="rgb(213,182,10)" fg:x="7945" fg:w="56"/><text x="3.0891%" y="7055.50"></text></g><g><title>`0x7FF97E633550 (79 samples, 0.03%)</title><rect x="2.8391%" y="7061" width="0.0282%" height="15" fill="rgb(245,125,30)" fg:x="7945" fg:w="79"/><text x="3.0891%" y="7071.50"></text></g><g><title>`0x7FF97E62AFF1 (95 samples, 0.03%)</title><rect x="2.8698%" y="7045" width="0.0339%" height="15" fill="rgb(232,202,2)" fg:x="8031" fg:w="95"/><text x="3.1198%" y="7055.50"></text></g><g><title>`0x7FF97E633562 (103 samples, 0.04%)</title><rect x="2.8676%" y="7061" width="0.0368%" height="15" fill="rgb(237,140,51)" fg:x="8025" fg:w="103"/><text x="3.1176%" y="7071.50"></text></g><g><title>`0x7FF97E6322C7 (606 samples, 0.22%)</title><rect x="2.6908%" y="7077" width="0.2165%" height="15" fill="rgb(236,157,25)" fg:x="7530" fg:w="606"/><text x="2.9408%" y="7087.50"></text></g><g><title>`0x7FF97E63218A (662 samples, 0.24%)</title><rect x="2.6847%" y="7093" width="0.2366%" height="15" fill="rgb(219,209,0)" fg:x="7513" fg:w="662"/><text x="2.9347%" y="7103.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (829 samples, 0.30%)</title><rect x="2.6332%" y="7141" width="0.2962%" height="15" fill="rgb(240,116,54)" fg:x="7369" fg:w="829"/><text x="2.8832%" y="7151.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (829 samples, 0.30%)</title><rect x="2.6332%" y="7125" width="0.2962%" height="15" fill="rgb(216,10,36)" fg:x="7369" fg:w="829"/><text x="2.8832%" y="7135.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (829 samples, 0.30%)</title><rect x="2.6332%" y="7109" width="0.2962%" height="15" fill="rgb(222,72,44)" fg:x="7369" fg:w="829"/><text x="2.8832%" y="7119.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_mut_ptr (905 samples, 0.32%)</title><rect x="2.6164%" y="7285" width="0.3234%" height="15" fill="rgb(232,159,9)" fg:x="7322" fg:w="905"/><text x="2.8664%" y="7295.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (905 samples, 0.32%)</title><rect x="2.6164%" y="7269" width="0.3234%" height="15" fill="rgb(210,39,32)" fg:x="7322" fg:w="905"/><text x="2.8664%" y="7279.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (905 samples, 0.32%)</title><rect x="2.6164%" y="7253" width="0.3234%" height="15" fill="rgb(216,194,45)" fg:x="7322" fg:w="905"/><text x="2.8664%" y="7263.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (905 samples, 0.32%)</title><rect x="2.6164%" y="7237" width="0.3234%" height="15" fill="rgb(218,18,35)" fg:x="7322" fg:w="905"/><text x="2.8664%" y="7247.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::grow_one&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; (903 samples, 0.32%)</title><rect x="2.6171%" y="7221" width="0.3227%" height="15" fill="rgb(207,83,51)" fg:x="7324" fg:w="903"/><text x="2.8671%" y="7231.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (891 samples, 0.32%)</title><rect x="2.6214%" y="7205" width="0.3184%" height="15" fill="rgb(225,63,43)" fg:x="7336" fg:w="891"/><text x="2.8714%" y="7215.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (889 samples, 0.32%)</title><rect x="2.6221%" y="7189" width="0.3177%" height="15" fill="rgb(207,57,36)" fg:x="7338" fg:w="889"/><text x="2.8721%" y="7199.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (881 samples, 0.31%)</title><rect x="2.6250%" y="7173" width="0.3148%" height="15" fill="rgb(216,99,33)" fg:x="7346" fg:w="881"/><text x="2.8750%" y="7183.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (874 samples, 0.31%)</title><rect x="2.6275%" y="7157" width="0.3123%" height="15" fill="rgb(225,42,16)" fg:x="7353" fg:w="874"/><text x="2.8775%" y="7167.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;, alloc::raw_vec::finish_grow::closure_env$0 (29 samples, 0.01%)</title><rect x="2.9295%" y="7141" width="0.0104%" height="15" fill="rgb(220,201,45)" fg:x="8198" fg:w="29"/><text x="3.1795%" y="7151.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (1,035 samples, 0.37%)</title><rect x="2.6150%" y="7301" width="0.3698%" height="15" fill="rgb(225,33,4)" fg:x="7318" fg:w="1035"/><text x="2.8650%" y="7311.50"></text></g><g><title>neural_network.exe`core::ptr::write(tuple$&lt;usize,usize&gt;*, tuple$ (126 samples, 0.05%)</title><rect x="2.9398%" y="7285" width="0.0450%" height="15" fill="rgb(224,33,50)" fg:x="8227" fg:w="126"/><text x="3.1898%" y="7295.50"></text></g><g><title>`0x7FF968D51381 (100 samples, 0.04%)</title><rect x="2.9906%" y="7237" width="0.0357%" height="15" fill="rgb(246,198,51)" fg:x="8369" fg:w="100"/><text x="3.2406%" y="7247.50"></text></g><g><title>`0x7FF97E62DB41 (28 samples, 0.01%)</title><rect x="3.1081%" y="7157" width="0.0100%" height="15" fill="rgb(205,22,4)" fg:x="8698" fg:w="28"/><text x="3.3581%" y="7167.50"></text></g><g><title>`0x7FF97E631B1F (31 samples, 0.01%)</title><rect x="3.1321%" y="7141" width="0.0111%" height="15" fill="rgb(206,3,8)" fg:x="8765" fg:w="31"/><text x="3.3821%" y="7151.50"></text></g><g><title>`0x7FF97E62DBBF (63 samples, 0.02%)</title><rect x="3.1210%" y="7157" width="0.0225%" height="15" fill="rgb(251,23,15)" fg:x="8734" fg:w="63"/><text x="3.3710%" y="7167.50"></text></g><g><title>`0x7FF97E62CC9A (255 samples, 0.09%)</title><rect x="3.0624%" y="7173" width="0.0911%" height="15" fill="rgb(252,88,28)" fg:x="8570" fg:w="255"/><text x="3.3124%" y="7183.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (374 samples, 0.13%)</title><rect x="3.0317%" y="7237" width="0.1336%" height="15" fill="rgb(212,127,14)" fg:x="8484" fg:w="374"/><text x="3.2817%" y="7247.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (374 samples, 0.13%)</title><rect x="3.0317%" y="7221" width="0.1336%" height="15" fill="rgb(247,145,37)" fg:x="8484" fg:w="374"/><text x="3.2817%" y="7231.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (374 samples, 0.13%)</title><rect x="3.0317%" y="7205" width="0.1336%" height="15" fill="rgb(209,117,53)" fg:x="8484" fg:w="374"/><text x="3.2817%" y="7215.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (374 samples, 0.13%)</title><rect x="3.0317%" y="7189" width="0.1336%" height="15" fill="rgb(212,90,42)" fg:x="8484" fg:w="374"/><text x="3.2817%" y="7199.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$11::clone(alloc::vec::Vec&lt;tuple$ (501 samples, 0.18%)</title><rect x="2.9873%" y="7301" width="0.1790%" height="15" fill="rgb(218,164,37)" fg:x="8360" fg:w="501"/><text x="3.2373%" y="7311.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (501 samples, 0.18%)</title><rect x="2.9873%" y="7285" width="0.1790%" height="15" fill="rgb(246,65,34)" fg:x="8360" fg:w="501"/><text x="3.2373%" y="7295.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$&lt;tuple$ (500 samples, 0.18%)</title><rect x="2.9877%" y="7269" width="0.1787%" height="15" fill="rgb(231,100,33)" fg:x="8361" fg:w="500"/><text x="3.2377%" y="7279.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$&lt;tuple$ (500 samples, 0.18%)</title><rect x="2.9877%" y="7253" width="0.1787%" height="15" fill="rgb(228,126,14)" fg:x="8361" fg:w="500"/><text x="3.2377%" y="7263.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (204 samples, 0.07%)</title><rect x="3.1753%" y="7285" width="0.0729%" height="15" fill="rgb(215,173,21)" fg:x="8886" fg:w="204"/><text x="3.4253%" y="7295.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (204 samples, 0.07%)</title><rect x="3.1753%" y="7269" width="0.0729%" height="15" fill="rgb(210,6,40)" fg:x="8886" fg:w="204"/><text x="3.4253%" y="7279.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (44 samples, 0.02%)</title><rect x="3.2325%" y="7253" width="0.0157%" height="15" fill="rgb(212,48,18)" fg:x="9046" fg:w="44"/><text x="3.4825%" y="7263.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$ (299 samples, 0.11%)</title><rect x="3.1664%" y="7301" width="0.1068%" height="15" fill="rgb(230,214,11)" fg:x="8861" fg:w="299"/><text x="3.4164%" y="7311.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;tuple$ (70 samples, 0.03%)</title><rect x="3.2482%" y="7285" width="0.0250%" height="15" fill="rgb(254,105,39)" fg:x="9090" fg:w="70"/><text x="3.4982%" y="7295.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;tuple$ (65 samples, 0.02%)</title><rect x="3.2500%" y="7269" width="0.0232%" height="15" fill="rgb(245,158,5)" fg:x="9095" fg:w="65"/><text x="3.5000%" y="7279.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, core::ops::range::Range (169 samples, 0.06%)</title><rect x="3.2732%" y="7301" width="0.0604%" height="15" fill="rgb(249,208,11)" fg:x="9160" fg:w="169"/><text x="3.5232%" y="7311.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (154 samples, 0.06%)</title><rect x="3.2786%" y="7285" width="0.0550%" height="15" fill="rgb(210,39,28)" fg:x="9175" fg:w="154"/><text x="3.5286%" y="7295.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (154 samples, 0.06%)</title><rect x="3.2786%" y="7269" width="0.0550%" height="15" fill="rgb(211,56,53)" fg:x="9175" fg:w="154"/><text x="3.5286%" y="7279.50"></text></g><g><title>`0x7FF97E62AFE0 (33 samples, 0.01%)</title><rect x="3.3472%" y="7205" width="0.0118%" height="15" fill="rgb(226,201,30)" fg:x="9367" fg:w="33"/><text x="3.5972%" y="7215.50"></text></g><g><title>`0x7FF97E62BB70 (36 samples, 0.01%)</title><rect x="3.3593%" y="7189" width="0.0129%" height="15" fill="rgb(239,101,34)" fg:x="9401" fg:w="36"/><text x="3.6093%" y="7199.50"></text></g><g><title>`0x7FF97E62C2B1 (31 samples, 0.01%)</title><rect x="3.3811%" y="7189" width="0.0111%" height="15" fill="rgb(226,209,5)" fg:x="9462" fg:w="31"/><text x="3.6311%" y="7199.50"></text></g><g><title>`0x7FF97E62C38A (33 samples, 0.01%)</title><rect x="3.3954%" y="7189" width="0.0118%" height="15" fill="rgb(250,105,47)" fg:x="9502" fg:w="33"/><text x="3.6454%" y="7199.50"></text></g><g><title>`0x7FF97E62AFF1 (264 samples, 0.09%)</title><rect x="3.3590%" y="7205" width="0.0943%" height="15" fill="rgb(230,72,3)" fg:x="9400" fg:w="264"/><text x="3.6090%" y="7215.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (342 samples, 0.12%)</title><rect x="3.3358%" y="7237" width="0.1222%" height="15" fill="rgb(232,218,39)" fg:x="9335" fg:w="342"/><text x="3.5858%" y="7247.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (342 samples, 0.12%)</title><rect x="3.3358%" y="7221" width="0.1222%" height="15" fill="rgb(248,166,6)" fg:x="9335" fg:w="342"/><text x="3.5858%" y="7231.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;tuple$ (354 samples, 0.13%)</title><rect x="3.3336%" y="7301" width="0.1265%" height="15" fill="rgb(247,89,20)" fg:x="9329" fg:w="354"/><text x="3.5836%" y="7311.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (354 samples, 0.13%)</title><rect x="3.3336%" y="7285" width="0.1265%" height="15" fill="rgb(248,130,54)" fg:x="9329" fg:w="354"/><text x="3.5836%" y="7295.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (354 samples, 0.13%)</title><rect x="3.3336%" y="7269" width="0.1265%" height="15" fill="rgb(234,196,4)" fg:x="9329" fg:w="354"/><text x="3.5836%" y="7279.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (348 samples, 0.12%)</title><rect x="3.3358%" y="7253" width="0.1244%" height="15" fill="rgb(250,143,31)" fg:x="9335" fg:w="348"/><text x="3.5858%" y="7263.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::swap(ref_mut$&lt;slice2$&lt;tuple$ (39 samples, 0.01%)</title><rect x="3.4630%" y="7205" width="0.0139%" height="15" fill="rgb(211,110,34)" fg:x="9691" fg:w="39"/><text x="3.7130%" y="7215.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place (111 samples, 0.04%)</title><rect x="3.4601%" y="7301" width="0.0397%" height="15" fill="rgb(215,124,48)" fg:x="9683" fg:w="111"/><text x="3.7101%" y="7311.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (111 samples, 0.04%)</title><rect x="3.4601%" y="7285" width="0.0397%" height="15" fill="rgb(216,46,13)" fg:x="9683" fg:w="111"/><text x="3.7101%" y="7295.50"></text></g><g><title>neural_network.exe`alloc::rc::impl$30::drop(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (111 samples, 0.04%)</title><rect x="3.4601%" y="7269" width="0.0397%" height="15" fill="rgb(205,184,25)" fg:x="9683" fg:w="111"/><text x="3.7101%" y="7279.50"></text></g><g><title>neural_network.exe`alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;::inner (110 samples, 0.04%)</title><rect x="3.4605%" y="7253" width="0.0393%" height="15" fill="rgb(228,1,10)" fg:x="9684" fg:w="110"/><text x="3.7105%" y="7263.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;alloc::rc::RcBox&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt; &gt; &gt;::as_ref (110 samples, 0.04%)</title><rect x="3.4605%" y="7237" width="0.0393%" height="15" fill="rgb(213,116,27)" fg:x="9684" fg:w="110"/><text x="3.7105%" y="7247.50"></text></g><g><title>neural_network.exe`rand::seq::impl$0::shuffle&lt;tuple$&lt;usize,usize&gt;,rand::rngs::thread::ThreadRng&gt;(ref_mut$&lt;slice2$&lt;tuple$ (110 samples, 0.04%)</title><rect x="3.4605%" y="7221" width="0.0393%" height="15" fill="rgb(241,95,50)" fg:x="9684" fg:w="110"/><text x="3.7105%" y="7231.50"></text></g><g><title>neural_network.exe`rand::seq::gen_index (64 samples, 0.02%)</title><rect x="3.4769%" y="7205" width="0.0229%" height="15" fill="rgb(238,48,32)" fg:x="9730" fg:w="64"/><text x="3.7269%" y="7215.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen_range(rand::rngs::thread::ThreadRng*, core::ops::range::Range (64 samples, 0.02%)</title><rect x="3.4769%" y="7189" width="0.0229%" height="15" fill="rgb(235,113,49)" fg:x="9730" fg:w="64"/><text x="3.7269%" y="7199.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$6::sample_single(core::ops::range::Range (64 samples, 0.02%)</title><rect x="3.4769%" y="7173" width="0.0229%" height="15" fill="rgb(205,127,43)" fg:x="9730" fg:w="64"/><text x="3.7269%" y="7183.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single (64 samples, 0.02%)</title><rect x="3.4769%" y="7157" width="0.0229%" height="15" fill="rgb(250,162,2)" fg:x="9730" fg:w="64"/><text x="3.7269%" y="7167.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single_inclusive (64 samples, 0.02%)</title><rect x="3.4769%" y="7141" width="0.0229%" height="15" fill="rgb(220,13,41)" fg:x="9730" fg:w="64"/><text x="3.7269%" y="7151.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen (49 samples, 0.02%)</title><rect x="3.4823%" y="7125" width="0.0175%" height="15" fill="rgb(249,221,25)" fg:x="9745" fg:w="49"/><text x="3.7323%" y="7135.50"></text></g><g><title>neural_network.exe`rand::distributions::integer::impl$2::sample (49 samples, 0.02%)</title><rect x="3.4823%" y="7109" width="0.0175%" height="15" fill="rgb(215,208,19)" fg:x="9745" fg:w="49"/><text x="3.7323%" y="7119.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::impl$1::next_u32 (49 samples, 0.02%)</title><rect x="3.4823%" y="7093" width="0.0175%" height="15" fill="rgb(236,175,2)" fg:x="9745" fg:w="49"/><text x="3.7323%" y="7103.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$1::next_u32(rand::rngs::adapter::reseeding::ReseedingRng (49 samples, 0.02%)</title><rect x="3.4823%" y="7077" width="0.0175%" height="15" fill="rgb(241,52,2)" fg:x="9745" fg:w="49"/><text x="3.7323%" y="7087.50"></text></g><g><title>neural_network.exe`rand_core::block::impl$2::next_u32(rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore (49 samples, 0.02%)</title><rect x="3.4823%" y="7061" width="0.0175%" height="15" fill="rgb(248,140,14)" fg:x="9745" fg:w="49"/><text x="3.7323%" y="7071.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::contains(ref$&lt;slice2$&lt;tuple$&lt;usize,usize&gt; &gt; &gt;, tuple$ (109 samples, 0.04%)</title><rect x="3.4998%" y="7301" width="0.0389%" height="15" fill="rgb(253,22,42)" fg:x="9794" fg:w="109"/><text x="3.7498%" y="7311.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (109 samples, 0.04%)</title><rect x="3.4998%" y="7285" width="0.0389%" height="15" fill="rgb(234,61,47)" fg:x="9794" fg:w="109"/><text x="3.7498%" y="7295.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (109 samples, 0.04%)</title><rect x="3.4998%" y="7269" width="0.0389%" height="15" fill="rgb(208,226,15)" fg:x="9794" fg:w="109"/><text x="3.7498%" y="7279.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (64 samples, 0.02%)</title><rect x="3.5387%" y="7301" width="0.0229%" height="15" fill="rgb(217,221,4)" fg:x="9903" fg:w="64"/><text x="3.7887%" y="7311.50"></text></g><g><title>`0x7FF97E62AFF1 (105 samples, 0.04%)</title><rect x="3.5870%" y="7253" width="0.0375%" height="15" fill="rgb(212,174,34)" fg:x="10038" fg:w="105"/><text x="3.8370%" y="7263.50"></text></g><g><title>`0x7FF97E62D68A (32 samples, 0.01%)</title><rect x="3.6784%" y="7029" width="0.0114%" height="15" fill="rgb(253,83,4)" fg:x="10294" fg:w="32"/><text x="3.9284%" y="7039.50"></text></g><g><title>`0x7FF97E62CC9A (99 samples, 0.04%)</title><rect x="3.6684%" y="7045" width="0.0354%" height="15" fill="rgb(250,195,49)" fg:x="10266" fg:w="99"/><text x="3.9184%" y="7055.50"></text></g><g><title>`0x7FF97E65354E (29 samples, 0.01%)</title><rect x="3.8471%" y="6965" width="0.0104%" height="15" fill="rgb(241,192,25)" fg:x="10766" fg:w="29"/><text x="4.0971%" y="6975.50"></text></g><g><title>`0x7FF97E62DB41 (38 samples, 0.01%)</title><rect x="3.8450%" y="6981" width="0.0136%" height="15" fill="rgb(208,124,10)" fg:x="10760" fg:w="38"/><text x="4.0950%" y="6991.50"></text></g><g><title>`0x7FF97E62DBBF (60 samples, 0.02%)</title><rect x="3.8600%" y="6981" width="0.0214%" height="15" fill="rgb(222,33,0)" fg:x="10802" fg:w="60"/><text x="4.1100%" y="6991.50"></text></g><g><title>`0x7FF97E631B1F (32 samples, 0.01%)</title><rect x="3.8700%" y="6965" width="0.0114%" height="15" fill="rgb(234,209,28)" fg:x="10830" fg:w="32"/><text x="4.1200%" y="6975.50"></text></g><g><title>`0x7FF97E62DBDD (49 samples, 0.02%)</title><rect x="3.8814%" y="6981" width="0.0175%" height="15" fill="rgb(224,11,23)" fg:x="10862" fg:w="49"/><text x="4.1314%" y="6991.50"></text></g><g><title>`0x7FF97E62CC9A (291 samples, 0.10%)</title><rect x="3.7953%" y="6997" width="0.1040%" height="15" fill="rgb(232,99,1)" fg:x="10621" fg:w="291"/><text x="4.0453%" y="7007.50"></text></g><g><title>`0x7FF97E633505 (468 samples, 0.17%)</title><rect x="3.7385%" y="7013" width="0.1672%" height="15" fill="rgb(237,95,45)" fg:x="10462" fg:w="468"/><text x="3.9885%" y="7023.50"></text></g><g><title>`0x7FF97E696B96 (103 samples, 0.04%)</title><rect x="3.9068%" y="6997" width="0.0368%" height="15" fill="rgb(208,109,11)" fg:x="10933" fg:w="103"/><text x="4.1568%" y="7007.50"></text></g><g><title>`0x7FF97E633550 (152 samples, 0.05%)</title><rect x="3.9057%" y="7013" width="0.0543%" height="15" fill="rgb(216,190,48)" fg:x="10930" fg:w="152"/><text x="4.1557%" y="7023.50"></text></g><g><title>`0x7FF97E633562 (65 samples, 0.02%)</title><rect x="3.9611%" y="7013" width="0.0232%" height="15" fill="rgb(251,171,36)" fg:x="11085" fg:w="65"/><text x="4.2111%" y="7023.50"></text></g><g><title>`0x7FF97E62AFF1 (61 samples, 0.02%)</title><rect x="3.9625%" y="6997" width="0.0218%" height="15" fill="rgb(230,62,22)" fg:x="11089" fg:w="61"/><text x="4.2125%" y="7007.50"></text></g><g><title>`0x7FF97E6322C7 (731 samples, 0.26%)</title><rect x="3.7252%" y="7029" width="0.2612%" height="15" fill="rgb(225,114,35)" fg:x="10425" fg:w="731"/><text x="3.9752%" y="7039.50"></text></g><g><title>`0x7FF97E63218A (798 samples, 0.29%)</title><rect x="3.7142%" y="7045" width="0.2852%" height="15" fill="rgb(215,118,42)" fg:x="10394" fg:w="798"/><text x="3.9642%" y="7055.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (982 samples, 0.35%)</title><rect x="3.6613%" y="7093" width="0.3509%" height="15" fill="rgb(243,119,21)" fg:x="10246" fg:w="982"/><text x="3.9113%" y="7103.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (982 samples, 0.35%)</title><rect x="3.6613%" y="7077" width="0.3509%" height="15" fill="rgb(252,177,53)" fg:x="10246" fg:w="982"/><text x="3.9113%" y="7087.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (982 samples, 0.35%)</title><rect x="3.6613%" y="7061" width="0.3509%" height="15" fill="rgb(237,209,29)" fg:x="10246" fg:w="982"/><text x="3.9113%" y="7071.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_mut_ptr (1,110 samples, 0.40%)</title><rect x="3.6302%" y="7237" width="0.3966%" height="15" fill="rgb(212,65,23)" fg:x="10159" fg:w="1110"/><text x="3.8802%" y="7247.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (1,108 samples, 0.40%)</title><rect x="3.6309%" y="7221" width="0.3959%" height="15" fill="rgb(230,222,46)" fg:x="10161" fg:w="1108"/><text x="3.8809%" y="7231.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (1,108 samples, 0.40%)</title><rect x="3.6309%" y="7205" width="0.3959%" height="15" fill="rgb(215,135,32)" fg:x="10161" fg:w="1108"/><text x="3.8809%" y="7215.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (1,108 samples, 0.40%)</title><rect x="3.6309%" y="7189" width="0.3959%" height="15" fill="rgb(246,101,22)" fg:x="10161" fg:w="1108"/><text x="3.8809%" y="7199.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::grow_one&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; (1,106 samples, 0.40%)</title><rect x="3.6316%" y="7173" width="0.3952%" height="15" fill="rgb(206,107,13)" fg:x="10163" fg:w="1106"/><text x="3.8816%" y="7183.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (1,076 samples, 0.38%)</title><rect x="3.6423%" y="7157" width="0.3845%" height="15" fill="rgb(250,100,44)" fg:x="10193" fg:w="1076"/><text x="3.8923%" y="7167.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (1,072 samples, 0.38%)</title><rect x="3.6438%" y="7141" width="0.3831%" height="15" fill="rgb(231,147,38)" fg:x="10197" fg:w="1072"/><text x="3.8938%" y="7151.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (1,051 samples, 0.38%)</title><rect x="3.6513%" y="7125" width="0.3756%" height="15" fill="rgb(229,8,40)" fg:x="10218" fg:w="1051"/><text x="3.9013%" y="7135.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (1,037 samples, 0.37%)</title><rect x="3.6563%" y="7109" width="0.3706%" height="15" fill="rgb(221,135,30)" fg:x="10232" fg:w="1037"/><text x="3.9063%" y="7119.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;, alloc::raw_vec::finish_grow::closure_env$0 (41 samples, 0.01%)</title><rect x="4.0122%" y="7093" width="0.0147%" height="15" fill="rgb(249,193,18)" fg:x="11228" fg:w="41"/><text x="4.2622%" y="7103.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (1,279 samples, 0.46%)</title><rect x="3.6270%" y="7253" width="0.4570%" height="15" fill="rgb(209,133,39)" fg:x="10150" fg:w="1279"/><text x="3.8770%" y="7263.50"></text></g><g><title>neural_network.exe`core::ptr::write(tuple$&lt;usize,usize&gt;*, tuple$ (160 samples, 0.06%)</title><rect x="4.0268%" y="7237" width="0.0572%" height="15" fill="rgb(232,100,14)" fg:x="11269" fg:w="160"/><text x="4.2768%" y="7247.50"></text></g><g><title>`0x7FF968D51381 (153 samples, 0.05%)</title><rect x="4.0926%" y="7189" width="0.0547%" height="15" fill="rgb(224,185,1)" fg:x="11453" fg:w="153"/><text x="4.3426%" y="7199.50"></text></g><g><title>`0x7FF97E62D5E2 (29 samples, 0.01%)</title><rect x="4.2209%" y="7109" width="0.0104%" height="15" fill="rgb(223,139,8)" fg:x="11812" fg:w="29"/><text x="4.4709%" y="7119.50"></text></g><g><title>`0x7FF97E62CC9A (155 samples, 0.06%)</title><rect x="4.2023%" y="7125" width="0.0554%" height="15" fill="rgb(232,213,38)" fg:x="11760" fg:w="155"/><text x="4.4523%" y="7135.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (341 samples, 0.12%)</title><rect x="4.1591%" y="7189" width="0.1219%" height="15" fill="rgb(207,94,22)" fg:x="11639" fg:w="341"/><text x="4.4091%" y="7199.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (341 samples, 0.12%)</title><rect x="4.1591%" y="7173" width="0.1219%" height="15" fill="rgb(219,183,54)" fg:x="11639" fg:w="341"/><text x="4.4091%" y="7183.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (341 samples, 0.12%)</title><rect x="4.1591%" y="7157" width="0.1219%" height="15" fill="rgb(216,185,54)" fg:x="11639" fg:w="341"/><text x="4.4091%" y="7167.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (341 samples, 0.12%)</title><rect x="4.1591%" y="7141" width="0.1219%" height="15" fill="rgb(254,217,39)" fg:x="11639" fg:w="341"/><text x="4.4091%" y="7151.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$11::clone(alloc::vec::Vec&lt;tuple$ (548 samples, 0.20%)</title><rect x="4.0869%" y="7253" width="0.1958%" height="15" fill="rgb(240,178,23)" fg:x="11437" fg:w="548"/><text x="4.3369%" y="7263.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (548 samples, 0.20%)</title><rect x="4.0869%" y="7237" width="0.1958%" height="15" fill="rgb(218,11,47)" fg:x="11437" fg:w="548"/><text x="4.3369%" y="7247.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$&lt;tuple$ (547 samples, 0.20%)</title><rect x="4.0872%" y="7221" width="0.1955%" height="15" fill="rgb(218,51,51)" fg:x="11438" fg:w="547"/><text x="4.3372%" y="7231.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$&lt;tuple$ (547 samples, 0.20%)</title><rect x="4.0872%" y="7205" width="0.1955%" height="15" fill="rgb(238,126,27)" fg:x="11438" fg:w="547"/><text x="4.3372%" y="7215.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (286 samples, 0.10%)</title><rect x="4.2931%" y="7237" width="0.1022%" height="15" fill="rgb(249,202,22)" fg:x="12014" fg:w="286"/><text x="4.5431%" y="7247.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (286 samples, 0.10%)</title><rect x="4.2931%" y="7221" width="0.1022%" height="15" fill="rgb(254,195,49)" fg:x="12014" fg:w="286"/><text x="4.5431%" y="7231.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (67 samples, 0.02%)</title><rect x="4.3713%" y="7205" width="0.0239%" height="15" fill="rgb(208,123,14)" fg:x="12233" fg:w="67"/><text x="4.6213%" y="7215.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$ (417 samples, 0.15%)</title><rect x="4.2827%" y="7253" width="0.1490%" height="15" fill="rgb(224,200,8)" fg:x="11985" fg:w="417"/><text x="4.5327%" y="7263.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;tuple$ (102 samples, 0.04%)</title><rect x="4.3953%" y="7237" width="0.0364%" height="15" fill="rgb(217,61,36)" fg:x="12300" fg:w="102"/><text x="4.6453%" y="7247.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;tuple$ (94 samples, 0.03%)</title><rect x="4.3981%" y="7221" width="0.0336%" height="15" fill="rgb(206,35,45)" fg:x="12308" fg:w="94"/><text x="4.6481%" y="7231.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, core::ops::range::Range (246 samples, 0.09%)</title><rect x="4.4317%" y="7253" width="0.0879%" height="15" fill="rgb(217,65,33)" fg:x="12402" fg:w="246"/><text x="4.6817%" y="7263.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (227 samples, 0.08%)</title><rect x="4.4385%" y="7237" width="0.0811%" height="15" fill="rgb(222,158,48)" fg:x="12421" fg:w="227"/><text x="4.6885%" y="7247.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (227 samples, 0.08%)</title><rect x="4.4385%" y="7221" width="0.0811%" height="15" fill="rgb(254,2,54)" fg:x="12421" fg:w="227"/><text x="4.6885%" y="7231.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (33 samples, 0.01%)</title><rect x="4.5078%" y="7205" width="0.0118%" height="15" fill="rgb(250,143,38)" fg:x="12615" fg:w="33"/><text x="4.7578%" y="7215.50"></text></g><g><title>`0x7FF97E62AFE0 (48 samples, 0.02%)</title><rect x="4.5339%" y="7157" width="0.0172%" height="15" fill="rgb(248,25,0)" fg:x="12688" fg:w="48"/><text x="4.7839%" y="7167.50"></text></g><g><title>`0x7FF97E62BB70 (53 samples, 0.02%)</title><rect x="4.5539%" y="7141" width="0.0189%" height="15" fill="rgb(206,152,27)" fg:x="12744" fg:w="53"/><text x="4.8039%" y="7151.50"></text></g><g><title>`0x7FF97E62BB84 (40 samples, 0.01%)</title><rect x="4.5739%" y="7141" width="0.0143%" height="15" fill="rgb(240,77,30)" fg:x="12800" fg:w="40"/><text x="4.8239%" y="7151.50"></text></g><g><title>`0x7FF97E62C2B1 (43 samples, 0.02%)</title><rect x="4.5904%" y="7141" width="0.0154%" height="15" fill="rgb(231,5,3)" fg:x="12846" fg:w="43"/><text x="4.8404%" y="7151.50"></text></g><g><title>`0x7FF97E62C38A (58 samples, 0.02%)</title><rect x="4.6111%" y="7141" width="0.0207%" height="15" fill="rgb(207,226,32)" fg:x="12904" fg:w="58"/><text x="4.8611%" y="7151.50"></text></g><g><title>`0x7FF97E62AFF1 (384 samples, 0.14%)</title><rect x="4.5514%" y="7157" width="0.1372%" height="15" fill="rgb(222,207,47)" fg:x="12737" fg:w="384"/><text x="4.8014%" y="7167.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (486 samples, 0.17%)</title><rect x="4.5210%" y="7189" width="0.1737%" height="15" fill="rgb(229,115,45)" fg:x="12652" fg:w="486"/><text x="4.7710%" y="7199.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (486 samples, 0.17%)</title><rect x="4.5210%" y="7173" width="0.1737%" height="15" fill="rgb(224,191,6)" fg:x="12652" fg:w="486"/><text x="4.7710%" y="7183.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;tuple$ (496 samples, 0.18%)</title><rect x="4.5196%" y="7253" width="0.1772%" height="15" fill="rgb(230,227,24)" fg:x="12648" fg:w="496"/><text x="4.7696%" y="7263.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (496 samples, 0.18%)</title><rect x="4.5196%" y="7237" width="0.1772%" height="15" fill="rgb(228,80,19)" fg:x="12648" fg:w="496"/><text x="4.7696%" y="7247.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (496 samples, 0.18%)</title><rect x="4.5196%" y="7221" width="0.1772%" height="15" fill="rgb(247,229,0)" fg:x="12648" fg:w="496"/><text x="4.7696%" y="7231.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (492 samples, 0.18%)</title><rect x="4.5210%" y="7205" width="0.1758%" height="15" fill="rgb(237,194,15)" fg:x="12652" fg:w="492"/><text x="4.7710%" y="7215.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::swap(ref_mut$&lt;slice2$&lt;tuple$ (39 samples, 0.01%)</title><rect x="4.7040%" y="7157" width="0.0139%" height="15" fill="rgb(219,203,20)" fg:x="13164" fg:w="39"/><text x="4.9540%" y="7167.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place (134 samples, 0.05%)</title><rect x="4.6969%" y="7253" width="0.0479%" height="15" fill="rgb(234,128,8)" fg:x="13144" fg:w="134"/><text x="4.9469%" y="7263.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (134 samples, 0.05%)</title><rect x="4.6969%" y="7237" width="0.0479%" height="15" fill="rgb(248,202,8)" fg:x="13144" fg:w="134"/><text x="4.9469%" y="7247.50"></text></g><g><title>neural_network.exe`alloc::rc::impl$30::drop(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (134 samples, 0.05%)</title><rect x="4.6969%" y="7221" width="0.0479%" height="15" fill="rgb(206,104,37)" fg:x="13144" fg:w="134"/><text x="4.9469%" y="7231.50"></text></g><g><title>neural_network.exe`alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;::inner (134 samples, 0.05%)</title><rect x="4.6969%" y="7205" width="0.0479%" height="15" fill="rgb(223,8,27)" fg:x="13144" fg:w="134"/><text x="4.9469%" y="7215.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;alloc::rc::RcBox&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt; &gt; &gt;::as_ref (132 samples, 0.05%)</title><rect x="4.6976%" y="7189" width="0.0472%" height="15" fill="rgb(216,217,28)" fg:x="13146" fg:w="132"/><text x="4.9476%" y="7199.50"></text></g><g><title>neural_network.exe`rand::seq::impl$0::shuffle&lt;tuple$&lt;usize,usize&gt;,rand::rngs::thread::ThreadRng&gt;(ref_mut$&lt;slice2$&lt;tuple$ (132 samples, 0.05%)</title><rect x="4.6976%" y="7173" width="0.0472%" height="15" fill="rgb(249,199,1)" fg:x="13146" fg:w="132"/><text x="4.9476%" y="7183.50"></text></g><g><title>neural_network.exe`rand::seq::gen_index (75 samples, 0.03%)</title><rect x="4.7179%" y="7157" width="0.0268%" height="15" fill="rgb(240,85,17)" fg:x="13203" fg:w="75"/><text x="4.9679%" y="7167.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen_range(rand::rngs::thread::ThreadRng*, core::ops::range::Range (75 samples, 0.03%)</title><rect x="4.7179%" y="7141" width="0.0268%" height="15" fill="rgb(206,108,45)" fg:x="13203" fg:w="75"/><text x="4.9679%" y="7151.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$6::sample_single(core::ops::range::Range (75 samples, 0.03%)</title><rect x="4.7179%" y="7125" width="0.0268%" height="15" fill="rgb(245,210,41)" fg:x="13203" fg:w="75"/><text x="4.9679%" y="7135.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single (75 samples, 0.03%)</title><rect x="4.7179%" y="7109" width="0.0268%" height="15" fill="rgb(206,13,37)" fg:x="13203" fg:w="75"/><text x="4.9679%" y="7119.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single_inclusive (75 samples, 0.03%)</title><rect x="4.7179%" y="7093" width="0.0268%" height="15" fill="rgb(250,61,18)" fg:x="13203" fg:w="75"/><text x="4.9679%" y="7103.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen (54 samples, 0.02%)</title><rect x="4.7254%" y="7077" width="0.0193%" height="15" fill="rgb(235,172,48)" fg:x="13224" fg:w="54"/><text x="4.9754%" y="7087.50"></text></g><g><title>neural_network.exe`rand::distributions::integer::impl$2::sample (54 samples, 0.02%)</title><rect x="4.7254%" y="7061" width="0.0193%" height="15" fill="rgb(249,201,17)" fg:x="13224" fg:w="54"/><text x="4.9754%" y="7071.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::impl$1::next_u32 (54 samples, 0.02%)</title><rect x="4.7254%" y="7045" width="0.0193%" height="15" fill="rgb(219,208,6)" fg:x="13224" fg:w="54"/><text x="4.9754%" y="7055.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$1::next_u32(rand::rngs::adapter::reseeding::ReseedingRng (54 samples, 0.02%)</title><rect x="4.7254%" y="7029" width="0.0193%" height="15" fill="rgb(248,31,23)" fg:x="13224" fg:w="54"/><text x="4.9754%" y="7039.50"></text></g><g><title>neural_network.exe`rand_core::block::impl$2::next_u32(rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore (54 samples, 0.02%)</title><rect x="4.7254%" y="7013" width="0.0193%" height="15" fill="rgb(245,15,42)" fg:x="13224" fg:w="54"/><text x="4.9754%" y="7023.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::contains(ref$&lt;slice2$&lt;tuple$&lt;usize,usize&gt; &gt; &gt;, tuple$ (163 samples, 0.06%)</title><rect x="4.7447%" y="7253" width="0.0582%" height="15" fill="rgb(222,217,39)" fg:x="13278" fg:w="163"/><text x="4.9947%" y="7263.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (163 samples, 0.06%)</title><rect x="4.7447%" y="7237" width="0.0582%" height="15" fill="rgb(210,219,27)" fg:x="13278" fg:w="163"/><text x="4.9947%" y="7247.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (163 samples, 0.06%)</title><rect x="4.7447%" y="7221" width="0.0582%" height="15" fill="rgb(252,166,36)" fg:x="13278" fg:w="163"/><text x="4.9947%" y="7231.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (81 samples, 0.03%)</title><rect x="4.8030%" y="7253" width="0.0289%" height="15" fill="rgb(245,132,34)" fg:x="13441" fg:w="81"/><text x="5.0530%" y="7263.50"></text></g><g><title>`0x7FF97E62AFF1 (128 samples, 0.05%)</title><rect x="4.8741%" y="7205" width="0.0457%" height="15" fill="rgb(236,54,3)" fg:x="13640" fg:w="128"/><text x="5.1241%" y="7215.50"></text></g><g><title>`0x7FF97E62D68A (58 samples, 0.02%)</title><rect x="4.9956%" y="6981" width="0.0207%" height="15" fill="rgb(241,173,43)" fg:x="13980" fg:w="58"/><text x="5.2456%" y="6991.50"></text></g><g><title>`0x7FF97E62CC9A (159 samples, 0.06%)</title><rect x="4.9781%" y="6997" width="0.0568%" height="15" fill="rgb(215,190,9)" fg:x="13931" fg:w="159"/><text x="5.2281%" y="7007.50"></text></g><g><title>`0x7FF97E62CC4E (29 samples, 0.01%)</title><rect x="5.1492%" y="6949" width="0.0104%" height="15" fill="rgb(242,101,16)" fg:x="14410" fg:w="29"/><text x="5.3992%" y="6959.50"></text></g><g><title>`0x7FF97E65354E (36 samples, 0.01%)</title><rect x="5.2211%" y="6917" width="0.0129%" height="15" fill="rgb(223,190,21)" fg:x="14611" fg:w="36"/><text x="5.4711%" y="6927.50"></text></g><g><title>`0x7FF97E693D45 (33 samples, 0.01%)</title><rect x="5.2221%" y="6901" width="0.0118%" height="15" fill="rgb(215,228,25)" fg:x="14614" fg:w="33"/><text x="5.4721%" y="6911.50"></text></g><g><title>`0x7FF97E62DB41 (46 samples, 0.02%)</title><rect x="5.2200%" y="6933" width="0.0164%" height="15" fill="rgb(225,36,22)" fg:x="14608" fg:w="46"/><text x="5.4700%" y="6943.50"></text></g><g><title>`0x7FF97E631CA3 (30 samples, 0.01%)</title><rect x="5.2547%" y="6901" width="0.0107%" height="15" fill="rgb(251,106,46)" fg:x="14705" fg:w="30"/><text x="5.5047%" y="6911.50"></text></g><g><title>`0x7FF97E631B1F (42 samples, 0.02%)</title><rect x="5.2507%" y="6917" width="0.0150%" height="15" fill="rgb(208,90,1)" fg:x="14694" fg:w="42"/><text x="5.5007%" y="6927.50"></text></g><g><title>`0x7FF97E62DBBF (77 samples, 0.03%)</title><rect x="5.2386%" y="6933" width="0.0275%" height="15" fill="rgb(243,10,4)" fg:x="14660" fg:w="77"/><text x="5.4886%" y="6943.50"></text></g><g><title>`0x7FF97E62DBDD (59 samples, 0.02%)</title><rect x="5.2661%" y="6933" width="0.0211%" height="15" fill="rgb(212,137,27)" fg:x="14737" fg:w="59"/><text x="5.5161%" y="6943.50"></text></g><g><title>`0x7FF97E62CC9A (337 samples, 0.12%)</title><rect x="5.1675%" y="6949" width="0.1204%" height="15" fill="rgb(231,220,49)" fg:x="14461" fg:w="337"/><text x="5.4175%" y="6959.50"></text></g><g><title>`0x7FF97E633505 (610 samples, 0.22%)</title><rect x="5.0810%" y="6965" width="0.2180%" height="15" fill="rgb(237,96,20)" fg:x="14219" fg:w="610"/><text x="5.3310%" y="6975.50"></text></g><g><title>`0x7FF97E696B96 (112 samples, 0.04%)</title><rect x="5.3000%" y="6949" width="0.0400%" height="15" fill="rgb(239,229,30)" fg:x="14832" fg:w="112"/><text x="5.5500%" y="6959.50"></text></g><g><title>`0x7FF97E633550 (166 samples, 0.06%)</title><rect x="5.2993%" y="6965" width="0.0593%" height="15" fill="rgb(219,65,33)" fg:x="14830" fg:w="166"/><text x="5.5493%" y="6975.50"></text></g><g><title>`0x7FF97E69CD55 (40 samples, 0.01%)</title><rect x="5.3915%" y="6933" width="0.0143%" height="15" fill="rgb(243,134,7)" fg:x="15088" fg:w="40"/><text x="5.6415%" y="6943.50"></text></g><g><title>`0x7FF97E633562 (175 samples, 0.06%)</title><rect x="5.3586%" y="6965" width="0.0625%" height="15" fill="rgb(216,177,54)" fg:x="14996" fg:w="175"/><text x="5.6086%" y="6975.50"></text></g><g><title>`0x7FF97E62AFF1 (166 samples, 0.06%)</title><rect x="5.3619%" y="6949" width="0.0593%" height="15" fill="rgb(211,160,20)" fg:x="15005" fg:w="166"/><text x="5.6119%" y="6959.50"></text></g><g><title>`0x7FF97E6322C7 (1,019 samples, 0.36%)</title><rect x="5.0631%" y="6981" width="0.3641%" height="15" fill="rgb(239,85,39)" fg:x="14169" fg:w="1019"/><text x="5.3131%" y="6991.50"></text></g><g><title>`0x7FF97E632312 (33 samples, 0.01%)</title><rect x="5.4383%" y="6981" width="0.0118%" height="15" fill="rgb(232,125,22)" fg:x="15219" fg:w="33"/><text x="5.6883%" y="6991.50"></text></g><g><title>`0x7FF97E63218A (1,128 samples, 0.40%)</title><rect x="5.0478%" y="6997" width="0.4031%" height="15" fill="rgb(244,57,34)" fg:x="14126" fg:w="1128"/><text x="5.2978%" y="7007.50"></text></g><g><title>`0x7FF97E63219E (34 samples, 0.01%)</title><rect x="5.4512%" y="6997" width="0.0121%" height="15" fill="rgb(214,203,32)" fg:x="15255" fg:w="34"/><text x="5.7012%" y="7007.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (1,391 samples, 0.50%)</title><rect x="4.9706%" y="7045" width="0.4971%" height="15" fill="rgb(207,58,43)" fg:x="13910" fg:w="1391"/><text x="5.2206%" y="7055.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (1,391 samples, 0.50%)</title><rect x="4.9706%" y="7029" width="0.4971%" height="15" fill="rgb(215,193,15)" fg:x="13910" fg:w="1391"/><text x="5.2206%" y="7039.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (1,390 samples, 0.50%)</title><rect x="4.9709%" y="7013" width="0.4967%" height="15" fill="rgb(232,15,44)" fg:x="13911" fg:w="1390"/><text x="5.2209%" y="7023.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_mut_ptr (1,570 samples, 0.56%)</title><rect x="4.9241%" y="7189" width="0.5610%" height="15" fill="rgb(212,3,48)" fg:x="13780" fg:w="1570"/><text x="5.1741%" y="7199.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (1,570 samples, 0.56%)</title><rect x="4.9241%" y="7173" width="0.5610%" height="15" fill="rgb(218,128,7)" fg:x="13780" fg:w="1570"/><text x="5.1741%" y="7183.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (1,570 samples, 0.56%)</title><rect x="4.9241%" y="7157" width="0.5610%" height="15" fill="rgb(226,216,39)" fg:x="13780" fg:w="1570"/><text x="5.1741%" y="7167.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (1,570 samples, 0.56%)</title><rect x="4.9241%" y="7141" width="0.5610%" height="15" fill="rgb(243,47,51)" fg:x="13780" fg:w="1570"/><text x="5.1741%" y="7151.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::grow_one&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; (1,570 samples, 0.56%)</title><rect x="4.9241%" y="7125" width="0.5610%" height="15" fill="rgb(241,183,40)" fg:x="13780" fg:w="1570"/><text x="5.1741%" y="7135.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (1,519 samples, 0.54%)</title><rect x="4.9423%" y="7109" width="0.5428%" height="15" fill="rgb(231,217,32)" fg:x="13831" fg:w="1519"/><text x="5.1923%" y="7119.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (1,516 samples, 0.54%)</title><rect x="4.9434%" y="7093" width="0.5417%" height="15" fill="rgb(229,61,38)" fg:x="13834" fg:w="1516"/><text x="5.1934%" y="7103.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (1,484 samples, 0.53%)</title><rect x="4.9549%" y="7077" width="0.5303%" height="15" fill="rgb(225,210,5)" fg:x="13866" fg:w="1484"/><text x="5.2049%" y="7087.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (1,470 samples, 0.53%)</title><rect x="4.9599%" y="7061" width="0.5253%" height="15" fill="rgb(231,79,45)" fg:x="13880" fg:w="1470"/><text x="5.2099%" y="7071.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;, alloc::raw_vec::finish_grow::closure_env$0 (49 samples, 0.02%)</title><rect x="5.4676%" y="7045" width="0.0175%" height="15" fill="rgb(224,100,7)" fg:x="15301" fg:w="49"/><text x="5.7176%" y="7055.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (1,801 samples, 0.64%)</title><rect x="4.9216%" y="7205" width="0.6436%" height="15" fill="rgb(241,198,18)" fg:x="13773" fg:w="1801"/><text x="5.1716%" y="7215.50"></text></g><g><title>neural_network.exe`core::ptr::write(tuple$&lt;usize,usize&gt;*, tuple$ (224 samples, 0.08%)</title><rect x="5.4851%" y="7189" width="0.0800%" height="15" fill="rgb(252,97,53)" fg:x="15350" fg:w="224"/><text x="5.7351%" y="7199.50"></text></g><g><title>`0x7FF968D51381 (144 samples, 0.05%)</title><rect x="5.5755%" y="7141" width="0.0515%" height="15" fill="rgb(220,88,7)" fg:x="15603" fg:w="144"/><text x="5.8255%" y="7151.50"></text></g><g><title>`0x7FF97E65354E (39 samples, 0.01%)</title><rect x="5.7589%" y="7045" width="0.0139%" height="15" fill="rgb(213,176,14)" fg:x="16116" fg:w="39"/><text x="6.0089%" y="7055.50"></text></g><g><title>`0x7FF97E693D45 (32 samples, 0.01%)</title><rect x="5.7614%" y="7029" width="0.0114%" height="15" fill="rgb(246,73,7)" fg:x="16123" fg:w="32"/><text x="6.0114%" y="7039.50"></text></g><g><title>`0x7FF97E62DB41 (43 samples, 0.02%)</title><rect x="5.7585%" y="7061" width="0.0154%" height="15" fill="rgb(245,64,36)" fg:x="16115" fg:w="43"/><text x="6.0085%" y="7071.50"></text></g><g><title>`0x7FF97E631B1F (36 samples, 0.01%)</title><rect x="5.7896%" y="7045" width="0.0129%" height="15" fill="rgb(245,80,10)" fg:x="16202" fg:w="36"/><text x="6.0396%" y="7055.50"></text></g><g><title>`0x7FF97E62DBBF (74 samples, 0.03%)</title><rect x="5.7767%" y="7061" width="0.0264%" height="15" fill="rgb(232,107,50)" fg:x="16166" fg:w="74"/><text x="6.0267%" y="7071.50"></text></g><g><title>`0x7FF97E62DBDD (48 samples, 0.02%)</title><rect x="5.8032%" y="7061" width="0.0172%" height="15" fill="rgb(253,3,0)" fg:x="16240" fg:w="48"/><text x="6.0532%" y="7071.50"></text></g><g><title>`0x7FF97E62CC9A (372 samples, 0.13%)</title><rect x="5.6878%" y="7077" width="0.1329%" height="15" fill="rgb(212,99,53)" fg:x="15917" fg:w="372"/><text x="5.9378%" y="7087.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (593 samples, 0.21%)</title><rect x="5.6327%" y="7141" width="0.2119%" height="15" fill="rgb(249,111,54)" fg:x="15763" fg:w="593"/><text x="5.8827%" y="7151.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (593 samples, 0.21%)</title><rect x="5.6327%" y="7125" width="0.2119%" height="15" fill="rgb(249,55,30)" fg:x="15763" fg:w="593"/><text x="5.8827%" y="7135.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (593 samples, 0.21%)</title><rect x="5.6327%" y="7109" width="0.2119%" height="15" fill="rgb(237,47,42)" fg:x="15763" fg:w="593"/><text x="5.8827%" y="7119.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (593 samples, 0.21%)</title><rect x="5.6327%" y="7093" width="0.2119%" height="15" fill="rgb(211,20,18)" fg:x="15763" fg:w="593"/><text x="5.8827%" y="7103.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$11::clone(alloc::vec::Vec&lt;tuple$ (779 samples, 0.28%)</title><rect x="5.5680%" y="7205" width="0.2784%" height="15" fill="rgb(231,203,46)" fg:x="15582" fg:w="779"/><text x="5.8180%" y="7215.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (779 samples, 0.28%)</title><rect x="5.5680%" y="7189" width="0.2784%" height="15" fill="rgb(237,142,3)" fg:x="15582" fg:w="779"/><text x="5.8180%" y="7199.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$&lt;tuple$ (776 samples, 0.28%)</title><rect x="5.5691%" y="7173" width="0.2773%" height="15" fill="rgb(241,107,1)" fg:x="15585" fg:w="776"/><text x="5.8191%" y="7183.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$&lt;tuple$ (776 samples, 0.28%)</title><rect x="5.5691%" y="7157" width="0.2773%" height="15" fill="rgb(229,83,13)" fg:x="15585" fg:w="776"/><text x="5.8191%" y="7167.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (389 samples, 0.14%)</title><rect x="5.8564%" y="7189" width="0.1390%" height="15" fill="rgb(241,91,40)" fg:x="16389" fg:w="389"/><text x="6.1064%" y="7199.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (389 samples, 0.14%)</title><rect x="5.8564%" y="7173" width="0.1390%" height="15" fill="rgb(225,3,45)" fg:x="16389" fg:w="389"/><text x="6.1064%" y="7183.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (87 samples, 0.03%)</title><rect x="5.9643%" y="7157" width="0.0311%" height="15" fill="rgb(244,223,14)" fg:x="16691" fg:w="87"/><text x="6.2143%" y="7167.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$ (536 samples, 0.19%)</title><rect x="5.8464%" y="7205" width="0.1915%" height="15" fill="rgb(224,124,37)" fg:x="16361" fg:w="536"/><text x="6.0964%" y="7215.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;tuple$ (119 samples, 0.04%)</title><rect x="5.9954%" y="7189" width="0.0425%" height="15" fill="rgb(251,171,30)" fg:x="16778" fg:w="119"/><text x="6.2454%" y="7199.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;tuple$ (114 samples, 0.04%)</title><rect x="5.9972%" y="7173" width="0.0407%" height="15" fill="rgb(236,46,54)" fg:x="16783" fg:w="114"/><text x="6.2472%" y="7183.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, core::ops::range::Range (368 samples, 0.13%)</title><rect x="6.0379%" y="7205" width="0.1315%" height="15" fill="rgb(245,213,5)" fg:x="16897" fg:w="368"/><text x="6.2879%" y="7215.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (354 samples, 0.13%)</title><rect x="6.0429%" y="7189" width="0.1265%" height="15" fill="rgb(230,144,27)" fg:x="16911" fg:w="354"/><text x="6.2929%" y="7199.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (354 samples, 0.13%)</title><rect x="6.0429%" y="7173" width="0.1265%" height="15" fill="rgb(220,86,6)" fg:x="16911" fg:w="354"/><text x="6.2929%" y="7183.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (48 samples, 0.02%)</title><rect x="6.1523%" y="7157" width="0.0172%" height="15" fill="rgb(240,20,13)" fg:x="17217" fg:w="48"/><text x="6.4023%" y="7167.50"></text></g><g><title>`0x7FF97E62AFBA (32 samples, 0.01%)</title><rect x="6.1816%" y="7109" width="0.0114%" height="15" fill="rgb(217,89,34)" fg:x="17299" fg:w="32"/><text x="6.4316%" y="7119.50"></text></g><g><title>`0x7FF97E62AFE0 (59 samples, 0.02%)</title><rect x="6.1952%" y="7109" width="0.0211%" height="15" fill="rgb(229,13,5)" fg:x="17337" fg:w="59"/><text x="6.4452%" y="7119.50"></text></g><g><title>`0x7FF97E62BB70 (54 samples, 0.02%)</title><rect x="6.2188%" y="7093" width="0.0193%" height="15" fill="rgb(244,67,35)" fg:x="17403" fg:w="54"/><text x="6.4688%" y="7103.50"></text></g><g><title>`0x7FF97E62BB84 (75 samples, 0.03%)</title><rect x="6.2384%" y="7093" width="0.0268%" height="15" fill="rgb(221,40,2)" fg:x="17458" fg:w="75"/><text x="6.4884%" y="7103.50"></text></g><g><title>`0x7FF97E62C2B1 (77 samples, 0.03%)</title><rect x="6.2659%" y="7093" width="0.0275%" height="15" fill="rgb(237,157,21)" fg:x="17535" fg:w="77"/><text x="6.5159%" y="7103.50"></text></g><g><title>`0x7FF97E62C38A (68 samples, 0.02%)</title><rect x="6.3006%" y="7093" width="0.0243%" height="15" fill="rgb(222,94,11)" fg:x="17632" fg:w="68"/><text x="6.5506%" y="7103.50"></text></g><g><title>`0x7FF97E69CB43 (42 samples, 0.02%)</title><rect x="6.3249%" y="7093" width="0.0150%" height="15" fill="rgb(249,113,6)" fg:x="17700" fg:w="42"/><text x="6.5749%" y="7103.50"></text></g><g><title>`0x7FF97E62AFF1 (519 samples, 0.19%)</title><rect x="6.2173%" y="7109" width="0.1855%" height="15" fill="rgb(238,137,36)" fg:x="17399" fg:w="519"/><text x="6.4673%" y="7119.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (661 samples, 0.24%)</title><rect x="6.1741%" y="7141" width="0.2362%" height="15" fill="rgb(210,102,26)" fg:x="17278" fg:w="661"/><text x="6.4241%" y="7151.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (661 samples, 0.24%)</title><rect x="6.1741%" y="7125" width="0.2362%" height="15" fill="rgb(218,30,30)" fg:x="17278" fg:w="661"/><text x="6.4241%" y="7135.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;tuple$ (685 samples, 0.24%)</title><rect x="6.1698%" y="7205" width="0.2448%" height="15" fill="rgb(214,67,26)" fg:x="17266" fg:w="685"/><text x="6.4198%" y="7215.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (685 samples, 0.24%)</title><rect x="6.1698%" y="7189" width="0.2448%" height="15" fill="rgb(251,9,53)" fg:x="17266" fg:w="685"/><text x="6.4198%" y="7199.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (685 samples, 0.24%)</title><rect x="6.1698%" y="7173" width="0.2448%" height="15" fill="rgb(228,204,25)" fg:x="17266" fg:w="685"/><text x="6.4198%" y="7183.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (673 samples, 0.24%)</title><rect x="6.1741%" y="7157" width="0.2405%" height="15" fill="rgb(207,153,8)" fg:x="17278" fg:w="673"/><text x="6.4241%" y="7167.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::swap(ref_mut$&lt;slice2$&lt;tuple$ (55 samples, 0.02%)</title><rect x="6.4214%" y="7109" width="0.0197%" height="15" fill="rgb(242,9,16)" fg:x="17970" fg:w="55"/><text x="6.6714%" y="7119.50"></text></g><g><title>neural_network.exe`core::ptr::swap(tuple$&lt;usize,usize&gt;*, tuple$ (31 samples, 0.01%)</title><rect x="6.4299%" y="7093" width="0.0111%" height="15" fill="rgb(217,211,10)" fg:x="17994" fg:w="31"/><text x="6.6799%" y="7103.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place (162 samples, 0.06%)</title><rect x="6.4146%" y="7205" width="0.0579%" height="15" fill="rgb(219,228,52)" fg:x="17951" fg:w="162"/><text x="6.6646%" y="7215.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (162 samples, 0.06%)</title><rect x="6.4146%" y="7189" width="0.0579%" height="15" fill="rgb(231,92,29)" fg:x="17951" fg:w="162"/><text x="6.6646%" y="7199.50"></text></g><g><title>neural_network.exe`alloc::rc::impl$30::drop(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (162 samples, 0.06%)</title><rect x="6.4146%" y="7173" width="0.0579%" height="15" fill="rgb(232,8,23)" fg:x="17951" fg:w="162"/><text x="6.6646%" y="7183.50"></text></g><g><title>neural_network.exe`alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;::inner (159 samples, 0.06%)</title><rect x="6.4156%" y="7157" width="0.0568%" height="15" fill="rgb(216,211,34)" fg:x="17954" fg:w="159"/><text x="6.6656%" y="7167.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;alloc::rc::RcBox&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt; &gt; &gt;::as_ref (159 samples, 0.06%)</title><rect x="6.4156%" y="7141" width="0.0568%" height="15" fill="rgb(236,151,0)" fg:x="17954" fg:w="159"/><text x="6.6656%" y="7151.50"></text></g><g><title>neural_network.exe`rand::seq::impl$0::shuffle&lt;tuple$&lt;usize,usize&gt;,rand::rngs::thread::ThreadRng&gt;(ref_mut$&lt;slice2$&lt;tuple$ (159 samples, 0.06%)</title><rect x="6.4156%" y="7125" width="0.0568%" height="15" fill="rgb(209,168,3)" fg:x="17954" fg:w="159"/><text x="6.6656%" y="7135.50"></text></g><g><title>neural_network.exe`rand::seq::gen_index (88 samples, 0.03%)</title><rect x="6.4410%" y="7109" width="0.0314%" height="15" fill="rgb(208,129,28)" fg:x="18025" fg:w="88"/><text x="6.6910%" y="7119.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen_range(rand::rngs::thread::ThreadRng*, core::ops::range::Range (88 samples, 0.03%)</title><rect x="6.4410%" y="7093" width="0.0314%" height="15" fill="rgb(229,78,22)" fg:x="18025" fg:w="88"/><text x="6.6910%" y="7103.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$6::sample_single(core::ops::range::Range (88 samples, 0.03%)</title><rect x="6.4410%" y="7077" width="0.0314%" height="15" fill="rgb(228,187,13)" fg:x="18025" fg:w="88"/><text x="6.6910%" y="7087.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single (88 samples, 0.03%)</title><rect x="6.4410%" y="7061" width="0.0314%" height="15" fill="rgb(240,119,24)" fg:x="18025" fg:w="88"/><text x="6.6910%" y="7071.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single_inclusive (88 samples, 0.03%)</title><rect x="6.4410%" y="7045" width="0.0314%" height="15" fill="rgb(209,194,42)" fg:x="18025" fg:w="88"/><text x="6.6910%" y="7055.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen (69 samples, 0.02%)</title><rect x="6.4478%" y="7029" width="0.0247%" height="15" fill="rgb(247,200,46)" fg:x="18044" fg:w="69"/><text x="6.6978%" y="7039.50"></text></g><g><title>neural_network.exe`rand::distributions::integer::impl$2::sample (69 samples, 0.02%)</title><rect x="6.4478%" y="7013" width="0.0247%" height="15" fill="rgb(218,76,16)" fg:x="18044" fg:w="69"/><text x="6.6978%" y="7023.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::impl$1::next_u32 (69 samples, 0.02%)</title><rect x="6.4478%" y="6997" width="0.0247%" height="15" fill="rgb(225,21,48)" fg:x="18044" fg:w="69"/><text x="6.6978%" y="7007.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$1::next_u32(rand::rngs::adapter::reseeding::ReseedingRng (69 samples, 0.02%)</title><rect x="6.4478%" y="6981" width="0.0247%" height="15" fill="rgb(239,223,50)" fg:x="18044" fg:w="69"/><text x="6.6978%" y="6991.50"></text></g><g><title>neural_network.exe`rand_core::block::impl$2::next_u32(rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore (69 samples, 0.02%)</title><rect x="6.4478%" y="6965" width="0.0247%" height="15" fill="rgb(244,45,21)" fg:x="18044" fg:w="69"/><text x="6.6978%" y="6975.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::contains(ref$&lt;slice2$&lt;tuple$&lt;usize,usize&gt; &gt; &gt;, tuple$ (229 samples, 0.08%)</title><rect x="6.4725%" y="7205" width="0.0818%" height="15" fill="rgb(232,33,43)" fg:x="18113" fg:w="229"/><text x="6.7225%" y="7215.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (229 samples, 0.08%)</title><rect x="6.4725%" y="7189" width="0.0818%" height="15" fill="rgb(209,8,3)" fg:x="18113" fg:w="229"/><text x="6.7225%" y="7199.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (229 samples, 0.08%)</title><rect x="6.4725%" y="7173" width="0.0818%" height="15" fill="rgb(214,25,53)" fg:x="18113" fg:w="229"/><text x="6.7225%" y="7183.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (37 samples, 0.01%)</title><rect x="6.5411%" y="7157" width="0.0132%" height="15" fill="rgb(254,186,54)" fg:x="18305" fg:w="37"/><text x="6.7911%" y="7167.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (101 samples, 0.04%)</title><rect x="6.5543%" y="7205" width="0.0361%" height="15" fill="rgb(208,174,49)" fg:x="18342" fg:w="101"/><text x="6.8043%" y="7215.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (28 samples, 0.01%)</title><rect x="6.5804%" y="7189" width="0.0100%" height="15" fill="rgb(233,191,51)" fg:x="18415" fg:w="28"/><text x="6.8304%" y="7199.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (28 samples, 0.01%)</title><rect x="6.5804%" y="7173" width="0.0100%" height="15" fill="rgb(222,134,10)" fg:x="18415" fg:w="28"/><text x="6.8304%" y="7183.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (28 samples, 0.01%)</title><rect x="6.5804%" y="7157" width="0.0100%" height="15" fill="rgb(230,226,20)" fg:x="18415" fg:w="28"/><text x="6.8304%" y="7167.50"></text></g><g><title>`0x7FF97E62AFF1 (176 samples, 0.06%)</title><rect x="6.6486%" y="7157" width="0.0629%" height="15" fill="rgb(251,111,25)" fg:x="18606" fg:w="176"/><text x="6.8986%" y="7167.50"></text></g><g><title>`0x7FF97E62D57C (28 samples, 0.01%)</title><rect x="6.7880%" y="6933" width="0.0100%" height="15" fill="rgb(224,40,46)" fg:x="18996" fg:w="28"/><text x="7.0380%" y="6943.50"></text></g><g><title>`0x7FF97E62D5E2 (36 samples, 0.01%)</title><rect x="6.8069%" y="6933" width="0.0129%" height="15" fill="rgb(236,108,47)" fg:x="19049" fg:w="36"/><text x="7.0569%" y="6943.50"></text></g><g><title>`0x7FF97E62D68A (35 samples, 0.01%)</title><rect x="6.8330%" y="6933" width="0.0125%" height="15" fill="rgb(234,93,0)" fg:x="19122" fg:w="35"/><text x="7.0830%" y="6943.50"></text></g><g><title>`0x7FF97E62CC9A (221 samples, 0.08%)</title><rect x="6.7876%" y="6949" width="0.0790%" height="15" fill="rgb(224,213,32)" fg:x="18995" fg:w="221"/><text x="7.0376%" y="6959.50"></text></g><g><title>`0x7FF97E62CB1A (38 samples, 0.01%)</title><rect x="6.9427%" y="6901" width="0.0136%" height="15" fill="rgb(251,11,48)" fg:x="19429" fg:w="38"/><text x="7.1927%" y="6911.50"></text></g><g><title>`0x7FF97E62CB7E (38 samples, 0.01%)</title><rect x="6.9849%" y="6901" width="0.0136%" height="15" fill="rgb(236,173,5)" fg:x="19547" fg:w="38"/><text x="7.2349%" y="6911.50"></text></g><g><title>`0x7FF97E62CB80 (32 samples, 0.01%)</title><rect x="6.9985%" y="6901" width="0.0114%" height="15" fill="rgb(230,95,12)" fg:x="19585" fg:w="32"/><text x="7.2485%" y="6911.50"></text></g><g><title>`0x7FF97E62D68A (29 samples, 0.01%)</title><rect x="7.0685%" y="6885" width="0.0104%" height="15" fill="rgb(232,209,1)" fg:x="19781" fg:w="29"/><text x="7.3185%" y="6895.50"></text></g><g><title>`0x7FF97E62DB41 (33 samples, 0.01%)</title><rect x="7.1053%" y="6885" width="0.0118%" height="15" fill="rgb(232,6,1)" fg:x="19884" fg:w="33"/><text x="7.3553%" y="6895.50"></text></g><g><title>`0x7FF97E631B1F (36 samples, 0.01%)</title><rect x="7.1389%" y="6869" width="0.0129%" height="15" fill="rgb(210,224,50)" fg:x="19978" fg:w="36"/><text x="7.3889%" y="6879.50"></text></g><g><title>`0x7FF97E62DBBF (93 samples, 0.03%)</title><rect x="7.1192%" y="6885" width="0.0332%" height="15" fill="rgb(228,127,35)" fg:x="19923" fg:w="93"/><text x="7.3692%" y="6895.50"></text></g><g><title>`0x7FF97E62DBDD (52 samples, 0.02%)</title><rect x="7.1525%" y="6885" width="0.0186%" height="15" fill="rgb(245,102,45)" fg:x="20016" fg:w="52"/><text x="7.4025%" y="6895.50"></text></g><g><title>`0x7FF97E62CC9A (366 samples, 0.13%)</title><rect x="7.0406%" y="6901" width="0.1308%" height="15" fill="rgb(214,1,49)" fg:x="19703" fg:w="366"/><text x="7.2906%" y="6911.50"></text></g><g><title>`0x7FF97E633505 (716 samples, 0.26%)</title><rect x="6.9281%" y="6917" width="0.2559%" height="15" fill="rgb(226,163,40)" fg:x="19388" fg:w="716"/><text x="7.1781%" y="6927.50"></text></g><g><title>`0x7FF97E696B96 (171 samples, 0.06%)</title><rect x="7.1854%" y="6901" width="0.0611%" height="15" fill="rgb(239,212,28)" fg:x="20108" fg:w="171"/><text x="7.4354%" y="6911.50"></text></g><g><title>`0x7FF97E633550 (232 samples, 0.08%)</title><rect x="7.1850%" y="6917" width="0.0829%" height="15" fill="rgb(220,20,13)" fg:x="20107" fg:w="232"/><text x="7.4350%" y="6927.50"></text></g><g><title>`0x7FF97E62AFF1 (83 samples, 0.03%)</title><rect x="7.2768%" y="6901" width="0.0297%" height="15" fill="rgb(210,164,35)" fg:x="20364" fg:w="83"/><text x="7.5268%" y="6911.50"></text></g><g><title>`0x7FF97E633562 (110 samples, 0.04%)</title><rect x="7.2693%" y="6917" width="0.0393%" height="15" fill="rgb(248,109,41)" fg:x="20343" fg:w="110"/><text x="7.5193%" y="6927.50"></text></g><g><title>`0x7FF97E6322C7 (1,174 samples, 0.42%)</title><rect x="6.8984%" y="6933" width="0.4195%" height="15" fill="rgb(238,23,50)" fg:x="19305" fg:w="1174"/><text x="7.1484%" y="6943.50"></text></g><g><title>`0x7FF97E63218A (1,285 samples, 0.46%)</title><rect x="6.8813%" y="6949" width="0.4592%" height="15" fill="rgb(211,48,49)" fg:x="19257" fg:w="1285"/><text x="7.1313%" y="6959.50"></text></g><g><title>`0x7FF97E63219E (40 samples, 0.01%)</title><rect x="7.3408%" y="6949" width="0.0143%" height="15" fill="rgb(223,36,21)" fg:x="20543" fg:w="40"/><text x="7.5908%" y="6959.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (1,625 samples, 0.58%)</title><rect x="6.7801%" y="6997" width="0.5807%" height="15" fill="rgb(207,123,46)" fg:x="18974" fg:w="1625"/><text x="7.0301%" y="7007.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (1,625 samples, 0.58%)</title><rect x="6.7801%" y="6981" width="0.5807%" height="15" fill="rgb(240,218,32)" fg:x="18974" fg:w="1625"/><text x="7.0301%" y="6991.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (1,625 samples, 0.58%)</title><rect x="6.7801%" y="6965" width="0.5807%" height="15" fill="rgb(252,5,43)" fg:x="18974" fg:w="1625"/><text x="7.0301%" y="6975.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_mut_ptr (1,859 samples, 0.66%)</title><rect x="6.7212%" y="7141" width="0.6643%" height="15" fill="rgb(252,84,19)" fg:x="18809" fg:w="1859"/><text x="6.9712%" y="7151.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (1,859 samples, 0.66%)</title><rect x="6.7212%" y="7125" width="0.6643%" height="15" fill="rgb(243,152,39)" fg:x="18809" fg:w="1859"/><text x="6.9712%" y="7135.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (1,859 samples, 0.66%)</title><rect x="6.7212%" y="7109" width="0.6643%" height="15" fill="rgb(234,160,15)" fg:x="18809" fg:w="1859"/><text x="6.9712%" y="7119.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (1,859 samples, 0.66%)</title><rect x="6.7212%" y="7093" width="0.6643%" height="15" fill="rgb(237,34,20)" fg:x="18809" fg:w="1859"/><text x="6.9712%" y="7103.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::grow_one&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; (1,852 samples, 0.66%)</title><rect x="6.7237%" y="7077" width="0.6618%" height="15" fill="rgb(229,97,13)" fg:x="18816" fg:w="1852"/><text x="6.9737%" y="7087.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (1,796 samples, 0.64%)</title><rect x="6.7437%" y="7061" width="0.6418%" height="15" fill="rgb(234,71,50)" fg:x="18872" fg:w="1796"/><text x="6.9937%" y="7071.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (1,794 samples, 0.64%)</title><rect x="6.7444%" y="7045" width="0.6411%" height="15" fill="rgb(253,155,4)" fg:x="18874" fg:w="1794"/><text x="6.9944%" y="7055.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (1,756 samples, 0.63%)</title><rect x="6.7580%" y="7029" width="0.6275%" height="15" fill="rgb(222,185,37)" fg:x="18912" fg:w="1756"/><text x="7.0080%" y="7039.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (1,731 samples, 0.62%)</title><rect x="6.7669%" y="7013" width="0.6186%" height="15" fill="rgb(251,177,13)" fg:x="18937" fg:w="1731"/><text x="7.0169%" y="7023.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;, alloc::raw_vec::finish_grow::closure_env$0 (69 samples, 0.02%)</title><rect x="7.3608%" y="6997" width="0.0247%" height="15" fill="rgb(250,179,40)" fg:x="20599" fg:w="69"/><text x="7.6108%" y="7007.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (2,154 samples, 0.77%)</title><rect x="6.7147%" y="7157" width="0.7697%" height="15" fill="rgb(242,44,2)" fg:x="18791" fg:w="2154"/><text x="6.9647%" y="7167.50"></text></g><g><title>neural_network.exe`core::ptr::write(tuple$&lt;usize,usize&gt;*, tuple$ (277 samples, 0.10%)</title><rect x="7.3855%" y="7141" width="0.0990%" height="15" fill="rgb(216,177,13)" fg:x="20668" fg:w="277"/><text x="7.6355%" y="7151.50"></text></g><g><title>`0x7FF968D51381 (259 samples, 0.09%)</title><rect x="7.5030%" y="7093" width="0.0926%" height="15" fill="rgb(216,106,43)" fg:x="20997" fg:w="259"/><text x="7.7530%" y="7103.50"></text></g><g><title>`0x7FF97E62D5E2 (35 samples, 0.01%)</title><rect x="7.7031%" y="7013" width="0.0125%" height="15" fill="rgb(216,183,2)" fg:x="21557" fg:w="35"/><text x="7.9531%" y="7023.50"></text></g><g><title>`0x7FF97E62D68A (33 samples, 0.01%)</title><rect x="7.7185%" y="7013" width="0.0118%" height="15" fill="rgb(249,75,3)" fg:x="21600" fg:w="33"/><text x="7.9685%" y="7023.50"></text></g><g><title>`0x7FF97E62CC9A (232 samples, 0.08%)</title><rect x="7.6735%" y="7029" width="0.0829%" height="15" fill="rgb(219,67,39)" fg:x="21474" fg:w="232"/><text x="7.9235%" y="7039.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (502 samples, 0.18%)</title><rect x="7.6063%" y="7093" width="0.1794%" height="15" fill="rgb(253,228,2)" fg:x="21286" fg:w="502"/><text x="7.8563%" y="7103.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (502 samples, 0.18%)</title><rect x="7.6063%" y="7077" width="0.1794%" height="15" fill="rgb(235,138,27)" fg:x="21286" fg:w="502"/><text x="7.8563%" y="7087.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (502 samples, 0.18%)</title><rect x="7.6063%" y="7061" width="0.1794%" height="15" fill="rgb(236,97,51)" fg:x="21286" fg:w="502"/><text x="7.8563%" y="7071.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (502 samples, 0.18%)</title><rect x="7.6063%" y="7045" width="0.1794%" height="15" fill="rgb(240,80,30)" fg:x="21286" fg:w="502"/><text x="7.8563%" y="7055.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$&lt;tuple$ (831 samples, 0.30%)</title><rect x="7.4923%" y="7125" width="0.2969%" height="15" fill="rgb(230,178,19)" fg:x="20967" fg:w="831"/><text x="7.7423%" y="7135.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$&lt;tuple$ (831 samples, 0.30%)</title><rect x="7.4923%" y="7109" width="0.2969%" height="15" fill="rgb(210,190,27)" fg:x="20967" fg:w="831"/><text x="7.7423%" y="7119.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$11::clone(alloc::vec::Vec&lt;tuple$ (835 samples, 0.30%)</title><rect x="7.4912%" y="7157" width="0.2984%" height="15" fill="rgb(222,107,31)" fg:x="20964" fg:w="835"/><text x="7.7412%" y="7167.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (835 samples, 0.30%)</title><rect x="7.4912%" y="7141" width="0.2984%" height="15" fill="rgb(216,127,34)" fg:x="20964" fg:w="835"/><text x="7.7412%" y="7151.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (558 samples, 0.20%)</title><rect x="7.8035%" y="7141" width="0.1994%" height="15" fill="rgb(234,116,52)" fg:x="21838" fg:w="558"/><text x="8.0535%" y="7151.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (558 samples, 0.20%)</title><rect x="7.8035%" y="7125" width="0.1994%" height="15" fill="rgb(222,124,15)" fg:x="21838" fg:w="558"/><text x="8.0535%" y="7135.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (99 samples, 0.04%)</title><rect x="7.9676%" y="7109" width="0.0354%" height="15" fill="rgb(231,179,28)" fg:x="22297" fg:w="99"/><text x="8.2176%" y="7119.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$ (779 samples, 0.28%)</title><rect x="7.7896%" y="7157" width="0.2784%" height="15" fill="rgb(226,93,45)" fg:x="21799" fg:w="779"/><text x="8.0396%" y="7167.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;tuple$ (182 samples, 0.07%)</title><rect x="8.0029%" y="7141" width="0.0650%" height="15" fill="rgb(215,8,51)" fg:x="22396" fg:w="182"/><text x="8.2529%" y="7151.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;tuple$ (174 samples, 0.06%)</title><rect x="8.0058%" y="7125" width="0.0622%" height="15" fill="rgb(223,106,5)" fg:x="22404" fg:w="174"/><text x="8.2558%" y="7135.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, core::ops::range::Range (456 samples, 0.16%)</title><rect x="8.0680%" y="7157" width="0.1629%" height="15" fill="rgb(250,191,5)" fg:x="22578" fg:w="456"/><text x="8.3180%" y="7167.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (429 samples, 0.15%)</title><rect x="8.0776%" y="7141" width="0.1533%" height="15" fill="rgb(242,132,44)" fg:x="22605" fg:w="429"/><text x="8.3276%" y="7151.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (429 samples, 0.15%)</title><rect x="8.0776%" y="7125" width="0.1533%" height="15" fill="rgb(251,152,29)" fg:x="22605" fg:w="429"/><text x="8.3276%" y="7135.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (40 samples, 0.01%)</title><rect x="8.2166%" y="7109" width="0.0143%" height="15" fill="rgb(218,179,5)" fg:x="22994" fg:w="40"/><text x="8.4666%" y="7119.50"></text></g><g><title>`0x7FF97E62AFBA (37 samples, 0.01%)</title><rect x="8.2445%" y="7061" width="0.0132%" height="15" fill="rgb(227,67,19)" fg:x="23072" fg:w="37"/><text x="8.4945%" y="7071.50"></text></g><g><title>`0x7FF97E62AFE0 (70 samples, 0.03%)</title><rect x="8.2592%" y="7061" width="0.0250%" height="15" fill="rgb(233,119,31)" fg:x="23113" fg:w="70"/><text x="8.5092%" y="7071.50"></text></g><g><title>`0x7FF97E62BB70 (99 samples, 0.04%)</title><rect x="8.2870%" y="7045" width="0.0354%" height="15" fill="rgb(241,120,22)" fg:x="23191" fg:w="99"/><text x="8.5370%" y="7055.50"></text></g><g><title>`0x7FF97E62BB84 (84 samples, 0.03%)</title><rect x="8.3231%" y="7045" width="0.0300%" height="15" fill="rgb(224,102,30)" fg:x="23292" fg:w="84"/><text x="8.5731%" y="7055.50"></text></g><g><title>`0x7FF97E62C2B1 (84 samples, 0.03%)</title><rect x="8.3556%" y="7045" width="0.0300%" height="15" fill="rgb(210,164,37)" fg:x="23383" fg:w="84"/><text x="8.6056%" y="7055.50"></text></g><g><title>`0x7FF97E62C38A (68 samples, 0.02%)</title><rect x="8.3949%" y="7045" width="0.0243%" height="15" fill="rgb(226,191,16)" fg:x="23493" fg:w="68"/><text x="8.6449%" y="7055.50"></text></g><g><title>`0x7FF97E69CB43 (52 samples, 0.02%)</title><rect x="8.4192%" y="7045" width="0.0186%" height="15" fill="rgb(214,40,45)" fg:x="23561" fg:w="52"/><text x="8.6692%" y="7055.50"></text></g><g><title>`0x7FF97E62AFF1 (626 samples, 0.22%)</title><rect x="8.2845%" y="7061" width="0.2237%" height="15" fill="rgb(244,29,26)" fg:x="23184" fg:w="626"/><text x="8.5345%" y="7071.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (782 samples, 0.28%)</title><rect x="8.2345%" y="7093" width="0.2794%" height="15" fill="rgb(216,16,5)" fg:x="23044" fg:w="782"/><text x="8.4845%" y="7103.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (782 samples, 0.28%)</title><rect x="8.2345%" y="7077" width="0.2794%" height="15" fill="rgb(249,76,35)" fg:x="23044" fg:w="782"/><text x="8.4845%" y="7087.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;tuple$ (803 samples, 0.29%)</title><rect x="8.2309%" y="7157" width="0.2869%" height="15" fill="rgb(207,11,44)" fg:x="23034" fg:w="803"/><text x="8.4809%" y="7167.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (803 samples, 0.29%)</title><rect x="8.2309%" y="7141" width="0.2869%" height="15" fill="rgb(228,190,49)" fg:x="23034" fg:w="803"/><text x="8.4809%" y="7151.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (803 samples, 0.29%)</title><rect x="8.2309%" y="7125" width="0.2869%" height="15" fill="rgb(214,173,12)" fg:x="23034" fg:w="803"/><text x="8.4809%" y="7135.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (793 samples, 0.28%)</title><rect x="8.2345%" y="7109" width="0.2834%" height="15" fill="rgb(218,26,35)" fg:x="23044" fg:w="793"/><text x="8.4845%" y="7119.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::swap(ref_mut$&lt;slice2$&lt;tuple$ (69 samples, 0.02%)</title><rect x="8.5247%" y="7061" width="0.0247%" height="15" fill="rgb(220,200,19)" fg:x="23856" fg:w="69"/><text x="8.7747%" y="7071.50"></text></g><g><title>neural_network.exe`core::ptr::swap(tuple$&lt;usize,usize&gt;*, tuple$ (40 samples, 0.01%)</title><rect x="8.5350%" y="7045" width="0.0143%" height="15" fill="rgb(239,95,49)" fg:x="23885" fg:w="40"/><text x="8.7850%" y="7055.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide::impl_avx2 (30 samples, 0.01%)</title><rect x="8.5811%" y="6837" width="0.0107%" height="15" fill="rgb(235,85,53)" fg:x="24014" fg:w="30"/><text x="8.8311%" y="6847.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide::fn_impl(ppv_lite86::x86_64::Avx2Machine (30 samples, 0.01%)</title><rect x="8.5811%" y="6821" width="0.0107%" height="15" fill="rgb(233,133,31)" fg:x="24014" fg:w="30"/><text x="8.8311%" y="6831.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide_impl(ppv_lite86::x86_64::Avx2Machine (30 samples, 0.01%)</title><rect x="8.5811%" y="6805" width="0.0107%" height="15" fill="rgb(218,25,20)" fg:x="24014" fg:w="30"/><text x="8.8311%" y="6815.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place (208 samples, 0.07%)</title><rect x="8.5179%" y="7157" width="0.0743%" height="15" fill="rgb(252,210,38)" fg:x="23837" fg:w="208"/><text x="8.7679%" y="7167.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (208 samples, 0.07%)</title><rect x="8.5179%" y="7141" width="0.0743%" height="15" fill="rgb(242,134,21)" fg:x="23837" fg:w="208"/><text x="8.7679%" y="7151.50"></text></g><g><title>neural_network.exe`alloc::rc::impl$30::drop(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (208 samples, 0.07%)</title><rect x="8.5179%" y="7125" width="0.0743%" height="15" fill="rgb(213,28,48)" fg:x="23837" fg:w="208"/><text x="8.7679%" y="7135.50"></text></g><g><title>neural_network.exe`alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;::inner (208 samples, 0.07%)</title><rect x="8.5179%" y="7109" width="0.0743%" height="15" fill="rgb(250,196,2)" fg:x="23837" fg:w="208"/><text x="8.7679%" y="7119.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;alloc::rc::RcBox&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt; &gt; &gt;::as_ref (207 samples, 0.07%)</title><rect x="8.5182%" y="7093" width="0.0740%" height="15" fill="rgb(227,5,17)" fg:x="23838" fg:w="207"/><text x="8.7682%" y="7103.50"></text></g><g><title>neural_network.exe`rand::seq::impl$0::shuffle&lt;tuple$&lt;usize,usize&gt;,rand::rngs::thread::ThreadRng&gt;(ref_mut$&lt;slice2$&lt;tuple$ (207 samples, 0.07%)</title><rect x="8.5182%" y="7077" width="0.0740%" height="15" fill="rgb(221,226,24)" fg:x="23838" fg:w="207"/><text x="8.7682%" y="7087.50"></text></g><g><title>neural_network.exe`rand::seq::gen_index (120 samples, 0.04%)</title><rect x="8.5493%" y="7061" width="0.0429%" height="15" fill="rgb(211,5,48)" fg:x="23925" fg:w="120"/><text x="8.7993%" y="7071.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen_range(rand::rngs::thread::ThreadRng*, core::ops::range::Range (120 samples, 0.04%)</title><rect x="8.5493%" y="7045" width="0.0429%" height="15" fill="rgb(219,150,6)" fg:x="23925" fg:w="120"/><text x="8.7993%" y="7055.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$6::sample_single(core::ops::range::Range (120 samples, 0.04%)</title><rect x="8.5493%" y="7029" width="0.0429%" height="15" fill="rgb(251,46,16)" fg:x="23925" fg:w="120"/><text x="8.7993%" y="7039.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single (120 samples, 0.04%)</title><rect x="8.5493%" y="7013" width="0.0429%" height="15" fill="rgb(220,204,40)" fg:x="23925" fg:w="120"/><text x="8.7993%" y="7023.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single_inclusive (120 samples, 0.04%)</title><rect x="8.5493%" y="6997" width="0.0429%" height="15" fill="rgb(211,85,2)" fg:x="23925" fg:w="120"/><text x="8.7993%" y="7007.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen (94 samples, 0.03%)</title><rect x="8.5586%" y="6981" width="0.0336%" height="15" fill="rgb(229,17,7)" fg:x="23951" fg:w="94"/><text x="8.8086%" y="6991.50"></text></g><g><title>neural_network.exe`rand::distributions::integer::impl$2::sample (94 samples, 0.03%)</title><rect x="8.5586%" y="6965" width="0.0336%" height="15" fill="rgb(239,72,28)" fg:x="23951" fg:w="94"/><text x="8.8086%" y="6975.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::impl$1::next_u32 (94 samples, 0.03%)</title><rect x="8.5586%" y="6949" width="0.0336%" height="15" fill="rgb(230,47,54)" fg:x="23951" fg:w="94"/><text x="8.8086%" y="6959.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$1::next_u32(rand::rngs::adapter::reseeding::ReseedingRng (94 samples, 0.03%)</title><rect x="8.5586%" y="6933" width="0.0336%" height="15" fill="rgb(214,50,8)" fg:x="23951" fg:w="94"/><text x="8.8086%" y="6943.50"></text></g><g><title>neural_network.exe`rand_core::block::impl$2::next_u32(rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore (94 samples, 0.03%)</title><rect x="8.5586%" y="6917" width="0.0336%" height="15" fill="rgb(216,198,43)" fg:x="23951" fg:w="94"/><text x="8.8086%" y="6927.50"></text></g><g><title>neural_network.exe`rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;::generate_and_set (34 samples, 0.01%)</title><rect x="8.5800%" y="6901" width="0.0121%" height="15" fill="rgb(234,20,35)" fg:x="24011" fg:w="34"/><text x="8.8300%" y="6911.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$4::generate(rand::rngs::adapter::reseeding::ReseedingCore&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt;*, rand_chacha::chacha::Array64 (34 samples, 0.01%)</title><rect x="8.5800%" y="6885" width="0.0121%" height="15" fill="rgb(254,45,19)" fg:x="24011" fg:w="34"/><text x="8.8300%" y="6895.50"></text></g><g><title>neural_network.exe`rand_chacha::chacha::impl$23::generate(rand_chacha::chacha::ChaCha12Core*, rand_chacha::chacha::Array64 (31 samples, 0.01%)</title><rect x="8.5811%" y="6869" width="0.0111%" height="15" fill="rgb(219,14,44)" fg:x="24014" fg:w="31"/><text x="8.8311%" y="6879.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::ChaCha::refill4 (31 samples, 0.01%)</title><rect x="8.5811%" y="6853" width="0.0111%" height="15" fill="rgb(217,220,26)" fg:x="24014" fg:w="31"/><text x="8.8311%" y="6863.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::contains(ref$&lt;slice2$&lt;tuple$&lt;usize,usize&gt; &gt; &gt;, tuple$ (271 samples, 0.10%)</title><rect x="8.5922%" y="7157" width="0.0968%" height="15" fill="rgb(213,158,28)" fg:x="24045" fg:w="271"/><text x="8.8422%" y="7167.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (271 samples, 0.10%)</title><rect x="8.5922%" y="7141" width="0.0968%" height="15" fill="rgb(252,51,52)" fg:x="24045" fg:w="271"/><text x="8.8422%" y="7151.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (271 samples, 0.10%)</title><rect x="8.5922%" y="7125" width="0.0968%" height="15" fill="rgb(246,89,16)" fg:x="24045" fg:w="271"/><text x="8.8422%" y="7135.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (32 samples, 0.01%)</title><rect x="8.6776%" y="7109" width="0.0114%" height="15" fill="rgb(216,158,49)" fg:x="24284" fg:w="32"/><text x="8.9276%" y="7119.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (148 samples, 0.05%)</title><rect x="8.6890%" y="7157" width="0.0529%" height="15" fill="rgb(236,107,19)" fg:x="24316" fg:w="148"/><text x="8.9390%" y="7167.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (43 samples, 0.02%)</title><rect x="8.7266%" y="7141" width="0.0154%" height="15" fill="rgb(228,185,30)" fg:x="24421" fg:w="43"/><text x="8.9766%" y="7151.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (43 samples, 0.02%)</title><rect x="8.7266%" y="7125" width="0.0154%" height="15" fill="rgb(246,134,8)" fg:x="24421" fg:w="43"/><text x="8.9766%" y="7135.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (43 samples, 0.02%)</title><rect x="8.7266%" y="7109" width="0.0154%" height="15" fill="rgb(214,143,50)" fg:x="24421" fg:w="43"/><text x="8.9766%" y="7119.50"></text></g><g><title>`0x7FF97E69CC6F (55 samples, 0.02%)</title><rect x="8.8927%" y="7093" width="0.0197%" height="15" fill="rgb(228,75,8)" fg:x="24886" fg:w="55"/><text x="9.1427%" y="7103.50"></text></g><g><title>`0x7FF97E62AFF1 (307 samples, 0.11%)</title><rect x="8.8177%" y="7109" width="0.1097%" height="15" fill="rgb(207,175,4)" fg:x="24676" fg:w="307"/><text x="9.0677%" y="7119.50"></text></g><g><title>`0x7FF97E62D57C (42 samples, 0.02%)</title><rect x="9.0031%" y="6885" width="0.0150%" height="15" fill="rgb(205,108,24)" fg:x="25195" fg:w="42"/><text x="9.2531%" y="6895.50"></text></g><g><title>`0x7FF97E62D68A (67 samples, 0.02%)</title><rect x="9.0342%" y="6885" width="0.0239%" height="15" fill="rgb(244,120,49)" fg:x="25282" fg:w="67"/><text x="9.2842%" y="6895.50"></text></g><g><title>`0x7FF97E62CC9A (299 samples, 0.11%)</title><rect x="9.0028%" y="6901" width="0.1068%" height="15" fill="rgb(223,47,38)" fg:x="25194" fg:w="299"/><text x="9.2528%" y="6911.50"></text></g><g><title>`0x7FF97E633500 (43 samples, 0.02%)</title><rect x="9.1872%" y="6869" width="0.0154%" height="15" fill="rgb(229,179,11)" fg:x="25710" fg:w="43"/><text x="9.4372%" y="6879.50"></text></g><g><title>`0x7FF97E62CB02 (37 samples, 0.01%)</title><rect x="9.2093%" y="6853" width="0.0132%" height="15" fill="rgb(231,122,1)" fg:x="25772" fg:w="37"/><text x="9.4593%" y="6863.50"></text></g><g><title>`0x7FF97E62CB29 (34 samples, 0.01%)</title><rect x="9.2297%" y="6853" width="0.0121%" height="15" fill="rgb(245,119,9)" fg:x="25829" fg:w="34"/><text x="9.4797%" y="6863.50"></text></g><g><title>`0x7FF97E62D68A (39 samples, 0.01%)</title><rect x="9.3626%" y="6837" width="0.0139%" height="15" fill="rgb(241,163,25)" fg:x="26201" fg:w="39"/><text x="9.6126%" y="6847.50"></text></g><g><title>`0x7FF97E65354E (41 samples, 0.01%)</title><rect x="9.4073%" y="6821" width="0.0147%" height="15" fill="rgb(217,214,3)" fg:x="26326" fg:w="41"/><text x="9.6573%" y="6831.50"></text></g><g><title>`0x7FF97E693D45 (36 samples, 0.01%)</title><rect x="9.4091%" y="6805" width="0.0129%" height="15" fill="rgb(240,86,28)" fg:x="26331" fg:w="36"/><text x="9.6591%" y="6815.50"></text></g><g><title>`0x7FF97E62DB41 (47 samples, 0.02%)</title><rect x="9.4066%" y="6837" width="0.0168%" height="15" fill="rgb(215,47,9)" fg:x="26324" fg:w="47"/><text x="9.6566%" y="6847.50"></text></g><g><title>`0x7FF97E631B1F (45 samples, 0.02%)</title><rect x="9.4548%" y="6821" width="0.0161%" height="15" fill="rgb(252,25,45)" fg:x="26459" fg:w="45"/><text x="9.7048%" y="6831.50"></text></g><g><title>`0x7FF97E62DBBF (125 samples, 0.04%)</title><rect x="9.4266%" y="6837" width="0.0447%" height="15" fill="rgb(251,164,9)" fg:x="26380" fg:w="125"/><text x="9.6766%" y="6847.50"></text></g><g><title>`0x7FF97E62DBDD (48 samples, 0.02%)</title><rect x="9.4712%" y="6837" width="0.0172%" height="15" fill="rgb(233,194,0)" fg:x="26505" fg:w="48"/><text x="9.7212%" y="6847.50"></text></g><g><title>`0x7FF97E62CC9A (479 samples, 0.17%)</title><rect x="9.3183%" y="6853" width="0.1712%" height="15" fill="rgb(249,111,24)" fg:x="26077" fg:w="479"/><text x="9.5683%" y="6863.50"></text></g><g><title>`0x7FF97E62CCC1 (28 samples, 0.01%)</title><rect x="9.4895%" y="6853" width="0.0100%" height="15" fill="rgb(250,223,3)" fg:x="26556" fg:w="28"/><text x="9.7395%" y="6863.50"></text></g><g><title>`0x7FF97E633505 (850 samples, 0.30%)</title><rect x="9.2025%" y="6869" width="0.3037%" height="15" fill="rgb(236,178,37)" fg:x="25753" fg:w="850"/><text x="9.4525%" y="6879.50"></text></g><g><title>`0x7FF97E696B96 (192 samples, 0.07%)</title><rect x="9.5109%" y="6853" width="0.0686%" height="15" fill="rgb(241,158,50)" fg:x="26616" fg:w="192"/><text x="9.7609%" y="6863.50"></text></g><g><title>`0x7FF97E696C00 (29 samples, 0.01%)</title><rect x="9.5809%" y="6853" width="0.0104%" height="15" fill="rgb(213,121,41)" fg:x="26812" fg:w="29"/><text x="9.8309%" y="6863.50"></text></g><g><title>`0x7FF97E633550 (307 samples, 0.11%)</title><rect x="9.5063%" y="6869" width="0.1097%" height="15" fill="rgb(240,92,3)" fg:x="26603" fg:w="307"/><text x="9.7563%" y="6879.50"></text></g><g><title>`0x7FF97E69CC6F (76 samples, 0.03%)</title><rect x="9.6592%" y="6837" width="0.0272%" height="15" fill="rgb(205,123,3)" fg:x="27031" fg:w="76"/><text x="9.9092%" y="6847.50"></text></g><g><title>`0x7FF97E69CD55 (40 samples, 0.01%)</title><rect x="9.7042%" y="6837" width="0.0143%" height="15" fill="rgb(205,97,47)" fg:x="27157" fg:w="40"/><text x="9.9542%" y="6847.50"></text></g><g><title>`0x7FF97E62AFF1 (331 samples, 0.12%)</title><rect x="9.6224%" y="6853" width="0.1183%" height="15" fill="rgb(247,152,14)" fg:x="26928" fg:w="331"/><text x="9.8724%" y="6863.50"></text></g><g><title>`0x7FF97E633562 (352 samples, 0.13%)</title><rect x="9.6163%" y="6869" width="0.1258%" height="15" fill="rgb(248,195,53)" fg:x="26911" fg:w="352"/><text x="9.8663%" y="6879.50"></text></g><g><title>`0x7FF97E6322C7 (1,701 samples, 0.61%)</title><rect x="9.1504%" y="6885" width="0.6078%" height="15" fill="rgb(226,201,16)" fg:x="25607" fg:w="1701"/><text x="9.4004%" y="6895.50"></text></g><g><title>`0x7FF97E632307 (31 samples, 0.01%)</title><rect x="9.7689%" y="6885" width="0.0111%" height="15" fill="rgb(205,98,0)" fg:x="27338" fg:w="31"/><text x="10.0189%" y="6895.50"></text></g><g><title>`0x7FF97E632312 (49 samples, 0.02%)</title><rect x="9.7800%" y="6885" width="0.0175%" height="15" fill="rgb(214,191,48)" fg:x="27369" fg:w="49"/><text x="10.0300%" y="6895.50"></text></g><g><title>`0x7FF97E63218A (1,858 samples, 0.66%)</title><rect x="9.1346%" y="6901" width="0.6639%" height="15" fill="rgb(237,112,39)" fg:x="25563" fg:w="1858"/><text x="9.3846%" y="6911.50"></text></g><g><title>`0x7FF97E63219E (37 samples, 0.01%)</title><rect x="9.8007%" y="6901" width="0.0132%" height="15" fill="rgb(247,203,27)" fg:x="27427" fg:w="37"/><text x="10.0507%" y="6911.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (2,324 samples, 0.83%)</title><rect x="8.9913%" y="6949" width="0.8305%" height="15" fill="rgb(235,124,28)" fg:x="25162" fg:w="2324"/><text x="9.2413%" y="6959.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (2,324 samples, 0.83%)</title><rect x="8.9913%" y="6933" width="0.8305%" height="15" fill="rgb(208,207,46)" fg:x="25162" fg:w="2324"/><text x="9.2413%" y="6943.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (2,321 samples, 0.83%)</title><rect x="8.9924%" y="6917" width="0.8294%" height="15" fill="rgb(234,176,4)" fg:x="25165" fg:w="2321"/><text x="9.2424%" y="6927.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_mut_ptr (2,528 samples, 0.90%)</title><rect x="8.9392%" y="7093" width="0.9034%" height="15" fill="rgb(230,133,28)" fg:x="25016" fg:w="2528"/><text x="9.1892%" y="7103.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (2,527 samples, 0.90%)</title><rect x="8.9395%" y="7077" width="0.9030%" height="15" fill="rgb(211,137,40)" fg:x="25017" fg:w="2527"/><text x="9.1895%" y="7087.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (2,527 samples, 0.90%)</title><rect x="8.9395%" y="7061" width="0.9030%" height="15" fill="rgb(254,35,13)" fg:x="25017" fg:w="2527"/><text x="9.1895%" y="7071.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (2,527 samples, 0.90%)</title><rect x="8.9395%" y="7045" width="0.9030%" height="15" fill="rgb(225,49,51)" fg:x="25017" fg:w="2527"/><text x="9.1895%" y="7055.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::grow_one&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; (2,520 samples, 0.90%)</title><rect x="8.9420%" y="7029" width="0.9005%" height="15" fill="rgb(251,10,15)" fg:x="25024" fg:w="2520"/><text x="9.1920%" y="7039.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (2,461 samples, 0.88%)</title><rect x="8.9631%" y="7013" width="0.8794%" height="15" fill="rgb(228,207,15)" fg:x="25083" fg:w="2461"/><text x="9.2131%" y="7023.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (2,457 samples, 0.88%)</title><rect x="8.9645%" y="6997" width="0.8780%" height="15" fill="rgb(241,99,19)" fg:x="25087" fg:w="2457"/><text x="9.2145%" y="7007.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (2,427 samples, 0.87%)</title><rect x="8.9753%" y="6981" width="0.8673%" height="15" fill="rgb(207,104,49)" fg:x="25117" fg:w="2427"/><text x="9.2253%" y="6991.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (2,413 samples, 0.86%)</title><rect x="8.9803%" y="6965" width="0.8623%" height="15" fill="rgb(234,99,18)" fg:x="25131" fg:w="2413"/><text x="9.2303%" y="6975.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;, alloc::raw_vec::finish_grow::closure_env$0 (58 samples, 0.02%)</title><rect x="9.8218%" y="6949" width="0.0207%" height="15" fill="rgb(213,191,49)" fg:x="27486" fg:w="58"/><text x="10.0718%" y="6959.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (2,814 samples, 1.01%)</title><rect x="8.9310%" y="7109" width="1.0055%" height="15" fill="rgb(210,226,19)" fg:x="24993" fg:w="2814"/><text x="9.1810%" y="7119.50"></text></g><g><title>neural_network.exe`core::ptr::write(tuple$&lt;usize,usize&gt;*, tuple$ (263 samples, 0.09%)</title><rect x="9.8425%" y="7093" width="0.0940%" height="15" fill="rgb(229,97,18)" fg:x="27544" fg:w="263"/><text x="10.0925%" y="7103.50"></text></g><g><title>`0x7FF968D51381 (260 samples, 0.09%)</title><rect x="9.9601%" y="7045" width="0.0929%" height="15" fill="rgb(211,167,15)" fg:x="27873" fg:w="260"/><text x="10.2101%" y="7055.50"></text></g><g><title>`0x7FF97E62D5E2 (41 samples, 0.01%)</title><rect x="10.1849%" y="6965" width="0.0147%" height="15" fill="rgb(210,169,34)" fg:x="28502" fg:w="41"/><text x="10.4349%" y="6975.50"></text></g><g><title>`0x7FF97E62D68A (33 samples, 0.01%)</title><rect x="10.2020%" y="6965" width="0.0118%" height="15" fill="rgb(241,121,31)" fg:x="28550" fg:w="33"/><text x="10.4520%" y="6975.50"></text></g><g><title>`0x7FF97E65354E (29 samples, 0.01%)</title><rect x="10.2552%" y="6949" width="0.0104%" height="15" fill="rgb(232,40,11)" fg:x="28699" fg:w="29"/><text x="10.5052%" y="6959.50"></text></g><g><title>`0x7FF97E62DB41 (42 samples, 0.02%)</title><rect x="10.2542%" y="6965" width="0.0150%" height="15" fill="rgb(205,86,26)" fg:x="28696" fg:w="42"/><text x="10.5042%" y="6975.50"></text></g><g><title>`0x7FF97E62DBBF (91 samples, 0.03%)</title><rect x="10.2738%" y="6965" width="0.0325%" height="15" fill="rgb(231,126,28)" fg:x="28751" fg:w="91"/><text x="10.5238%" y="6975.50"></text></g><g><title>`0x7FF97E631B1F (44 samples, 0.02%)</title><rect x="10.2906%" y="6949" width="0.0157%" height="15" fill="rgb(219,221,18)" fg:x="28798" fg:w="44"/><text x="10.5406%" y="6959.50"></text></g><g><title>`0x7FF97E62DBDD (48 samples, 0.02%)</title><rect x="10.3063%" y="6965" width="0.0172%" height="15" fill="rgb(211,40,0)" fg:x="28842" fg:w="48"/><text x="10.5563%" y="6975.50"></text></g><g><title>`0x7FF97E62CC9A (503 samples, 0.18%)</title><rect x="10.1441%" y="6981" width="0.1797%" height="15" fill="rgb(239,85,43)" fg:x="28388" fg:w="503"/><text x="10.3941%" y="6991.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (822 samples, 0.29%)</title><rect x="10.0644%" y="7045" width="0.2937%" height="15" fill="rgb(231,55,21)" fg:x="28165" fg:w="822"/><text x="10.3144%" y="7055.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (822 samples, 0.29%)</title><rect x="10.0644%" y="7029" width="0.2937%" height="15" fill="rgb(225,184,43)" fg:x="28165" fg:w="822"/><text x="10.3144%" y="7039.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (822 samples, 0.29%)</title><rect x="10.0644%" y="7013" width="0.2937%" height="15" fill="rgb(251,158,41)" fg:x="28165" fg:w="822"/><text x="10.3144%" y="7023.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (822 samples, 0.29%)</title><rect x="10.0644%" y="6997" width="0.2937%" height="15" fill="rgb(234,159,37)" fg:x="28165" fg:w="822"/><text x="10.3144%" y="7007.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$&lt;tuple$ (1,161 samples, 0.41%)</title><rect x="9.9447%" y="7077" width="0.4149%" height="15" fill="rgb(216,204,22)" fg:x="27830" fg:w="1161"/><text x="10.1947%" y="7087.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$&lt;tuple$ (1,161 samples, 0.41%)</title><rect x="9.9447%" y="7061" width="0.4149%" height="15" fill="rgb(214,17,3)" fg:x="27830" fg:w="1161"/><text x="10.1947%" y="7071.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$11::clone(alloc::vec::Vec&lt;tuple$ (1,166 samples, 0.42%)</title><rect x="9.9433%" y="7109" width="0.4167%" height="15" fill="rgb(212,111,17)" fg:x="27826" fg:w="1166"/><text x="10.1933%" y="7119.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (1,166 samples, 0.42%)</title><rect x="9.9433%" y="7093" width="0.4167%" height="15" fill="rgb(221,157,24)" fg:x="27826" fg:w="1166"/><text x="10.1933%" y="7103.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (730 samples, 0.26%)</title><rect x="10.3835%" y="7093" width="0.2609%" height="15" fill="rgb(252,16,13)" fg:x="29058" fg:w="730"/><text x="10.6335%" y="7103.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (730 samples, 0.26%)</title><rect x="10.3835%" y="7077" width="0.2609%" height="15" fill="rgb(221,62,2)" fg:x="29058" fg:w="730"/><text x="10.6335%" y="7087.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (135 samples, 0.05%)</title><rect x="10.5961%" y="7061" width="0.0482%" height="15" fill="rgb(247,87,22)" fg:x="29653" fg:w="135"/><text x="10.8461%" y="7071.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$ (987 samples, 0.35%)</title><rect x="10.3599%" y="7109" width="0.3527%" height="15" fill="rgb(215,73,9)" fg:x="28992" fg:w="987"/><text x="10.6099%" y="7119.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;tuple$ (191 samples, 0.07%)</title><rect x="10.6444%" y="7093" width="0.0683%" height="15" fill="rgb(207,175,33)" fg:x="29788" fg:w="191"/><text x="10.8944%" y="7103.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;tuple$ (175 samples, 0.06%)</title><rect x="10.6501%" y="7077" width="0.0625%" height="15" fill="rgb(243,129,54)" fg:x="29804" fg:w="175"/><text x="10.9001%" y="7087.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (35 samples, 0.01%)</title><rect x="10.7126%" y="7093" width="0.0125%" height="15" fill="rgb(227,119,45)" fg:x="29979" fg:w="35"/><text x="10.9626%" y="7103.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, core::ops::range::Range (621 samples, 0.22%)</title><rect x="10.7126%" y="7109" width="0.2219%" height="15" fill="rgb(205,109,36)" fg:x="29979" fg:w="621"/><text x="10.9626%" y="7119.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (586 samples, 0.21%)</title><rect x="10.7251%" y="7093" width="0.2094%" height="15" fill="rgb(205,6,39)" fg:x="30014" fg:w="586"/><text x="10.9751%" y="7103.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (586 samples, 0.21%)</title><rect x="10.7251%" y="7077" width="0.2094%" height="15" fill="rgb(221,32,16)" fg:x="30014" fg:w="586"/><text x="10.9751%" y="7087.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (60 samples, 0.02%)</title><rect x="10.9131%" y="7061" width="0.0214%" height="15" fill="rgb(228,144,50)" fg:x="30540" fg:w="60"/><text x="11.1631%" y="7071.50"></text></g><g><title>`0x7FF97E62AFBA (58 samples, 0.02%)</title><rect x="10.9485%" y="7013" width="0.0207%" height="15" fill="rgb(229,201,53)" fg:x="30639" fg:w="58"/><text x="11.1985%" y="7023.50"></text></g><g><title>`0x7FF97E62AFE0 (80 samples, 0.03%)</title><rect x="10.9710%" y="7013" width="0.0286%" height="15" fill="rgb(249,153,27)" fg:x="30702" fg:w="80"/><text x="11.2210%" y="7023.50"></text></g><g><title>`0x7FF97E62BB70 (104 samples, 0.04%)</title><rect x="11.0003%" y="6997" width="0.0372%" height="15" fill="rgb(227,106,25)" fg:x="30784" fg:w="104"/><text x="11.2503%" y="7007.50"></text></g><g><title>`0x7FF97E62BB84 (123 samples, 0.04%)</title><rect x="11.0392%" y="6997" width="0.0440%" height="15" fill="rgb(230,65,29)" fg:x="30893" fg:w="123"/><text x="11.2892%" y="7007.50"></text></g><g><title>`0x7FF97E62C2B1 (119 samples, 0.04%)</title><rect x="11.0850%" y="6997" width="0.0425%" height="15" fill="rgb(221,57,46)" fg:x="31021" fg:w="119"/><text x="11.3350%" y="7007.50"></text></g><g><title>`0x7FF97E62C38A (117 samples, 0.04%)</title><rect x="11.1357%" y="6997" width="0.0418%" height="15" fill="rgb(229,161,17)" fg:x="31163" fg:w="117"/><text x="11.3857%" y="7007.50"></text></g><g><title>`0x7FF97E69CB43 (78 samples, 0.03%)</title><rect x="11.1775%" y="6997" width="0.0279%" height="15" fill="rgb(222,213,11)" fg:x="31280" fg:w="78"/><text x="11.4275%" y="7007.50"></text></g><g><title>`0x7FF97E62AFF1 (776 samples, 0.28%)</title><rect x="10.9999%" y="7013" width="0.2773%" height="15" fill="rgb(235,35,13)" fg:x="30783" fg:w="776"/><text x="11.2499%" y="7023.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (968 samples, 0.35%)</title><rect x="10.9399%" y="7045" width="0.3459%" height="15" fill="rgb(233,158,34)" fg:x="30615" fg:w="968"/><text x="11.1899%" y="7055.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (968 samples, 0.35%)</title><rect x="10.9399%" y="7029" width="0.3459%" height="15" fill="rgb(215,151,48)" fg:x="30615" fg:w="968"/><text x="11.1899%" y="7039.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;tuple$ (993 samples, 0.35%)</title><rect x="10.9345%" y="7109" width="0.3548%" height="15" fill="rgb(229,84,14)" fg:x="30600" fg:w="993"/><text x="11.1845%" y="7119.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (993 samples, 0.35%)</title><rect x="10.9345%" y="7093" width="0.3548%" height="15" fill="rgb(229,68,14)" fg:x="30600" fg:w="993"/><text x="11.1845%" y="7103.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (993 samples, 0.35%)</title><rect x="10.9345%" y="7077" width="0.3548%" height="15" fill="rgb(243,106,26)" fg:x="30600" fg:w="993"/><text x="11.1845%" y="7087.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (978 samples, 0.35%)</title><rect x="10.9399%" y="7061" width="0.3495%" height="15" fill="rgb(206,45,38)" fg:x="30615" fg:w="978"/><text x="11.1899%" y="7071.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::swap(ref_mut$&lt;slice2$&lt;tuple$ (90 samples, 0.03%)</title><rect x="11.2980%" y="7013" width="0.0322%" height="15" fill="rgb(226,6,15)" fg:x="31617" fg:w="90"/><text x="11.5480%" y="7023.50"></text></g><g><title>neural_network.exe`core::ptr::swap(tuple$&lt;usize,usize&gt;*, tuple$ (52 samples, 0.02%)</title><rect x="11.3115%" y="6997" width="0.0186%" height="15" fill="rgb(232,22,54)" fg:x="31655" fg:w="52"/><text x="11.5615%" y="7007.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping(tuple$&lt;usize,usize&gt;*, tuple$ (35 samples, 0.01%)</title><rect x="11.3176%" y="6981" width="0.0125%" height="15" fill="rgb(229,222,32)" fg:x="31672" fg:w="35"/><text x="11.5676%" y="6991.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide::impl_avx2 (34 samples, 0.01%)</title><rect x="11.3676%" y="6789" width="0.0121%" height="15" fill="rgb(228,62,29)" fg:x="31812" fg:w="34"/><text x="11.6176%" y="6799.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide::fn_impl(ppv_lite86::x86_64::Avx2Machine (33 samples, 0.01%)</title><rect x="11.3680%" y="6773" width="0.0118%" height="15" fill="rgb(251,103,34)" fg:x="31813" fg:w="33"/><text x="11.6180%" y="6783.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide_impl(ppv_lite86::x86_64::Avx2Machine (33 samples, 0.01%)</title><rect x="11.3680%" y="6757" width="0.0118%" height="15" fill="rgb(233,12,30)" fg:x="31813" fg:w="33"/><text x="11.6180%" y="6767.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place (254 samples, 0.09%)</title><rect x="11.2894%" y="7109" width="0.0908%" height="15" fill="rgb(238,52,0)" fg:x="31593" fg:w="254"/><text x="11.5394%" y="7119.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (254 samples, 0.09%)</title><rect x="11.2894%" y="7093" width="0.0908%" height="15" fill="rgb(223,98,5)" fg:x="31593" fg:w="254"/><text x="11.5394%" y="7103.50"></text></g><g><title>neural_network.exe`alloc::rc::impl$30::drop(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (254 samples, 0.09%)</title><rect x="11.2894%" y="7077" width="0.0908%" height="15" fill="rgb(228,75,37)" fg:x="31593" fg:w="254"/><text x="11.5394%" y="7087.50"></text></g><g><title>neural_network.exe`alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;::inner (249 samples, 0.09%)</title><rect x="11.2912%" y="7061" width="0.0890%" height="15" fill="rgb(205,115,49)" fg:x="31598" fg:w="249"/><text x="11.5412%" y="7071.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;alloc::rc::RcBox&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt; &gt; &gt;::as_ref (247 samples, 0.09%)</title><rect x="11.2919%" y="7045" width="0.0883%" height="15" fill="rgb(250,154,43)" fg:x="31600" fg:w="247"/><text x="11.5419%" y="7055.50"></text></g><g><title>neural_network.exe`rand::seq::impl$0::shuffle&lt;tuple$&lt;usize,usize&gt;,rand::rngs::thread::ThreadRng&gt;(ref_mut$&lt;slice2$&lt;tuple$ (247 samples, 0.09%)</title><rect x="11.2919%" y="7029" width="0.0883%" height="15" fill="rgb(226,43,29)" fg:x="31600" fg:w="247"/><text x="11.5419%" y="7039.50"></text></g><g><title>neural_network.exe`rand::seq::gen_index (140 samples, 0.05%)</title><rect x="11.3301%" y="7013" width="0.0500%" height="15" fill="rgb(249,228,39)" fg:x="31707" fg:w="140"/><text x="11.5801%" y="7023.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen_range(rand::rngs::thread::ThreadRng*, core::ops::range::Range (139 samples, 0.05%)</title><rect x="11.3305%" y="6997" width="0.0497%" height="15" fill="rgb(216,79,43)" fg:x="31708" fg:w="139"/><text x="11.5805%" y="7007.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$6::sample_single(core::ops::range::Range (139 samples, 0.05%)</title><rect x="11.3305%" y="6981" width="0.0497%" height="15" fill="rgb(228,95,12)" fg:x="31708" fg:w="139"/><text x="11.5805%" y="6991.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single (139 samples, 0.05%)</title><rect x="11.3305%" y="6965" width="0.0497%" height="15" fill="rgb(249,221,15)" fg:x="31708" fg:w="139"/><text x="11.5805%" y="6975.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single_inclusive (139 samples, 0.05%)</title><rect x="11.3305%" y="6949" width="0.0497%" height="15" fill="rgb(233,34,13)" fg:x="31708" fg:w="139"/><text x="11.5805%" y="6959.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen (114 samples, 0.04%)</title><rect x="11.3394%" y="6933" width="0.0407%" height="15" fill="rgb(214,103,39)" fg:x="31733" fg:w="114"/><text x="11.5894%" y="6943.50"></text></g><g><title>neural_network.exe`rand::distributions::integer::impl$2::sample (114 samples, 0.04%)</title><rect x="11.3394%" y="6917" width="0.0407%" height="15" fill="rgb(251,126,39)" fg:x="31733" fg:w="114"/><text x="11.5894%" y="6927.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::impl$1::next_u32 (114 samples, 0.04%)</title><rect x="11.3394%" y="6901" width="0.0407%" height="15" fill="rgb(214,216,36)" fg:x="31733" fg:w="114"/><text x="11.5894%" y="6911.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$1::next_u32(rand::rngs::adapter::reseeding::ReseedingRng (114 samples, 0.04%)</title><rect x="11.3394%" y="6885" width="0.0407%" height="15" fill="rgb(220,221,8)" fg:x="31733" fg:w="114"/><text x="11.5894%" y="6895.50"></text></g><g><title>neural_network.exe`rand_core::block::impl$2::next_u32(rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore (114 samples, 0.04%)</title><rect x="11.3394%" y="6869" width="0.0407%" height="15" fill="rgb(240,216,3)" fg:x="31733" fg:w="114"/><text x="11.5894%" y="6879.50"></text></g><g><title>neural_network.exe`rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;::generate_and_set (39 samples, 0.01%)</title><rect x="11.3662%" y="6853" width="0.0139%" height="15" fill="rgb(232,218,17)" fg:x="31808" fg:w="39"/><text x="11.6162%" y="6863.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$4::generate(rand::rngs::adapter::reseeding::ReseedingCore&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt;*, rand_chacha::chacha::Array64 (39 samples, 0.01%)</title><rect x="11.3662%" y="6837" width="0.0139%" height="15" fill="rgb(229,163,45)" fg:x="31808" fg:w="39"/><text x="11.6162%" y="6847.50"></text></g><g><title>neural_network.exe`rand_chacha::chacha::impl$23::generate(rand_chacha::chacha::ChaCha12Core*, rand_chacha::chacha::Array64 (35 samples, 0.01%)</title><rect x="11.3676%" y="6821" width="0.0125%" height="15" fill="rgb(231,110,42)" fg:x="31812" fg:w="35"/><text x="11.6176%" y="6831.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::ChaCha::refill4 (35 samples, 0.01%)</title><rect x="11.3676%" y="6805" width="0.0125%" height="15" fill="rgb(208,170,48)" fg:x="31812" fg:w="35"/><text x="11.6176%" y="6815.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::contains(ref$&lt;slice2$&lt;tuple$&lt;usize,usize&gt; &gt; &gt;, tuple$ (366 samples, 0.13%)</title><rect x="11.3801%" y="7109" width="0.1308%" height="15" fill="rgb(239,116,25)" fg:x="31847" fg:w="366"/><text x="11.6301%" y="7119.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (366 samples, 0.13%)</title><rect x="11.3801%" y="7093" width="0.1308%" height="15" fill="rgb(219,200,50)" fg:x="31847" fg:w="366"/><text x="11.6301%" y="7103.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (366 samples, 0.13%)</title><rect x="11.3801%" y="7077" width="0.1308%" height="15" fill="rgb(245,200,0)" fg:x="31847" fg:w="366"/><text x="11.6301%" y="7087.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (56 samples, 0.02%)</title><rect x="11.4909%" y="7061" width="0.0200%" height="15" fill="rgb(245,119,33)" fg:x="32157" fg:w="56"/><text x="11.7409%" y="7071.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (142 samples, 0.05%)</title><rect x="11.5109%" y="7109" width="0.0507%" height="15" fill="rgb(231,125,12)" fg:x="32213" fg:w="142"/><text x="11.7609%" y="7119.50"></text></g><g><title>`0x7FF97E69CC6F (69 samples, 0.02%)</title><rect x="11.7018%" y="7045" width="0.0247%" height="15" fill="rgb(216,96,41)" fg:x="32747" fg:w="69"/><text x="11.9518%" y="7055.50"></text></g><g><title>`0x7FF97E69CF99 (104 samples, 0.04%)</title><rect x="11.7361%" y="7045" width="0.0372%" height="15" fill="rgb(248,43,45)" fg:x="32843" fg:w="104"/><text x="11.9861%" y="7055.50"></text></g><g><title>`0x7FF97E69D03B (34 samples, 0.01%)</title><rect x="11.7936%" y="7045" width="0.0121%" height="15" fill="rgb(217,222,7)" fg:x="33004" fg:w="34"/><text x="12.0436%" y="7055.50"></text></g><g><title>`0x7FF97E693D8A (33 samples, 0.01%)</title><rect x="11.7939%" y="7029" width="0.0118%" height="15" fill="rgb(233,28,6)" fg:x="33005" fg:w="33"/><text x="12.0439%" y="7039.50"></text></g><g><title>`0x7FF97E62AFF1 (477 samples, 0.17%)</title><rect x="11.6364%" y="7061" width="0.1705%" height="15" fill="rgb(231,218,15)" fg:x="32564" fg:w="477"/><text x="11.8864%" y="7071.50"></text></g><g><title>`0x7FF97E62D57C (37 samples, 0.01%)</title><rect x="11.9019%" y="6837" width="0.0132%" height="15" fill="rgb(226,171,48)" fg:x="33307" fg:w="37"/><text x="12.1519%" y="6847.50"></text></g><g><title>`0x7FF97E62D68A (93 samples, 0.03%)</title><rect x="11.9397%" y="6837" width="0.0332%" height="15" fill="rgb(235,201,9)" fg:x="33413" fg:w="93"/><text x="12.1897%" y="6847.50"></text></g><g><title>`0x7FF97E62D8B9 (42 samples, 0.02%)</title><rect x="12.0198%" y="6837" width="0.0150%" height="15" fill="rgb(217,80,15)" fg:x="33637" fg:w="42"/><text x="12.2698%" y="6847.50"></text></g><g><title>`0x7FF97E62DDD0 (36 samples, 0.01%)</title><rect x="12.0480%" y="6837" width="0.0129%" height="15" fill="rgb(219,152,8)" fg:x="33716" fg:w="36"/><text x="12.2980%" y="6847.50"></text></g><g><title>`0x7FF97E62DDFE (42 samples, 0.02%)</title><rect x="12.0637%" y="6837" width="0.0150%" height="15" fill="rgb(243,107,38)" fg:x="33760" fg:w="42"/><text x="12.3137%" y="6847.50"></text></g><g><title>`0x7FF97E62CC9A (498 samples, 0.18%)</title><rect x="11.9019%" y="6853" width="0.1780%" height="15" fill="rgb(231,17,5)" fg:x="33307" fg:w="498"/><text x="12.1519%" y="6863.50"></text></g><g><title>`0x7FF97E6324C5 (35 samples, 0.01%)</title><rect x="12.1463%" y="6821" width="0.0125%" height="15" fill="rgb(209,25,54)" fg:x="33991" fg:w="35"/><text x="12.3963%" y="6831.50"></text></g><g><title>`0x7FF97E6334DC (32 samples, 0.01%)</title><rect x="12.1588%" y="6821" width="0.0114%" height="15" fill="rgb(219,0,2)" fg:x="34026" fg:w="32"/><text x="12.4088%" y="6831.50"></text></g><g><title>`0x7FF97E633500 (50 samples, 0.02%)</title><rect x="12.1709%" y="6821" width="0.0179%" height="15" fill="rgb(246,9,5)" fg:x="34060" fg:w="50"/><text x="12.4209%" y="6831.50"></text></g><g><title>`0x7FF97E62CAFB (43 samples, 0.02%)</title><rect x="12.1913%" y="6805" width="0.0154%" height="15" fill="rgb(226,159,4)" fg:x="34117" fg:w="43"/><text x="12.4413%" y="6815.50"></text></g><g><title>`0x7FF97E62CB1A (31 samples, 0.01%)</title><rect x="12.2117%" y="6805" width="0.0111%" height="15" fill="rgb(219,175,34)" fg:x="34174" fg:w="31"/><text x="12.4617%" y="6815.50"></text></g><g><title>`0x7FF97E62CB7E (34 samples, 0.01%)</title><rect x="12.2571%" y="6805" width="0.0121%" height="15" fill="rgb(236,10,46)" fg:x="34301" fg:w="34"/><text x="12.5071%" y="6815.50"></text></g><g><title>`0x7FF97E62CBE9 (31 samples, 0.01%)</title><rect x="12.3046%" y="6805" width="0.0111%" height="15" fill="rgb(240,211,16)" fg:x="34434" fg:w="31"/><text x="12.5546%" y="6815.50"></text></g><g><title>`0x7FF97E62D68A (45 samples, 0.02%)</title><rect x="12.3807%" y="6789" width="0.0161%" height="15" fill="rgb(205,3,43)" fg:x="34647" fg:w="45"/><text x="12.6307%" y="6799.50"></text></g><g><title>`0x7FF97E65354E (33 samples, 0.01%)</title><rect x="12.4336%" y="6773" width="0.0118%" height="15" fill="rgb(245,7,22)" fg:x="34795" fg:w="33"/><text x="12.6836%" y="6783.50"></text></g><g><title>`0x7FF97E693D45 (32 samples, 0.01%)</title><rect x="12.4339%" y="6757" width="0.0114%" height="15" fill="rgb(239,132,32)" fg:x="34796" fg:w="32"/><text x="12.6839%" y="6767.50"></text></g><g><title>`0x7FF97E62DB41 (43 samples, 0.02%)</title><rect x="12.4318%" y="6789" width="0.0154%" height="15" fill="rgb(228,202,34)" fg:x="34790" fg:w="43"/><text x="12.6818%" y="6799.50"></text></g><g><title>`0x7FF97E631B1F (48 samples, 0.02%)</title><rect x="12.4715%" y="6773" width="0.0172%" height="15" fill="rgb(254,200,22)" fg:x="34901" fg:w="48"/><text x="12.7215%" y="6783.50"></text></g><g><title>`0x7FF97E631CA3 (28 samples, 0.01%)</title><rect x="12.4786%" y="6757" width="0.0100%" height="15" fill="rgb(219,10,39)" fg:x="34921" fg:w="28"/><text x="12.7286%" y="6767.50"></text></g><g><title>`0x7FF97E62DBBF (108 samples, 0.04%)</title><rect x="12.4507%" y="6789" width="0.0386%" height="15" fill="rgb(226,210,39)" fg:x="34843" fg:w="108"/><text x="12.7007%" y="6799.50"></text></g><g><title>`0x7FF97E62DBDD (54 samples, 0.02%)</title><rect x="12.4893%" y="6789" width="0.0193%" height="15" fill="rgb(208,219,16)" fg:x="34951" fg:w="54"/><text x="12.7393%" y="6799.50"></text></g><g><title>`0x7FF97E62CC9A (501 samples, 0.18%)</title><rect x="12.3307%" y="6805" width="0.1790%" height="15" fill="rgb(216,158,51)" fg:x="34507" fg:w="501"/><text x="12.5807%" y="6815.50"></text></g><g><title>`0x7FF97E62CCF8 (34 samples, 0.01%)</title><rect x="12.5190%" y="6805" width="0.0121%" height="15" fill="rgb(233,14,44)" fg:x="35034" fg:w="34"/><text x="12.7690%" y="6815.50"></text></g><g><title>`0x7FF97E633505 (960 samples, 0.34%)</title><rect x="12.1888%" y="6821" width="0.3430%" height="15" fill="rgb(237,97,39)" fg:x="34110" fg:w="960"/><text x="12.4388%" y="6831.50"></text></g><g><title>`0x7FF97E696B96 (240 samples, 0.09%)</title><rect x="12.5333%" y="6805" width="0.0858%" height="15" fill="rgb(218,198,43)" fg:x="35074" fg:w="240"/><text x="12.7833%" y="6815.50"></text></g><g><title>`0x7FF97E633550 (358 samples, 0.13%)</title><rect x="12.5322%" y="6821" width="0.1279%" height="15" fill="rgb(231,104,20)" fg:x="35071" fg:w="358"/><text x="12.7822%" y="6831.50"></text></g><g><title>`0x7FF97E69CC6F (29 samples, 0.01%)</title><rect x="12.7127%" y="6789" width="0.0104%" height="15" fill="rgb(254,36,13)" fg:x="35576" fg:w="29"/><text x="12.9627%" y="6799.50"></text></g><g><title>`0x7FF97E69CCAF (36 samples, 0.01%)</title><rect x="12.7245%" y="6789" width="0.0129%" height="15" fill="rgb(248,14,50)" fg:x="35609" fg:w="36"/><text x="12.9745%" y="6799.50"></text></g><g><title>`0x7FF97E62AFF1 (232 samples, 0.08%)</title><rect x="12.6669%" y="6805" width="0.0829%" height="15" fill="rgb(217,107,29)" fg:x="35448" fg:w="232"/><text x="12.9169%" y="6815.50"></text></g><g><title>`0x7FF97E633562 (267 samples, 0.10%)</title><rect x="12.6605%" y="6821" width="0.0954%" height="15" fill="rgb(251,169,33)" fg:x="35430" fg:w="267"/><text x="12.9105%" y="6831.50"></text></g><g><title>`0x7FF97E6322C7 (1,826 samples, 0.65%)</title><rect x="12.1209%" y="6837" width="0.6525%" height="15" fill="rgb(217,108,32)" fg:x="33920" fg:w="1826"/><text x="12.3709%" y="6847.50"></text></g><g><title>`0x7FF97E632312 (47 samples, 0.02%)</title><rect x="12.7877%" y="6837" width="0.0168%" height="15" fill="rgb(219,66,42)" fg:x="35786" fg:w="47"/><text x="13.0377%" y="6847.50"></text></g><g><title>`0x7FF97E63218A (1,966 samples, 0.70%)</title><rect x="12.1027%" y="6853" width="0.7025%" height="15" fill="rgb(206,180,7)" fg:x="33869" fg:w="1966"/><text x="12.3527%" y="6863.50"></text></g><g><title>`0x7FF97E63219E (77 samples, 0.03%)</title><rect x="12.8052%" y="6853" width="0.0275%" height="15" fill="rgb(208,226,31)" fg:x="35835" fg:w="77"/><text x="13.0552%" y="6863.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (2,644 samples, 0.94%)</title><rect x="11.8947%" y="6901" width="0.9448%" height="15" fill="rgb(218,26,49)" fg:x="33287" fg:w="2644"/><text x="12.1447%" y="6911.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (2,644 samples, 0.94%)</title><rect x="11.8947%" y="6885" width="0.9448%" height="15" fill="rgb(233,197,48)" fg:x="33287" fg:w="2644"/><text x="12.1447%" y="6895.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (2,642 samples, 0.94%)</title><rect x="11.8954%" y="6869" width="0.9441%" height="15" fill="rgb(252,181,51)" fg:x="33289" fg:w="2642"/><text x="12.1454%" y="6879.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_mut_ptr (2,993 samples, 1.07%)</title><rect x="11.8172%" y="7045" width="1.0695%" height="15" fill="rgb(253,90,19)" fg:x="33070" fg:w="2993"/><text x="12.0672%" y="7055.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (2,992 samples, 1.07%)</title><rect x="11.8175%" y="7029" width="1.0692%" height="15" fill="rgb(215,171,30)" fg:x="33071" fg:w="2992"/><text x="12.0675%" y="7039.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (2,992 samples, 1.07%)</title><rect x="11.8175%" y="7013" width="1.0692%" height="15" fill="rgb(214,222,9)" fg:x="33071" fg:w="2992"/><text x="12.0675%" y="7023.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (2,992 samples, 1.07%)</title><rect x="11.8175%" y="6997" width="1.0692%" height="15" fill="rgb(223,3,22)" fg:x="33071" fg:w="2992"/><text x="12.0675%" y="7007.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::grow_one&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; (2,988 samples, 1.07%)</title><rect x="11.8190%" y="6981" width="1.0677%" height="15" fill="rgb(225,196,46)" fg:x="33075" fg:w="2988"/><text x="12.0690%" y="6991.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (2,915 samples, 1.04%)</title><rect x="11.8450%" y="6965" width="1.0416%" height="15" fill="rgb(209,110,37)" fg:x="33148" fg:w="2915"/><text x="12.0950%" y="6975.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (2,909 samples, 1.04%)</title><rect x="11.8472%" y="6949" width="1.0395%" height="15" fill="rgb(249,89,12)" fg:x="33154" fg:w="2909"/><text x="12.0972%" y="6959.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (2,851 samples, 1.02%)</title><rect x="11.8679%" y="6933" width="1.0188%" height="15" fill="rgb(226,27,33)" fg:x="33212" fg:w="2851"/><text x="12.1179%" y="6943.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (2,821 samples, 1.01%)</title><rect x="11.8786%" y="6917" width="1.0081%" height="15" fill="rgb(213,82,22)" fg:x="33242" fg:w="2821"/><text x="12.1286%" y="6927.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;, alloc::raw_vec::finish_grow::closure_env$0 (132 samples, 0.05%)</title><rect x="12.8395%" y="6901" width="0.0472%" height="15" fill="rgb(248,140,0)" fg:x="35931" fg:w="132"/><text x="13.0895%" y="6911.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (3,442 samples, 1.23%)</title><rect x="11.8097%" y="7061" width="1.2300%" height="15" fill="rgb(228,106,3)" fg:x="33049" fg:w="3442"/><text x="12.0597%" y="7071.50"></text></g><g><title>neural_network.exe`core::ptr::write(tuple$&lt;usize,usize&gt;*, tuple$ (428 samples, 0.15%)</title><rect x="12.8867%" y="7045" width="0.1529%" height="15" fill="rgb(209,23,37)" fg:x="36063" fg:w="428"/><text x="13.1367%" y="7055.50"></text></g><g><title>`0x7FF968D51381 (321 samples, 0.11%)</title><rect x="13.0664%" y="6997" width="0.1147%" height="15" fill="rgb(241,93,50)" fg:x="36566" fg:w="321"/><text x="13.3164%" y="7007.50"></text></g><g><title>`0x7FF97E62CAFF (39 samples, 0.01%)</title><rect x="13.1979%" y="6933" width="0.0139%" height="15" fill="rgb(253,46,43)" fg:x="36934" fg:w="39"/><text x="13.4479%" y="6943.50"></text></g><g><title>`0x7FF97E62CB20 (41 samples, 0.01%)</title><rect x="13.2119%" y="6933" width="0.0147%" height="15" fill="rgb(226,206,43)" fg:x="36973" fg:w="41"/><text x="13.4619%" y="6943.50"></text></g><g><title>`0x7FF97E62D5E2 (67 samples, 0.02%)</title><rect x="13.3416%" y="6917" width="0.0239%" height="15" fill="rgb(217,54,7)" fg:x="37336" fg:w="67"/><text x="13.5916%" y="6927.50"></text></g><g><title>`0x7FF97E62D68A (38 samples, 0.01%)</title><rect x="13.3712%" y="6917" width="0.0136%" height="15" fill="rgb(223,5,52)" fg:x="37419" fg:w="38"/><text x="13.6212%" y="6927.50"></text></g><g><title>`0x7FF97E62CC9A (362 samples, 0.13%)</title><rect x="13.2962%" y="6933" width="0.1294%" height="15" fill="rgb(206,52,46)" fg:x="37209" fg:w="362"/><text x="13.5462%" y="6943.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (786 samples, 0.28%)</title><rect x="13.1958%" y="6997" width="0.2809%" height="15" fill="rgb(253,136,11)" fg:x="36928" fg:w="786"/><text x="13.4458%" y="7007.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (786 samples, 0.28%)</title><rect x="13.1958%" y="6981" width="0.2809%" height="15" fill="rgb(208,106,33)" fg:x="36928" fg:w="786"/><text x="13.4458%" y="6991.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (786 samples, 0.28%)</title><rect x="13.1958%" y="6965" width="0.2809%" height="15" fill="rgb(206,54,4)" fg:x="36928" fg:w="786"/><text x="13.4458%" y="6975.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (786 samples, 0.28%)</title><rect x="13.1958%" y="6949" width="0.2809%" height="15" fill="rgb(213,3,15)" fg:x="36928" fg:w="786"/><text x="13.4458%" y="6959.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::process_heap_alloc (35 samples, 0.01%)</title><rect x="13.4641%" y="6933" width="0.0125%" height="15" fill="rgb(252,211,39)" fg:x="37679" fg:w="35"/><text x="13.7141%" y="6943.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$11::clone(alloc::vec::Vec&lt;tuple$ (1,205 samples, 0.43%)</title><rect x="13.0489%" y="7061" width="0.4306%" height="15" fill="rgb(223,6,36)" fg:x="36517" fg:w="1205"/><text x="13.2989%" y="7071.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (1,205 samples, 0.43%)</title><rect x="13.0489%" y="7045" width="0.4306%" height="15" fill="rgb(252,169,45)" fg:x="36517" fg:w="1205"/><text x="13.2989%" y="7055.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$&lt;tuple$ (1,194 samples, 0.43%)</title><rect x="13.0528%" y="7029" width="0.4267%" height="15" fill="rgb(212,48,26)" fg:x="36528" fg:w="1194"/><text x="13.3028%" y="7039.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$&lt;tuple$ (1,194 samples, 0.43%)</title><rect x="13.0528%" y="7013" width="0.4267%" height="15" fill="rgb(251,102,48)" fg:x="36528" fg:w="1194"/><text x="13.3028%" y="7023.50"></text></g><g><title>neural_network.exe`core::cmp::impls::impl$21::eq (31 samples, 0.01%)</title><rect x="13.4988%" y="7045" width="0.0111%" height="15" fill="rgb(243,208,16)" fg:x="37776" fg:w="31"/><text x="13.7488%" y="7055.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (829 samples, 0.30%)</title><rect x="13.5099%" y="7045" width="0.2962%" height="15" fill="rgb(219,96,24)" fg:x="37807" fg:w="829"/><text x="13.7599%" y="7055.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (829 samples, 0.30%)</title><rect x="13.5099%" y="7029" width="0.2962%" height="15" fill="rgb(219,33,29)" fg:x="37807" fg:w="829"/><text x="13.7599%" y="7039.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (135 samples, 0.05%)</title><rect x="13.7579%" y="7013" width="0.0482%" height="15" fill="rgb(223,176,5)" fg:x="38501" fg:w="135"/><text x="14.0079%" y="7023.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$ (1,154 samples, 0.41%)</title><rect x="13.4795%" y="7061" width="0.4124%" height="15" fill="rgb(228,140,14)" fg:x="37722" fg:w="1154"/><text x="13.7295%" y="7071.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;tuple$ (240 samples, 0.09%)</title><rect x="13.8061%" y="7045" width="0.0858%" height="15" fill="rgb(217,179,31)" fg:x="38636" fg:w="240"/><text x="14.0561%" y="7055.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;tuple$ (217 samples, 0.08%)</title><rect x="13.8143%" y="7029" width="0.0775%" height="15" fill="rgb(230,9,30)" fg:x="38659" fg:w="217"/><text x="14.0643%" y="7039.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, core::ops::range::Range (821 samples, 0.29%)</title><rect x="13.8919%" y="7061" width="0.2934%" height="15" fill="rgb(230,136,20)" fg:x="38876" fg:w="821"/><text x="14.1419%" y="7071.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (796 samples, 0.28%)</title><rect x="13.9008%" y="7045" width="0.2844%" height="15" fill="rgb(215,210,22)" fg:x="38901" fg:w="796"/><text x="14.1508%" y="7055.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (796 samples, 0.28%)</title><rect x="13.9008%" y="7029" width="0.2844%" height="15" fill="rgb(218,43,5)" fg:x="38901" fg:w="796"/><text x="14.1508%" y="7039.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (82 samples, 0.03%)</title><rect x="14.1559%" y="7013" width="0.0293%" height="15" fill="rgb(216,11,5)" fg:x="39615" fg:w="82"/><text x="14.4059%" y="7023.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (28 samples, 0.01%)</title><rect x="14.1752%" y="6997" width="0.0100%" height="15" fill="rgb(209,82,29)" fg:x="39669" fg:w="28"/><text x="14.4252%" y="7007.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (28 samples, 0.01%)</title><rect x="14.1752%" y="6981" width="0.0100%" height="15" fill="rgb(244,115,12)" fg:x="39669" fg:w="28"/><text x="14.4252%" y="6991.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (28 samples, 0.01%)</title><rect x="14.1752%" y="6965" width="0.0100%" height="15" fill="rgb(222,82,18)" fg:x="39669" fg:w="28"/><text x="14.4252%" y="6975.50"></text></g><g><title>`0x7FF97E69CD55 (29 samples, 0.01%)</title><rect x="14.2814%" y="6949" width="0.0104%" height="15" fill="rgb(249,227,8)" fg:x="39966" fg:w="29"/><text x="14.5314%" y="6959.50"></text></g><g><title>`0x7FF97E62AFF1 (295 samples, 0.11%)</title><rect x="14.2078%" y="6965" width="0.1054%" height="15" fill="rgb(253,141,45)" fg:x="39760" fg:w="295"/><text x="14.4578%" y="6975.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (362 samples, 0.13%)</title><rect x="14.1903%" y="6997" width="0.1294%" height="15" fill="rgb(234,184,4)" fg:x="39711" fg:w="362"/><text x="14.4403%" y="7007.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (362 samples, 0.13%)</title><rect x="14.1903%" y="6981" width="0.1294%" height="15" fill="rgb(218,194,23)" fg:x="39711" fg:w="362"/><text x="14.4403%" y="6991.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;tuple$ (387 samples, 0.14%)</title><rect x="14.1856%" y="7061" width="0.1383%" height="15" fill="rgb(235,66,41)" fg:x="39698" fg:w="387"/><text x="14.4356%" y="7071.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (387 samples, 0.14%)</title><rect x="14.1856%" y="7045" width="0.1383%" height="15" fill="rgb(245,217,1)" fg:x="39698" fg:w="387"/><text x="14.4356%" y="7055.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (387 samples, 0.14%)</title><rect x="14.1856%" y="7029" width="0.1383%" height="15" fill="rgb(229,91,1)" fg:x="39698" fg:w="387"/><text x="14.4356%" y="7039.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (374 samples, 0.13%)</title><rect x="14.1903%" y="7013" width="0.1336%" height="15" fill="rgb(207,101,30)" fg:x="39711" fg:w="374"/><text x="14.4403%" y="7023.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy(tuple$&lt;usize,usize&gt;*, tuple$ (35 samples, 0.01%)</title><rect x="14.3550%" y="6933" width="0.0125%" height="15" fill="rgb(223,82,49)" fg:x="40172" fg:w="35"/><text x="14.6050%" y="6943.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::swap(ref_mut$&lt;slice2$&lt;tuple$ (121 samples, 0.04%)</title><rect x="14.3382%" y="6965" width="0.0432%" height="15" fill="rgb(218,167,17)" fg:x="40125" fg:w="121"/><text x="14.5882%" y="6975.50"></text></g><g><title>neural_network.exe`core::ptr::swap(tuple$&lt;usize,usize&gt;*, tuple$ (74 samples, 0.03%)</title><rect x="14.3550%" y="6949" width="0.0264%" height="15" fill="rgb(208,103,14)" fg:x="40172" fg:w="74"/><text x="14.6050%" y="6959.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping(tuple$&lt;usize,usize&gt;*, tuple$ (39 samples, 0.01%)</title><rect x="14.3675%" y="6933" width="0.0139%" height="15" fill="rgb(238,20,8)" fg:x="40207" fg:w="39"/><text x="14.6175%" y="6943.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::round(rand_chacha::guts::State&lt;ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (32 samples, 0.01%)</title><rect x="14.4300%" y="6693" width="0.0114%" height="15" fill="rgb(218,80,54)" fg:x="40382" fg:w="32"/><text x="14.6800%" y="6703.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide::impl_avx2 (40 samples, 0.01%)</title><rect x="14.4275%" y="6741" width="0.0143%" height="15" fill="rgb(240,144,17)" fg:x="40375" fg:w="40"/><text x="14.6775%" y="6751.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide::fn_impl(ppv_lite86::x86_64::Avx2Machine (39 samples, 0.01%)</title><rect x="14.4279%" y="6725" width="0.0139%" height="15" fill="rgb(245,27,50)" fg:x="40376" fg:w="39"/><text x="14.6779%" y="6735.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide_impl(ppv_lite86::x86_64::Avx2Machine (39 samples, 0.01%)</title><rect x="14.4279%" y="6709" width="0.0139%" height="15" fill="rgb(251,51,7)" fg:x="40376" fg:w="39"/><text x="14.6779%" y="6719.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place (334 samples, 0.12%)</title><rect x="14.3239%" y="7061" width="0.1194%" height="15" fill="rgb(245,217,29)" fg:x="40085" fg:w="334"/><text x="14.5739%" y="7071.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (334 samples, 0.12%)</title><rect x="14.3239%" y="7045" width="0.1194%" height="15" fill="rgb(221,176,29)" fg:x="40085" fg:w="334"/><text x="14.5739%" y="7055.50"></text></g><g><title>neural_network.exe`alloc::rc::impl$30::drop(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (334 samples, 0.12%)</title><rect x="14.3239%" y="7029" width="0.1194%" height="15" fill="rgb(212,180,24)" fg:x="40085" fg:w="334"/><text x="14.5739%" y="7039.50"></text></g><g><title>neural_network.exe`alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;::inner (328 samples, 0.12%)</title><rect x="14.3260%" y="7013" width="0.1172%" height="15" fill="rgb(254,24,2)" fg:x="40091" fg:w="328"/><text x="14.5760%" y="7023.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;alloc::rc::RcBox&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt; &gt; &gt;::as_ref (327 samples, 0.12%)</title><rect x="14.3264%" y="6997" width="0.1168%" height="15" fill="rgb(230,100,2)" fg:x="40092" fg:w="327"/><text x="14.5764%" y="7007.50"></text></g><g><title>neural_network.exe`rand::seq::impl$0::shuffle&lt;tuple$&lt;usize,usize&gt;,rand::rngs::thread::ThreadRng&gt;(ref_mut$&lt;slice2$&lt;tuple$ (327 samples, 0.12%)</title><rect x="14.3264%" y="6981" width="0.1168%" height="15" fill="rgb(219,142,25)" fg:x="40092" fg:w="327"/><text x="14.5764%" y="6991.50"></text></g><g><title>neural_network.exe`rand::seq::gen_index (173 samples, 0.06%)</title><rect x="14.3814%" y="6965" width="0.0618%" height="15" fill="rgb(240,73,43)" fg:x="40246" fg:w="173"/><text x="14.6314%" y="6975.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen_range(rand::rngs::thread::ThreadRng*, core::ops::range::Range (173 samples, 0.06%)</title><rect x="14.3814%" y="6949" width="0.0618%" height="15" fill="rgb(214,114,15)" fg:x="40246" fg:w="173"/><text x="14.6314%" y="6959.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$6::sample_single(core::ops::range::Range (173 samples, 0.06%)</title><rect x="14.3814%" y="6933" width="0.0618%" height="15" fill="rgb(207,130,4)" fg:x="40246" fg:w="173"/><text x="14.6314%" y="6943.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single (173 samples, 0.06%)</title><rect x="14.3814%" y="6917" width="0.0618%" height="15" fill="rgb(221,25,40)" fg:x="40246" fg:w="173"/><text x="14.6314%" y="6927.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single_inclusive (173 samples, 0.06%)</title><rect x="14.3814%" y="6901" width="0.0618%" height="15" fill="rgb(241,184,7)" fg:x="40246" fg:w="173"/><text x="14.6314%" y="6911.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen (132 samples, 0.05%)</title><rect x="14.3961%" y="6885" width="0.0472%" height="15" fill="rgb(235,159,4)" fg:x="40287" fg:w="132"/><text x="14.6461%" y="6895.50"></text></g><g><title>neural_network.exe`rand::distributions::integer::impl$2::sample (132 samples, 0.05%)</title><rect x="14.3961%" y="6869" width="0.0472%" height="15" fill="rgb(214,87,48)" fg:x="40287" fg:w="132"/><text x="14.6461%" y="6879.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::impl$1::next_u32 (132 samples, 0.05%)</title><rect x="14.3961%" y="6853" width="0.0472%" height="15" fill="rgb(246,198,24)" fg:x="40287" fg:w="132"/><text x="14.6461%" y="6863.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$1::next_u32(rand::rngs::adapter::reseeding::ReseedingRng (132 samples, 0.05%)</title><rect x="14.3961%" y="6837" width="0.0472%" height="15" fill="rgb(209,66,40)" fg:x="40287" fg:w="132"/><text x="14.6461%" y="6847.50"></text></g><g><title>neural_network.exe`rand_core::block::impl$2::next_u32(rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore (132 samples, 0.05%)</title><rect x="14.3961%" y="6821" width="0.0472%" height="15" fill="rgb(233,147,39)" fg:x="40287" fg:w="132"/><text x="14.6461%" y="6831.50"></text></g><g><title>neural_network.exe`rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;::generate_and_set (50 samples, 0.02%)</title><rect x="14.4254%" y="6805" width="0.0179%" height="15" fill="rgb(231,145,52)" fg:x="40369" fg:w="50"/><text x="14.6754%" y="6815.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$4::generate(rand::rngs::adapter::reseeding::ReseedingCore&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt;*, rand_chacha::chacha::Array64 (50 samples, 0.02%)</title><rect x="14.4254%" y="6789" width="0.0179%" height="15" fill="rgb(206,20,26)" fg:x="40369" fg:w="50"/><text x="14.6754%" y="6799.50"></text></g><g><title>neural_network.exe`rand_chacha::chacha::impl$23::generate(rand_chacha::chacha::ChaCha12Core*, rand_chacha::chacha::Array64 (46 samples, 0.02%)</title><rect x="14.4268%" y="6773" width="0.0164%" height="15" fill="rgb(238,220,4)" fg:x="40373" fg:w="46"/><text x="14.6768%" y="6783.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::ChaCha::refill4 (46 samples, 0.02%)</title><rect x="14.4268%" y="6757" width="0.0164%" height="15" fill="rgb(252,195,42)" fg:x="40373" fg:w="46"/><text x="14.6768%" y="6767.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::contains(ref$&lt;slice2$&lt;tuple$&lt;usize,usize&gt; &gt; &gt;, tuple$ (445 samples, 0.16%)</title><rect x="14.4432%" y="7061" width="0.1590%" height="15" fill="rgb(209,10,6)" fg:x="40419" fg:w="445"/><text x="14.6932%" y="7071.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (445 samples, 0.16%)</title><rect x="14.4432%" y="7045" width="0.1590%" height="15" fill="rgb(229,3,52)" fg:x="40419" fg:w="445"/><text x="14.6932%" y="7055.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (445 samples, 0.16%)</title><rect x="14.4432%" y="7029" width="0.1590%" height="15" fill="rgb(253,49,37)" fg:x="40419" fg:w="445"/><text x="14.6932%" y="7039.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (43 samples, 0.02%)</title><rect x="14.5869%" y="7013" width="0.0154%" height="15" fill="rgb(240,103,49)" fg:x="40821" fg:w="43"/><text x="14.8369%" y="7023.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (168 samples, 0.06%)</title><rect x="14.6023%" y="7061" width="0.0600%" height="15" fill="rgb(250,182,30)" fg:x="40864" fg:w="168"/><text x="14.8523%" y="7071.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (44 samples, 0.02%)</title><rect x="14.6466%" y="7045" width="0.0157%" height="15" fill="rgb(248,8,30)" fg:x="40988" fg:w="44"/><text x="14.8966%" y="7055.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (44 samples, 0.02%)</title><rect x="14.6466%" y="7029" width="0.0157%" height="15" fill="rgb(237,120,30)" fg:x="40988" fg:w="44"/><text x="14.8966%" y="7039.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (44 samples, 0.02%)</title><rect x="14.6466%" y="7013" width="0.0157%" height="15" fill="rgb(221,146,34)" fg:x="40988" fg:w="44"/><text x="14.8966%" y="7023.50"></text></g><g><title>`0x7FF97E69CBA1 (32 samples, 0.01%)</title><rect x="14.7988%" y="6997" width="0.0114%" height="15" fill="rgb(242,55,13)" fg:x="41414" fg:w="32"/><text x="15.0488%" y="7007.50"></text></g><g><title>`0x7FF97E69CC6F (45 samples, 0.02%)</title><rect x="14.8331%" y="6997" width="0.0161%" height="15" fill="rgb(242,112,31)" fg:x="41510" fg:w="45"/><text x="15.0831%" y="7007.50"></text></g><g><title>`0x7FF97E69CD55 (464 samples, 0.17%)</title><rect x="14.8735%" y="6997" width="0.1658%" height="15" fill="rgb(249,192,27)" fg:x="41623" fg:w="464"/><text x="15.1235%" y="7007.50"></text></g><g><title>`0x7FF97E69CD6B (471 samples, 0.17%)</title><rect x="15.0393%" y="6997" width="0.1683%" height="15" fill="rgb(208,204,44)" fg:x="42087" fg:w="471"/><text x="15.2893%" y="7007.50"></text></g><g><title>`0x7FF97E69CD8A (50 samples, 0.02%)</title><rect x="15.2119%" y="6997" width="0.0179%" height="15" fill="rgb(208,93,54)" fg:x="42570" fg:w="50"/><text x="15.4619%" y="7007.50"></text></g><g><title>`0x7FF97E693D8A (45 samples, 0.02%)</title><rect x="15.2137%" y="6981" width="0.0161%" height="15" fill="rgb(242,1,31)" fg:x="42575" fg:w="45"/><text x="15.4637%" y="6991.50"></text></g><g><title>`0x7FF97E637A93 (210 samples, 0.08%)</title><rect x="15.2587%" y="6981" width="0.0750%" height="15" fill="rgb(241,83,25)" fg:x="42701" fg:w="210"/><text x="15.5087%" y="6991.50"></text></g><g><title>`0x7FF97E693D8A (195 samples, 0.07%)</title><rect x="15.2641%" y="6965" width="0.0697%" height="15" fill="rgb(205,169,50)" fg:x="42716" fg:w="195"/><text x="15.5141%" y="6975.50"></text></g><g><title>`0x7FF97E69CE16 (307 samples, 0.11%)</title><rect x="15.2355%" y="6997" width="0.1097%" height="15" fill="rgb(239,186,37)" fg:x="42636" fg:w="307"/><text x="15.4855%" y="7007.50"></text></g><g><title>`0x7FF97E69CE51 (43 samples, 0.02%)</title><rect x="15.3570%" y="6997" width="0.0154%" height="15" fill="rgb(205,221,10)" fg:x="42976" fg:w="43"/><text x="15.6070%" y="7007.50"></text></g><g><title>`0x7FF97E6533A2 (56 samples, 0.02%)</title><rect x="15.3881%" y="6981" width="0.0200%" height="15" fill="rgb(218,196,15)" fg:x="43063" fg:w="56"/><text x="15.6381%" y="6991.50"></text></g><g><title>`0x7FF97E69CE94 (67 samples, 0.02%)</title><rect x="15.3852%" y="6997" width="0.0239%" height="15" fill="rgb(218,196,35)" fg:x="43055" fg:w="67"/><text x="15.6352%" y="7007.50"></text></g><g><title>`0x7FF97E69CEB9 (40 samples, 0.01%)</title><rect x="15.4120%" y="6997" width="0.0143%" height="15" fill="rgb(233,63,24)" fg:x="43130" fg:w="40"/><text x="15.6620%" y="7007.50"></text></g><g><title>`0x7FF97E69CEE6 (35 samples, 0.01%)</title><rect x="15.4324%" y="6997" width="0.0125%" height="15" fill="rgb(225,8,4)" fg:x="43187" fg:w="35"/><text x="15.6824%" y="7007.50"></text></g><g><title>`0x7FF97E69CF2B (112 samples, 0.04%)</title><rect x="15.4484%" y="6997" width="0.0400%" height="15" fill="rgb(234,105,35)" fg:x="43232" fg:w="112"/><text x="15.6984%" y="7007.50"></text></g><g><title>`0x7FF97E69CF3E (63 samples, 0.02%)</title><rect x="15.4931%" y="6997" width="0.0225%" height="15" fill="rgb(236,21,32)" fg:x="43357" fg:w="63"/><text x="15.7431%" y="7007.50"></text></g><g><title>`0x7FF97E62AFF1 (2,184 samples, 0.78%)</title><rect x="14.7395%" y="7013" width="0.7804%" height="15" fill="rgb(228,109,6)" fg:x="41248" fg:w="2184"/><text x="14.9895%" y="7023.50"></text></g><g><title>`0x7FF97E62D57C (66 samples, 0.02%)</title><rect x="15.5932%" y="6789" width="0.0236%" height="15" fill="rgb(229,215,31)" fg:x="43637" fg:w="66"/><text x="15.8432%" y="6799.50"></text></g><g><title>`0x7FF97E62D5E2 (52 samples, 0.02%)</title><rect x="15.6246%" y="6789" width="0.0186%" height="15" fill="rgb(221,52,54)" fg:x="43725" fg:w="52"/><text x="15.8746%" y="6799.50"></text></g><g><title>`0x7FF97E62D68A (68 samples, 0.02%)</title><rect x="15.6532%" y="6789" width="0.0243%" height="15" fill="rgb(252,129,43)" fg:x="43805" fg:w="68"/><text x="15.9032%" y="6799.50"></text></g><g><title>`0x7FF97E62D803 (50 samples, 0.02%)</title><rect x="15.6914%" y="6789" width="0.0179%" height="15" fill="rgb(248,183,27)" fg:x="43912" fg:w="50"/><text x="15.9414%" y="6799.50"></text></g><g><title>`0x7FF97E62D80E (46 samples, 0.02%)</title><rect x="15.7111%" y="6789" width="0.0164%" height="15" fill="rgb(250,0,22)" fg:x="43967" fg:w="46"/><text x="15.9611%" y="6799.50"></text></g><g><title>`0x7FF97E62DA2E (67 samples, 0.02%)</title><rect x="15.7418%" y="6789" width="0.0239%" height="15" fill="rgb(213,166,10)" fg:x="44053" fg:w="67"/><text x="15.9918%" y="6799.50"></text></g><g><title>`0x7FF97E693D51 (49 samples, 0.02%)</title><rect x="15.7482%" y="6773" width="0.0175%" height="15" fill="rgb(207,163,36)" fg:x="44071" fg:w="49"/><text x="15.9982%" y="6783.50"></text></g><g><title>`0x7FF97E62DA96 (208 samples, 0.07%)</title><rect x="15.7690%" y="6789" width="0.0743%" height="15" fill="rgb(208,122,22)" fg:x="44129" fg:w="208"/><text x="16.0190%" y="6799.50"></text></g><g><title>`0x7FF97E62DA9C (53 samples, 0.02%)</title><rect x="15.8433%" y="6789" width="0.0189%" height="15" fill="rgb(207,104,49)" fg:x="44337" fg:w="53"/><text x="16.0933%" y="6799.50"></text></g><g><title>`0x7FF97E62DAE5 (35 samples, 0.01%)</title><rect x="15.8658%" y="6789" width="0.0125%" height="15" fill="rgb(248,211,50)" fg:x="44400" fg:w="35"/><text x="16.1158%" y="6799.50"></text></g><g><title>`0x7FF97E65352C (43 samples, 0.02%)</title><rect x="15.9116%" y="6773" width="0.0154%" height="15" fill="rgb(217,13,45)" fg:x="44528" fg:w="43"/><text x="16.1616%" y="6783.50"></text></g><g><title>`0x7FF97E693D27 (29 samples, 0.01%)</title><rect x="15.9355%" y="6757" width="0.0104%" height="15" fill="rgb(211,216,49)" fg:x="44595" fg:w="29"/><text x="16.1855%" y="6767.50"></text></g><g><title>`0x7FF97E693D45 (257 samples, 0.09%)</title><rect x="15.9459%" y="6757" width="0.0918%" height="15" fill="rgb(221,58,53)" fg:x="44624" fg:w="257"/><text x="16.1959%" y="6767.50"></text></g><g><title>`0x7FF97E65354E (288 samples, 0.10%)</title><rect x="15.9355%" y="6773" width="0.1029%" height="15" fill="rgb(220,112,41)" fg:x="44595" fg:w="288"/><text x="16.1855%" y="6783.50"></text></g><g><title>`0x7FF97E6535B8 (93 samples, 0.03%)</title><rect x="16.0470%" y="6773" width="0.0332%" height="15" fill="rgb(236,38,28)" fg:x="44907" fg:w="93"/><text x="16.2970%" y="6783.50"></text></g><g><title>`0x7FF97E62DB41 (515 samples, 0.18%)</title><rect x="15.8987%" y="6789" width="0.1840%" height="15" fill="rgb(227,195,22)" fg:x="44492" fg:w="515"/><text x="16.1487%" y="6799.50"></text></g><g><title>`0x7FF97E62DB6F (44 samples, 0.02%)</title><rect x="16.0838%" y="6789" width="0.0157%" height="15" fill="rgb(214,55,33)" fg:x="45010" fg:w="44"/><text x="16.3338%" y="6799.50"></text></g><g><title>`0x7FF97E62DB79 (111 samples, 0.04%)</title><rect x="16.1009%" y="6789" width="0.0397%" height="15" fill="rgb(248,80,13)" fg:x="45058" fg:w="111"/><text x="16.3509%" y="6799.50"></text></g><g><title>`0x7FF97E693D45 (91 samples, 0.03%)</title><rect x="16.1081%" y="6773" width="0.0325%" height="15" fill="rgb(238,52,6)" fg:x="45078" fg:w="91"/><text x="16.3581%" y="6783.50"></text></g><g><title>`0x7FF97E6318CF (29 samples, 0.01%)</title><rect x="16.1503%" y="6773" width="0.0104%" height="15" fill="rgb(224,198,47)" fg:x="45196" fg:w="29"/><text x="16.4003%" y="6783.50"></text></g><g><title>`0x7FF97E631918 (31 samples, 0.01%)</title><rect x="16.1735%" y="6773" width="0.0111%" height="15" fill="rgb(233,171,20)" fg:x="45261" fg:w="31"/><text x="16.4235%" y="6783.50"></text></g><g><title>`0x7FF97E631990 (369 samples, 0.13%)</title><rect x="16.2339%" y="6773" width="0.1319%" height="15" fill="rgb(241,30,25)" fg:x="45430" fg:w="369"/><text x="16.4839%" y="6783.50"></text></g><g><title>`0x7FF97E631A59 (194 samples, 0.07%)</title><rect x="16.3829%" y="6773" width="0.0693%" height="15" fill="rgb(207,171,38)" fg:x="45847" fg:w="194"/><text x="16.6329%" y="6783.50"></text></g><g><title>`0x7FF97E631AD7 (232 samples, 0.08%)</title><rect x="16.4729%" y="6773" width="0.0829%" height="15" fill="rgb(234,70,1)" fg:x="46099" fg:w="232"/><text x="16.7229%" y="6783.50"></text></g><g><title>`0x7FF97E631C86 (84 samples, 0.03%)</title><rect x="16.5673%" y="6757" width="0.0300%" height="15" fill="rgb(232,178,18)" fg:x="46363" fg:w="84"/><text x="16.8173%" y="6767.50"></text></g><g><title>`0x7FF97E631CA3 (43 samples, 0.02%)</title><rect x="16.5976%" y="6757" width="0.0154%" height="15" fill="rgb(241,78,40)" fg:x="46448" fg:w="43"/><text x="16.8476%" y="6767.50"></text></g><g><title>`0x7FF97E631B14 (192 samples, 0.07%)</title><rect x="16.5669%" y="6773" width="0.0686%" height="15" fill="rgb(222,35,25)" fg:x="46362" fg:w="192"/><text x="16.8169%" y="6783.50"></text></g><g><title>`0x7FF97E631CCA (63 samples, 0.02%)</title><rect x="16.6130%" y="6757" width="0.0225%" height="15" fill="rgb(207,92,16)" fg:x="46491" fg:w="63"/><text x="16.8630%" y="6767.50"></text></g><g><title>`0x7FF97E631C86 (310 samples, 0.11%)</title><rect x="16.6391%" y="6757" width="0.1108%" height="15" fill="rgb(216,59,51)" fg:x="46564" fg:w="310"/><text x="16.8891%" y="6767.50"></text></g><g><title>`0x7FF97E631CA3 (474 samples, 0.17%)</title><rect x="16.7499%" y="6757" width="0.1694%" height="15" fill="rgb(213,80,28)" fg:x="46874" fg:w="474"/><text x="16.9999%" y="6767.50"></text></g><g><title>`0x7FF97E631B1F (801 samples, 0.29%)</title><rect x="16.6373%" y="6773" width="0.2862%" height="15" fill="rgb(220,93,7)" fg:x="46559" fg:w="801"/><text x="16.8873%" y="6783.50"></text></g><g><title>`0x7FF97E62DBBF (2,211 samples, 0.79%)</title><rect x="16.1406%" y="6789" width="0.7901%" height="15" fill="rgb(225,24,44)" fg:x="45169" fg:w="2211"/><text x="16.3906%" y="6799.50"></text></g><g><title>`0x7FF97E62DBDD (964 samples, 0.34%)</title><rect x="16.9307%" y="6789" width="0.3445%" height="15" fill="rgb(243,74,40)" fg:x="47380" fg:w="964"/><text x="17.1807%" y="6799.50"></text></g><g><title>`0x7FF97E62DC3A (36 samples, 0.01%)</title><rect x="17.2834%" y="6789" width="0.0129%" height="15" fill="rgb(228,39,7)" fg:x="48367" fg:w="36"/><text x="17.5334%" y="6799.50"></text></g><g><title>`0x7FF97E62CC9A (4,782 samples, 1.71%)</title><rect x="15.5921%" y="6805" width="1.7088%" height="15" fill="rgb(227,79,8)" fg:x="43634" fg:w="4782"/><text x="15.8421%" y="6815.50"></text></g><g><title>`0x7FF97E63249F (36 samples, 0.01%)</title><rect x="17.3845%" y="6773" width="0.0129%" height="15" fill="rgb(236,58,11)" fg:x="48650" fg:w="36"/><text x="17.6345%" y="6783.50"></text></g><g><title>`0x7FF97E6324C5 (32 samples, 0.01%)</title><rect x="17.3999%" y="6773" width="0.0114%" height="15" fill="rgb(249,63,35)" fg:x="48693" fg:w="32"/><text x="17.6499%" y="6783.50"></text></g><g><title>`0x7FF97E6334DC (51 samples, 0.02%)</title><rect x="17.4113%" y="6773" width="0.0182%" height="15" fill="rgb(252,114,16)" fg:x="48725" fg:w="51"/><text x="17.6613%" y="6783.50"></text></g><g><title>`0x7FF97E633500 (78 samples, 0.03%)</title><rect x="17.4310%" y="6773" width="0.0279%" height="15" fill="rgb(254,151,24)" fg:x="48780" fg:w="78"/><text x="17.6810%" y="6783.50"></text></g><g><title>`0x7FF97E62CAFB (29 samples, 0.01%)</title><rect x="17.4649%" y="6757" width="0.0104%" height="15" fill="rgb(253,54,39)" fg:x="48875" fg:w="29"/><text x="17.7149%" y="6767.50"></text></g><g><title>`0x7FF97E62CB02 (62 samples, 0.02%)</title><rect x="17.4763%" y="6757" width="0.0222%" height="15" fill="rgb(243,25,45)" fg:x="48907" fg:w="62"/><text x="17.7263%" y="6767.50"></text></g><g><title>`0x7FF97E62CB29 (47 samples, 0.02%)</title><rect x="17.5067%" y="6757" width="0.0168%" height="15" fill="rgb(234,134,9)" fg:x="48992" fg:w="47"/><text x="17.7567%" y="6767.50"></text></g><g><title>`0x7FF97E62CB7B (29 samples, 0.01%)</title><rect x="17.5281%" y="6757" width="0.0104%" height="15" fill="rgb(227,166,31)" fg:x="49052" fg:w="29"/><text x="17.7781%" y="6767.50"></text></g><g><title>`0x7FF97E62D68A (57 samples, 0.02%)</title><rect x="17.6450%" y="6741" width="0.0204%" height="15" fill="rgb(245,143,41)" fg:x="49379" fg:w="57"/><text x="17.8950%" y="6751.50"></text></g><g><title>`0x7FF97E62D723 (28 samples, 0.01%)</title><rect x="17.6779%" y="6741" width="0.0100%" height="15" fill="rgb(238,181,32)" fg:x="49471" fg:w="28"/><text x="17.9279%" y="6751.50"></text></g><g><title>`0x7FF97E62D793 (41 samples, 0.01%)</title><rect x="17.7082%" y="6741" width="0.0147%" height="15" fill="rgb(224,113,18)" fg:x="49556" fg:w="41"/><text x="17.9582%" y="6751.50"></text></g><g><title>`0x7FF97E65354E (34 samples, 0.01%)</title><rect x="17.7451%" y="6725" width="0.0121%" height="15" fill="rgb(240,229,28)" fg:x="49659" fg:w="34"/><text x="17.9951%" y="6735.50"></text></g><g><title>`0x7FF97E693D45 (32 samples, 0.01%)</title><rect x="17.7458%" y="6709" width="0.0114%" height="15" fill="rgb(250,185,3)" fg:x="49661" fg:w="32"/><text x="17.9958%" y="6719.50"></text></g><g><title>`0x7FF97E62DB41 (44 samples, 0.02%)</title><rect x="17.7429%" y="6741" width="0.0157%" height="15" fill="rgb(212,59,25)" fg:x="49653" fg:w="44"/><text x="17.9929%" y="6751.50"></text></g><g><title>`0x7FF97E631B1F (45 samples, 0.02%)</title><rect x="17.7872%" y="6725" width="0.0161%" height="15" fill="rgb(221,87,20)" fg:x="49777" fg:w="45"/><text x="18.0372%" y="6735.50"></text></g><g><title>`0x7FF97E62DBBF (107 samples, 0.04%)</title><rect x="17.7654%" y="6741" width="0.0382%" height="15" fill="rgb(213,74,28)" fg:x="49716" fg:w="107"/><text x="18.0154%" y="6751.50"></text></g><g><title>`0x7FF97E62DBDD (43 samples, 0.02%)</title><rect x="17.8037%" y="6741" width="0.0154%" height="15" fill="rgb(224,132,34)" fg:x="49823" fg:w="43"/><text x="18.0537%" y="6751.50"></text></g><g><title>`0x7FF97E62CC9A (601 samples, 0.21%)</title><rect x="17.6046%" y="6757" width="0.2148%" height="15" fill="rgb(222,101,24)" fg:x="49266" fg:w="601"/><text x="17.8546%" y="6767.50"></text></g><g><title>`0x7FF97E62CCC1 (47 samples, 0.02%)</title><rect x="17.8194%" y="6757" width="0.0168%" height="15" fill="rgb(254,142,4)" fg:x="49867" fg:w="47"/><text x="18.0694%" y="6767.50"></text></g><g><title>`0x7FF97E633505 (1,081 samples, 0.39%)</title><rect x="17.4588%" y="6773" width="0.3863%" height="15" fill="rgb(230,229,49)" fg:x="48858" fg:w="1081"/><text x="17.7088%" y="6783.50"></text></g><g><title>`0x7FF97E696B96 (322 samples, 0.12%)</title><rect x="17.8473%" y="6757" width="0.1151%" height="15" fill="rgb(238,70,47)" fg:x="49945" fg:w="322"/><text x="18.0973%" y="6767.50"></text></g><g><title>`0x7FF97E696C22 (39 samples, 0.01%)</title><rect x="17.9930%" y="6757" width="0.0139%" height="15" fill="rgb(231,160,17)" fg:x="50353" fg:w="39"/><text x="18.2430%" y="6767.50"></text></g><g><title>`0x7FF97E633550 (467 samples, 0.17%)</title><rect x="17.8455%" y="6773" width="0.1669%" height="15" fill="rgb(218,68,53)" fg:x="49940" fg:w="467"/><text x="18.0955%" y="6783.50"></text></g><g><title>`0x7FF97E69CCAF (62 samples, 0.02%)</title><rect x="18.0910%" y="6741" width="0.0222%" height="15" fill="rgb(236,111,10)" fg:x="50627" fg:w="62"/><text x="18.3410%" y="6751.50"></text></g><g><title>`0x7FF97E69CD55 (39 samples, 0.01%)</title><rect x="18.1224%" y="6741" width="0.0139%" height="15" fill="rgb(224,34,41)" fg:x="50715" fg:w="39"/><text x="18.3724%" y="6751.50"></text></g><g><title>`0x7FF97E62AFF1 (376 samples, 0.13%)</title><rect x="18.0274%" y="6757" width="0.1344%" height="15" fill="rgb(241,118,19)" fg:x="50449" fg:w="376"/><text x="18.2774%" y="6767.50"></text></g><g><title>`0x7FF97E633562 (428 samples, 0.15%)</title><rect x="18.0141%" y="6773" width="0.1529%" height="15" fill="rgb(238,129,25)" fg:x="50412" fg:w="428"/><text x="18.2641%" y="6783.50"></text></g><g><title>`0x7FF97E6322C7 (2,309 samples, 0.83%)</title><rect x="17.3598%" y="6789" width="0.8251%" height="15" fill="rgb(238,22,31)" fg:x="48581" fg:w="2309"/><text x="17.6098%" y="6799.50"></text></g><g><title>`0x7FF97E6322FB (30 samples, 0.01%)</title><rect x="18.1860%" y="6789" width="0.0107%" height="15" fill="rgb(222,174,48)" fg:x="50893" fg:w="30"/><text x="18.4360%" y="6799.50"></text></g><g><title>`0x7FF97E632307 (54 samples, 0.02%)</title><rect x="18.1967%" y="6789" width="0.0193%" height="15" fill="rgb(206,152,40)" fg:x="50923" fg:w="54"/><text x="18.4467%" y="6799.50"></text></g><g><title>`0x7FF97E632312 (74 samples, 0.03%)</title><rect x="18.2160%" y="6789" width="0.0264%" height="15" fill="rgb(218,99,54)" fg:x="50977" fg:w="74"/><text x="18.4660%" y="6799.50"></text></g><g><title>`0x7FF97E63218A (2,557 samples, 0.91%)</title><rect x="17.3291%" y="6805" width="0.9137%" height="15" fill="rgb(220,174,26)" fg:x="48495" fg:w="2557"/><text x="17.5791%" y="6815.50"></text></g><g><title>`0x7FF97E63219E (51 samples, 0.02%)</title><rect x="18.2443%" y="6805" width="0.0182%" height="15" fill="rgb(245,116,9)" fg:x="51056" fg:w="51"/><text x="18.4943%" y="6815.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (7,537 samples, 2.69%)</title><rect x="15.5839%" y="6853" width="2.6933%" height="15" fill="rgb(209,72,35)" fg:x="43611" fg:w="7537"/><text x="15.8339%" y="6863.50">ne..</text></g><g><title>neural_network.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (7,537 samples, 2.69%)</title><rect x="15.5839%" y="6837" width="2.6933%" height="15" fill="rgb(226,126,21)" fg:x="43611" fg:w="7537"/><text x="15.8339%" y="6847.50">ne..</text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (7,534 samples, 2.69%)</title><rect x="15.5849%" y="6821" width="2.6922%" height="15" fill="rgb(227,192,1)" fg:x="43614" fg:w="7534"/><text x="15.8349%" y="6831.50">ne..</text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_mut_ptr (7,787 samples, 2.78%)</title><rect x="15.5321%" y="6997" width="2.7826%" height="15" fill="rgb(237,180,29)" fg:x="43466" fg:w="7787"/><text x="15.7821%" y="7007.50">ne..</text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (7,785 samples, 2.78%)</title><rect x="15.5328%" y="6981" width="2.7819%" height="15" fill="rgb(230,197,35)" fg:x="43468" fg:w="7785"/><text x="15.7828%" y="6991.50">ne..</text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (7,785 samples, 2.78%)</title><rect x="15.5328%" y="6965" width="2.7819%" height="15" fill="rgb(246,193,31)" fg:x="43468" fg:w="7785"/><text x="15.7828%" y="6975.50">ne..</text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (7,785 samples, 2.78%)</title><rect x="15.5328%" y="6949" width="2.7819%" height="15" fill="rgb(241,36,4)" fg:x="43468" fg:w="7785"/><text x="15.7828%" y="6959.50">ne..</text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::grow_one&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; (7,782 samples, 2.78%)</title><rect x="15.5338%" y="6933" width="2.7808%" height="15" fill="rgb(241,130,17)" fg:x="43471" fg:w="7782"/><text x="15.7838%" y="6943.50">ne..</text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (7,739 samples, 2.77%)</title><rect x="15.5492%" y="6917" width="2.7654%" height="15" fill="rgb(206,137,32)" fg:x="43514" fg:w="7739"/><text x="15.7992%" y="6927.50">ne..</text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (7,730 samples, 2.76%)</title><rect x="15.5524%" y="6901" width="2.7622%" height="15" fill="rgb(237,228,51)" fg:x="43523" fg:w="7730"/><text x="15.8024%" y="6911.50">ne..</text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (7,688 samples, 2.75%)</title><rect x="15.5674%" y="6885" width="2.7472%" height="15" fill="rgb(243,6,42)" fg:x="43565" fg:w="7688"/><text x="15.8174%" y="6895.50">ne..</text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (7,680 samples, 2.74%)</title><rect x="15.5703%" y="6869" width="2.7444%" height="15" fill="rgb(251,74,28)" fg:x="43573" fg:w="7680"/><text x="15.8203%" y="6879.50">ne..</text></g><g><title>neural_network.exe`enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;, alloc::raw_vec::finish_grow::closure_env$0 (105 samples, 0.04%)</title><rect x="18.2771%" y="6853" width="0.0375%" height="15" fill="rgb(218,20,49)" fg:x="51148" fg:w="105"/><text x="18.5271%" y="6863.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (8,287 samples, 2.96%)</title><rect x="15.5256%" y="7013" width="2.9613%" height="15" fill="rgb(238,28,14)" fg:x="43448" fg:w="8287"/><text x="15.7756%" y="7023.50">neu..</text></g><g><title>neural_network.exe`core::ptr::write(tuple$&lt;usize,usize&gt;*, tuple$ (482 samples, 0.17%)</title><rect x="18.3147%" y="6997" width="0.1722%" height="15" fill="rgb(229,40,46)" fg:x="51253" fg:w="482"/><text x="18.5647%" y="7007.50"></text></g><g><title>`0x7FF968D51381 (416 samples, 0.15%)</title><rect x="18.5162%" y="6949" width="0.1487%" height="15" fill="rgb(244,195,20)" fg:x="51817" fg:w="416"/><text x="18.7662%" y="6959.50"></text></g><g><title>`0x7FF97E62CB20 (33 samples, 0.01%)</title><rect x="18.7038%" y="6885" width="0.0118%" height="15" fill="rgb(253,56,35)" fg:x="52342" fg:w="33"/><text x="18.9538%" y="6895.50"></text></g><g><title>`0x7FF97E62CB3D (32 samples, 0.01%)</title><rect x="18.7199%" y="6885" width="0.0114%" height="15" fill="rgb(210,149,44)" fg:x="52387" fg:w="32"/><text x="18.9699%" y="6895.50"></text></g><g><title>`0x7FF97E62D5E2 (42 samples, 0.02%)</title><rect x="18.8610%" y="6869" width="0.0150%" height="15" fill="rgb(240,135,12)" fg:x="52782" fg:w="42"/><text x="19.1110%" y="6879.50"></text></g><g><title>`0x7FF97E62D68A (60 samples, 0.02%)</title><rect x="18.8792%" y="6869" width="0.0214%" height="15" fill="rgb(251,24,50)" fg:x="52833" fg:w="60"/><text x="19.1292%" y="6879.50"></text></g><g><title>`0x7FF97E62DB41 (38 samples, 0.01%)</title><rect x="18.9479%" y="6869" width="0.0136%" height="15" fill="rgb(243,200,47)" fg:x="53025" fg:w="38"/><text x="19.1979%" y="6879.50"></text></g><g><title>`0x7FF97E62DBBF (102 samples, 0.04%)</title><rect x="18.9636%" y="6869" width="0.0364%" height="15" fill="rgb(224,166,26)" fg:x="53069" fg:w="102"/><text x="19.2136%" y="6879.50"></text></g><g><title>`0x7FF97E631B1F (49 samples, 0.02%)</title><rect x="18.9825%" y="6853" width="0.0175%" height="15" fill="rgb(233,0,47)" fg:x="53122" fg:w="49"/><text x="19.2325%" y="6863.50"></text></g><g><title>`0x7FF97E631CA3 (31 samples, 0.01%)</title><rect x="18.9889%" y="6837" width="0.0111%" height="15" fill="rgb(253,80,5)" fg:x="53140" fg:w="31"/><text x="19.2389%" y="6847.50"></text></g><g><title>`0x7FF97E62DBDD (67 samples, 0.02%)</title><rect x="19.0000%" y="6869" width="0.0239%" height="15" fill="rgb(214,133,25)" fg:x="53171" fg:w="67"/><text x="19.2500%" y="6879.50"></text></g><g><title>`0x7FF97E62CC9A (616 samples, 0.22%)</title><rect x="18.8046%" y="6885" width="0.2201%" height="15" fill="rgb(209,27,14)" fg:x="52624" fg:w="616"/><text x="19.0546%" y="6895.50"></text></g><g><title>`0x7FF97E62CCC1 (31 samples, 0.01%)</title><rect x="19.0258%" y="6885" width="0.0111%" height="15" fill="rgb(219,102,51)" fg:x="53243" fg:w="31"/><text x="19.2758%" y="6895.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (1,078 samples, 0.39%)</title><rect x="18.6899%" y="6949" width="0.3852%" height="15" fill="rgb(237,18,16)" fg:x="52303" fg:w="1078"/><text x="18.9399%" y="6959.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (1,078 samples, 0.39%)</title><rect x="18.6899%" y="6933" width="0.3852%" height="15" fill="rgb(241,85,17)" fg:x="52303" fg:w="1078"/><text x="18.9399%" y="6943.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (1,078 samples, 0.39%)</title><rect x="18.6899%" y="6917" width="0.3852%" height="15" fill="rgb(236,90,42)" fg:x="52303" fg:w="1078"/><text x="18.9399%" y="6927.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (1,078 samples, 0.39%)</title><rect x="18.6899%" y="6901" width="0.3852%" height="15" fill="rgb(249,57,21)" fg:x="52303" fg:w="1078"/><text x="18.9399%" y="6911.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::process_heap_alloc (30 samples, 0.01%)</title><rect x="19.0643%" y="6885" width="0.0107%" height="15" fill="rgb(243,12,36)" fg:x="53351" fg:w="30"/><text x="19.3143%" y="6895.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$11::clone(alloc::vec::Vec&lt;tuple$ (1,628 samples, 0.58%)</title><rect x="18.4951%" y="7013" width="0.5817%" height="15" fill="rgb(253,128,47)" fg:x="51758" fg:w="1628"/><text x="18.7451%" y="7023.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (1,628 samples, 0.58%)</title><rect x="18.4951%" y="6997" width="0.5817%" height="15" fill="rgb(207,33,20)" fg:x="51758" fg:w="1628"/><text x="18.7451%" y="7007.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$&lt;tuple$ (1,619 samples, 0.58%)</title><rect x="18.4983%" y="6981" width="0.5785%" height="15" fill="rgb(233,215,35)" fg:x="51767" fg:w="1619"/><text x="18.7483%" y="6991.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$&lt;tuple$ (1,619 samples, 0.58%)</title><rect x="18.4983%" y="6965" width="0.5785%" height="15" fill="rgb(249,188,52)" fg:x="51767" fg:w="1619"/><text x="18.7483%" y="6975.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (1,013 samples, 0.36%)</title><rect x="19.1119%" y="6997" width="0.3620%" height="15" fill="rgb(225,12,32)" fg:x="53484" fg:w="1013"/><text x="19.3619%" y="7007.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (1,013 samples, 0.36%)</title><rect x="19.1119%" y="6981" width="0.3620%" height="15" fill="rgb(247,98,14)" fg:x="53484" fg:w="1013"/><text x="19.3619%" y="6991.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (120 samples, 0.04%)</title><rect x="19.4310%" y="6965" width="0.0429%" height="15" fill="rgb(247,219,48)" fg:x="54377" fg:w="120"/><text x="19.6810%" y="6975.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$ (1,424 samples, 0.51%)</title><rect x="19.0769%" y="7013" width="0.5088%" height="15" fill="rgb(253,60,48)" fg:x="53386" fg:w="1424"/><text x="19.3269%" y="7023.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;tuple$ (313 samples, 0.11%)</title><rect x="19.4739%" y="6997" width="0.1118%" height="15" fill="rgb(245,15,52)" fg:x="54497" fg:w="313"/><text x="19.7239%" y="7007.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;tuple$ (289 samples, 0.10%)</title><rect x="19.4824%" y="6981" width="0.1033%" height="15" fill="rgb(220,133,28)" fg:x="54521" fg:w="289"/><text x="19.7324%" y="6991.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (42 samples, 0.02%)</title><rect x="19.5857%" y="6997" width="0.0150%" height="15" fill="rgb(217,180,4)" fg:x="54810" fg:w="42"/><text x="19.8357%" y="7007.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, core::ops::range::Range (1,004 samples, 0.36%)</title><rect x="19.5857%" y="7013" width="0.3588%" height="15" fill="rgb(251,24,1)" fg:x="54810" fg:w="1004"/><text x="19.8357%" y="7023.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (962 samples, 0.34%)</title><rect x="19.6007%" y="6997" width="0.3438%" height="15" fill="rgb(212,185,49)" fg:x="54852" fg:w="962"/><text x="19.8507%" y="7007.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (962 samples, 0.34%)</title><rect x="19.6007%" y="6981" width="0.3438%" height="15" fill="rgb(215,175,22)" fg:x="54852" fg:w="962"/><text x="19.8507%" y="6991.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (87 samples, 0.03%)</title><rect x="19.9134%" y="6965" width="0.0311%" height="15" fill="rgb(250,205,14)" fg:x="55727" fg:w="87"/><text x="20.1634%" y="6975.50"></text></g><g><title>`0x7FF97E62AFA5 (47 samples, 0.02%)</title><rect x="19.9505%" y="6917" width="0.0168%" height="15" fill="rgb(225,211,22)" fg:x="55831" fg:w="47"/><text x="20.2005%" y="6927.50"></text></g><g><title>`0x7FF97E62AFBA (107 samples, 0.04%)</title><rect x="19.9673%" y="6917" width="0.0382%" height="15" fill="rgb(251,179,42)" fg:x="55878" fg:w="107"/><text x="20.2173%" y="6927.50"></text></g><g><title>`0x7FF97E62AFE0 (153 samples, 0.05%)</title><rect x="20.0063%" y="6917" width="0.0547%" height="15" fill="rgb(208,216,51)" fg:x="55987" fg:w="153"/><text x="20.2563%" y="6927.50"></text></g><g><title>`0x7FF97E62BB70 (183 samples, 0.07%)</title><rect x="20.0620%" y="6901" width="0.0654%" height="15" fill="rgb(235,36,11)" fg:x="56143" fg:w="183"/><text x="20.3120%" y="6911.50"></text></g><g><title>`0x7FF97E62BB84 (176 samples, 0.06%)</title><rect x="20.1289%" y="6901" width="0.0629%" height="15" fill="rgb(213,189,28)" fg:x="56330" fg:w="176"/><text x="20.3789%" y="6911.50"></text></g><g><title>`0x7FF97E62C2B1 (164 samples, 0.06%)</title><rect x="20.1968%" y="6901" width="0.0586%" height="15" fill="rgb(227,203,42)" fg:x="56520" fg:w="164"/><text x="20.4468%" y="6911.50"></text></g><g><title>`0x7FF97E62C38A (152 samples, 0.05%)</title><rect x="20.2732%" y="6901" width="0.0543%" height="15" fill="rgb(244,72,36)" fg:x="56734" fg:w="152"/><text x="20.5232%" y="6911.50"></text></g><g><title>`0x7FF97E69CB43 (109 samples, 0.04%)</title><rect x="20.3275%" y="6901" width="0.0389%" height="15" fill="rgb(213,53,17)" fg:x="56886" fg:w="109"/><text x="20.5775%" y="6911.50"></text></g><g><title>`0x7FF97E69CB6A (43 samples, 0.02%)</title><rect x="20.3697%" y="6901" width="0.0154%" height="15" fill="rgb(207,167,3)" fg:x="57004" fg:w="43"/><text x="20.6197%" y="6911.50"></text></g><g><title>`0x7FF97E69CCAF (29 samples, 0.01%)</title><rect x="20.4376%" y="6901" width="0.0104%" height="15" fill="rgb(216,98,30)" fg:x="57194" fg:w="29"/><text x="20.6876%" y="6911.50"></text></g><g><title>`0x7FF97E62AFF1 (1,207 samples, 0.43%)</title><rect x="20.0620%" y="6917" width="0.4313%" height="15" fill="rgb(236,123,15)" fg:x="56143" fg:w="1207"/><text x="20.3120%" y="6927.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (1,567 samples, 0.56%)</title><rect x="19.9502%" y="6949" width="0.5599%" height="15" fill="rgb(248,81,50)" fg:x="55830" fg:w="1567"/><text x="20.2002%" y="6959.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (1,567 samples, 0.56%)</title><rect x="19.9502%" y="6933" width="0.5599%" height="15" fill="rgb(214,120,4)" fg:x="55830" fg:w="1567"/><text x="20.2002%" y="6943.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (36 samples, 0.01%)</title><rect x="20.4973%" y="6917" width="0.0129%" height="15" fill="rgb(208,179,34)" fg:x="57361" fg:w="36"/><text x="20.7473%" y="6927.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::dealloc (36 samples, 0.01%)</title><rect x="20.4973%" y="6901" width="0.0129%" height="15" fill="rgb(227,140,7)" fg:x="57361" fg:w="36"/><text x="20.7473%" y="6911.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;tuple$ (1,600 samples, 0.57%)</title><rect x="19.9445%" y="7013" width="0.5717%" height="15" fill="rgb(214,22,6)" fg:x="55814" fg:w="1600"/><text x="20.1945%" y="7023.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (1,600 samples, 0.57%)</title><rect x="19.9445%" y="6997" width="0.5717%" height="15" fill="rgb(207,137,27)" fg:x="55814" fg:w="1600"/><text x="20.1945%" y="7007.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (1,600 samples, 0.57%)</title><rect x="19.9445%" y="6981" width="0.5717%" height="15" fill="rgb(210,8,46)" fg:x="55814" fg:w="1600"/><text x="20.1945%" y="6991.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (1,584 samples, 0.57%)</title><rect x="19.9502%" y="6965" width="0.5660%" height="15" fill="rgb(240,16,54)" fg:x="55830" fg:w="1584"/><text x="20.2002%" y="6975.50"></text></g><g><title>neural_network.exe`core::iter::adapters::rev::impl$1::next(core::iter::adapters::rev::Rev&lt;core::ops::range::Range (28 samples, 0.01%)</title><rect x="20.5223%" y="6917" width="0.0100%" height="15" fill="rgb(211,209,29)" fg:x="57431" fg:w="28"/><text x="20.7723%" y="6927.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$7::next_back(core::ops::range::Range (28 samples, 0.01%)</title><rect x="20.5223%" y="6901" width="0.0100%" height="15" fill="rgb(226,228,24)" fg:x="57431" fg:w="28"/><text x="20.7723%" y="6911.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$5::spec_next_back(core::ops::range::Range (28 samples, 0.01%)</title><rect x="20.5223%" y="6885" width="0.0100%" height="15" fill="rgb(222,84,9)" fg:x="57431" fg:w="28"/><text x="20.7723%" y="6895.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy(tuple$&lt;usize,usize&gt;*, tuple$ (35 samples, 0.01%)</title><rect x="20.5502%" y="6885" width="0.0125%" height="15" fill="rgb(234,203,30)" fg:x="57509" fg:w="35"/><text x="20.8002%" y="6895.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::swap(ref_mut$&lt;slice2$&lt;tuple$ (142 samples, 0.05%)</title><rect x="20.5323%" y="6917" width="0.0507%" height="15" fill="rgb(238,109,14)" fg:x="57459" fg:w="142"/><text x="20.7823%" y="6927.50"></text></g><g><title>neural_network.exe`core::ptr::swap(tuple$&lt;usize,usize&gt;*, tuple$ (92 samples, 0.03%)</title><rect x="20.5502%" y="6901" width="0.0329%" height="15" fill="rgb(233,206,34)" fg:x="57509" fg:w="92"/><text x="20.8002%" y="6911.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping(tuple$&lt;usize,usize&gt;*, tuple$ (57 samples, 0.02%)</title><rect x="20.5627%" y="6885" width="0.0204%" height="15" fill="rgb(220,167,47)" fg:x="57544" fg:w="57"/><text x="20.8127%" y="6895.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::round(rand_chacha::guts::State&lt;ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (38 samples, 0.01%)</title><rect x="20.6438%" y="6645" width="0.0136%" height="15" fill="rgb(238,105,10)" fg:x="57771" fg:w="38"/><text x="20.8938%" y="6655.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide::impl_avx2 (47 samples, 0.02%)</title><rect x="20.6409%" y="6693" width="0.0168%" height="15" fill="rgb(213,227,17)" fg:x="57763" fg:w="47"/><text x="20.8909%" y="6703.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide::fn_impl(ppv_lite86::x86_64::Avx2Machine (47 samples, 0.02%)</title><rect x="20.6409%" y="6677" width="0.0168%" height="15" fill="rgb(217,132,38)" fg:x="57763" fg:w="47"/><text x="20.8909%" y="6687.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide_impl(ppv_lite86::x86_64::Avx2Machine (47 samples, 0.02%)</title><rect x="20.6409%" y="6661" width="0.0168%" height="15" fill="rgb(242,146,4)" fg:x="57763" fg:w="47"/><text x="20.8909%" y="6671.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place (399 samples, 0.14%)</title><rect x="20.5162%" y="7013" width="0.1426%" height="15" fill="rgb(212,61,9)" fg:x="57414" fg:w="399"/><text x="20.7662%" y="7023.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (399 samples, 0.14%)</title><rect x="20.5162%" y="6997" width="0.1426%" height="15" fill="rgb(247,126,22)" fg:x="57414" fg:w="399"/><text x="20.7662%" y="7007.50"></text></g><g><title>neural_network.exe`alloc::rc::impl$30::drop(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (399 samples, 0.14%)</title><rect x="20.5162%" y="6981" width="0.1426%" height="15" fill="rgb(220,196,2)" fg:x="57414" fg:w="399"/><text x="20.7662%" y="6991.50"></text></g><g><title>neural_network.exe`alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;::inner (395 samples, 0.14%)</title><rect x="20.5176%" y="6965" width="0.1411%" height="15" fill="rgb(208,46,4)" fg:x="57418" fg:w="395"/><text x="20.7676%" y="6975.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;alloc::rc::RcBox&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt; &gt; &gt;::as_ref (395 samples, 0.14%)</title><rect x="20.5176%" y="6949" width="0.1411%" height="15" fill="rgb(252,104,46)" fg:x="57418" fg:w="395"/><text x="20.7676%" y="6959.50"></text></g><g><title>neural_network.exe`rand::seq::impl$0::shuffle&lt;tuple$&lt;usize,usize&gt;,rand::rngs::thread::ThreadRng&gt;(ref_mut$&lt;slice2$&lt;tuple$ (395 samples, 0.14%)</title><rect x="20.5176%" y="6933" width="0.1411%" height="15" fill="rgb(237,152,48)" fg:x="57418" fg:w="395"/><text x="20.7676%" y="6943.50"></text></g><g><title>neural_network.exe`rand::seq::gen_index (212 samples, 0.08%)</title><rect x="20.5830%" y="6917" width="0.0758%" height="15" fill="rgb(221,59,37)" fg:x="57601" fg:w="212"/><text x="20.8330%" y="6927.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen_range(rand::rngs::thread::ThreadRng*, core::ops::range::Range (212 samples, 0.08%)</title><rect x="20.5830%" y="6901" width="0.0758%" height="15" fill="rgb(209,202,51)" fg:x="57601" fg:w="212"/><text x="20.8330%" y="6911.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$6::sample_single(core::ops::range::Range (212 samples, 0.08%)</title><rect x="20.5830%" y="6885" width="0.0758%" height="15" fill="rgb(228,81,30)" fg:x="57601" fg:w="212"/><text x="20.8330%" y="6895.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single (212 samples, 0.08%)</title><rect x="20.5830%" y="6869" width="0.0758%" height="15" fill="rgb(227,42,39)" fg:x="57601" fg:w="212"/><text x="20.8330%" y="6879.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single_inclusive (212 samples, 0.08%)</title><rect x="20.5830%" y="6853" width="0.0758%" height="15" fill="rgb(221,26,2)" fg:x="57601" fg:w="212"/><text x="20.8330%" y="6863.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen (160 samples, 0.06%)</title><rect x="20.6016%" y="6837" width="0.0572%" height="15" fill="rgb(254,61,31)" fg:x="57653" fg:w="160"/><text x="20.8516%" y="6847.50"></text></g><g><title>neural_network.exe`rand::distributions::integer::impl$2::sample (160 samples, 0.06%)</title><rect x="20.6016%" y="6821" width="0.0572%" height="15" fill="rgb(222,173,38)" fg:x="57653" fg:w="160"/><text x="20.8516%" y="6831.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::impl$1::next_u32 (160 samples, 0.06%)</title><rect x="20.6016%" y="6805" width="0.0572%" height="15" fill="rgb(218,50,12)" fg:x="57653" fg:w="160"/><text x="20.8516%" y="6815.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$1::next_u32(rand::rngs::adapter::reseeding::ReseedingRng (160 samples, 0.06%)</title><rect x="20.6016%" y="6789" width="0.0572%" height="15" fill="rgb(223,88,40)" fg:x="57653" fg:w="160"/><text x="20.8516%" y="6799.50"></text></g><g><title>neural_network.exe`rand_core::block::impl$2::next_u32(rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore (160 samples, 0.06%)</title><rect x="20.6016%" y="6773" width="0.0572%" height="15" fill="rgb(237,54,19)" fg:x="57653" fg:w="160"/><text x="20.8516%" y="6783.50"></text></g><g><title>neural_network.exe`rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;::generate_and_set (64 samples, 0.02%)</title><rect x="20.6359%" y="6757" width="0.0229%" height="15" fill="rgb(251,129,25)" fg:x="57749" fg:w="64"/><text x="20.8859%" y="6767.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$4::generate(rand::rngs::adapter::reseeding::ReseedingCore&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt;*, rand_chacha::chacha::Array64 (64 samples, 0.02%)</title><rect x="20.6359%" y="6741" width="0.0229%" height="15" fill="rgb(238,97,19)" fg:x="57749" fg:w="64"/><text x="20.8859%" y="6751.50"></text></g><g><title>neural_network.exe`rand_chacha::chacha::impl$23::generate(rand_chacha::chacha::ChaCha12Core*, rand_chacha::chacha::Array64 (52 samples, 0.02%)</title><rect x="20.6402%" y="6725" width="0.0186%" height="15" fill="rgb(240,169,18)" fg:x="57761" fg:w="52"/><text x="20.8902%" y="6735.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::ChaCha::refill4 (52 samples, 0.02%)</title><rect x="20.6402%" y="6709" width="0.0186%" height="15" fill="rgb(230,187,49)" fg:x="57761" fg:w="52"/><text x="20.8902%" y="6719.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::contains(ref$&lt;slice2$&lt;tuple$&lt;usize,usize&gt; &gt; &gt;, tuple$ (559 samples, 0.20%)</title><rect x="20.6588%" y="7013" width="0.1998%" height="15" fill="rgb(209,44,26)" fg:x="57813" fg:w="559"/><text x="20.9088%" y="7023.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (559 samples, 0.20%)</title><rect x="20.6588%" y="6997" width="0.1998%" height="15" fill="rgb(244,0,6)" fg:x="57813" fg:w="559"/><text x="20.9088%" y="7007.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (559 samples, 0.20%)</title><rect x="20.6588%" y="6981" width="0.1998%" height="15" fill="rgb(248,18,21)" fg:x="57813" fg:w="559"/><text x="20.9088%" y="6991.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (83 samples, 0.03%)</title><rect x="20.8289%" y="6965" width="0.0297%" height="15" fill="rgb(245,180,19)" fg:x="58289" fg:w="83"/><text x="21.0789%" y="6975.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (39 samples, 0.01%)</title><rect x="20.8446%" y="6949" width="0.0139%" height="15" fill="rgb(252,118,36)" fg:x="58333" fg:w="39"/><text x="21.0946%" y="6959.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (39 samples, 0.01%)</title><rect x="20.8446%" y="6933" width="0.0139%" height="15" fill="rgb(210,224,19)" fg:x="58333" fg:w="39"/><text x="21.0946%" y="6943.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (39 samples, 0.01%)</title><rect x="20.8446%" y="6917" width="0.0139%" height="15" fill="rgb(218,30,24)" fg:x="58333" fg:w="39"/><text x="21.0946%" y="6927.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (247 samples, 0.09%)</title><rect x="20.8585%" y="7013" width="0.0883%" height="15" fill="rgb(219,75,50)" fg:x="58372" fg:w="247"/><text x="21.1085%" y="7023.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (74 samples, 0.03%)</title><rect x="20.9204%" y="6997" width="0.0264%" height="15" fill="rgb(234,72,50)" fg:x="58545" fg:w="74"/><text x="21.1704%" y="7007.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (74 samples, 0.03%)</title><rect x="20.9204%" y="6981" width="0.0264%" height="15" fill="rgb(219,100,48)" fg:x="58545" fg:w="74"/><text x="21.1704%" y="6991.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (74 samples, 0.03%)</title><rect x="20.9204%" y="6965" width="0.0264%" height="15" fill="rgb(253,5,41)" fg:x="58545" fg:w="74"/><text x="21.1704%" y="6975.50"></text></g><g><title>`0x7FF97E69CC6F (71 samples, 0.03%)</title><rect x="21.1766%" y="6949" width="0.0254%" height="15" fill="rgb(247,181,11)" fg:x="59262" fg:w="71"/><text x="21.4266%" y="6959.50"></text></g><g><title>`0x7FF97E62AFF1 (457 samples, 0.16%)</title><rect x="21.0579%" y="6965" width="0.1633%" height="15" fill="rgb(222,223,25)" fg:x="58930" fg:w="457"/><text x="21.3079%" y="6975.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::set_ptr_and_cap(core::ptr::non_null::NonNull&lt;slice2$ (30 samples, 0.01%)</title><rect x="21.3317%" y="6837" width="0.0107%" height="15" fill="rgb(214,198,28)" fg:x="59696" fg:w="30"/><text x="21.5817%" y="6847.50"></text></g><g><title>`0x7FF97E68F87F (30 samples, 0.01%)</title><rect x="21.4571%" y="6725" width="0.0107%" height="15" fill="rgb(230,46,43)" fg:x="60047" fg:w="30"/><text x="21.7071%" y="6735.50"></text></g><g><title>`0x7FF97E68F8EE (29 samples, 0.01%)</title><rect x="21.4682%" y="6725" width="0.0104%" height="15" fill="rgb(233,65,53)" fg:x="60078" fg:w="29"/><text x="21.7182%" y="6735.50"></text></g><g><title>`0x7FF97E62D68A (162 samples, 0.06%)</title><rect x="21.4460%" y="6741" width="0.0579%" height="15" fill="rgb(221,121,27)" fg:x="60016" fg:w="162"/><text x="21.6960%" y="6751.50"></text></g><g><title>`0x7FF97E62D723 (32 samples, 0.01%)</title><rect x="21.5425%" y="6741" width="0.0114%" height="15" fill="rgb(247,70,47)" fg:x="60286" fg:w="32"/><text x="21.7925%" y="6751.50"></text></g><g><title>`0x7FF97E62D793 (66 samples, 0.02%)</title><rect x="21.5564%" y="6741" width="0.0236%" height="15" fill="rgb(228,85,35)" fg:x="60325" fg:w="66"/><text x="21.8064%" y="6751.50"></text></g><g><title>`0x7FF97E62CC9A (491 samples, 0.18%)</title><rect x="21.4163%" y="6757" width="0.1755%" height="15" fill="rgb(209,50,18)" fg:x="59933" fg:w="491"/><text x="21.6663%" y="6767.50"></text></g><g><title>`0x7FF97E62CCC1 (58 samples, 0.02%)</title><rect x="21.5922%" y="6757" width="0.0207%" height="15" fill="rgb(250,19,35)" fg:x="60425" fg:w="58"/><text x="21.8422%" y="6767.50"></text></g><g><title>`0x7FF97E62CCF8 (35 samples, 0.01%)</title><rect x="21.6132%" y="6757" width="0.0125%" height="15" fill="rgb(253,107,29)" fg:x="60484" fg:w="35"/><text x="21.8632%" y="6767.50"></text></g><g><title>`0x7FF97E63249F (30 samples, 0.01%)</title><rect x="21.6951%" y="6725" width="0.0107%" height="15" fill="rgb(252,179,29)" fg:x="60713" fg:w="30"/><text x="21.9451%" y="6735.50"></text></g><g><title>`0x7FF97E6324C5 (55 samples, 0.02%)</title><rect x="21.7079%" y="6725" width="0.0197%" height="15" fill="rgb(238,194,6)" fg:x="60749" fg:w="55"/><text x="21.9579%" y="6735.50"></text></g><g><title>`0x7FF97E6334DC (47 samples, 0.02%)</title><rect x="21.7276%" y="6725" width="0.0168%" height="15" fill="rgb(238,164,29)" fg:x="60804" fg:w="47"/><text x="21.9776%" y="6735.50"></text></g><g><title>`0x7FF97E633500 (62 samples, 0.02%)</title><rect x="21.7455%" y="6725" width="0.0222%" height="15" fill="rgb(224,25,9)" fg:x="60854" fg:w="62"/><text x="21.9955%" y="6735.50"></text></g><g><title>`0x7FF97E62CAFB (35 samples, 0.01%)</title><rect x="21.7751%" y="6709" width="0.0125%" height="15" fill="rgb(244,153,23)" fg:x="60937" fg:w="35"/><text x="22.0251%" y="6719.50"></text></g><g><title>`0x7FF97E62CB02 (34 samples, 0.01%)</title><rect x="21.7880%" y="6709" width="0.0121%" height="15" fill="rgb(212,203,14)" fg:x="60973" fg:w="34"/><text x="22.0380%" y="6719.50"></text></g><g><title>`0x7FF97E62CB1A (33 samples, 0.01%)</title><rect x="21.8016%" y="6709" width="0.0118%" height="15" fill="rgb(220,164,20)" fg:x="61011" fg:w="33"/><text x="22.0516%" y="6719.50"></text></g><g><title>`0x7FF97E62CB29 (31 samples, 0.01%)</title><rect x="21.8141%" y="6709" width="0.0111%" height="15" fill="rgb(222,203,48)" fg:x="61046" fg:w="31"/><text x="22.0641%" y="6719.50"></text></g><g><title>`0x7FF97E62CB7E (32 samples, 0.01%)</title><rect x="21.8494%" y="6709" width="0.0114%" height="15" fill="rgb(215,159,22)" fg:x="61145" fg:w="32"/><text x="22.0994%" y="6719.50"></text></g><g><title>`0x7FF97E62D57C (65 samples, 0.02%)</title><rect x="21.9309%" y="6693" width="0.0232%" height="15" fill="rgb(216,183,47)" fg:x="61373" fg:w="65"/><text x="22.1809%" y="6703.50"></text></g><g><title>`0x7FF97E62D68A (103 samples, 0.04%)</title><rect x="21.9756%" y="6693" width="0.0368%" height="15" fill="rgb(229,195,25)" fg:x="61498" fg:w="103"/><text x="22.2256%" y="6703.50"></text></g><g><title>`0x7FF97E62D723 (37 samples, 0.01%)</title><rect x="22.0367%" y="6693" width="0.0132%" height="15" fill="rgb(224,132,51)" fg:x="61669" fg:w="37"/><text x="22.2867%" y="6703.50"></text></g><g><title>`0x7FF97E62D740 (29 samples, 0.01%)</title><rect x="22.0499%" y="6693" width="0.0104%" height="15" fill="rgb(240,63,7)" fg:x="61706" fg:w="29"/><text x="22.2999%" y="6703.50"></text></g><g><title>`0x7FF97E62D743 (41 samples, 0.01%)</title><rect x="22.0603%" y="6693" width="0.0147%" height="15" fill="rgb(249,182,41)" fg:x="61735" fg:w="41"/><text x="22.3103%" y="6703.50"></text></g><g><title>`0x7FF97E62D759 (28 samples, 0.01%)</title><rect x="22.0760%" y="6693" width="0.0100%" height="15" fill="rgb(243,47,26)" fg:x="61779" fg:w="28"/><text x="22.3260%" y="6703.50"></text></g><g><title>`0x7FF97E62CC9A (529 samples, 0.19%)</title><rect x="21.9041%" y="6709" width="0.1890%" height="15" fill="rgb(233,48,2)" fg:x="61298" fg:w="529"/><text x="22.1541%" y="6719.50"></text></g><g><title>`0x7FF97E62CCC1 (50 samples, 0.02%)</title><rect x="22.0935%" y="6709" width="0.0179%" height="15" fill="rgb(244,165,34)" fg:x="61828" fg:w="50"/><text x="22.3435%" y="6719.50"></text></g><g><title>`0x7FF97E62CCF8 (32 samples, 0.01%)</title><rect x="22.1124%" y="6709" width="0.0114%" height="15" fill="rgb(207,89,7)" fg:x="61881" fg:w="32"/><text x="22.3624%" y="6719.50"></text></g><g><title>`0x7FF97E633505 (1,000 samples, 0.36%)</title><rect x="21.7676%" y="6725" width="0.3573%" height="15" fill="rgb(244,117,36)" fg:x="60916" fg:w="1000"/><text x="22.0176%" y="6735.50"></text></g><g><title>`0x7FF97E696B96 (379 samples, 0.14%)</title><rect x="22.1285%" y="6709" width="0.1354%" height="15" fill="rgb(226,144,34)" fg:x="61926" fg:w="379"/><text x="22.3785%" y="6719.50"></text></g><g><title>`0x7FF97E696C00 (32 samples, 0.01%)</title><rect x="22.2693%" y="6709" width="0.0114%" height="15" fill="rgb(213,23,19)" fg:x="62320" fg:w="32"/><text x="22.5193%" y="6719.50"></text></g><g><title>`0x7FF97E696C22 (40 samples, 0.01%)</title><rect x="22.3043%" y="6709" width="0.0143%" height="15" fill="rgb(217,75,12)" fg:x="62418" fg:w="40"/><text x="22.5543%" y="6719.50"></text></g><g><title>`0x7FF97E633550 (575 samples, 0.21%)</title><rect x="22.1257%" y="6725" width="0.2055%" height="15" fill="rgb(224,159,17)" fg:x="61918" fg:w="575"/><text x="22.3757%" y="6735.50"></text></g><g><title>`0x7FF97E69CCAF (102 samples, 0.04%)</title><rect x="22.3865%" y="6693" width="0.0364%" height="15" fill="rgb(217,118,1)" fg:x="62648" fg:w="102"/><text x="22.6365%" y="6703.50"></text></g><g><title>`0x7FF97E62AFF1 (236 samples, 0.08%)</title><rect x="22.3451%" y="6709" width="0.0843%" height="15" fill="rgb(232,180,48)" fg:x="62532" fg:w="236"/><text x="22.5951%" y="6719.50"></text></g><g><title>`0x7FF97E633562 (281 samples, 0.10%)</title><rect x="22.3318%" y="6725" width="0.1004%" height="15" fill="rgb(230,27,33)" fg:x="62495" fg:w="281"/><text x="22.5818%" y="6735.50"></text></g><g><title>`0x7FF97E6335AC (60 samples, 0.02%)</title><rect x="22.4398%" y="6725" width="0.0214%" height="15" fill="rgb(205,31,21)" fg:x="62797" fg:w="60"/><text x="22.6898%" y="6735.50"></text></g><g><title>`0x7FF97E6322C7 (2,214 samples, 0.79%)</title><rect x="21.6711%" y="6741" width="0.7911%" height="15" fill="rgb(253,59,4)" fg:x="60646" fg:w="2214"/><text x="21.9211%" y="6751.50"></text></g><g><title>`0x7FF97E632307 (42 samples, 0.02%)</title><rect x="22.4709%" y="6741" width="0.0150%" height="15" fill="rgb(224,201,9)" fg:x="62884" fg:w="42"/><text x="22.7209%" y="6751.50"></text></g><g><title>`0x7FF97E63218A (2,408 samples, 0.86%)</title><rect x="21.6500%" y="6757" width="0.8605%" height="15" fill="rgb(229,206,30)" fg:x="60587" fg:w="2408"/><text x="21.9000%" y="6767.50"></text></g><g><title>`0x7FF97E632312 (68 samples, 0.02%)</title><rect x="22.4862%" y="6741" width="0.0243%" height="15" fill="rgb(212,67,47)" fg:x="62927" fg:w="68"/><text x="22.7362%" y="6751.50"></text></g><g><title>`0x7FF97E63219E (86 samples, 0.03%)</title><rect x="22.5116%" y="6757" width="0.0307%" height="15" fill="rgb(211,96,50)" fg:x="62998" fg:w="86"/><text x="22.7616%" y="6767.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_realloc (30 samples, 0.01%)</title><rect x="22.5466%" y="6757" width="0.0107%" height="15" fill="rgb(252,114,18)" fg:x="63096" fg:w="30"/><text x="22.7966%" y="6767.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (3,257 samples, 1.16%)</title><rect x="21.3974%" y="6805" width="1.1639%" height="15" fill="rgb(223,58,37)" fg:x="59880" fg:w="3257"/><text x="21.6474%" y="6815.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (3,257 samples, 1.16%)</title><rect x="21.3974%" y="6789" width="1.1639%" height="15" fill="rgb(237,70,4)" fg:x="59880" fg:w="3257"/><text x="21.6474%" y="6799.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (3,253 samples, 1.16%)</title><rect x="21.3988%" y="6773" width="1.1624%" height="15" fill="rgb(244,85,46)" fg:x="59884" fg:w="3253"/><text x="21.6488%" y="6783.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_mut_ptr (3,861 samples, 1.38%)</title><rect x="21.2466%" y="6949" width="1.3797%" height="15" fill="rgb(223,39,52)" fg:x="59458" fg:w="3861"/><text x="21.4966%" y="6959.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (3,857 samples, 1.38%)</title><rect x="21.2480%" y="6933" width="1.3783%" height="15" fill="rgb(218,200,14)" fg:x="59462" fg:w="3857"/><text x="21.4980%" y="6943.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (3,857 samples, 1.38%)</title><rect x="21.2480%" y="6917" width="1.3783%" height="15" fill="rgb(208,171,16)" fg:x="59462" fg:w="3857"/><text x="21.4980%" y="6927.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (3,857 samples, 1.38%)</title><rect x="21.2480%" y="6901" width="1.3783%" height="15" fill="rgb(234,200,18)" fg:x="59462" fg:w="3857"/><text x="21.4980%" y="6911.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::grow_one&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; (3,845 samples, 1.37%)</title><rect x="21.2523%" y="6885" width="1.3740%" height="15" fill="rgb(228,45,11)" fg:x="59474" fg:w="3845"/><text x="21.5023%" y="6895.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (3,681 samples, 1.32%)</title><rect x="21.3109%" y="6869" width="1.3154%" height="15" fill="rgb(237,182,11)" fg:x="59638" fg:w="3681"/><text x="21.5609%" y="6879.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (3,669 samples, 1.31%)</title><rect x="21.3152%" y="6853" width="1.3111%" height="15" fill="rgb(241,175,49)" fg:x="59650" fg:w="3669"/><text x="21.5652%" y="6863.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (3,580 samples, 1.28%)</title><rect x="21.3470%" y="6837" width="1.2793%" height="15" fill="rgb(247,38,35)" fg:x="59739" fg:w="3580"/><text x="21.5970%" y="6847.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (3,514 samples, 1.26%)</title><rect x="21.3706%" y="6821" width="1.2557%" height="15" fill="rgb(228,39,49)" fg:x="59805" fg:w="3514"/><text x="21.6206%" y="6831.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;, alloc::raw_vec::finish_grow::closure_env$0 (182 samples, 0.07%)</title><rect x="22.5613%" y="6805" width="0.0650%" height="15" fill="rgb(226,101,26)" fg:x="63137" fg:w="182"/><text x="22.8113%" y="6815.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (4,492 samples, 1.61%)</title><rect x="21.2245%" y="6965" width="1.6052%" height="15" fill="rgb(206,141,19)" fg:x="59396" fg:w="4492"/><text x="21.4745%" y="6975.50"></text></g><g><title>neural_network.exe`core::ptr::write(tuple$&lt;usize,usize&gt;*, tuple$ (569 samples, 0.20%)</title><rect x="22.6263%" y="6949" width="0.2033%" height="15" fill="rgb(211,200,13)" fg:x="63319" fg:w="569"/><text x="22.8763%" y="6959.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::remove (28 samples, 0.01%)</title><rect x="22.8296%" y="6965" width="0.0100%" height="15" fill="rgb(241,121,6)" fg:x="63888" fg:w="28"/><text x="23.0796%" y="6975.50"></text></g><g><title>`0x7FF968D51381 (471 samples, 0.17%)</title><rect x="22.8643%" y="6901" width="0.1683%" height="15" fill="rgb(234,221,29)" fg:x="63985" fg:w="471"/><text x="23.1143%" y="6911.50"></text></g><g><title>`0x7FF97E62CAFF (38 samples, 0.01%)</title><rect x="23.0862%" y="6837" width="0.0136%" height="15" fill="rgb(229,136,5)" fg:x="64606" fg:w="38"/><text x="23.3362%" y="6847.50"></text></g><g><title>`0x7FF97E62CB20 (33 samples, 0.01%)</title><rect x="23.1005%" y="6837" width="0.0118%" height="15" fill="rgb(238,36,11)" fg:x="64646" fg:w="33"/><text x="23.3505%" y="6847.50"></text></g><g><title>`0x7FF97E62CB3D (51 samples, 0.02%)</title><rect x="23.1226%" y="6837" width="0.0182%" height="15" fill="rgb(251,55,41)" fg:x="64708" fg:w="51"/><text x="23.3726%" y="6847.50"></text></g><g><title>`0x7FF97E62CB84 (40 samples, 0.01%)</title><rect x="23.1523%" y="6837" width="0.0143%" height="15" fill="rgb(242,34,40)" fg:x="64791" fg:w="40"/><text x="23.4023%" y="6847.50"></text></g><g><title>`0x7FF97E62CC36 (28 samples, 0.01%)</title><rect x="23.2095%" y="6837" width="0.0100%" height="15" fill="rgb(215,42,17)" fg:x="64951" fg:w="28"/><text x="23.4595%" y="6847.50"></text></g><g><title>`0x7FF97E62CC65 (37 samples, 0.01%)</title><rect x="23.2277%" y="6837" width="0.0132%" height="15" fill="rgb(207,44,46)" fg:x="65002" fg:w="37"/><text x="23.4777%" y="6847.50"></text></g><g><title>`0x7FF97E62CC95 (34 samples, 0.01%)</title><rect x="23.2473%" y="6837" width="0.0121%" height="15" fill="rgb(211,206,28)" fg:x="65057" fg:w="34"/><text x="23.4973%" y="6847.50"></text></g><g><title>`0x7FF97E62D4E2 (30 samples, 0.01%)</title><rect x="23.2656%" y="6821" width="0.0107%" height="15" fill="rgb(237,167,16)" fg:x="65108" fg:w="30"/><text x="23.5156%" y="6831.50"></text></g><g><title>`0x7FF97E62D5E2 (70 samples, 0.03%)</title><rect x="23.3256%" y="6821" width="0.0250%" height="15" fill="rgb(233,66,6)" fg:x="65276" fg:w="70"/><text x="23.5756%" y="6831.50"></text></g><g><title>`0x7FF97E62D68A (53 samples, 0.02%)</title><rect x="23.3538%" y="6821" width="0.0189%" height="15" fill="rgb(246,123,29)" fg:x="65355" fg:w="53"/><text x="23.6038%" y="6831.50"></text></g><g><title>`0x7FF97E62CC9A (475 samples, 0.17%)</title><rect x="23.2595%" y="6837" width="0.1697%" height="15" fill="rgb(209,62,40)" fg:x="65091" fg:w="475"/><text x="23.5095%" y="6847.50"></text></g><g><title>`0x7FF97E62CCC1 (39 samples, 0.01%)</title><rect x="23.4303%" y="6837" width="0.0139%" height="15" fill="rgb(218,4,25)" fg:x="65569" fg:w="39"/><text x="23.6803%" y="6847.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (1,124 samples, 0.40%)</title><rect x="23.0833%" y="6901" width="0.4016%" height="15" fill="rgb(253,91,49)" fg:x="64598" fg:w="1124"/><text x="23.3333%" y="6911.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (1,124 samples, 0.40%)</title><rect x="23.0833%" y="6885" width="0.4016%" height="15" fill="rgb(228,155,29)" fg:x="64598" fg:w="1124"/><text x="23.3333%" y="6895.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (1,124 samples, 0.40%)</title><rect x="23.0833%" y="6869" width="0.4016%" height="15" fill="rgb(243,57,37)" fg:x="64598" fg:w="1124"/><text x="23.3333%" y="6879.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (1,124 samples, 0.40%)</title><rect x="23.0833%" y="6853" width="0.4016%" height="15" fill="rgb(244,167,17)" fg:x="64598" fg:w="1124"/><text x="23.3333%" y="6863.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$&lt;tuple$ (1,814 samples, 0.65%)</title><rect x="22.8414%" y="6933" width="0.6482%" height="15" fill="rgb(207,181,38)" fg:x="63921" fg:w="1814"/><text x="23.0914%" y="6943.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$&lt;tuple$ (1,814 samples, 0.65%)</title><rect x="22.8414%" y="6917" width="0.6482%" height="15" fill="rgb(211,8,23)" fg:x="63921" fg:w="1814"/><text x="23.0914%" y="6927.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$11::clone(alloc::vec::Vec&lt;tuple$ (1,822 samples, 0.65%)</title><rect x="22.8396%" y="6965" width="0.6511%" height="15" fill="rgb(235,11,44)" fg:x="63916" fg:w="1822"/><text x="23.0896%" y="6975.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (1,822 samples, 0.65%)</title><rect x="22.8396%" y="6949" width="0.6511%" height="15" fill="rgb(248,18,52)" fg:x="63916" fg:w="1822"/><text x="23.0896%" y="6959.50"></text></g><g><title>neural_network.exe`core::cmp::impls::impl$21::eq (36 samples, 0.01%)</title><rect x="23.5257%" y="6949" width="0.0129%" height="15" fill="rgb(208,4,7)" fg:x="65836" fg:w="36"/><text x="23.7757%" y="6959.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (1,223 samples, 0.44%)</title><rect x="23.5386%" y="6949" width="0.4370%" height="15" fill="rgb(240,17,39)" fg:x="65872" fg:w="1223"/><text x="23.7886%" y="6959.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (1,223 samples, 0.44%)</title><rect x="23.5386%" y="6933" width="0.4370%" height="15" fill="rgb(207,170,3)" fg:x="65872" fg:w="1223"/><text x="23.7886%" y="6943.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (146 samples, 0.05%)</title><rect x="23.9234%" y="6917" width="0.0522%" height="15" fill="rgb(236,100,52)" fg:x="66949" fg:w="146"/><text x="24.1734%" y="6927.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$ (1,711 samples, 0.61%)</title><rect x="23.4907%" y="6965" width="0.6114%" height="15" fill="rgb(246,78,51)" fg:x="65738" fg:w="1711"/><text x="23.7407%" y="6975.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;tuple$ (354 samples, 0.13%)</title><rect x="23.9756%" y="6949" width="0.1265%" height="15" fill="rgb(211,17,15)" fg:x="67095" fg:w="354"/><text x="24.2256%" y="6959.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;tuple$ (327 samples, 0.12%)</title><rect x="23.9852%" y="6933" width="0.1168%" height="15" fill="rgb(209,59,46)" fg:x="67122" fg:w="327"/><text x="24.2352%" y="6943.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (49 samples, 0.02%)</title><rect x="24.1021%" y="6949" width="0.0175%" height="15" fill="rgb(210,92,25)" fg:x="67449" fg:w="49"/><text x="24.3521%" y="6959.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, core::ops::range::Range (1,316 samples, 0.47%)</title><rect x="24.1021%" y="6965" width="0.4703%" height="15" fill="rgb(238,174,52)" fg:x="67449" fg:w="1316"/><text x="24.3521%" y="6975.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (1,267 samples, 0.45%)</title><rect x="24.1196%" y="6949" width="0.4527%" height="15" fill="rgb(230,73,7)" fg:x="67498" fg:w="1267"/><text x="24.3696%" y="6959.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (1,267 samples, 0.45%)</title><rect x="24.1196%" y="6933" width="0.4527%" height="15" fill="rgb(243,124,40)" fg:x="67498" fg:w="1267"/><text x="24.3696%" y="6943.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (150 samples, 0.05%)</title><rect x="24.5188%" y="6917" width="0.0536%" height="15" fill="rgb(244,170,11)" fg:x="68615" fg:w="150"/><text x="24.7688%" y="6927.50"></text></g><g><title>`0x7FF97E62AFA5 (60 samples, 0.02%)</title><rect x="24.5856%" y="6869" width="0.0214%" height="15" fill="rgb(207,114,54)" fg:x="68802" fg:w="60"/><text x="24.8356%" y="6879.50"></text></g><g><title>`0x7FF97E62AFBA (108 samples, 0.04%)</title><rect x="24.6088%" y="6869" width="0.0386%" height="15" fill="rgb(205,42,20)" fg:x="68867" fg:w="108"/><text x="24.8588%" y="6879.50"></text></g><g><title>`0x7FF97E62AFE0 (170 samples, 0.06%)</title><rect x="24.6492%" y="6869" width="0.0607%" height="15" fill="rgb(230,30,28)" fg:x="68980" fg:w="170"/><text x="24.8992%" y="6879.50"></text></g><g><title>`0x7FF97E62BB70 (232 samples, 0.08%)</title><rect x="24.7146%" y="6853" width="0.0829%" height="15" fill="rgb(205,73,54)" fg:x="69163" fg:w="232"/><text x="24.9646%" y="6863.50"></text></g><g><title>`0x7FF97E62BB84 (190 samples, 0.07%)</title><rect x="24.8003%" y="6853" width="0.0679%" height="15" fill="rgb(254,227,23)" fg:x="69403" fg:w="190"/><text x="25.0503%" y="6863.50"></text></g><g><title>`0x7FF97E62C2B1 (202 samples, 0.07%)</title><rect x="24.8732%" y="6853" width="0.0722%" height="15" fill="rgb(228,202,34)" fg:x="69607" fg:w="202"/><text x="25.1232%" y="6863.50"></text></g><g><title>`0x7FF97E62C38A (181 samples, 0.06%)</title><rect x="24.9697%" y="6853" width="0.0647%" height="15" fill="rgb(222,225,37)" fg:x="69877" fg:w="181"/><text x="25.2197%" y="6863.50"></text></g><g><title>`0x7FF97E69CB43 (118 samples, 0.04%)</title><rect x="25.0344%" y="6853" width="0.0422%" height="15" fill="rgb(221,14,54)" fg:x="70058" fg:w="118"/><text x="25.2844%" y="6863.50"></text></g><g><title>`0x7FF97E69CB6A (58 samples, 0.02%)</title><rect x="25.0841%" y="6853" width="0.0207%" height="15" fill="rgb(254,102,2)" fg:x="70197" fg:w="58"/><text x="25.3341%" y="6863.50"></text></g><g><title>`0x7FF97E62AFF1 (1,255 samples, 0.45%)</title><rect x="24.7103%" y="6869" width="0.4485%" height="15" fill="rgb(232,104,17)" fg:x="69151" fg:w="1255"/><text x="24.9603%" y="6879.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (1,654 samples, 0.59%)</title><rect x="24.5856%" y="6901" width="0.5910%" height="15" fill="rgb(250,220,14)" fg:x="68802" fg:w="1654"/><text x="24.8356%" y="6911.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (1,654 samples, 0.59%)</title><rect x="24.5856%" y="6885" width="0.5910%" height="15" fill="rgb(241,158,9)" fg:x="68802" fg:w="1654"/><text x="24.8356%" y="6895.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (43 samples, 0.02%)</title><rect x="25.1612%" y="6869" width="0.0154%" height="15" fill="rgb(246,9,43)" fg:x="70413" fg:w="43"/><text x="25.4112%" y="6879.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::dealloc (43 samples, 0.02%)</title><rect x="25.1612%" y="6853" width="0.0154%" height="15" fill="rgb(206,73,33)" fg:x="70413" fg:w="43"/><text x="25.4112%" y="6863.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;tuple$ (1,713 samples, 0.61%)</title><rect x="24.5731%" y="6965" width="0.6121%" height="15" fill="rgb(222,79,8)" fg:x="68767" fg:w="1713"/><text x="24.8231%" y="6975.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (1,713 samples, 0.61%)</title><rect x="24.5731%" y="6949" width="0.6121%" height="15" fill="rgb(234,8,54)" fg:x="68767" fg:w="1713"/><text x="24.8231%" y="6959.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (1,713 samples, 0.61%)</title><rect x="24.5731%" y="6933" width="0.6121%" height="15" fill="rgb(209,134,38)" fg:x="68767" fg:w="1713"/><text x="24.8231%" y="6943.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (1,678 samples, 0.60%)</title><rect x="24.5856%" y="6917" width="0.5996%" height="15" fill="rgb(230,127,29)" fg:x="68802" fg:w="1678"/><text x="24.8356%" y="6927.50"></text></g><g><title>neural_network.exe`core::iter::adapters::rev::impl$1::next(core::iter::adapters::rev::Rev&lt;core::ops::range::Range (37 samples, 0.01%)</title><rect x="25.1952%" y="6869" width="0.0132%" height="15" fill="rgb(242,44,41)" fg:x="70508" fg:w="37"/><text x="25.4452%" y="6879.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$7::next_back(core::ops::range::Range (37 samples, 0.01%)</title><rect x="25.1952%" y="6853" width="0.0132%" height="15" fill="rgb(222,56,43)" fg:x="70508" fg:w="37"/><text x="25.4452%" y="6863.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$5::spec_next_back(core::ops::range::Range (37 samples, 0.01%)</title><rect x="25.1952%" y="6837" width="0.0132%" height="15" fill="rgb(238,39,47)" fg:x="70508" fg:w="37"/><text x="25.4452%" y="6847.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy(tuple$&lt;usize,usize&gt;*, tuple$ (37 samples, 0.01%)</title><rect x="25.2366%" y="6837" width="0.0132%" height="15" fill="rgb(226,79,43)" fg:x="70624" fg:w="37"/><text x="25.4866%" y="6847.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::swap(ref_mut$&lt;slice2$&lt;tuple$ (167 samples, 0.06%)</title><rect x="25.2084%" y="6869" width="0.0597%" height="15" fill="rgb(242,105,53)" fg:x="70545" fg:w="167"/><text x="25.4584%" y="6879.50"></text></g><g><title>neural_network.exe`core::ptr::swap(tuple$&lt;usize,usize&gt;*, tuple$ (88 samples, 0.03%)</title><rect x="25.2366%" y="6853" width="0.0314%" height="15" fill="rgb(251,132,46)" fg:x="70624" fg:w="88"/><text x="25.4866%" y="6863.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping(tuple$&lt;usize,usize&gt;*, tuple$ (51 samples, 0.02%)</title><rect x="25.2499%" y="6837" width="0.0182%" height="15" fill="rgb(231,77,14)" fg:x="70661" fg:w="51"/><text x="25.4999%" y="6847.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::round(rand_chacha::guts::State&lt;ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (43 samples, 0.02%)</title><rect x="25.3442%" y="6597" width="0.0154%" height="15" fill="rgb(240,135,9)" fg:x="70925" fg:w="43"/><text x="25.5942%" y="6607.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide::impl_avx2 (57 samples, 0.02%)</title><rect x="25.3406%" y="6645" width="0.0204%" height="15" fill="rgb(248,109,14)" fg:x="70915" fg:w="57"/><text x="25.5906%" y="6655.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide::fn_impl(ppv_lite86::x86_64::Avx2Machine (55 samples, 0.02%)</title><rect x="25.3413%" y="6629" width="0.0197%" height="15" fill="rgb(227,146,52)" fg:x="70917" fg:w="55"/><text x="25.5913%" y="6639.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide_impl(ppv_lite86::x86_64::Avx2Machine (55 samples, 0.02%)</title><rect x="25.3413%" y="6613" width="0.0197%" height="15" fill="rgb(232,54,3)" fg:x="70917" fg:w="55"/><text x="25.5913%" y="6623.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place (493 samples, 0.18%)</title><rect x="25.1852%" y="6965" width="0.1762%" height="15" fill="rgb(229,201,43)" fg:x="70480" fg:w="493"/><text x="25.4352%" y="6975.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (493 samples, 0.18%)</title><rect x="25.1852%" y="6949" width="0.1762%" height="15" fill="rgb(252,161,33)" fg:x="70480" fg:w="493"/><text x="25.4352%" y="6959.50"></text></g><g><title>neural_network.exe`alloc::rc::impl$30::drop(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (493 samples, 0.18%)</title><rect x="25.1852%" y="6933" width="0.1762%" height="15" fill="rgb(226,146,40)" fg:x="70480" fg:w="493"/><text x="25.4352%" y="6943.50"></text></g><g><title>neural_network.exe`alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;::inner (486 samples, 0.17%)</title><rect x="25.1877%" y="6917" width="0.1737%" height="15" fill="rgb(219,47,25)" fg:x="70487" fg:w="486"/><text x="25.4377%" y="6927.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;alloc::rc::RcBox&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt; &gt; &gt;::as_ref (485 samples, 0.17%)</title><rect x="25.1880%" y="6901" width="0.1733%" height="15" fill="rgb(250,135,13)" fg:x="70488" fg:w="485"/><text x="25.4380%" y="6911.50"></text></g><g><title>neural_network.exe`rand::seq::impl$0::shuffle&lt;tuple$&lt;usize,usize&gt;,rand::rngs::thread::ThreadRng&gt;(ref_mut$&lt;slice2$&lt;tuple$ (484 samples, 0.17%)</title><rect x="25.1884%" y="6885" width="0.1730%" height="15" fill="rgb(219,229,18)" fg:x="70489" fg:w="484"/><text x="25.4384%" y="6895.50"></text></g><g><title>neural_network.exe`rand::seq::gen_index (261 samples, 0.09%)</title><rect x="25.2681%" y="6869" width="0.0933%" height="15" fill="rgb(217,152,27)" fg:x="70712" fg:w="261"/><text x="25.5181%" y="6879.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen_range(rand::rngs::thread::ThreadRng*, core::ops::range::Range (261 samples, 0.09%)</title><rect x="25.2681%" y="6853" width="0.0933%" height="15" fill="rgb(225,71,47)" fg:x="70712" fg:w="261"/><text x="25.5181%" y="6863.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$6::sample_single(core::ops::range::Range (261 samples, 0.09%)</title><rect x="25.2681%" y="6837" width="0.0933%" height="15" fill="rgb(220,139,14)" fg:x="70712" fg:w="261"/><text x="25.5181%" y="6847.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single (261 samples, 0.09%)</title><rect x="25.2681%" y="6821" width="0.0933%" height="15" fill="rgb(247,54,32)" fg:x="70712" fg:w="261"/><text x="25.5181%" y="6831.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single_inclusive (261 samples, 0.09%)</title><rect x="25.2681%" y="6805" width="0.0933%" height="15" fill="rgb(252,131,39)" fg:x="70712" fg:w="261"/><text x="25.5181%" y="6815.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen (187 samples, 0.07%)</title><rect x="25.2945%" y="6789" width="0.0668%" height="15" fill="rgb(210,108,39)" fg:x="70786" fg:w="187"/><text x="25.5445%" y="6799.50"></text></g><g><title>neural_network.exe`rand::distributions::integer::impl$2::sample (187 samples, 0.07%)</title><rect x="25.2945%" y="6773" width="0.0668%" height="15" fill="rgb(205,23,29)" fg:x="70786" fg:w="187"/><text x="25.5445%" y="6783.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::impl$1::next_u32 (187 samples, 0.07%)</title><rect x="25.2945%" y="6757" width="0.0668%" height="15" fill="rgb(246,139,46)" fg:x="70786" fg:w="187"/><text x="25.5445%" y="6767.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$1::next_u32(rand::rngs::adapter::reseeding::ReseedingRng (187 samples, 0.07%)</title><rect x="25.2945%" y="6741" width="0.0668%" height="15" fill="rgb(250,81,26)" fg:x="70786" fg:w="187"/><text x="25.5445%" y="6751.50"></text></g><g><title>neural_network.exe`rand_core::block::impl$2::next_u32(rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore (187 samples, 0.07%)</title><rect x="25.2945%" y="6725" width="0.0668%" height="15" fill="rgb(214,104,7)" fg:x="70786" fg:w="187"/><text x="25.5445%" y="6735.50"></text></g><g><title>neural_network.exe`rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;::generate_and_set (67 samples, 0.02%)</title><rect x="25.3374%" y="6709" width="0.0239%" height="15" fill="rgb(233,189,8)" fg:x="70906" fg:w="67"/><text x="25.5874%" y="6719.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$4::generate(rand::rngs::adapter::reseeding::ReseedingCore&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt;*, rand_chacha::chacha::Array64 (67 samples, 0.02%)</title><rect x="25.3374%" y="6693" width="0.0239%" height="15" fill="rgb(228,141,17)" fg:x="70906" fg:w="67"/><text x="25.5874%" y="6703.50"></text></g><g><title>neural_network.exe`rand_chacha::chacha::impl$23::generate(rand_chacha::chacha::ChaCha12Core*, rand_chacha::chacha::Array64 (59 samples, 0.02%)</title><rect x="25.3403%" y="6677" width="0.0211%" height="15" fill="rgb(247,157,1)" fg:x="70914" fg:w="59"/><text x="25.5903%" y="6687.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::ChaCha::refill4 (59 samples, 0.02%)</title><rect x="25.3403%" y="6661" width="0.0211%" height="15" fill="rgb(249,225,5)" fg:x="70914" fg:w="59"/><text x="25.5903%" y="6671.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::contains(ref$&lt;slice2$&lt;tuple$&lt;usize,usize&gt; &gt; &gt;, tuple$ (589 samples, 0.21%)</title><rect x="25.3614%" y="6965" width="0.2105%" height="15" fill="rgb(242,55,13)" fg:x="70973" fg:w="589"/><text x="25.6114%" y="6975.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (589 samples, 0.21%)</title><rect x="25.3614%" y="6949" width="0.2105%" height="15" fill="rgb(230,49,50)" fg:x="70973" fg:w="589"/><text x="25.6114%" y="6959.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (589 samples, 0.21%)</title><rect x="25.3614%" y="6933" width="0.2105%" height="15" fill="rgb(241,111,38)" fg:x="70973" fg:w="589"/><text x="25.6114%" y="6943.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (71 samples, 0.03%)</title><rect x="25.5465%" y="6917" width="0.0254%" height="15" fill="rgb(252,155,4)" fg:x="71491" fg:w="71"/><text x="25.7965%" y="6927.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::impl$13::eq(core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;*, core::ptr::non_null::NonNull&lt;tuple$ (28 samples, 0.01%)</title><rect x="25.6497%" y="6949" width="0.0100%" height="15" fill="rgb(212,69,32)" fg:x="71780" fg:w="28"/><text x="25.8997%" y="6959.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (312 samples, 0.11%)</title><rect x="25.5718%" y="6965" width="0.1115%" height="15" fill="rgb(243,107,47)" fg:x="71562" fg:w="312"/><text x="25.8218%" y="6975.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (66 samples, 0.02%)</title><rect x="25.6597%" y="6949" width="0.0236%" height="15" fill="rgb(247,130,12)" fg:x="71808" fg:w="66"/><text x="25.9097%" y="6959.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (66 samples, 0.02%)</title><rect x="25.6597%" y="6933" width="0.0236%" height="15" fill="rgb(233,74,16)" fg:x="71808" fg:w="66"/><text x="25.9097%" y="6943.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (66 samples, 0.02%)</title><rect x="25.6597%" y="6917" width="0.0236%" height="15" fill="rgb(208,58,18)" fg:x="71808" fg:w="66"/><text x="25.9097%" y="6927.50"></text></g><g><title>`0x7FF97E69CBA1 (31 samples, 0.01%)</title><rect x="25.9049%" y="6901" width="0.0111%" height="15" fill="rgb(242,225,1)" fg:x="72494" fg:w="31"/><text x="26.1549%" y="6911.50"></text></g><g><title>`0x7FF97E69CBBC (30 samples, 0.01%)</title><rect x="25.9260%" y="6901" width="0.0107%" height="15" fill="rgb(249,39,40)" fg:x="72553" fg:w="30"/><text x="26.1760%" y="6911.50"></text></g><g><title>`0x7FF97E69CC6F (93 samples, 0.03%)</title><rect x="25.9538%" y="6901" width="0.0332%" height="15" fill="rgb(207,72,44)" fg:x="72631" fg:w="93"/><text x="26.2038%" y="6911.50"></text></g><g><title>`0x7FF97E62AFF1 (536 samples, 0.19%)</title><rect x="25.8177%" y="6917" width="0.1915%" height="15" fill="rgb(215,193,12)" fg:x="72250" fg:w="536"/><text x="26.0677%" y="6927.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::set_ptr_and_cap(core::ptr::non_null::NonNull&lt;slice2$ (36 samples, 0.01%)</title><rect x="26.1321%" y="6789" width="0.0129%" height="15" fill="rgb(248,41,39)" fg:x="73130" fg:w="36"/><text x="26.3821%" y="6799.50"></text></g><g><title>`0x7FF97E62D57C (72 samples, 0.03%)</title><rect x="26.2354%" y="6693" width="0.0257%" height="15" fill="rgb(253,85,4)" fg:x="73419" fg:w="72"/><text x="26.4854%" y="6703.50"></text></g><g><title>`0x7FF97E62D644 (32 samples, 0.01%)</title><rect x="26.2754%" y="6693" width="0.0114%" height="15" fill="rgb(243,70,31)" fg:x="73531" fg:w="32"/><text x="26.5254%" y="6703.50"></text></g><g><title>`0x7FF97E68F861 (42 samples, 0.02%)</title><rect x="26.2994%" y="6677" width="0.0150%" height="15" fill="rgb(253,195,26)" fg:x="73598" fg:w="42"/><text x="26.5494%" y="6687.50"></text></g><g><title>`0x7FF97E62D68A (155 samples, 0.06%)</title><rect x="26.2979%" y="6693" width="0.0554%" height="15" fill="rgb(243,42,11)" fg:x="73594" fg:w="155"/><text x="26.5479%" y="6703.50"></text></g><g><title>`0x7FF97E62D691 (30 samples, 0.01%)</title><rect x="26.3533%" y="6693" width="0.0107%" height="15" fill="rgb(239,66,17)" fg:x="73749" fg:w="30"/><text x="26.6033%" y="6703.50"></text></g><g><title>`0x7FF97E62D723 (47 samples, 0.02%)</title><rect x="26.3962%" y="6693" width="0.0168%" height="15" fill="rgb(217,132,21)" fg:x="73869" fg:w="47"/><text x="26.6462%" y="6703.50"></text></g><g><title>`0x7FF97E62CC9A (510 samples, 0.18%)</title><rect x="26.2347%" y="6709" width="0.1822%" height="15" fill="rgb(252,202,21)" fg:x="73417" fg:w="510"/><text x="26.4847%" y="6719.50"></text></g><g><title>`0x7FF97E62CCC1 (48 samples, 0.02%)</title><rect x="26.4169%" y="6709" width="0.0172%" height="15" fill="rgb(233,98,36)" fg:x="73927" fg:w="48"/><text x="26.6669%" y="6719.50"></text></g><g><title>`0x7FF97E632473 (29 samples, 0.01%)</title><rect x="26.5492%" y="6677" width="0.0104%" height="15" fill="rgb(216,153,54)" fg:x="74297" fg:w="29"/><text x="26.7992%" y="6687.50"></text></g><g><title>`0x7FF97E63249F (38 samples, 0.01%)</title><rect x="26.5638%" y="6677" width="0.0136%" height="15" fill="rgb(250,99,7)" fg:x="74338" fg:w="38"/><text x="26.8138%" y="6687.50"></text></g><g><title>`0x7FF97E6324C5 (65 samples, 0.02%)</title><rect x="26.5831%" y="6677" width="0.0232%" height="15" fill="rgb(207,56,50)" fg:x="74392" fg:w="65"/><text x="26.8331%" y="6687.50"></text></g><g><title>`0x7FF97E6334DC (42 samples, 0.02%)</title><rect x="26.6063%" y="6677" width="0.0150%" height="15" fill="rgb(244,61,34)" fg:x="74457" fg:w="42"/><text x="26.8563%" y="6687.50"></text></g><g><title>`0x7FF97E633500 (60 samples, 0.02%)</title><rect x="26.6217%" y="6677" width="0.0214%" height="15" fill="rgb(241,50,38)" fg:x="74500" fg:w="60"/><text x="26.8717%" y="6687.50"></text></g><g><title>`0x7FF97E62CB02 (49 samples, 0.02%)</title><rect x="26.6549%" y="6661" width="0.0175%" height="15" fill="rgb(212,166,30)" fg:x="74593" fg:w="49"/><text x="26.9049%" y="6671.50"></text></g><g><title>`0x7FF97E62CB29 (38 samples, 0.01%)</title><rect x="26.6771%" y="6661" width="0.0136%" height="15" fill="rgb(249,127,32)" fg:x="74655" fg:w="38"/><text x="26.9271%" y="6671.50"></text></g><g><title>`0x7FF97E62CB7B (30 samples, 0.01%)</title><rect x="26.6974%" y="6661" width="0.0107%" height="15" fill="rgb(209,103,0)" fg:x="74712" fg:w="30"/><text x="26.9474%" y="6671.50"></text></g><g><title>`0x7FF97E62D57C (65 samples, 0.02%)</title><rect x="26.7989%" y="6645" width="0.0232%" height="15" fill="rgb(238,209,51)" fg:x="74996" fg:w="65"/><text x="27.0489%" y="6655.50"></text></g><g><title>`0x7FF97E62D588 (32 samples, 0.01%)</title><rect x="26.8222%" y="6645" width="0.0114%" height="15" fill="rgb(237,56,23)" fg:x="75061" fg:w="32"/><text x="27.0722%" y="6655.50"></text></g><g><title>`0x7FF97E62D68A (102 samples, 0.04%)</title><rect x="26.8507%" y="6645" width="0.0364%" height="15" fill="rgb(215,153,46)" fg:x="75141" fg:w="102"/><text x="27.1007%" y="6655.50"></text></g><g><title>`0x7FF97E62D740 (35 samples, 0.01%)</title><rect x="26.9151%" y="6645" width="0.0125%" height="15" fill="rgb(224,49,31)" fg:x="75321" fg:w="35"/><text x="27.1651%" y="6655.50"></text></g><g><title>`0x7FF97E62D743 (29 samples, 0.01%)</title><rect x="26.9276%" y="6645" width="0.0104%" height="15" fill="rgb(250,18,42)" fg:x="75356" fg:w="29"/><text x="27.1776%" y="6655.50"></text></g><g><title>`0x7FF97E62D759 (32 samples, 0.01%)</title><rect x="26.9390%" y="6645" width="0.0114%" height="15" fill="rgb(215,176,39)" fg:x="75388" fg:w="32"/><text x="27.1890%" y="6655.50"></text></g><g><title>`0x7FF97E65354E (43 samples, 0.02%)</title><rect x="26.9662%" y="6629" width="0.0154%" height="15" fill="rgb(223,77,29)" fg:x="75464" fg:w="43"/><text x="27.2162%" y="6639.50"></text></g><g><title>`0x7FF97E693D45 (40 samples, 0.01%)</title><rect x="26.9672%" y="6613" width="0.0143%" height="15" fill="rgb(234,94,52)" fg:x="75467" fg:w="40"/><text x="27.2172%" y="6623.50"></text></g><g><title>`0x7FF97E62DB41 (51 samples, 0.02%)</title><rect x="26.9647%" y="6645" width="0.0182%" height="15" fill="rgb(220,154,50)" fg:x="75460" fg:w="51"/><text x="27.2147%" y="6655.50"></text></g><g><title>`0x7FF97E631B1F (45 samples, 0.02%)</title><rect x="27.0073%" y="6629" width="0.0161%" height="15" fill="rgb(212,11,10)" fg:x="75579" fg:w="45"/><text x="27.2573%" y="6639.50"></text></g><g><title>`0x7FF97E62DBBF (107 samples, 0.04%)</title><rect x="26.9855%" y="6645" width="0.0382%" height="15" fill="rgb(205,166,19)" fg:x="75518" fg:w="107"/><text x="27.2355%" y="6655.50"></text></g><g><title>`0x7FF97E62DBDD (69 samples, 0.02%)</title><rect x="27.0237%" y="6645" width="0.0247%" height="15" fill="rgb(244,198,16)" fg:x="75625" fg:w="69"/><text x="27.2737%" y="6655.50"></text></g><g><title>`0x7FF97E62CC9A (770 samples, 0.28%)</title><rect x="26.7739%" y="6661" width="0.2752%" height="15" fill="rgb(219,69,12)" fg:x="74926" fg:w="770"/><text x="27.0239%" y="6671.50"></text></g><g><title>`0x7FF97E62CCC1 (34 samples, 0.01%)</title><rect x="27.0491%" y="6661" width="0.0121%" height="15" fill="rgb(245,30,7)" fg:x="75696" fg:w="34"/><text x="27.2991%" y="6671.50"></text></g><g><title>`0x7FF97E62CCF8 (30 samples, 0.01%)</title><rect x="27.0612%" y="6661" width="0.0107%" height="15" fill="rgb(218,221,48)" fg:x="75730" fg:w="30"/><text x="27.3112%" y="6671.50"></text></g><g><title>`0x7FF97E633505 (1,201 samples, 0.43%)</title><rect x="26.6431%" y="6677" width="0.4292%" height="15" fill="rgb(216,66,15)" fg:x="74560" fg:w="1201"/><text x="26.8931%" y="6687.50"></text></g><g><title>`0x7FF97E696B96 (411 samples, 0.15%)</title><rect x="27.0759%" y="6661" width="0.1469%" height="15" fill="rgb(226,122,50)" fg:x="75771" fg:w="411"/><text x="27.3259%" y="6671.50"></text></g><g><title>`0x7FF97E696C00 (47 samples, 0.02%)</title><rect x="27.2281%" y="6661" width="0.0168%" height="15" fill="rgb(239,156,16)" fg:x="76197" fg:w="47"/><text x="27.4781%" y="6671.50"></text></g><g><title>`0x7FF97E696C13 (36 samples, 0.01%)</title><rect x="27.2499%" y="6661" width="0.0129%" height="15" fill="rgb(224,27,38)" fg:x="76258" fg:w="36"/><text x="27.4999%" y="6671.50"></text></g><g><title>`0x7FF97E696C22 (34 samples, 0.01%)</title><rect x="27.2703%" y="6661" width="0.0121%" height="15" fill="rgb(224,39,27)" fg:x="76315" fg:w="34"/><text x="27.5203%" y="6671.50"></text></g><g><title>`0x7FF97E633550 (629 samples, 0.22%)</title><rect x="27.0730%" y="6677" width="0.2248%" height="15" fill="rgb(215,92,29)" fg:x="75763" fg:w="629"/><text x="27.3230%" y="6687.50"></text></g><g><title>`0x7FF97E69CCAF (106 samples, 0.04%)</title><rect x="27.3771%" y="6645" width="0.0379%" height="15" fill="rgb(207,159,16)" fg:x="76614" fg:w="106"/><text x="27.6271%" y="6655.50"></text></g><g><title>`0x7FF97E69CD55 (45 samples, 0.02%)</title><rect x="27.4200%" y="6645" width="0.0161%" height="15" fill="rgb(238,163,47)" fg:x="76734" fg:w="45"/><text x="27.6700%" y="6655.50"></text></g><g><title>`0x7FF97E62AFF1 (417 samples, 0.15%)</title><rect x="27.3156%" y="6661" width="0.1490%" height="15" fill="rgb(219,91,49)" fg:x="76442" fg:w="417"/><text x="27.5656%" y="6671.50"></text></g><g><title>`0x7FF97E633562 (477 samples, 0.17%)</title><rect x="27.2985%" y="6677" width="0.1705%" height="15" fill="rgb(227,167,31)" fg:x="76394" fg:w="477"/><text x="27.5485%" y="6687.50"></text></g><g><title>`0x7FF97E6322C7 (2,787 samples, 1.00%)</title><rect x="26.5159%" y="6693" width="0.9959%" height="15" fill="rgb(234,80,54)" fg:x="74204" fg:w="2787"/><text x="26.7659%" y="6703.50"></text></g><g><title>`0x7FF97E6335AC (92 samples, 0.03%)</title><rect x="27.4789%" y="6677" width="0.0329%" height="15" fill="rgb(212,114,2)" fg:x="76899" fg:w="92"/><text x="27.7289%" y="6687.50"></text></g><g><title>`0x7FF97E6322FB (37 samples, 0.01%)</title><rect x="27.5122%" y="6693" width="0.0132%" height="15" fill="rgb(234,50,24)" fg:x="76992" fg:w="37"/><text x="27.7622%" y="6703.50"></text></g><g><title>`0x7FF97E632307 (87 samples, 0.03%)</title><rect x="27.5268%" y="6693" width="0.0311%" height="15" fill="rgb(221,68,8)" fg:x="77033" fg:w="87"/><text x="27.7768%" y="6703.50"></text></g><g><title>`0x7FF97E632312 (93 samples, 0.03%)</title><rect x="27.5579%" y="6693" width="0.0332%" height="15" fill="rgb(254,180,31)" fg:x="77120" fg:w="93"/><text x="27.8079%" y="6703.50"></text></g><g><title>`0x7FF97E63218A (3,118 samples, 1.11%)</title><rect x="26.4784%" y="6709" width="1.1142%" height="15" fill="rgb(247,130,50)" fg:x="74099" fg:w="3118"/><text x="26.7284%" y="6719.50"></text></g><g><title>`0x7FF97E63219E (74 samples, 0.03%)</title><rect x="27.5944%" y="6709" width="0.0264%" height="15" fill="rgb(211,109,4)" fg:x="77222" fg:w="74"/><text x="27.8444%" y="6719.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_realloc (47 samples, 0.02%)</title><rect x="27.6240%" y="6709" width="0.0168%" height="15" fill="rgb(238,50,21)" fg:x="77305" fg:w="47"/><text x="27.8740%" y="6719.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::realloc (28 samples, 0.01%)</title><rect x="27.6308%" y="6693" width="0.0100%" height="15" fill="rgb(225,57,45)" fg:x="77324" fg:w="28"/><text x="27.8808%" y="6703.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (4,022 samples, 1.44%)</title><rect x="26.2047%" y="6757" width="1.4372%" height="15" fill="rgb(209,196,50)" fg:x="73333" fg:w="4022"/><text x="26.4547%" y="6767.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (4,022 samples, 1.44%)</title><rect x="26.2047%" y="6741" width="1.4372%" height="15" fill="rgb(242,140,13)" fg:x="73333" fg:w="4022"/><text x="26.4547%" y="6751.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (3,999 samples, 1.43%)</title><rect x="26.2129%" y="6725" width="1.4290%" height="15" fill="rgb(217,111,7)" fg:x="73356" fg:w="3999"/><text x="26.4629%" y="6735.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_mut_ptr (4,663 samples, 1.67%)</title><rect x="26.0332%" y="6901" width="1.6663%" height="15" fill="rgb(253,193,51)" fg:x="72853" fg:w="4663"/><text x="26.2832%" y="6911.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (4,658 samples, 1.66%)</title><rect x="26.0349%" y="6885" width="1.6645%" height="15" fill="rgb(252,70,29)" fg:x="72858" fg:w="4658"/><text x="26.2849%" y="6895.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (4,658 samples, 1.66%)</title><rect x="26.0349%" y="6869" width="1.6645%" height="15" fill="rgb(232,127,12)" fg:x="72858" fg:w="4658"/><text x="26.2849%" y="6879.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (4,658 samples, 1.66%)</title><rect x="26.0349%" y="6853" width="1.6645%" height="15" fill="rgb(211,180,21)" fg:x="72858" fg:w="4658"/><text x="26.2849%" y="6863.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::grow_one&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; (4,636 samples, 1.66%)</title><rect x="26.0428%" y="6837" width="1.6566%" height="15" fill="rgb(229,72,13)" fg:x="72880" fg:w="4636"/><text x="26.2928%" y="6847.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (4,481 samples, 1.60%)</title><rect x="26.0982%" y="6821" width="1.6012%" height="15" fill="rgb(240,211,49)" fg:x="73035" fg:w="4481"/><text x="26.3482%" y="6831.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (4,450 samples, 1.59%)</title><rect x="26.1093%" y="6805" width="1.5902%" height="15" fill="rgb(219,149,40)" fg:x="73066" fg:w="4450"/><text x="26.3593%" y="6815.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (4,348 samples, 1.55%)</title><rect x="26.1457%" y="6789" width="1.5537%" height="15" fill="rgb(210,127,46)" fg:x="73168" fg:w="4348"/><text x="26.3957%" y="6799.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (4,275 samples, 1.53%)</title><rect x="26.1718%" y="6773" width="1.5276%" height="15" fill="rgb(220,106,7)" fg:x="73241" fg:w="4275"/><text x="26.4218%" y="6783.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;, alloc::raw_vec::finish_grow::closure_env$0 (161 samples, 0.06%)</title><rect x="27.6419%" y="6757" width="0.0575%" height="15" fill="rgb(249,31,22)" fg:x="77355" fg:w="161"/><text x="27.8919%" y="6767.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (5,472 samples, 1.96%)</title><rect x="26.0142%" y="6917" width="1.9554%" height="15" fill="rgb(253,1,49)" fg:x="72800" fg:w="5472"/><text x="26.2642%" y="6927.50">n..</text></g><g><title>neural_network.exe`core::ptr::write(tuple$&lt;usize,usize&gt;*, tuple$ (756 samples, 0.27%)</title><rect x="27.6994%" y="6901" width="0.2701%" height="15" fill="rgb(227,144,33)" fg:x="77516" fg:w="756"/><text x="27.9494%" y="6911.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::remove (29 samples, 0.01%)</title><rect x="27.9696%" y="6917" width="0.0104%" height="15" fill="rgb(249,163,44)" fg:x="78272" fg:w="29"/><text x="28.2196%" y="6927.50"></text></g><g><title>`0x7FF968D51381 (676 samples, 0.24%)</title><rect x="28.0110%" y="6853" width="0.2416%" height="15" fill="rgb(234,15,39)" fg:x="78388" fg:w="676"/><text x="28.2610%" y="6863.50"></text></g><g><title>`0x7FF97E62CAFF (37 samples, 0.01%)</title><rect x="28.3026%" y="6789" width="0.0132%" height="15" fill="rgb(207,66,16)" fg:x="79204" fg:w="37"/><text x="28.5526%" y="6799.50"></text></g><g><title>`0x7FF97E62CB20 (34 samples, 0.01%)</title><rect x="28.3183%" y="6789" width="0.0121%" height="15" fill="rgb(233,112,24)" fg:x="79248" fg:w="34"/><text x="28.5683%" y="6799.50"></text></g><g><title>`0x7FF97E62CB3D (35 samples, 0.01%)</title><rect x="28.3394%" y="6789" width="0.0125%" height="15" fill="rgb(230,90,22)" fg:x="79307" fg:w="35"/><text x="28.5894%" y="6799.50"></text></g><g><title>`0x7FF97E62CC65 (33 samples, 0.01%)</title><rect x="28.4091%" y="6789" width="0.0118%" height="15" fill="rgb(229,61,13)" fg:x="79502" fg:w="33"/><text x="28.6591%" y="6799.50"></text></g><g><title>`0x7FF97E62CC95 (37 samples, 0.01%)</title><rect x="28.4252%" y="6789" width="0.0132%" height="15" fill="rgb(225,57,24)" fg:x="79547" fg:w="37"/><text x="28.6752%" y="6799.50"></text></g><g><title>`0x7FF97E62D4E2 (37 samples, 0.01%)</title><rect x="28.4463%" y="6773" width="0.0132%" height="15" fill="rgb(208,169,48)" fg:x="79606" fg:w="37"/><text x="28.6963%" y="6783.50"></text></g><g><title>`0x7FF97E62D5E2 (58 samples, 0.02%)</title><rect x="28.5174%" y="6773" width="0.0207%" height="15" fill="rgb(244,218,51)" fg:x="79805" fg:w="58"/><text x="28.7674%" y="6783.50"></text></g><g><title>`0x7FF97E62D68A (60 samples, 0.02%)</title><rect x="28.5427%" y="6773" width="0.0214%" height="15" fill="rgb(214,148,10)" fg:x="79876" fg:w="60"/><text x="28.7927%" y="6783.50"></text></g><g><title>`0x7FF97E62D6C7 (34 samples, 0.01%)</title><rect x="28.5720%" y="6773" width="0.0121%" height="15" fill="rgb(225,174,27)" fg:x="79958" fg:w="34"/><text x="28.8220%" y="6783.50"></text></g><g><title>`0x7FF97E62D723 (34 samples, 0.01%)</title><rect x="28.5946%" y="6773" width="0.0121%" height="15" fill="rgb(230,96,26)" fg:x="80021" fg:w="34"/><text x="28.8446%" y="6783.50"></text></g><g><title>`0x7FF97E693D45 (32 samples, 0.01%)</title><rect x="28.6464%" y="6741" width="0.0114%" height="15" fill="rgb(232,10,30)" fg:x="80166" fg:w="32"/><text x="28.8964%" y="6751.50"></text></g><g><title>`0x7FF97E65354E (45 samples, 0.02%)</title><rect x="28.6439%" y="6757" width="0.0161%" height="15" fill="rgb(222,8,50)" fg:x="80159" fg:w="45"/><text x="28.8939%" y="6767.50"></text></g><g><title>`0x7FF97E62DB41 (72 samples, 0.03%)</title><rect x="28.6385%" y="6773" width="0.0257%" height="15" fill="rgb(213,81,27)" fg:x="80144" fg:w="72"/><text x="28.8885%" y="6783.50"></text></g><g><title>`0x7FF97E631B1F (36 samples, 0.01%)</title><rect x="28.6860%" y="6757" width="0.0129%" height="15" fill="rgb(245,50,10)" fg:x="80277" fg:w="36"/><text x="28.9360%" y="6767.50"></text></g><g><title>`0x7FF97E62DBBF (92 samples, 0.03%)</title><rect x="28.6675%" y="6773" width="0.0329%" height="15" fill="rgb(216,100,18)" fg:x="80225" fg:w="92"/><text x="28.9175%" y="6783.50"></text></g><g><title>`0x7FF97E62CC9A (786 samples, 0.28%)</title><rect x="28.4384%" y="6789" width="0.2809%" height="15" fill="rgb(236,147,54)" fg:x="79584" fg:w="786"/><text x="28.6884%" y="6799.50"></text></g><g><title>`0x7FF97E62DBDD (53 samples, 0.02%)</title><rect x="28.7003%" y="6773" width="0.0189%" height="15" fill="rgb(205,143,26)" fg:x="80317" fg:w="53"/><text x="28.9503%" y="6783.50"></text></g><g><title>`0x7FF97E62CCC1 (45 samples, 0.02%)</title><rect x="28.7196%" y="6789" width="0.0161%" height="15" fill="rgb(236,26,9)" fg:x="80371" fg:w="45"/><text x="28.9696%" y="6799.50"></text></g><g><title>`0x7FF97E62CCF8 (32 samples, 0.01%)</title><rect x="28.7364%" y="6789" width="0.0114%" height="15" fill="rgb(221,165,53)" fg:x="80418" fg:w="32"/><text x="28.9864%" y="6799.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_alloc (77 samples, 0.03%)</title><rect x="28.7650%" y="6789" width="0.0275%" height="15" fill="rgb(214,110,17)" fg:x="80498" fg:w="77"/><text x="29.0150%" y="6799.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (1,424 samples, 0.51%)</title><rect x="28.2969%" y="6853" width="0.5088%" height="15" fill="rgb(237,197,12)" fg:x="79188" fg:w="1424"/><text x="28.5469%" y="6863.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (1,424 samples, 0.51%)</title><rect x="28.2969%" y="6837" width="0.5088%" height="15" fill="rgb(205,84,17)" fg:x="79188" fg:w="1424"/><text x="28.5469%" y="6847.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (1,424 samples, 0.51%)</title><rect x="28.2969%" y="6821" width="0.5088%" height="15" fill="rgb(237,18,45)" fg:x="79188" fg:w="1424"/><text x="28.5469%" y="6831.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (1,424 samples, 0.51%)</title><rect x="28.2969%" y="6805" width="0.5088%" height="15" fill="rgb(221,87,14)" fg:x="79188" fg:w="1424"/><text x="28.5469%" y="6815.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::process_heap_alloc (37 samples, 0.01%)</title><rect x="28.7925%" y="6789" width="0.0132%" height="15" fill="rgb(238,186,15)" fg:x="80575" fg:w="37"/><text x="29.0425%" y="6799.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$11::clone(alloc::vec::Vec&lt;tuple$ (2,320 samples, 0.83%)</title><rect x="27.9799%" y="6917" width="0.8290%" height="15" fill="rgb(208,115,11)" fg:x="78301" fg:w="2320"/><text x="28.2299%" y="6927.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (2,320 samples, 0.83%)</title><rect x="27.9799%" y="6901" width="0.8290%" height="15" fill="rgb(254,175,0)" fg:x="78301" fg:w="2320"/><text x="28.2299%" y="6911.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$&lt;tuple$ (2,309 samples, 0.83%)</title><rect x="27.9839%" y="6885" width="0.8251%" height="15" fill="rgb(227,24,42)" fg:x="78312" fg:w="2309"/><text x="28.2339%" y="6895.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$&lt;tuple$ (2,309 samples, 0.83%)</title><rect x="27.9839%" y="6869" width="0.8251%" height="15" fill="rgb(223,211,37)" fg:x="78312" fg:w="2309"/><text x="28.2339%" y="6879.50"></text></g><g><title>neural_network.exe`core::cmp::impls::impl$21::eq (28 samples, 0.01%)</title><rect x="28.8393%" y="6901" width="0.0100%" height="15" fill="rgb(235,49,27)" fg:x="80706" fg:w="28"/><text x="29.0893%" y="6911.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (1,567 samples, 0.56%)</title><rect x="28.8493%" y="6901" width="0.5599%" height="15" fill="rgb(254,97,51)" fg:x="80734" fg:w="1567"/><text x="29.0993%" y="6911.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (1,567 samples, 0.56%)</title><rect x="28.8493%" y="6885" width="0.5599%" height="15" fill="rgb(249,51,40)" fg:x="80734" fg:w="1567"/><text x="29.0993%" y="6895.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (205 samples, 0.07%)</title><rect x="29.3360%" y="6869" width="0.0733%" height="15" fill="rgb(210,128,45)" fg:x="82096" fg:w="205"/><text x="29.5860%" y="6879.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$ (2,081 samples, 0.74%)</title><rect x="28.8090%" y="6917" width="0.7436%" height="15" fill="rgb(224,137,50)" fg:x="80621" fg:w="2081"/><text x="29.0590%" y="6927.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;tuple$ (401 samples, 0.14%)</title><rect x="29.4093%" y="6901" width="0.1433%" height="15" fill="rgb(242,15,9)" fg:x="82301" fg:w="401"/><text x="29.6593%" y="6911.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;tuple$ (381 samples, 0.14%)</title><rect x="29.4164%" y="6885" width="0.1361%" height="15" fill="rgb(233,187,41)" fg:x="82321" fg:w="381"/><text x="29.6664%" y="6895.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (37 samples, 0.01%)</title><rect x="29.5526%" y="6885" width="0.0132%" height="15" fill="rgb(227,2,29)" fg:x="82702" fg:w="37"/><text x="29.8026%" y="6895.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (37 samples, 0.01%)</title><rect x="29.5526%" y="6869" width="0.0132%" height="15" fill="rgb(222,70,3)" fg:x="82702" fg:w="37"/><text x="29.8026%" y="6879.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (37 samples, 0.01%)</title><rect x="29.5526%" y="6853" width="0.0132%" height="15" fill="rgb(213,11,42)" fg:x="82702" fg:w="37"/><text x="29.8026%" y="6863.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (37 samples, 0.01%)</title><rect x="29.5526%" y="6837" width="0.0132%" height="15" fill="rgb(225,150,9)" fg:x="82702" fg:w="37"/><text x="29.8026%" y="6847.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (60 samples, 0.02%)</title><rect x="29.5526%" y="6901" width="0.0214%" height="15" fill="rgb(230,162,45)" fg:x="82702" fg:w="60"/><text x="29.8026%" y="6911.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, core::ops::range::Range (1,663 samples, 0.59%)</title><rect x="29.5526%" y="6917" width="0.5943%" height="15" fill="rgb(222,14,52)" fg:x="82702" fg:w="1663"/><text x="29.8026%" y="6927.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (1,603 samples, 0.57%)</title><rect x="29.5740%" y="6901" width="0.5728%" height="15" fill="rgb(254,198,14)" fg:x="82762" fg:w="1603"/><text x="29.8240%" y="6911.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (1,603 samples, 0.57%)</title><rect x="29.5740%" y="6885" width="0.5728%" height="15" fill="rgb(220,217,30)" fg:x="82762" fg:w="1603"/><text x="29.8240%" y="6895.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (235 samples, 0.08%)</title><rect x="30.0629%" y="6869" width="0.0840%" height="15" fill="rgb(215,146,41)" fg:x="84130" fg:w="235"/><text x="30.3129%" y="6879.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (62 samples, 0.02%)</title><rect x="30.1247%" y="6853" width="0.0222%" height="15" fill="rgb(217,27,36)" fg:x="84303" fg:w="62"/><text x="30.3747%" y="6863.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (62 samples, 0.02%)</title><rect x="30.1247%" y="6837" width="0.0222%" height="15" fill="rgb(219,218,39)" fg:x="84303" fg:w="62"/><text x="30.3747%" y="6847.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (62 samples, 0.02%)</title><rect x="30.1247%" y="6821" width="0.0222%" height="15" fill="rgb(219,4,42)" fg:x="84303" fg:w="62"/><text x="30.3747%" y="6831.50"></text></g><g><title>`0x7FF97E62AFA5 (80 samples, 0.03%)</title><rect x="30.1586%" y="6821" width="0.0286%" height="15" fill="rgb(249,119,36)" fg:x="84398" fg:w="80"/><text x="30.4086%" y="6831.50"></text></g><g><title>`0x7FF97E62AFBA (108 samples, 0.04%)</title><rect x="30.1872%" y="6821" width="0.0386%" height="15" fill="rgb(209,23,33)" fg:x="84478" fg:w="108"/><text x="30.4372%" y="6831.50"></text></g><g><title>`0x7FF97E62AFE0 (213 samples, 0.08%)</title><rect x="30.2283%" y="6821" width="0.0761%" height="15" fill="rgb(211,10,0)" fg:x="84593" fg:w="213"/><text x="30.4783%" y="6831.50"></text></g><g><title>`0x7FF97E62BB70 (262 samples, 0.09%)</title><rect x="30.3066%" y="6805" width="0.0936%" height="15" fill="rgb(208,99,37)" fg:x="84812" fg:w="262"/><text x="30.5566%" y="6815.50"></text></g><g><title>`0x7FF97E62BB84 (295 samples, 0.11%)</title><rect x="30.4020%" y="6805" width="0.1054%" height="15" fill="rgb(213,132,31)" fg:x="85079" fg:w="295"/><text x="30.6520%" y="6815.50"></text></g><g><title>`0x7FF97E62C2B1 (260 samples, 0.09%)</title><rect x="30.5120%" y="6805" width="0.0929%" height="15" fill="rgb(243,129,40)" fg:x="85387" fg:w="260"/><text x="30.7620%" y="6815.50"></text></g><g><title>`0x7FF97E62C38A (202 samples, 0.07%)</title><rect x="30.6242%" y="6805" width="0.0722%" height="15" fill="rgb(210,66,33)" fg:x="85701" fg:w="202"/><text x="30.8742%" y="6815.50"></text></g><g><title>`0x7FF97E69CB43 (145 samples, 0.05%)</title><rect x="30.6964%" y="6805" width="0.0518%" height="15" fill="rgb(209,189,4)" fg:x="85903" fg:w="145"/><text x="30.9464%" y="6815.50"></text></g><g><title>`0x7FF97E69CB6A (69 samples, 0.02%)</title><rect x="30.7532%" y="6805" width="0.0247%" height="15" fill="rgb(214,107,37)" fg:x="86062" fg:w="69"/><text x="31.0032%" y="6815.50"></text></g><g><title>`0x7FF97E62AFF1 (1,632 samples, 0.58%)</title><rect x="30.3055%" y="6821" width="0.5832%" height="15" fill="rgb(245,88,54)" fg:x="84809" fg:w="1632"/><text x="30.5555%" y="6831.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (2,104 samples, 0.75%)</title><rect x="30.1583%" y="6853" width="0.7518%" height="15" fill="rgb(205,146,20)" fg:x="84397" fg:w="2104"/><text x="30.4083%" y="6863.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (2,104 samples, 0.75%)</title><rect x="30.1583%" y="6837" width="0.7518%" height="15" fill="rgb(220,161,25)" fg:x="84397" fg:w="2104"/><text x="30.4083%" y="6847.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (48 samples, 0.02%)</title><rect x="30.8930%" y="6821" width="0.0172%" height="15" fill="rgb(215,152,15)" fg:x="86453" fg:w="48"/><text x="31.1430%" y="6831.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::dealloc (48 samples, 0.02%)</title><rect x="30.8930%" y="6805" width="0.0172%" height="15" fill="rgb(233,192,44)" fg:x="86453" fg:w="48"/><text x="31.1430%" y="6815.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;tuple$ (2,164 samples, 0.77%)</title><rect x="30.1472%" y="6917" width="0.7733%" height="15" fill="rgb(240,170,46)" fg:x="84366" fg:w="2164"/><text x="30.3972%" y="6927.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (2,164 samples, 0.77%)</title><rect x="30.1472%" y="6901" width="0.7733%" height="15" fill="rgb(207,104,33)" fg:x="84366" fg:w="2164"/><text x="30.3972%" y="6911.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (2,164 samples, 0.77%)</title><rect x="30.1472%" y="6885" width="0.7733%" height="15" fill="rgb(219,21,39)" fg:x="84366" fg:w="2164"/><text x="30.3972%" y="6895.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (2,133 samples, 0.76%)</title><rect x="30.1583%" y="6869" width="0.7622%" height="15" fill="rgb(214,133,29)" fg:x="84397" fg:w="2133"/><text x="30.4083%" y="6879.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::current_memory (29 samples, 0.01%)</title><rect x="30.9101%" y="6853" width="0.0104%" height="15" fill="rgb(226,93,6)" fg:x="86501" fg:w="29"/><text x="31.1601%" y="6863.50"></text></g><g><title>neural_network.exe`core::num::impl$11::unchecked_mul (28 samples, 0.01%)</title><rect x="30.9105%" y="6837" width="0.0100%" height="15" fill="rgb(252,222,34)" fg:x="86502" fg:w="28"/><text x="31.1605%" y="6847.50"></text></g><g><title>neural_network.exe`core::iter::adapters::rev::impl$1::next(core::iter::adapters::rev::Rev&lt;core::ops::range::Range (32 samples, 0.01%)</title><rect x="30.9337%" y="6821" width="0.0114%" height="15" fill="rgb(252,92,48)" fg:x="86567" fg:w="32"/><text x="31.1837%" y="6831.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$7::next_back(core::ops::range::Range (32 samples, 0.01%)</title><rect x="30.9337%" y="6805" width="0.0114%" height="15" fill="rgb(245,223,24)" fg:x="86567" fg:w="32"/><text x="31.1837%" y="6815.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$5::spec_next_back(core::ops::range::Range (32 samples, 0.01%)</title><rect x="30.9337%" y="6789" width="0.0114%" height="15" fill="rgb(205,176,3)" fg:x="86567" fg:w="32"/><text x="31.1837%" y="6799.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy(tuple$&lt;usize,usize&gt;*, tuple$ (30 samples, 0.01%)</title><rect x="30.9648%" y="6789" width="0.0107%" height="15" fill="rgb(235,151,15)" fg:x="86654" fg:w="30"/><text x="31.2148%" y="6799.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::swap(ref_mut$&lt;slice2$&lt;tuple$ (159 samples, 0.06%)</title><rect x="30.9451%" y="6821" width="0.0568%" height="15" fill="rgb(237,209,11)" fg:x="86599" fg:w="159"/><text x="31.1951%" y="6831.50"></text></g><g><title>neural_network.exe`core::ptr::swap(tuple$&lt;usize,usize&gt;*, tuple$ (104 samples, 0.04%)</title><rect x="30.9648%" y="6805" width="0.0372%" height="15" fill="rgb(243,227,24)" fg:x="86654" fg:w="104"/><text x="31.2148%" y="6815.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping(tuple$&lt;usize,usize&gt;*, tuple$ (74 samples, 0.03%)</title><rect x="30.9755%" y="6789" width="0.0264%" height="15" fill="rgb(239,193,16)" fg:x="86684" fg:w="74"/><text x="31.2255%" y="6799.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::round(rand_chacha::guts::State&lt;ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (42 samples, 0.02%)</title><rect x="31.0820%" y="6549" width="0.0150%" height="15" fill="rgb(231,27,9)" fg:x="86982" fg:w="42"/><text x="31.3320%" y="6559.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide::impl_avx2 (53 samples, 0.02%)</title><rect x="31.0798%" y="6597" width="0.0189%" height="15" fill="rgb(219,169,10)" fg:x="86976" fg:w="53"/><text x="31.3298%" y="6607.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide::fn_impl(ppv_lite86::x86_64::Avx2Machine (52 samples, 0.02%)</title><rect x="31.0802%" y="6581" width="0.0186%" height="15" fill="rgb(244,229,43)" fg:x="86977" fg:w="52"/><text x="31.3302%" y="6591.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide_impl(ppv_lite86::x86_64::Avx2Machine (52 samples, 0.02%)</title><rect x="31.0802%" y="6565" width="0.0186%" height="15" fill="rgb(254,38,20)" fg:x="86977" fg:w="52"/><text x="31.3302%" y="6575.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place (501 samples, 0.18%)</title><rect x="30.9205%" y="6917" width="0.1790%" height="15" fill="rgb(250,47,30)" fg:x="86530" fg:w="501"/><text x="31.1705%" y="6927.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (501 samples, 0.18%)</title><rect x="30.9205%" y="6901" width="0.1790%" height="15" fill="rgb(224,124,36)" fg:x="86530" fg:w="501"/><text x="31.1705%" y="6911.50"></text></g><g><title>neural_network.exe`alloc::rc::impl$30::drop(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (501 samples, 0.18%)</title><rect x="30.9205%" y="6885" width="0.1790%" height="15" fill="rgb(246,68,51)" fg:x="86530" fg:w="501"/><text x="31.1705%" y="6895.50"></text></g><g><title>neural_network.exe`alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;::inner (492 samples, 0.18%)</title><rect x="30.9237%" y="6869" width="0.1758%" height="15" fill="rgb(253,43,49)" fg:x="86539" fg:w="492"/><text x="31.1737%" y="6879.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;alloc::rc::RcBox&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt; &gt; &gt;::as_ref (490 samples, 0.18%)</title><rect x="30.9244%" y="6853" width="0.1751%" height="15" fill="rgb(219,54,36)" fg:x="86541" fg:w="490"/><text x="31.1744%" y="6863.50"></text></g><g><title>neural_network.exe`rand::seq::impl$0::shuffle&lt;tuple$&lt;usize,usize&gt;,rand::rngs::thread::ThreadRng&gt;(ref_mut$&lt;slice2$&lt;tuple$ (490 samples, 0.18%)</title><rect x="30.9244%" y="6837" width="0.1751%" height="15" fill="rgb(227,133,34)" fg:x="86541" fg:w="490"/><text x="31.1744%" y="6847.50"></text></g><g><title>neural_network.exe`rand::seq::gen_index (273 samples, 0.10%)</title><rect x="31.0019%" y="6821" width="0.0976%" height="15" fill="rgb(247,227,15)" fg:x="86758" fg:w="273"/><text x="31.2519%" y="6831.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen_range(rand::rngs::thread::ThreadRng*, core::ops::range::Range (271 samples, 0.10%)</title><rect x="31.0027%" y="6805" width="0.0968%" height="15" fill="rgb(229,96,14)" fg:x="86760" fg:w="271"/><text x="31.2527%" y="6815.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$6::sample_single(core::ops::range::Range (271 samples, 0.10%)</title><rect x="31.0027%" y="6789" width="0.0968%" height="15" fill="rgb(220,79,17)" fg:x="86760" fg:w="271"/><text x="31.2527%" y="6799.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single (271 samples, 0.10%)</title><rect x="31.0027%" y="6773" width="0.0968%" height="15" fill="rgb(205,131,53)" fg:x="86760" fg:w="271"/><text x="31.2527%" y="6783.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single_inclusive (271 samples, 0.10%)</title><rect x="31.0027%" y="6757" width="0.0968%" height="15" fill="rgb(209,50,29)" fg:x="86760" fg:w="271"/><text x="31.2527%" y="6767.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen (204 samples, 0.07%)</title><rect x="31.0266%" y="6741" width="0.0729%" height="15" fill="rgb(245,86,46)" fg:x="86827" fg:w="204"/><text x="31.2766%" y="6751.50"></text></g><g><title>neural_network.exe`rand::distributions::integer::impl$2::sample (204 samples, 0.07%)</title><rect x="31.0266%" y="6725" width="0.0729%" height="15" fill="rgb(235,66,46)" fg:x="86827" fg:w="204"/><text x="31.2766%" y="6735.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::impl$1::next_u32 (204 samples, 0.07%)</title><rect x="31.0266%" y="6709" width="0.0729%" height="15" fill="rgb(232,148,31)" fg:x="86827" fg:w="204"/><text x="31.2766%" y="6719.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$1::next_u32(rand::rngs::adapter::reseeding::ReseedingRng (204 samples, 0.07%)</title><rect x="31.0266%" y="6693" width="0.0729%" height="15" fill="rgb(217,149,8)" fg:x="86827" fg:w="204"/><text x="31.2766%" y="6703.50"></text></g><g><title>neural_network.exe`rand_core::block::impl$2::next_u32(rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore (204 samples, 0.07%)</title><rect x="31.0266%" y="6677" width="0.0729%" height="15" fill="rgb(209,183,11)" fg:x="86827" fg:w="204"/><text x="31.2766%" y="6687.50"></text></g><g><title>neural_network.exe`rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;::generate_and_set (68 samples, 0.02%)</title><rect x="31.0752%" y="6661" width="0.0243%" height="15" fill="rgb(208,55,20)" fg:x="86963" fg:w="68"/><text x="31.3252%" y="6671.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$4::generate(rand::rngs::adapter::reseeding::ReseedingCore&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt;*, rand_chacha::chacha::Array64 (68 samples, 0.02%)</title><rect x="31.0752%" y="6645" width="0.0243%" height="15" fill="rgb(218,39,14)" fg:x="86963" fg:w="68"/><text x="31.3252%" y="6655.50"></text></g><g><title>neural_network.exe`rand_chacha::chacha::impl$23::generate(rand_chacha::chacha::ChaCha12Core*, rand_chacha::chacha::Array64 (56 samples, 0.02%)</title><rect x="31.0795%" y="6629" width="0.0200%" height="15" fill="rgb(216,169,33)" fg:x="86975" fg:w="56"/><text x="31.3295%" y="6639.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::ChaCha::refill4 (56 samples, 0.02%)</title><rect x="31.0795%" y="6613" width="0.0200%" height="15" fill="rgb(233,80,24)" fg:x="86975" fg:w="56"/><text x="31.3295%" y="6623.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::contains(ref$&lt;slice2$&lt;tuple$&lt;usize,usize&gt; &gt; &gt;, tuple$ (808 samples, 0.29%)</title><rect x="31.0995%" y="6917" width="0.2887%" height="15" fill="rgb(213,179,31)" fg:x="87031" fg:w="808"/><text x="31.3495%" y="6927.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (808 samples, 0.29%)</title><rect x="31.0995%" y="6901" width="0.2887%" height="15" fill="rgb(209,19,5)" fg:x="87031" fg:w="808"/><text x="31.3495%" y="6911.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (808 samples, 0.29%)</title><rect x="31.0995%" y="6885" width="0.2887%" height="15" fill="rgb(219,18,35)" fg:x="87031" fg:w="808"/><text x="31.3495%" y="6895.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (76 samples, 0.03%)</title><rect x="31.3611%" y="6869" width="0.0272%" height="15" fill="rgb(209,169,16)" fg:x="87763" fg:w="76"/><text x="31.6111%" y="6879.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (31 samples, 0.01%)</title><rect x="31.3771%" y="6853" width="0.0111%" height="15" fill="rgb(245,90,51)" fg:x="87808" fg:w="31"/><text x="31.6271%" y="6863.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (31 samples, 0.01%)</title><rect x="31.3771%" y="6837" width="0.0111%" height="15" fill="rgb(220,99,45)" fg:x="87808" fg:w="31"/><text x="31.6271%" y="6847.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (31 samples, 0.01%)</title><rect x="31.3771%" y="6821" width="0.0111%" height="15" fill="rgb(249,89,25)" fg:x="87808" fg:w="31"/><text x="31.6271%" y="6831.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::impl$13::eq(core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;*, core::ptr::non_null::NonNull&lt;tuple$ (39 samples, 0.01%)</title><rect x="31.4579%" y="6901" width="0.0139%" height="15" fill="rgb(239,193,0)" fg:x="88034" fg:w="39"/><text x="31.7079%" y="6911.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (305 samples, 0.11%)</title><rect x="31.3882%" y="6917" width="0.1090%" height="15" fill="rgb(231,126,1)" fg:x="87839" fg:w="305"/><text x="31.6382%" y="6927.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (71 samples, 0.03%)</title><rect x="31.4718%" y="6901" width="0.0254%" height="15" fill="rgb(243,166,3)" fg:x="88073" fg:w="71"/><text x="31.7218%" y="6911.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (71 samples, 0.03%)</title><rect x="31.4718%" y="6885" width="0.0254%" height="15" fill="rgb(223,22,34)" fg:x="88073" fg:w="71"/><text x="31.7218%" y="6895.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (71 samples, 0.03%)</title><rect x="31.4718%" y="6869" width="0.0254%" height="15" fill="rgb(251,52,51)" fg:x="88073" fg:w="71"/><text x="31.7218%" y="6879.50"></text></g><g><title>`0x7FF97E62BB7F (31 samples, 0.01%)</title><rect x="31.6519%" y="6853" width="0.0111%" height="15" fill="rgb(221,165,28)" fg:x="88577" fg:w="31"/><text x="31.9019%" y="6863.50"></text></g><g><title>`0x7FF97E62C36D (32 samples, 0.01%)</title><rect x="31.6887%" y="6853" width="0.0114%" height="15" fill="rgb(218,121,47)" fg:x="88680" fg:w="32"/><text x="31.9387%" y="6863.50"></text></g><g><title>`0x7FF97E69CB70 (34 samples, 0.01%)</title><rect x="31.7120%" y="6853" width="0.0121%" height="15" fill="rgb(209,120,9)" fg:x="88745" fg:w="34"/><text x="31.9620%" y="6863.50"></text></g><g><title>`0x7FF97E69CB9D (30 samples, 0.01%)</title><rect x="31.7473%" y="6853" width="0.0107%" height="15" fill="rgb(236,68,12)" fg:x="88844" fg:w="30"/><text x="31.9973%" y="6863.50"></text></g><g><title>`0x7FF97E69CBA1 (34 samples, 0.01%)</title><rect x="31.7581%" y="6853" width="0.0121%" height="15" fill="rgb(225,194,26)" fg:x="88874" fg:w="34"/><text x="32.0081%" y="6863.50"></text></g><g><title>`0x7FF97E69CBBC (37 samples, 0.01%)</title><rect x="31.7831%" y="6853" width="0.0132%" height="15" fill="rgb(231,84,39)" fg:x="88944" fg:w="37"/><text x="32.0331%" y="6863.50"></text></g><g><title>`0x7FF97E69CC6F (117 samples, 0.04%)</title><rect x="31.8124%" y="6853" width="0.0418%" height="15" fill="rgb(210,11,45)" fg:x="89026" fg:w="117"/><text x="32.0624%" y="6863.50"></text></g><g><title>`0x7FF97E69CCAF (31 samples, 0.01%)</title><rect x="31.8628%" y="6853" width="0.0111%" height="15" fill="rgb(224,54,52)" fg:x="89167" fg:w="31"/><text x="32.1128%" y="6863.50"></text></g><g><title>`0x7FF97E62AFF1 (681 samples, 0.24%)</title><rect x="31.6384%" y="6869" width="0.2433%" height="15" fill="rgb(238,102,14)" fg:x="88539" fg:w="681"/><text x="31.8884%" y="6879.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::set_ptr_and_cap(core::ptr::non_null::NonNull&lt;slice2$ (29 samples, 0.01%)</title><rect x="32.0132%" y="6741" width="0.0104%" height="15" fill="rgb(243,160,52)" fg:x="89588" fg:w="29"/><text x="32.2632%" y="6751.50"></text></g><g><title>`0x7FF97E62D57C (90 samples, 0.03%)</title><rect x="32.1254%" y="6645" width="0.0322%" height="15" fill="rgb(216,114,19)" fg:x="89902" fg:w="90"/><text x="32.3754%" y="6655.50"></text></g><g><title>`0x7FF97E62D644 (28 samples, 0.01%)</title><rect x="32.1733%" y="6645" width="0.0100%" height="15" fill="rgb(244,166,37)" fg:x="90036" fg:w="28"/><text x="32.4233%" y="6655.50"></text></g><g><title>`0x7FF97E68F861 (34 samples, 0.01%)</title><rect x="32.1972%" y="6629" width="0.0121%" height="15" fill="rgb(246,29,44)" fg:x="90103" fg:w="34"/><text x="32.4472%" y="6639.50"></text></g><g><title>`0x7FF97E68F87F (40 samples, 0.01%)</title><rect x="32.2108%" y="6629" width="0.0143%" height="15" fill="rgb(215,56,53)" fg:x="90141" fg:w="40"/><text x="32.4608%" y="6639.50"></text></g><g><title>`0x7FF97E68F8EE (38 samples, 0.01%)</title><rect x="32.2251%" y="6629" width="0.0136%" height="15" fill="rgb(217,60,2)" fg:x="90181" fg:w="38"/><text x="32.4751%" y="6639.50"></text></g><g><title>`0x7FF97E62D68A (216 samples, 0.08%)</title><rect x="32.1926%" y="6645" width="0.0772%" height="15" fill="rgb(207,26,24)" fg:x="90090" fg:w="216"/><text x="32.4426%" y="6655.50"></text></g><g><title>`0x7FF97E68F938 (28 samples, 0.01%)</title><rect x="32.2598%" y="6629" width="0.0100%" height="15" fill="rgb(252,210,15)" fg:x="90278" fg:w="28"/><text x="32.5098%" y="6639.50"></text></g><g><title>`0x7FF97E62D6C7 (29 samples, 0.01%)</title><rect x="32.2880%" y="6645" width="0.0104%" height="15" fill="rgb(253,209,26)" fg:x="90357" fg:w="29"/><text x="32.5380%" y="6655.50"></text></g><g><title>`0x7FF97E62D723 (38 samples, 0.01%)</title><rect x="32.3173%" y="6645" width="0.0136%" height="15" fill="rgb(238,170,14)" fg:x="90439" fg:w="38"/><text x="32.5673%" y="6655.50"></text></g><g><title>`0x7FF97E62CC9A (598 samples, 0.21%)</title><rect x="32.1229%" y="6661" width="0.2137%" height="15" fill="rgb(216,178,15)" fg:x="89895" fg:w="598"/><text x="32.3729%" y="6671.50"></text></g><g><title>`0x7FF97E62CCC1 (47 samples, 0.02%)</title><rect x="32.3370%" y="6661" width="0.0168%" height="15" fill="rgb(250,197,2)" fg:x="90494" fg:w="47"/><text x="32.5870%" y="6671.50"></text></g><g><title>`0x7FF97E62CCF8 (36 samples, 0.01%)</title><rect x="32.3541%" y="6661" width="0.0129%" height="15" fill="rgb(212,70,42)" fg:x="90542" fg:w="36"/><text x="32.6041%" y="6671.50"></text></g><g><title>`0x7FF97E63244E (39 samples, 0.01%)</title><rect x="32.4291%" y="6629" width="0.0139%" height="15" fill="rgb(227,213,9)" fg:x="90752" fg:w="39"/><text x="32.6791%" y="6639.50"></text></g><g><title>`0x7FF97E632473 (45 samples, 0.02%)</title><rect x="32.4438%" y="6629" width="0.0161%" height="15" fill="rgb(245,99,25)" fg:x="90793" fg:w="45"/><text x="32.6938%" y="6639.50"></text></g><g><title>`0x7FF97E63249F (69 samples, 0.02%)</title><rect x="32.4613%" y="6629" width="0.0247%" height="15" fill="rgb(250,82,29)" fg:x="90842" fg:w="69"/><text x="32.7113%" y="6639.50"></text></g><g><title>`0x7FF97E6324C5 (97 samples, 0.03%)</title><rect x="32.4928%" y="6629" width="0.0347%" height="15" fill="rgb(241,226,54)" fg:x="90930" fg:w="97"/><text x="32.7428%" y="6639.50"></text></g><g><title>`0x7FF97E6334DC (59 samples, 0.02%)</title><rect x="32.5274%" y="6629" width="0.0211%" height="15" fill="rgb(221,99,41)" fg:x="91027" fg:w="59"/><text x="32.7774%" y="6639.50"></text></g><g><title>`0x7FF97E633500 (60 samples, 0.02%)</title><rect x="32.5485%" y="6629" width="0.0214%" height="15" fill="rgb(213,90,21)" fg:x="91086" fg:w="60"/><text x="32.7985%" y="6639.50"></text></g><g><title>`0x7FF97E62CAFB (46 samples, 0.02%)</title><rect x="32.5757%" y="6613" width="0.0164%" height="15" fill="rgb(205,208,24)" fg:x="91162" fg:w="46"/><text x="32.8257%" y="6623.50"></text></g><g><title>`0x7FF97E62CB02 (32 samples, 0.01%)</title><rect x="32.5921%" y="6613" width="0.0114%" height="15" fill="rgb(246,31,12)" fg:x="91208" fg:w="32"/><text x="32.8421%" y="6623.50"></text></g><g><title>`0x7FF97E62CB29 (39 samples, 0.01%)</title><rect x="32.6146%" y="6613" width="0.0139%" height="15" fill="rgb(213,154,6)" fg:x="91271" fg:w="39"/><text x="32.8646%" y="6623.50"></text></g><g><title>`0x7FF97E62CBB2 (33 samples, 0.01%)</title><rect x="32.6814%" y="6613" width="0.0118%" height="15" fill="rgb(222,163,29)" fg:x="91458" fg:w="33"/><text x="32.9314%" y="6623.50"></text></g><g><title>`0x7FF97E62D57C (65 samples, 0.02%)</title><rect x="32.7508%" y="6597" width="0.0232%" height="15" fill="rgb(227,201,8)" fg:x="91652" fg:w="65"/><text x="33.0008%" y="6607.50"></text></g><g><title>`0x7FF97E62D588 (32 samples, 0.01%)</title><rect x="32.7740%" y="6597" width="0.0114%" height="15" fill="rgb(233,9,32)" fg:x="91717" fg:w="32"/><text x="33.0240%" y="6607.50"></text></g><g><title>`0x7FF97E62D68A (117 samples, 0.04%)</title><rect x="32.8004%" y="6597" width="0.0418%" height="15" fill="rgb(217,54,24)" fg:x="91791" fg:w="117"/><text x="33.0504%" y="6607.50"></text></g><g><title>`0x7FF97E62D723 (47 samples, 0.02%)</title><rect x="32.8569%" y="6597" width="0.0168%" height="15" fill="rgb(235,192,0)" fg:x="91949" fg:w="47"/><text x="33.1069%" y="6607.50"></text></g><g><title>`0x7FF97E62D730 (70 samples, 0.03%)</title><rect x="32.8737%" y="6597" width="0.0250%" height="15" fill="rgb(235,45,9)" fg:x="91996" fg:w="70"/><text x="33.1237%" y="6607.50"></text></g><g><title>`0x7FF97E62D740 (35 samples, 0.01%)</title><rect x="32.9001%" y="6597" width="0.0125%" height="15" fill="rgb(246,42,40)" fg:x="92070" fg:w="35"/><text x="33.1501%" y="6607.50"></text></g><g><title>`0x7FF97E62CC9A (599 samples, 0.21%)</title><rect x="32.7100%" y="6613" width="0.2140%" height="15" fill="rgb(248,111,24)" fg:x="91538" fg:w="599"/><text x="32.9600%" y="6623.50"></text></g><g><title>`0x7FF97E62CCC1 (60 samples, 0.02%)</title><rect x="32.9241%" y="6613" width="0.0214%" height="15" fill="rgb(249,65,22)" fg:x="92137" fg:w="60"/><text x="33.1741%" y="6623.50"></text></g><g><title>`0x7FF97E62CCF8 (43 samples, 0.02%)</title><rect x="32.9455%" y="6613" width="0.0154%" height="15" fill="rgb(238,111,51)" fg:x="92197" fg:w="43"/><text x="33.1955%" y="6623.50"></text></g><g><title>`0x7FF97E633505 (1,095 samples, 0.39%)</title><rect x="32.5699%" y="6629" width="0.3913%" height="15" fill="rgb(250,118,22)" fg:x="91146" fg:w="1095"/><text x="32.8199%" y="6639.50"></text></g><g><title>`0x7FF97E696B96 (482 samples, 0.17%)</title><rect x="32.9673%" y="6613" width="0.1722%" height="15" fill="rgb(234,84,26)" fg:x="92258" fg:w="482"/><text x="33.2173%" y="6623.50"></text></g><g><title>`0x7FF97E696C00 (39 samples, 0.01%)</title><rect x="33.1456%" y="6613" width="0.0139%" height="15" fill="rgb(243,172,12)" fg:x="92757" fg:w="39"/><text x="33.3956%" y="6623.50"></text></g><g><title>`0x7FF97E696C13 (34 samples, 0.01%)</title><rect x="33.1642%" y="6613" width="0.0121%" height="15" fill="rgb(236,150,49)" fg:x="92809" fg:w="34"/><text x="33.4142%" y="6623.50"></text></g><g><title>`0x7FF97E696C22 (44 samples, 0.02%)</title><rect x="33.1846%" y="6613" width="0.0157%" height="15" fill="rgb(225,197,26)" fg:x="92866" fg:w="44"/><text x="33.4346%" y="6623.50"></text></g><g><title>`0x7FF97E633550 (700 samples, 0.25%)</title><rect x="32.9623%" y="6629" width="0.2501%" height="15" fill="rgb(214,17,42)" fg:x="92244" fg:w="700"/><text x="33.2123%" y="6639.50"></text></g><g><title>`0x7FF97E69CCAF (111 samples, 0.04%)</title><rect x="33.2785%" y="6597" width="0.0397%" height="15" fill="rgb(224,165,40)" fg:x="93129" fg:w="111"/><text x="33.5285%" y="6607.50"></text></g><g><title>`0x7FF97E62AFF1 (264 samples, 0.09%)</title><rect x="33.2285%" y="6613" width="0.0943%" height="15" fill="rgb(246,100,4)" fg:x="92989" fg:w="264"/><text x="33.4785%" y="6623.50"></text></g><g><title>`0x7FF97E633562 (315 samples, 0.11%)</title><rect x="33.2146%" y="6629" width="0.1126%" height="15" fill="rgb(222,103,0)" fg:x="92950" fg:w="315"/><text x="33.4646%" y="6639.50"></text></g><g><title>`0x7FF97E6322C7 (2,699 samples, 0.96%)</title><rect x="32.4095%" y="6645" width="0.9645%" height="15" fill="rgb(227,189,26)" fg:x="90697" fg:w="2699"/><text x="32.6595%" y="6655.50"></text></g><g><title>`0x7FF97E6335AC (103 samples, 0.04%)</title><rect x="33.3371%" y="6629" width="0.0368%" height="15" fill="rgb(214,202,17)" fg:x="93293" fg:w="103"/><text x="33.5871%" y="6639.50"></text></g><g><title>`0x7FF97E6322FB (31 samples, 0.01%)</title><rect x="33.3743%" y="6645" width="0.0111%" height="15" fill="rgb(229,111,3)" fg:x="93397" fg:w="31"/><text x="33.6243%" y="6655.50"></text></g><g><title>`0x7FF97E632307 (47 samples, 0.02%)</title><rect x="33.3854%" y="6645" width="0.0168%" height="15" fill="rgb(229,172,15)" fg:x="93428" fg:w="47"/><text x="33.6354%" y="6655.50"></text></g><g><title>`0x7FF97E63218A (2,921 samples, 1.04%)</title><rect x="32.3906%" y="6661" width="1.0438%" height="15" fill="rgb(230,224,35)" fg:x="90644" fg:w="2921"/><text x="32.6406%" y="6671.50"></text></g><g><title>`0x7FF97E632312 (89 samples, 0.03%)</title><rect x="33.4025%" y="6645" width="0.0318%" height="15" fill="rgb(251,141,6)" fg:x="93476" fg:w="89"/><text x="33.6525%" y="6655.50"></text></g><g><title>`0x7FF97E63219E (108 samples, 0.04%)</title><rect x="33.4361%" y="6661" width="0.0386%" height="15" fill="rgb(225,208,6)" fg:x="93570" fg:w="108"/><text x="33.6861%" y="6671.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_realloc (28 samples, 0.01%)</title><rect x="33.4812%" y="6661" width="0.0100%" height="15" fill="rgb(246,181,16)" fg:x="93696" fg:w="28"/><text x="33.7312%" y="6671.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (3,911 samples, 1.40%)</title><rect x="32.0965%" y="6709" width="1.3975%" height="15" fill="rgb(227,129,36)" fg:x="89821" fg:w="3911"/><text x="32.3465%" y="6719.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (3,911 samples, 1.40%)</title><rect x="32.0965%" y="6693" width="1.3975%" height="15" fill="rgb(248,117,24)" fg:x="89821" fg:w="3911"/><text x="32.3465%" y="6703.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (3,903 samples, 1.39%)</title><rect x="32.0993%" y="6677" width="1.3947%" height="15" fill="rgb(214,185,35)" fg:x="89829" fg:w="3903"/><text x="32.3493%" y="6687.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_mut_ptr (4,638 samples, 1.66%)</title><rect x="31.9189%" y="6853" width="1.6573%" height="15" fill="rgb(236,150,34)" fg:x="89324" fg:w="4638"/><text x="32.1689%" y="6863.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (4,634 samples, 1.66%)</title><rect x="31.9203%" y="6837" width="1.6559%" height="15" fill="rgb(243,228,27)" fg:x="89328" fg:w="4634"/><text x="32.1703%" y="6847.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (4,634 samples, 1.66%)</title><rect x="31.9203%" y="6821" width="1.6559%" height="15" fill="rgb(245,77,44)" fg:x="89328" fg:w="4634"/><text x="32.1703%" y="6831.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (4,634 samples, 1.66%)</title><rect x="31.9203%" y="6805" width="1.6559%" height="15" fill="rgb(235,214,42)" fg:x="89328" fg:w="4634"/><text x="32.1703%" y="6815.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::grow_one&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; (4,619 samples, 1.65%)</title><rect x="31.9257%" y="6789" width="1.6505%" height="15" fill="rgb(221,74,3)" fg:x="89343" fg:w="4619"/><text x="32.1757%" y="6799.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (4,437 samples, 1.59%)</title><rect x="31.9907%" y="6773" width="1.5855%" height="15" fill="rgb(206,121,29)" fg:x="89525" fg:w="4437"/><text x="32.2407%" y="6783.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (4,421 samples, 1.58%)</title><rect x="31.9964%" y="6757" width="1.5798%" height="15" fill="rgb(249,131,53)" fg:x="89541" fg:w="4421"/><text x="32.2464%" y="6767.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (4,341 samples, 1.55%)</title><rect x="32.0250%" y="6741" width="1.5512%" height="15" fill="rgb(236,170,29)" fg:x="89621" fg:w="4341"/><text x="32.2750%" y="6751.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (4,255 samples, 1.52%)</title><rect x="32.0557%" y="6725" width="1.5205%" height="15" fill="rgb(247,96,15)" fg:x="89707" fg:w="4255"/><text x="32.3057%" y="6735.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;, alloc::raw_vec::finish_grow::closure_env$0 (230 samples, 0.08%)</title><rect x="33.4940%" y="6709" width="0.0822%" height="15" fill="rgb(211,210,7)" fg:x="93732" fg:w="230"/><text x="33.7440%" y="6719.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (5,455 samples, 1.95%)</title><rect x="31.8878%" y="6869" width="1.9493%" height="15" fill="rgb(240,88,50)" fg:x="89237" fg:w="5455"/><text x="32.1378%" y="6879.50">n..</text></g><g><title>neural_network.exe`core::ptr::write(tuple$&lt;usize,usize&gt;*, tuple$ (730 samples, 0.26%)</title><rect x="33.5762%" y="6853" width="0.2609%" height="15" fill="rgb(209,229,26)" fg:x="93962" fg:w="730"/><text x="33.8262%" y="6863.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::remove (31 samples, 0.01%)</title><rect x="33.8371%" y="6869" width="0.0111%" height="15" fill="rgb(210,68,23)" fg:x="94692" fg:w="31"/><text x="34.0871%" y="6879.50"></text></g><g><title>`0x7FF968D51381 (635 samples, 0.23%)</title><rect x="33.8774%" y="6805" width="0.2269%" height="15" fill="rgb(229,180,13)" fg:x="94805" fg:w="635"/><text x="34.1274%" y="6815.50"></text></g><g><title>`0x7FF97E62CAFF (33 samples, 0.01%)</title><rect x="34.1526%" y="6741" width="0.0118%" height="15" fill="rgb(236,53,44)" fg:x="95575" fg:w="33"/><text x="34.4026%" y="6751.50"></text></g><g><title>`0x7FF97E62CB20 (44 samples, 0.02%)</title><rect x="34.1669%" y="6741" width="0.0157%" height="15" fill="rgb(244,214,29)" fg:x="95615" fg:w="44"/><text x="34.4169%" y="6751.50"></text></g><g><title>`0x7FF97E62CB3D (61 samples, 0.02%)</title><rect x="34.1937%" y="6741" width="0.0218%" height="15" fill="rgb(220,75,29)" fg:x="95690" fg:w="61"/><text x="34.4437%" y="6751.50"></text></g><g><title>`0x7FF97E62CB84 (49 samples, 0.02%)</title><rect x="34.2291%" y="6741" width="0.0175%" height="15" fill="rgb(214,183,37)" fg:x="95789" fg:w="49"/><text x="34.4791%" y="6751.50"></text></g><g><title>`0x7FF97E62CBA3 (40 samples, 0.01%)</title><rect x="34.2587%" y="6741" width="0.0143%" height="15" fill="rgb(239,117,29)" fg:x="95872" fg:w="40"/><text x="34.5087%" y="6751.50"></text></g><g><title>`0x7FF97E62CC36 (28 samples, 0.01%)</title><rect x="34.3112%" y="6741" width="0.0100%" height="15" fill="rgb(237,171,35)" fg:x="96019" fg:w="28"/><text x="34.5612%" y="6751.50"></text></g><g><title>`0x7FF97E62CC65 (42 samples, 0.02%)</title><rect x="34.3320%" y="6741" width="0.0150%" height="15" fill="rgb(229,178,53)" fg:x="96077" fg:w="42"/><text x="34.5820%" y="6751.50"></text></g><g><title>`0x7FF97E62CC95 (37 samples, 0.01%)</title><rect x="34.3541%" y="6741" width="0.0132%" height="15" fill="rgb(210,102,19)" fg:x="96139" fg:w="37"/><text x="34.6041%" y="6751.50"></text></g><g><title>`0x7FF97E62D4E2 (29 samples, 0.01%)</title><rect x="34.3756%" y="6725" width="0.0104%" height="15" fill="rgb(235,127,22)" fg:x="96199" fg:w="29"/><text x="34.6256%" y="6735.50"></text></g><g><title>`0x7FF97E62D5E2 (93 samples, 0.03%)</title><rect x="34.4499%" y="6725" width="0.0332%" height="15" fill="rgb(244,31,31)" fg:x="96407" fg:w="93"/><text x="34.6999%" y="6735.50"></text></g><g><title>`0x7FF97E62D68A (67 samples, 0.02%)</title><rect x="34.4931%" y="6725" width="0.0239%" height="15" fill="rgb(231,43,21)" fg:x="96528" fg:w="67"/><text x="34.7431%" y="6735.50"></text></g><g><title>`0x7FF97E62CC9A (604 samples, 0.22%)</title><rect x="34.3674%" y="6741" width="0.2158%" height="15" fill="rgb(217,131,35)" fg:x="96176" fg:w="604"/><text x="34.6174%" y="6751.50"></text></g><g><title>`0x7FF97E62CCC1 (40 samples, 0.01%)</title><rect x="34.5832%" y="6741" width="0.0143%" height="15" fill="rgb(221,149,4)" fg:x="96780" fg:w="40"/><text x="34.8332%" y="6751.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (1,382 samples, 0.49%)</title><rect x="34.1465%" y="6805" width="0.4938%" height="15" fill="rgb(232,170,28)" fg:x="95558" fg:w="1382"/><text x="34.3965%" y="6815.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (1,382 samples, 0.49%)</title><rect x="34.1465%" y="6789" width="0.4938%" height="15" fill="rgb(238,56,10)" fg:x="95558" fg:w="1382"/><text x="34.3965%" y="6799.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (1,382 samples, 0.49%)</title><rect x="34.1465%" y="6773" width="0.4938%" height="15" fill="rgb(235,196,14)" fg:x="95558" fg:w="1382"/><text x="34.3965%" y="6783.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (1,382 samples, 0.49%)</title><rect x="34.1465%" y="6757" width="0.4938%" height="15" fill="rgb(216,45,48)" fg:x="95558" fg:w="1382"/><text x="34.3965%" y="6767.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$&lt;tuple$ (2,221 samples, 0.79%)</title><rect x="33.8528%" y="6837" width="0.7936%" height="15" fill="rgb(238,213,17)" fg:x="94736" fg:w="2221"/><text x="34.1028%" y="6847.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$&lt;tuple$ (2,221 samples, 0.79%)</title><rect x="33.8528%" y="6821" width="0.7936%" height="15" fill="rgb(212,13,2)" fg:x="94736" fg:w="2221"/><text x="34.1028%" y="6831.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$11::clone(alloc::vec::Vec&lt;tuple$ (2,235 samples, 0.80%)</title><rect x="33.8481%" y="6869" width="0.7987%" height="15" fill="rgb(240,114,20)" fg:x="94723" fg:w="2235"/><text x="34.0981%" y="6879.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (2,235 samples, 0.80%)</title><rect x="33.8481%" y="6853" width="0.7987%" height="15" fill="rgb(228,41,40)" fg:x="94723" fg:w="2235"/><text x="34.0981%" y="6863.50"></text></g><g><title>neural_network.exe`core::cmp::impls::impl$21::eq (39 samples, 0.01%)</title><rect x="34.6868%" y="6853" width="0.0139%" height="15" fill="rgb(244,132,35)" fg:x="97070" fg:w="39"/><text x="34.9368%" y="6863.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (1,599 samples, 0.57%)</title><rect x="34.7007%" y="6853" width="0.5714%" height="15" fill="rgb(253,189,4)" fg:x="97109" fg:w="1599"/><text x="34.9507%" y="6863.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (1,599 samples, 0.57%)</title><rect x="34.7007%" y="6837" width="0.5714%" height="15" fill="rgb(224,37,19)" fg:x="97109" fg:w="1599"/><text x="34.9507%" y="6847.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (164 samples, 0.06%)</title><rect x="35.2135%" y="6821" width="0.0586%" height="15" fill="rgb(235,223,18)" fg:x="98544" fg:w="164"/><text x="35.4635%" y="6831.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (31 samples, 0.01%)</title><rect x="35.2721%" y="6837" width="0.0111%" height="15" fill="rgb(235,163,25)" fg:x="98708" fg:w="31"/><text x="35.5221%" y="6847.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (31 samples, 0.01%)</title><rect x="35.2721%" y="6821" width="0.0111%" height="15" fill="rgb(217,145,28)" fg:x="98708" fg:w="31"/><text x="35.5221%" y="6831.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (31 samples, 0.01%)</title><rect x="35.2721%" y="6805" width="0.0111%" height="15" fill="rgb(223,223,32)" fg:x="98708" fg:w="31"/><text x="35.5221%" y="6815.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (31 samples, 0.01%)</title><rect x="35.2721%" y="6789" width="0.0111%" height="15" fill="rgb(227,189,39)" fg:x="98708" fg:w="31"/><text x="35.5221%" y="6799.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$ (2,234 samples, 0.80%)</title><rect x="34.6468%" y="6869" width="0.7983%" height="15" fill="rgb(248,10,22)" fg:x="96958" fg:w="2234"/><text x="34.8968%" y="6879.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;tuple$ (484 samples, 0.17%)</title><rect x="35.2721%" y="6853" width="0.1730%" height="15" fill="rgb(248,46,39)" fg:x="98708" fg:w="484"/><text x="35.5221%" y="6863.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;tuple$ (453 samples, 0.16%)</title><rect x="35.2832%" y="6837" width="0.1619%" height="15" fill="rgb(248,113,48)" fg:x="98739" fg:w="453"/><text x="35.5332%" y="6847.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (40 samples, 0.01%)</title><rect x="35.4451%" y="6837" width="0.0143%" height="15" fill="rgb(245,16,25)" fg:x="99192" fg:w="40"/><text x="35.6951%" y="6847.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (40 samples, 0.01%)</title><rect x="35.4451%" y="6821" width="0.0143%" height="15" fill="rgb(249,152,16)" fg:x="99192" fg:w="40"/><text x="35.6951%" y="6831.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (40 samples, 0.01%)</title><rect x="35.4451%" y="6805" width="0.0143%" height="15" fill="rgb(250,16,1)" fg:x="99192" fg:w="40"/><text x="35.6951%" y="6815.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (40 samples, 0.01%)</title><rect x="35.4451%" y="6789" width="0.0143%" height="15" fill="rgb(249,138,3)" fg:x="99192" fg:w="40"/><text x="35.6951%" y="6799.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (75 samples, 0.03%)</title><rect x="35.4451%" y="6853" width="0.0268%" height="15" fill="rgb(227,71,41)" fg:x="99192" fg:w="75"/><text x="35.6951%" y="6863.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;tuple$ (35 samples, 0.01%)</title><rect x="35.4594%" y="6837" width="0.0125%" height="15" fill="rgb(209,184,23)" fg:x="99232" fg:w="35"/><text x="35.7094%" y="6847.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, core::ops::range::Range (1,869 samples, 0.67%)</title><rect x="35.4451%" y="6869" width="0.6679%" height="15" fill="rgb(223,215,31)" fg:x="99192" fg:w="1869"/><text x="35.6951%" y="6879.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (1,794 samples, 0.64%)</title><rect x="35.4719%" y="6853" width="0.6411%" height="15" fill="rgb(210,146,28)" fg:x="99267" fg:w="1794"/><text x="35.7219%" y="6863.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (1,794 samples, 0.64%)</title><rect x="35.4719%" y="6837" width="0.6411%" height="15" fill="rgb(209,183,41)" fg:x="99267" fg:w="1794"/><text x="35.7219%" y="6847.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (200 samples, 0.07%)</title><rect x="36.0415%" y="6821" width="0.0715%" height="15" fill="rgb(209,224,45)" fg:x="100861" fg:w="200"/><text x="36.2915%" y="6831.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (47 samples, 0.02%)</title><rect x="36.0962%" y="6805" width="0.0168%" height="15" fill="rgb(224,209,51)" fg:x="101014" fg:w="47"/><text x="36.3462%" y="6815.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (47 samples, 0.02%)</title><rect x="36.0962%" y="6789" width="0.0168%" height="15" fill="rgb(223,17,39)" fg:x="101014" fg:w="47"/><text x="36.3462%" y="6799.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (47 samples, 0.02%)</title><rect x="36.0962%" y="6773" width="0.0168%" height="15" fill="rgb(234,204,37)" fg:x="101014" fg:w="47"/><text x="36.3462%" y="6783.50"></text></g><g><title>`0x7FF97E62AFA5 (79 samples, 0.03%)</title><rect x="36.1280%" y="6773" width="0.0282%" height="15" fill="rgb(236,120,5)" fg:x="101103" fg:w="79"/><text x="36.3780%" y="6783.50"></text></g><g><title>`0x7FF97E62AFBA (138 samples, 0.05%)</title><rect x="36.1569%" y="6773" width="0.0493%" height="15" fill="rgb(248,97,27)" fg:x="101184" fg:w="138"/><text x="36.4069%" y="6783.50"></text></g><g><title>`0x7FF97E62AFE0 (228 samples, 0.08%)</title><rect x="36.2073%" y="6773" width="0.0815%" height="15" fill="rgb(240,66,17)" fg:x="101325" fg:w="228"/><text x="36.4573%" y="6783.50"></text></g><g><title>`0x7FF97E62BB70 (232 samples, 0.08%)</title><rect x="36.2920%" y="6757" width="0.0829%" height="15" fill="rgb(210,79,3)" fg:x="101562" fg:w="232"/><text x="36.5420%" y="6767.50"></text></g><g><title>`0x7FF97E62BB84 (290 samples, 0.10%)</title><rect x="36.3774%" y="6757" width="0.1036%" height="15" fill="rgb(214,176,27)" fg:x="101801" fg:w="290"/><text x="36.6274%" y="6767.50"></text></g><g><title>`0x7FF97E62C2B1 (263 samples, 0.09%)</title><rect x="36.4860%" y="6757" width="0.0940%" height="15" fill="rgb(235,185,3)" fg:x="102105" fg:w="263"/><text x="36.7360%" y="6767.50"></text></g><g><title>`0x7FF97E62C38A (225 samples, 0.08%)</title><rect x="36.6082%" y="6757" width="0.0804%" height="15" fill="rgb(227,24,12)" fg:x="102447" fg:w="225"/><text x="36.8582%" y="6767.50"></text></g><g><title>`0x7FF97E69CB43 (159 samples, 0.06%)</title><rect x="36.6886%" y="6757" width="0.0568%" height="15" fill="rgb(252,169,48)" fg:x="102672" fg:w="159"/><text x="36.9386%" y="6767.50"></text></g><g><title>`0x7FF97E69CB6A (72 samples, 0.03%)</title><rect x="36.7515%" y="6757" width="0.0257%" height="15" fill="rgb(212,65,1)" fg:x="102848" fg:w="72"/><text x="37.0015%" y="6767.50"></text></g><g><title>`0x7FF97E69CCAF (29 samples, 0.01%)</title><rect x="36.8387%" y="6757" width="0.0104%" height="15" fill="rgb(242,39,24)" fg:x="103092" fg:w="29"/><text x="37.0887%" y="6767.50"></text></g><g><title>`0x7FF97E62AFF1 (1,582 samples, 0.57%)</title><rect x="36.2898%" y="6773" width="0.5653%" height="15" fill="rgb(249,32,23)" fg:x="101556" fg:w="1582"/><text x="36.5398%" y="6783.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (2,091 samples, 0.75%)</title><rect x="36.1272%" y="6805" width="0.7472%" height="15" fill="rgb(251,195,23)" fg:x="101101" fg:w="2091"/><text x="36.3772%" y="6815.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (2,091 samples, 0.75%)</title><rect x="36.1272%" y="6789" width="0.7472%" height="15" fill="rgb(236,174,8)" fg:x="101101" fg:w="2091"/><text x="36.3772%" y="6799.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (48 samples, 0.02%)</title><rect x="36.8573%" y="6773" width="0.0172%" height="15" fill="rgb(220,197,8)" fg:x="103144" fg:w="48"/><text x="37.1073%" y="6783.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::dealloc (48 samples, 0.02%)</title><rect x="36.8573%" y="6757" width="0.0172%" height="15" fill="rgb(240,108,37)" fg:x="103144" fg:w="48"/><text x="37.1073%" y="6767.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;tuple$ (2,150 samples, 0.77%)</title><rect x="36.1140%" y="6869" width="0.7683%" height="15" fill="rgb(232,176,24)" fg:x="101064" fg:w="2150"/><text x="36.3640%" y="6879.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (2,150 samples, 0.77%)</title><rect x="36.1140%" y="6853" width="0.7683%" height="15" fill="rgb(243,35,29)" fg:x="101064" fg:w="2150"/><text x="36.3640%" y="6863.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (2,150 samples, 0.77%)</title><rect x="36.1140%" y="6837" width="0.7683%" height="15" fill="rgb(210,37,18)" fg:x="101064" fg:w="2150"/><text x="36.3640%" y="6847.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (2,113 samples, 0.76%)</title><rect x="36.1272%" y="6821" width="0.7551%" height="15" fill="rgb(224,184,40)" fg:x="101101" fg:w="2113"/><text x="36.3772%" y="6831.50"></text></g><g><title>neural_network.exe`core::iter::adapters::rev::impl$1::next(core::iter::adapters::rev::Rev&lt;core::ops::range::Range (45 samples, 0.02%)</title><rect x="36.8919%" y="6773" width="0.0161%" height="15" fill="rgb(236,39,29)" fg:x="103241" fg:w="45"/><text x="37.1419%" y="6783.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$7::next_back(core::ops::range::Range (45 samples, 0.02%)</title><rect x="36.8919%" y="6757" width="0.0161%" height="15" fill="rgb(232,48,39)" fg:x="103241" fg:w="45"/><text x="37.1419%" y="6767.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$5::spec_next_back(core::ops::range::Range (45 samples, 0.02%)</title><rect x="36.8919%" y="6741" width="0.0161%" height="15" fill="rgb(236,34,42)" fg:x="103241" fg:w="45"/><text x="37.1419%" y="6751.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy(tuple$&lt;usize,usize&gt;*, tuple$ (50 samples, 0.02%)</title><rect x="36.9391%" y="6741" width="0.0179%" height="15" fill="rgb(243,106,37)" fg:x="103373" fg:w="50"/><text x="37.1891%" y="6751.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::swap(ref_mut$&lt;slice2$&lt;tuple$ (205 samples, 0.07%)</title><rect x="36.9080%" y="6773" width="0.0733%" height="15" fill="rgb(218,96,6)" fg:x="103286" fg:w="205"/><text x="37.1580%" y="6783.50"></text></g><g><title>neural_network.exe`core::ptr::swap(tuple$&lt;usize,usize&gt;*, tuple$ (118 samples, 0.04%)</title><rect x="36.9391%" y="6757" width="0.0422%" height="15" fill="rgb(235,130,12)" fg:x="103373" fg:w="118"/><text x="37.1891%" y="6767.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping(tuple$&lt;usize,usize&gt;*, tuple$ (68 samples, 0.02%)</title><rect x="36.9570%" y="6741" width="0.0243%" height="15" fill="rgb(231,95,0)" fg:x="103423" fg:w="68"/><text x="37.2070%" y="6751.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::round(rand_chacha::guts::State&lt;ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (48 samples, 0.02%)</title><rect x="37.0717%" y="6501" width="0.0172%" height="15" fill="rgb(228,12,23)" fg:x="103744" fg:w="48"/><text x="37.3217%" y="6511.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide::impl_avx2 (59 samples, 0.02%)</title><rect x="37.0692%" y="6549" width="0.0211%" height="15" fill="rgb(216,12,1)" fg:x="103737" fg:w="59"/><text x="37.3192%" y="6559.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide::fn_impl(ppv_lite86::x86_64::Avx2Machine (57 samples, 0.02%)</title><rect x="37.0699%" y="6533" width="0.0204%" height="15" fill="rgb(219,59,3)" fg:x="103739" fg:w="57"/><text x="37.3199%" y="6543.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide_impl(ppv_lite86::x86_64::Avx2Machine (57 samples, 0.02%)</title><rect x="37.0699%" y="6517" width="0.0204%" height="15" fill="rgb(215,208,46)" fg:x="103739" fg:w="57"/><text x="37.3199%" y="6527.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place (587 samples, 0.21%)</title><rect x="36.8823%" y="6869" width="0.2098%" height="15" fill="rgb(254,224,29)" fg:x="103214" fg:w="587"/><text x="37.1323%" y="6879.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (587 samples, 0.21%)</title><rect x="36.8823%" y="6853" width="0.2098%" height="15" fill="rgb(232,14,29)" fg:x="103214" fg:w="587"/><text x="37.1323%" y="6863.50"></text></g><g><title>neural_network.exe`alloc::rc::impl$30::drop(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (587 samples, 0.21%)</title><rect x="36.8823%" y="6837" width="0.2098%" height="15" fill="rgb(208,45,52)" fg:x="103214" fg:w="587"/><text x="37.1323%" y="6847.50"></text></g><g><title>neural_network.exe`alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;::inner (583 samples, 0.21%)</title><rect x="36.8837%" y="6821" width="0.2083%" height="15" fill="rgb(234,191,28)" fg:x="103218" fg:w="583"/><text x="37.1337%" y="6831.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;alloc::rc::RcBox&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt; &gt; &gt;::as_ref (581 samples, 0.21%)</title><rect x="36.8844%" y="6805" width="0.2076%" height="15" fill="rgb(244,67,43)" fg:x="103220" fg:w="581"/><text x="37.1344%" y="6815.50"></text></g><g><title>neural_network.exe`rand::seq::impl$0::shuffle&lt;tuple$&lt;usize,usize&gt;,rand::rngs::thread::ThreadRng&gt;(ref_mut$&lt;slice2$&lt;tuple$ (581 samples, 0.21%)</title><rect x="36.8844%" y="6789" width="0.2076%" height="15" fill="rgb(236,189,24)" fg:x="103220" fg:w="581"/><text x="37.1344%" y="6799.50"></text></g><g><title>neural_network.exe`rand::seq::gen_index (310 samples, 0.11%)</title><rect x="36.9813%" y="6773" width="0.1108%" height="15" fill="rgb(239,214,33)" fg:x="103491" fg:w="310"/><text x="37.2313%" y="6783.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen_range(rand::rngs::thread::ThreadRng*, core::ops::range::Range (308 samples, 0.11%)</title><rect x="36.9820%" y="6757" width="0.1101%" height="15" fill="rgb(226,176,41)" fg:x="103493" fg:w="308"/><text x="37.2320%" y="6767.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$6::sample_single(core::ops::range::Range (308 samples, 0.11%)</title><rect x="36.9820%" y="6741" width="0.1101%" height="15" fill="rgb(248,47,8)" fg:x="103493" fg:w="308"/><text x="37.2320%" y="6751.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single (308 samples, 0.11%)</title><rect x="36.9820%" y="6725" width="0.1101%" height="15" fill="rgb(218,81,44)" fg:x="103493" fg:w="308"/><text x="37.2320%" y="6735.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single_inclusive (308 samples, 0.11%)</title><rect x="36.9820%" y="6709" width="0.1101%" height="15" fill="rgb(213,98,6)" fg:x="103493" fg:w="308"/><text x="37.2320%" y="6719.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen (228 samples, 0.08%)</title><rect x="37.0106%" y="6693" width="0.0815%" height="15" fill="rgb(222,85,22)" fg:x="103573" fg:w="228"/><text x="37.2606%" y="6703.50"></text></g><g><title>neural_network.exe`rand::distributions::integer::impl$2::sample (228 samples, 0.08%)</title><rect x="37.0106%" y="6677" width="0.0815%" height="15" fill="rgb(239,46,39)" fg:x="103573" fg:w="228"/><text x="37.2606%" y="6687.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::impl$1::next_u32 (228 samples, 0.08%)</title><rect x="37.0106%" y="6661" width="0.0815%" height="15" fill="rgb(237,12,29)" fg:x="103573" fg:w="228"/><text x="37.2606%" y="6671.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$1::next_u32(rand::rngs::adapter::reseeding::ReseedingRng (228 samples, 0.08%)</title><rect x="37.0106%" y="6645" width="0.0815%" height="15" fill="rgb(214,77,8)" fg:x="103573" fg:w="228"/><text x="37.2606%" y="6655.50"></text></g><g><title>neural_network.exe`rand_core::block::impl$2::next_u32(rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore (228 samples, 0.08%)</title><rect x="37.0106%" y="6629" width="0.0815%" height="15" fill="rgb(217,168,37)" fg:x="103573" fg:w="228"/><text x="37.2606%" y="6639.50"></text></g><g><title>neural_network.exe`rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;::generate_and_set (70 samples, 0.03%)</title><rect x="37.0670%" y="6613" width="0.0250%" height="15" fill="rgb(221,217,23)" fg:x="103731" fg:w="70"/><text x="37.3170%" y="6623.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$4::generate(rand::rngs::adapter::reseeding::ReseedingCore&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt;*, rand_chacha::chacha::Array64 (70 samples, 0.03%)</title><rect x="37.0670%" y="6597" width="0.0250%" height="15" fill="rgb(243,229,36)" fg:x="103731" fg:w="70"/><text x="37.3170%" y="6607.50"></text></g><g><title>neural_network.exe`rand_chacha::chacha::impl$23::generate(rand_chacha::chacha::ChaCha12Core*, rand_chacha::chacha::Array64 (66 samples, 0.02%)</title><rect x="37.0685%" y="6581" width="0.0236%" height="15" fill="rgb(251,163,40)" fg:x="103735" fg:w="66"/><text x="37.3185%" y="6591.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::ChaCha::refill4 (66 samples, 0.02%)</title><rect x="37.0685%" y="6565" width="0.0236%" height="15" fill="rgb(237,222,12)" fg:x="103735" fg:w="66"/><text x="37.3185%" y="6575.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::contains(ref$&lt;slice2$&lt;tuple$&lt;usize,usize&gt; &gt; &gt;, tuple$ (843 samples, 0.30%)</title><rect x="37.0921%" y="6869" width="0.3012%" height="15" fill="rgb(248,132,6)" fg:x="103801" fg:w="843"/><text x="37.3421%" y="6879.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (843 samples, 0.30%)</title><rect x="37.0921%" y="6853" width="0.3012%" height="15" fill="rgb(227,167,50)" fg:x="103801" fg:w="843"/><text x="37.3421%" y="6863.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (843 samples, 0.30%)</title><rect x="37.0921%" y="6837" width="0.3012%" height="15" fill="rgb(242,84,37)" fg:x="103801" fg:w="843"/><text x="37.3421%" y="6847.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (110 samples, 0.04%)</title><rect x="37.3540%" y="6821" width="0.0393%" height="15" fill="rgb(212,4,50)" fg:x="104534" fg:w="110"/><text x="37.6040%" y="6831.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (43 samples, 0.02%)</title><rect x="37.3779%" y="6805" width="0.0154%" height="15" fill="rgb(230,228,32)" fg:x="104601" fg:w="43"/><text x="37.6279%" y="6815.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (43 samples, 0.02%)</title><rect x="37.3779%" y="6789" width="0.0154%" height="15" fill="rgb(248,217,23)" fg:x="104601" fg:w="43"/><text x="37.6279%" y="6799.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (43 samples, 0.02%)</title><rect x="37.3779%" y="6773" width="0.0154%" height="15" fill="rgb(238,197,32)" fg:x="104601" fg:w="43"/><text x="37.6279%" y="6783.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (332 samples, 0.12%)</title><rect x="37.3933%" y="6869" width="0.1186%" height="15" fill="rgb(236,106,1)" fg:x="104644" fg:w="332"/><text x="37.6433%" y="6879.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (88 samples, 0.03%)</title><rect x="37.4805%" y="6853" width="0.0314%" height="15" fill="rgb(219,228,13)" fg:x="104888" fg:w="88"/><text x="37.7305%" y="6863.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (88 samples, 0.03%)</title><rect x="37.4805%" y="6837" width="0.0314%" height="15" fill="rgb(238,30,35)" fg:x="104888" fg:w="88"/><text x="37.7305%" y="6847.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (88 samples, 0.03%)</title><rect x="37.4805%" y="6821" width="0.0314%" height="15" fill="rgb(236,70,23)" fg:x="104888" fg:w="88"/><text x="37.7305%" y="6831.50"></text></g><g><title>`0x7FF97E62AFD5 (29 samples, 0.01%)</title><rect x="37.6606%" y="6821" width="0.0104%" height="15" fill="rgb(249,104,48)" fg:x="105392" fg:w="29"/><text x="37.9106%" y="6831.50"></text></g><g><title>`0x7FF97E69CB9D (37 samples, 0.01%)</title><rect x="37.7506%" y="6805" width="0.0132%" height="15" fill="rgb(254,117,50)" fg:x="105644" fg:w="37"/><text x="38.0006%" y="6815.50"></text></g><g><title>`0x7FF97E69CBA1 (40 samples, 0.01%)</title><rect x="37.7638%" y="6805" width="0.0143%" height="15" fill="rgb(223,152,4)" fg:x="105681" fg:w="40"/><text x="38.0138%" y="6815.50"></text></g><g><title>`0x7FF97E69CBBC (35 samples, 0.01%)</title><rect x="37.7942%" y="6805" width="0.0125%" height="15" fill="rgb(245,6,2)" fg:x="105766" fg:w="35"/><text x="38.0442%" y="6815.50"></text></g><g><title>`0x7FF97E69CC6F (81 samples, 0.03%)</title><rect x="37.8207%" y="6805" width="0.0289%" height="15" fill="rgb(249,150,24)" fg:x="105840" fg:w="81"/><text x="38.0707%" y="6815.50"></text></g><g><title>`0x7FF97E69CCAF (41 samples, 0.01%)</title><rect x="37.8535%" y="6805" width="0.0147%" height="15" fill="rgb(228,185,42)" fg:x="105932" fg:w="41"/><text x="38.1035%" y="6815.50"></text></g><g><title>`0x7FF97E62AFF1 (573 samples, 0.20%)</title><rect x="37.6713%" y="6821" width="0.2048%" height="15" fill="rgb(226,39,33)" fg:x="105422" fg:w="573"/><text x="37.9213%" y="6831.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::set_ptr_and_cap(core::ptr::non_null::NonNull&lt;slice2$ (33 samples, 0.01%)</title><rect x="37.9925%" y="6693" width="0.0118%" height="15" fill="rgb(221,166,19)" fg:x="106321" fg:w="33"/><text x="38.2425%" y="6703.50"></text></g><g><title>`0x7FF97E62D57C (82 samples, 0.03%)</title><rect x="38.1012%" y="6597" width="0.0293%" height="15" fill="rgb(209,109,2)" fg:x="106625" fg:w="82"/><text x="38.3512%" y="6607.50"></text></g><g><title>`0x7FF97E62D588 (36 samples, 0.01%)</title><rect x="38.1305%" y="6597" width="0.0129%" height="15" fill="rgb(252,216,26)" fg:x="106707" fg:w="36"/><text x="38.3805%" y="6607.50"></text></g><g><title>`0x7FF97E62D66D (29 samples, 0.01%)</title><rect x="38.1601%" y="6597" width="0.0104%" height="15" fill="rgb(227,173,36)" fg:x="106790" fg:w="29"/><text x="38.4101%" y="6607.50"></text></g><g><title>`0x7FF97E68F87F (39 samples, 0.01%)</title><rect x="38.1844%" y="6581" width="0.0139%" height="15" fill="rgb(209,90,7)" fg:x="106858" fg:w="39"/><text x="38.4344%" y="6591.50"></text></g><g><title>`0x7FF97E68F8EE (30 samples, 0.01%)</title><rect x="38.1998%" y="6581" width="0.0107%" height="15" fill="rgb(250,194,11)" fg:x="106901" fg:w="30"/><text x="38.4498%" y="6591.50"></text></g><g><title>`0x7FF97E68F921 (33 samples, 0.01%)</title><rect x="38.2220%" y="6581" width="0.0118%" height="15" fill="rgb(220,72,50)" fg:x="106963" fg:w="33"/><text x="38.4720%" y="6591.50"></text></g><g><title>`0x7FF97E68F938 (31 samples, 0.01%)</title><rect x="38.2341%" y="6581" width="0.0111%" height="15" fill="rgb(222,106,48)" fg:x="106997" fg:w="31"/><text x="38.4841%" y="6591.50"></text></g><g><title>`0x7FF97E62D68A (210 samples, 0.08%)</title><rect x="38.1705%" y="6597" width="0.0750%" height="15" fill="rgb(216,220,45)" fg:x="106819" fg:w="210"/><text x="38.4205%" y="6607.50"></text></g><g><title>`0x7FF97E62D6A8 (28 samples, 0.01%)</title><rect x="38.2552%" y="6597" width="0.0100%" height="15" fill="rgb(234,112,18)" fg:x="107056" fg:w="28"/><text x="38.5052%" y="6607.50"></text></g><g><title>`0x7FF97E62D6C7 (33 samples, 0.01%)</title><rect x="38.2670%" y="6597" width="0.0118%" height="15" fill="rgb(206,179,9)" fg:x="107089" fg:w="33"/><text x="38.5170%" y="6607.50"></text></g><g><title>`0x7FF97E62D723 (47 samples, 0.02%)</title><rect x="38.2974%" y="6597" width="0.0168%" height="15" fill="rgb(215,115,40)" fg:x="107174" fg:w="47"/><text x="38.5474%" y="6607.50"></text></g><g><title>`0x7FF97E62CC9A (621 samples, 0.22%)</title><rect x="38.1005%" y="6613" width="0.2219%" height="15" fill="rgb(222,69,34)" fg:x="106623" fg:w="621"/><text x="38.3505%" y="6623.50"></text></g><g><title>`0x7FF97E62CCC1 (54 samples, 0.02%)</title><rect x="38.3224%" y="6613" width="0.0193%" height="15" fill="rgb(209,161,10)" fg:x="107244" fg:w="54"/><text x="38.5724%" y="6623.50"></text></g><g><title>`0x7FF97E62CCF8 (52 samples, 0.02%)</title><rect x="38.3427%" y="6613" width="0.0186%" height="15" fill="rgb(217,6,38)" fg:x="107301" fg:w="52"/><text x="38.5927%" y="6623.50"></text></g><g><title>`0x7FF97E632442 (30 samples, 0.01%)</title><rect x="38.4324%" y="6581" width="0.0107%" height="15" fill="rgb(229,229,48)" fg:x="107552" fg:w="30"/><text x="38.6824%" y="6591.50"></text></g><g><title>`0x7FF97E632473 (59 samples, 0.02%)</title><rect x="38.4607%" y="6581" width="0.0211%" height="15" fill="rgb(225,21,28)" fg:x="107631" fg:w="59"/><text x="38.7107%" y="6591.50"></text></g><g><title>`0x7FF97E63249F (80 samples, 0.03%)</title><rect x="38.4839%" y="6581" width="0.0286%" height="15" fill="rgb(206,33,13)" fg:x="107696" fg:w="80"/><text x="38.7339%" y="6591.50"></text></g><g><title>`0x7FF97E6324C5 (119 samples, 0.04%)</title><rect x="38.5182%" y="6581" width="0.0425%" height="15" fill="rgb(242,178,17)" fg:x="107792" fg:w="119"/><text x="38.7682%" y="6591.50"></text></g><g><title>`0x7FF97E6334DC (75 samples, 0.03%)</title><rect x="38.5607%" y="6581" width="0.0268%" height="15" fill="rgb(220,162,5)" fg:x="107911" fg:w="75"/><text x="38.8107%" y="6591.50"></text></g><g><title>`0x7FF97E633500 (77 samples, 0.03%)</title><rect x="38.5882%" y="6581" width="0.0275%" height="15" fill="rgb(210,33,43)" fg:x="107988" fg:w="77"/><text x="38.8382%" y="6591.50"></text></g><g><title>`0x7FF97E62CB02 (51 samples, 0.02%)</title><rect x="38.6283%" y="6565" width="0.0182%" height="15" fill="rgb(216,116,54)" fg:x="108100" fg:w="51"/><text x="38.8783%" y="6575.50"></text></g><g><title>`0x7FF97E62CB29 (32 samples, 0.01%)</title><rect x="38.6529%" y="6565" width="0.0114%" height="15" fill="rgb(249,92,24)" fg:x="108169" fg:w="32"/><text x="38.9029%" y="6575.50"></text></g><g><title>`0x7FF97E62D57C (78 samples, 0.03%)</title><rect x="38.7983%" y="6549" width="0.0279%" height="15" fill="rgb(231,189,14)" fg:x="108576" fg:w="78"/><text x="39.0483%" y="6559.50"></text></g><g><title>`0x7FF97E62D588 (32 samples, 0.01%)</title><rect x="38.8262%" y="6549" width="0.0114%" height="15" fill="rgb(230,8,41)" fg:x="108654" fg:w="32"/><text x="39.0762%" y="6559.50"></text></g><g><title>`0x7FF97E62D68A (110 samples, 0.04%)</title><rect x="38.8566%" y="6549" width="0.0393%" height="15" fill="rgb(249,7,27)" fg:x="108739" fg:w="110"/><text x="39.1066%" y="6559.50"></text></g><g><title>`0x7FF97E62D723 (40 samples, 0.01%)</title><rect x="38.9127%" y="6549" width="0.0143%" height="15" fill="rgb(232,86,5)" fg:x="108896" fg:w="40"/><text x="39.1627%" y="6559.50"></text></g><g><title>`0x7FF97E62D740 (31 samples, 0.01%)</title><rect x="38.9273%" y="6549" width="0.0111%" height="15" fill="rgb(224,175,18)" fg:x="108937" fg:w="31"/><text x="39.1773%" y="6559.50"></text></g><g><title>`0x7FF97E62D759 (30 samples, 0.01%)</title><rect x="38.9463%" y="6549" width="0.0107%" height="15" fill="rgb(220,129,12)" fg:x="108990" fg:w="30"/><text x="39.1963%" y="6559.50"></text></g><g><title>`0x7FF97E693D45 (35 samples, 0.01%)</title><rect x="38.9727%" y="6517" width="0.0125%" height="15" fill="rgb(210,19,36)" fg:x="109064" fg:w="35"/><text x="39.2227%" y="6527.50"></text></g><g><title>`0x7FF97E65354E (36 samples, 0.01%)</title><rect x="38.9727%" y="6533" width="0.0129%" height="15" fill="rgb(219,96,14)" fg:x="109064" fg:w="36"/><text x="39.2227%" y="6543.50"></text></g><g><title>`0x7FF97E62DB41 (48 samples, 0.02%)</title><rect x="38.9709%" y="6549" width="0.0172%" height="15" fill="rgb(249,106,1)" fg:x="109059" fg:w="48"/><text x="39.2209%" y="6559.50"></text></g><g><title>`0x7FF97E631C86 (30 samples, 0.01%)</title><rect x="39.0174%" y="6517" width="0.0107%" height="15" fill="rgb(249,155,20)" fg:x="109189" fg:w="30"/><text x="39.2674%" y="6527.50"></text></g><g><title>`0x7FF97E631CA3 (33 samples, 0.01%)</title><rect x="39.0281%" y="6517" width="0.0118%" height="15" fill="rgb(244,168,9)" fg:x="109219" fg:w="33"/><text x="39.2781%" y="6527.50"></text></g><g><title>`0x7FF97E631B1F (64 samples, 0.02%)</title><rect x="39.0174%" y="6533" width="0.0229%" height="15" fill="rgb(216,23,50)" fg:x="109189" fg:w="64"/><text x="39.2674%" y="6543.50"></text></g><g><title>`0x7FF97E62DBBF (140 samples, 0.05%)</title><rect x="38.9906%" y="6549" width="0.0500%" height="15" fill="rgb(224,219,20)" fg:x="109114" fg:w="140"/><text x="39.2406%" y="6559.50"></text></g><g><title>`0x7FF97E62CC9A (855 samples, 0.31%)</title><rect x="38.7530%" y="6565" width="0.3055%" height="15" fill="rgb(222,156,15)" fg:x="108449" fg:w="855"/><text x="39.0030%" y="6575.50"></text></g><g><title>`0x7FF97E62DBDD (50 samples, 0.02%)</title><rect x="39.0406%" y="6549" width="0.0179%" height="15" fill="rgb(231,97,17)" fg:x="109254" fg:w="50"/><text x="39.2906%" y="6559.50"></text></g><g><title>`0x7FF97E62CCC1 (67 samples, 0.02%)</title><rect x="39.0592%" y="6565" width="0.0239%" height="15" fill="rgb(218,70,48)" fg:x="109306" fg:w="67"/><text x="39.3092%" y="6575.50"></text></g><g><title>`0x7FF97E62CCF8 (40 samples, 0.01%)</title><rect x="39.0839%" y="6565" width="0.0143%" height="15" fill="rgb(212,196,52)" fg:x="109375" fg:w="40"/><text x="39.3339%" y="6575.50"></text></g><g><title>`0x7FF97E633505 (1,351 samples, 0.48%)</title><rect x="38.6157%" y="6581" width="0.4828%" height="15" fill="rgb(243,203,18)" fg:x="108065" fg:w="1351"/><text x="38.8657%" y="6591.50"></text></g><g><title>`0x7FF97E696B96 (491 samples, 0.18%)</title><rect x="39.1049%" y="6565" width="0.1755%" height="15" fill="rgb(252,125,41)" fg:x="109434" fg:w="491"/><text x="39.3549%" y="6575.50"></text></g><g><title>`0x7FF97E696C00 (78 samples, 0.03%)</title><rect x="39.2833%" y="6565" width="0.0279%" height="15" fill="rgb(223,180,33)" fg:x="109933" fg:w="78"/><text x="39.5333%" y="6575.50"></text></g><g><title>`0x7FF97E696C13 (54 samples, 0.02%)</title><rect x="39.3161%" y="6565" width="0.0193%" height="15" fill="rgb(254,159,46)" fg:x="110025" fg:w="54"/><text x="39.5661%" y="6575.50"></text></g><g><title>`0x7FF97E696C22 (57 samples, 0.02%)</title><rect x="39.3419%" y="6565" width="0.0204%" height="15" fill="rgb(254,38,10)" fg:x="110097" fg:w="57"/><text x="39.5919%" y="6575.50"></text></g><g><title>`0x7FF97E633550 (757 samples, 0.27%)</title><rect x="39.0999%" y="6581" width="0.2705%" height="15" fill="rgb(208,217,32)" fg:x="109420" fg:w="757"/><text x="39.3499%" y="6591.50"></text></g><g><title>`0x7FF97E69CCAF (120 samples, 0.04%)</title><rect x="39.4801%" y="6549" width="0.0429%" height="15" fill="rgb(221,120,13)" fg:x="110484" fg:w="120"/><text x="39.7301%" y="6559.50"></text></g><g><title>`0x7FF97E69CD55 (29 samples, 0.01%)</title><rect x="39.5287%" y="6549" width="0.0104%" height="15" fill="rgb(246,54,52)" fg:x="110620" fg:w="29"/><text x="39.7787%" y="6559.50"></text></g><g><title>`0x7FF97E62AFF1 (462 samples, 0.17%)</title><rect x="39.3983%" y="6565" width="0.1651%" height="15" fill="rgb(242,34,25)" fg:x="110255" fg:w="462"/><text x="39.6483%" y="6575.50"></text></g><g><title>`0x7FF97E633562 (575 samples, 0.21%)</title><rect x="39.3715%" y="6581" width="0.2055%" height="15" fill="rgb(247,209,9)" fg:x="110180" fg:w="575"/><text x="39.6215%" y="6591.50"></text></g><g><title>`0x7FF97E62AFF4 (38 samples, 0.01%)</title><rect x="39.5634%" y="6565" width="0.0136%" height="15" fill="rgb(228,71,26)" fg:x="110717" fg:w="38"/><text x="39.8134%" y="6575.50"></text></g><g><title>`0x7FF97E633598 (34 samples, 0.01%)</title><rect x="39.5870%" y="6581" width="0.0121%" height="15" fill="rgb(222,145,49)" fg:x="110783" fg:w="34"/><text x="39.8370%" y="6591.50"></text></g><g><title>`0x7FF97E6322C7 (3,448 samples, 1.23%)</title><rect x="38.4038%" y="6597" width="1.2321%" height="15" fill="rgb(218,121,17)" fg:x="107472" fg:w="3448"/><text x="38.6538%" y="6607.50"></text></g><g><title>`0x7FF97E6335AC (103 samples, 0.04%)</title><rect x="39.5991%" y="6581" width="0.0368%" height="15" fill="rgb(244,50,7)" fg:x="110817" fg:w="103"/><text x="39.8491%" y="6591.50"></text></g><g><title>`0x7FF97E6322FB (67 samples, 0.02%)</title><rect x="39.6359%" y="6597" width="0.0239%" height="15" fill="rgb(246,229,37)" fg:x="110920" fg:w="67"/><text x="39.8859%" y="6607.50"></text></g><g><title>`0x7FF97E632307 (101 samples, 0.04%)</title><rect x="39.6606%" y="6597" width="0.0361%" height="15" fill="rgb(225,18,5)" fg:x="110989" fg:w="101"/><text x="39.9106%" y="6607.50"></text></g><g><title>`0x7FF97E632312 (124 samples, 0.04%)</title><rect x="39.6970%" y="6597" width="0.0443%" height="15" fill="rgb(213,204,8)" fg:x="111091" fg:w="124"/><text x="39.9470%" y="6607.50"></text></g><g><title>`0x7FF97E63218A (3,806 samples, 1.36%)</title><rect x="38.3820%" y="6613" width="1.3600%" height="15" fill="rgb(238,103,6)" fg:x="107411" fg:w="3806"/><text x="38.6320%" y="6623.50"></text></g><g><title>`0x7FF97E63219E (95 samples, 0.03%)</title><rect x="39.7439%" y="6613" width="0.0339%" height="15" fill="rgb(222,25,35)" fg:x="111222" fg:w="95"/><text x="39.9939%" y="6623.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (4,814 samples, 1.72%)</title><rect x="38.0779%" y="6661" width="1.7202%" height="15" fill="rgb(213,203,35)" fg:x="106560" fg:w="4814"/><text x="38.3279%" y="6671.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (4,814 samples, 1.72%)</title><rect x="38.0779%" y="6645" width="1.7202%" height="15" fill="rgb(221,79,53)" fg:x="106560" fg:w="4814"/><text x="38.3279%" y="6655.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (4,806 samples, 1.72%)</title><rect x="38.0808%" y="6629" width="1.7174%" height="15" fill="rgb(243,200,35)" fg:x="106568" fg:w="4806"/><text x="38.3308%" y="6639.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_realloc (45 samples, 0.02%)</title><rect x="39.7821%" y="6613" width="0.0161%" height="15" fill="rgb(248,60,25)" fg:x="111329" fg:w="45"/><text x="40.0321%" y="6623.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::realloc (29 samples, 0.01%)</title><rect x="39.7878%" y="6597" width="0.0104%" height="15" fill="rgb(227,53,46)" fg:x="111345" fg:w="29"/><text x="40.0378%" y="6607.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_mut_ptr (5,451 samples, 1.95%)</title><rect x="37.9050%" y="6805" width="1.9479%" height="15" fill="rgb(216,120,32)" fg:x="106076" fg:w="5451"/><text x="38.1550%" y="6815.50">n..</text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (5,444 samples, 1.95%)</title><rect x="37.9075%" y="6789" width="1.9453%" height="15" fill="rgb(220,134,1)" fg:x="106083" fg:w="5444"/><text x="38.1575%" y="6799.50">n..</text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (5,444 samples, 1.95%)</title><rect x="37.9075%" y="6773" width="1.9453%" height="15" fill="rgb(237,168,5)" fg:x="106083" fg:w="5444"/><text x="38.1575%" y="6783.50">n..</text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (5,444 samples, 1.95%)</title><rect x="37.9075%" y="6757" width="1.9453%" height="15" fill="rgb(231,100,33)" fg:x="106083" fg:w="5444"/><text x="38.1575%" y="6767.50">n..</text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::grow_one&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; (5,431 samples, 1.94%)</title><rect x="37.9121%" y="6741" width="1.9407%" height="15" fill="rgb(236,177,47)" fg:x="106096" fg:w="5431"/><text x="38.1621%" y="6751.50">n..</text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (5,268 samples, 1.88%)</title><rect x="37.9704%" y="6725" width="1.8825%" height="15" fill="rgb(235,7,49)" fg:x="106259" fg:w="5268"/><text x="38.2204%" y="6735.50">n..</text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (5,253 samples, 1.88%)</title><rect x="37.9758%" y="6709" width="1.8771%" height="15" fill="rgb(232,119,22)" fg:x="106274" fg:w="5253"/><text x="38.2258%" y="6719.50">n..</text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (5,164 samples, 1.85%)</title><rect x="38.0076%" y="6693" width="1.8453%" height="15" fill="rgb(254,73,53)" fg:x="106363" fg:w="5164"/><text x="38.2576%" y="6703.50">n..</text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (5,082 samples, 1.82%)</title><rect x="38.0369%" y="6677" width="1.8160%" height="15" fill="rgb(251,35,20)" fg:x="106445" fg:w="5082"/><text x="38.2869%" y="6687.50">n..</text></g><g><title>neural_network.exe`enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;, alloc::raw_vec::finish_grow::closure_env$0 (153 samples, 0.05%)</title><rect x="39.7982%" y="6661" width="0.0547%" height="15" fill="rgb(241,119,20)" fg:x="111374" fg:w="153"/><text x="40.0482%" y="6671.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (6,168 samples, 2.20%)</title><rect x="37.8843%" y="6821" width="2.2041%" height="15" fill="rgb(207,102,14)" fg:x="106018" fg:w="6168"/><text x="38.1343%" y="6831.50">n..</text></g><g><title>neural_network.exe`core::ptr::write(tuple$&lt;usize,usize&gt;*, tuple$ (659 samples, 0.24%)</title><rect x="39.8528%" y="6805" width="0.2355%" height="15" fill="rgb(248,201,50)" fg:x="111527" fg:w="659"/><text x="40.1028%" y="6815.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::remove (40 samples, 0.01%)</title><rect x="40.0883%" y="6821" width="0.0143%" height="15" fill="rgb(222,185,44)" fg:x="112186" fg:w="40"/><text x="40.3383%" y="6831.50"></text></g><g><title>`0x7FF968D5135E (30 samples, 0.01%)</title><rect x="40.1316%" y="6757" width="0.0107%" height="15" fill="rgb(218,107,18)" fg:x="112307" fg:w="30"/><text x="40.3816%" y="6767.50"></text></g><g><title>`0x7FF968D51381 (633 samples, 0.23%)</title><rect x="40.1423%" y="6757" width="0.2262%" height="15" fill="rgb(237,177,39)" fg:x="112337" fg:w="633"/><text x="40.3923%" y="6767.50"></text></g><g><title>`0x7FF97E62CAFF (58 samples, 0.02%)</title><rect x="40.4167%" y="6693" width="0.0207%" height="15" fill="rgb(246,69,6)" fg:x="113105" fg:w="58"/><text x="40.6667%" y="6703.50"></text></g><g><title>`0x7FF97E62CB20 (69 samples, 0.02%)</title><rect x="40.4439%" y="6693" width="0.0247%" height="15" fill="rgb(234,208,37)" fg:x="113181" fg:w="69"/><text x="40.6939%" y="6703.50"></text></g><g><title>`0x7FF97E62CB3D (42 samples, 0.02%)</title><rect x="40.4760%" y="6693" width="0.0150%" height="15" fill="rgb(225,4,6)" fg:x="113271" fg:w="42"/><text x="40.7260%" y="6703.50"></text></g><g><title>`0x7FF97E62CC65 (34 samples, 0.01%)</title><rect x="40.5675%" y="6693" width="0.0121%" height="15" fill="rgb(233,45,0)" fg:x="113527" fg:w="34"/><text x="40.8175%" y="6703.50"></text></g><g><title>`0x7FF97E62CC95 (32 samples, 0.01%)</title><rect x="40.5872%" y="6693" width="0.0114%" height="15" fill="rgb(226,136,5)" fg:x="113582" fg:w="32"/><text x="40.8372%" y="6703.50"></text></g><g><title>`0x7FF97E62D51D (32 samples, 0.01%)</title><rect x="40.6386%" y="6677" width="0.0114%" height="15" fill="rgb(211,91,47)" fg:x="113726" fg:w="32"/><text x="40.8886%" y="6687.50"></text></g><g><title>`0x7FF97E62D5E2 (42 samples, 0.02%)</title><rect x="40.6729%" y="6677" width="0.0150%" height="15" fill="rgb(242,88,51)" fg:x="113822" fg:w="42"/><text x="40.9229%" y="6687.50"></text></g><g><title>`0x7FF97E62D68A (106 samples, 0.04%)</title><rect x="40.6926%" y="6677" width="0.0379%" height="15" fill="rgb(230,91,28)" fg:x="113877" fg:w="106"/><text x="40.9426%" y="6687.50"></text></g><g><title>`0x7FF97E62D6C7 (35 samples, 0.01%)</title><rect x="40.7451%" y="6677" width="0.0125%" height="15" fill="rgb(254,186,29)" fg:x="114024" fg:w="35"/><text x="40.9951%" y="6687.50"></text></g><g><title>`0x7FF97E62DB41 (44 samples, 0.02%)</title><rect x="40.8087%" y="6677" width="0.0157%" height="15" fill="rgb(238,6,4)" fg:x="114202" fg:w="44"/><text x="41.0587%" y="6687.50"></text></g><g><title>`0x7FF97E62DBBF (95 samples, 0.03%)</title><rect x="40.8280%" y="6677" width="0.0339%" height="15" fill="rgb(221,151,16)" fg:x="114256" fg:w="95"/><text x="41.0780%" y="6687.50"></text></g><g><title>`0x7FF97E631B1F (46 samples, 0.02%)</title><rect x="40.8455%" y="6661" width="0.0164%" height="15" fill="rgb(251,143,52)" fg:x="114305" fg:w="46"/><text x="41.0955%" y="6671.50"></text></g><g><title>`0x7FF97E62DBDD (60 samples, 0.02%)</title><rect x="40.8620%" y="6677" width="0.0214%" height="15" fill="rgb(206,90,15)" fg:x="114351" fg:w="60"/><text x="41.1120%" y="6687.50"></text></g><g><title>`0x7FF97E62CC9A (799 samples, 0.29%)</title><rect x="40.5986%" y="6693" width="0.2855%" height="15" fill="rgb(218,35,8)" fg:x="113614" fg:w="799"/><text x="40.8486%" y="6703.50"></text></g><g><title>`0x7FF97E62CCC1 (37 samples, 0.01%)</title><rect x="40.8856%" y="6693" width="0.0132%" height="15" fill="rgb(239,215,6)" fg:x="114417" fg:w="37"/><text x="41.1356%" y="6703.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_alloc (39 samples, 0.01%)</title><rect x="40.9295%" y="6693" width="0.0139%" height="15" fill="rgb(245,116,39)" fg:x="114540" fg:w="39"/><text x="41.1795%" y="6703.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (1,533 samples, 0.55%)</title><rect x="40.4107%" y="6757" width="0.5478%" height="15" fill="rgb(242,65,28)" fg:x="113088" fg:w="1533"/><text x="40.6607%" y="6767.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (1,533 samples, 0.55%)</title><rect x="40.4107%" y="6741" width="0.5478%" height="15" fill="rgb(252,132,53)" fg:x="113088" fg:w="1533"/><text x="40.6607%" y="6751.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (1,533 samples, 0.55%)</title><rect x="40.4107%" y="6725" width="0.5478%" height="15" fill="rgb(224,159,50)" fg:x="113088" fg:w="1533"/><text x="40.6607%" y="6735.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (1,533 samples, 0.55%)</title><rect x="40.4107%" y="6709" width="0.5478%" height="15" fill="rgb(224,93,4)" fg:x="113088" fg:w="1533"/><text x="40.6607%" y="6719.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::process_heap_alloc (42 samples, 0.02%)</title><rect x="40.9434%" y="6693" width="0.0150%" height="15" fill="rgb(208,81,34)" fg:x="114579" fg:w="42"/><text x="41.1934%" y="6703.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$11::clone(alloc::vec::Vec&lt;tuple$ (2,410 samples, 0.86%)</title><rect x="40.1026%" y="6821" width="0.8612%" height="15" fill="rgb(233,92,54)" fg:x="112226" fg:w="2410"/><text x="40.3526%" y="6831.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (2,410 samples, 0.86%)</title><rect x="40.1026%" y="6805" width="0.8612%" height="15" fill="rgb(237,21,14)" fg:x="112226" fg:w="2410"/><text x="40.3526%" y="6815.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$&lt;tuple$ (2,395 samples, 0.86%)</title><rect x="40.1080%" y="6789" width="0.8558%" height="15" fill="rgb(249,128,51)" fg:x="112241" fg:w="2395"/><text x="40.3580%" y="6799.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$&lt;tuple$ (2,395 samples, 0.86%)</title><rect x="40.1080%" y="6773" width="0.8558%" height="15" fill="rgb(223,129,24)" fg:x="112241" fg:w="2395"/><text x="40.3580%" y="6783.50"></text></g><g><title>neural_network.exe`core::cmp::impls::impl$21::eq (37 samples, 0.01%)</title><rect x="41.0056%" y="6805" width="0.0132%" height="15" fill="rgb(231,168,25)" fg:x="114753" fg:w="37"/><text x="41.2556%" y="6815.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (1,940 samples, 0.69%)</title><rect x="41.0188%" y="6805" width="0.6932%" height="15" fill="rgb(224,39,20)" fg:x="114790" fg:w="1940"/><text x="41.2688%" y="6815.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (1,940 samples, 0.69%)</title><rect x="41.0188%" y="6789" width="0.6932%" height="15" fill="rgb(225,152,53)" fg:x="114790" fg:w="1940"/><text x="41.2688%" y="6799.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (233 samples, 0.08%)</title><rect x="41.6288%" y="6773" width="0.0833%" height="15" fill="rgb(252,17,24)" fg:x="116497" fg:w="233"/><text x="41.8788%" y="6783.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (30 samples, 0.01%)</title><rect x="41.7121%" y="6789" width="0.0107%" height="15" fill="rgb(250,114,30)" fg:x="116730" fg:w="30"/><text x="41.9621%" y="6799.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (30 samples, 0.01%)</title><rect x="41.7121%" y="6773" width="0.0107%" height="15" fill="rgb(229,5,4)" fg:x="116730" fg:w="30"/><text x="41.9621%" y="6783.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (30 samples, 0.01%)</title><rect x="41.7121%" y="6757" width="0.0107%" height="15" fill="rgb(225,176,49)" fg:x="116730" fg:w="30"/><text x="41.9621%" y="6767.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (30 samples, 0.01%)</title><rect x="41.7121%" y="6741" width="0.0107%" height="15" fill="rgb(224,221,49)" fg:x="116730" fg:w="30"/><text x="41.9621%" y="6751.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$ (2,570 samples, 0.92%)</title><rect x="40.9638%" y="6821" width="0.9184%" height="15" fill="rgb(253,169,27)" fg:x="114636" fg:w="2570"/><text x="41.2138%" y="6831.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;tuple$ (476 samples, 0.17%)</title><rect x="41.7121%" y="6805" width="0.1701%" height="15" fill="rgb(211,206,16)" fg:x="116730" fg:w="476"/><text x="41.9621%" y="6815.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;tuple$ (446 samples, 0.16%)</title><rect x="41.7228%" y="6789" width="0.1594%" height="15" fill="rgb(244,87,35)" fg:x="116760" fg:w="446"/><text x="41.9728%" y="6799.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (42 samples, 0.02%)</title><rect x="41.8822%" y="6789" width="0.0150%" height="15" fill="rgb(246,28,10)" fg:x="117206" fg:w="42"/><text x="42.1322%" y="6799.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (42 samples, 0.02%)</title><rect x="41.8822%" y="6773" width="0.0150%" height="15" fill="rgb(229,12,44)" fg:x="117206" fg:w="42"/><text x="42.1322%" y="6783.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (42 samples, 0.02%)</title><rect x="41.8822%" y="6757" width="0.0150%" height="15" fill="rgb(210,145,37)" fg:x="117206" fg:w="42"/><text x="42.1322%" y="6767.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (42 samples, 0.02%)</title><rect x="41.8822%" y="6741" width="0.0150%" height="15" fill="rgb(227,112,52)" fg:x="117206" fg:w="42"/><text x="42.1322%" y="6751.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (76 samples, 0.03%)</title><rect x="41.8822%" y="6805" width="0.0272%" height="15" fill="rgb(238,155,34)" fg:x="117206" fg:w="76"/><text x="42.1322%" y="6815.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;tuple$ (34 samples, 0.01%)</title><rect x="41.8972%" y="6789" width="0.0121%" height="15" fill="rgb(239,226,36)" fg:x="117248" fg:w="34"/><text x="42.1472%" y="6799.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, core::ops::range::Range (2,079 samples, 0.74%)</title><rect x="41.8822%" y="6821" width="0.7429%" height="15" fill="rgb(230,16,23)" fg:x="117206" fg:w="2079"/><text x="42.1322%" y="6831.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (2,003 samples, 0.72%)</title><rect x="41.9093%" y="6805" width="0.7157%" height="15" fill="rgb(236,171,36)" fg:x="117282" fg:w="2003"/><text x="42.1593%" y="6815.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (2,003 samples, 0.72%)</title><rect x="41.9093%" y="6789" width="0.7157%" height="15" fill="rgb(221,22,14)" fg:x="117282" fg:w="2003"/><text x="42.1593%" y="6799.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (228 samples, 0.08%)</title><rect x="42.5436%" y="6773" width="0.0815%" height="15" fill="rgb(242,43,11)" fg:x="119057" fg:w="228"/><text x="42.7936%" y="6783.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (52 samples, 0.02%)</title><rect x="42.6065%" y="6757" width="0.0186%" height="15" fill="rgb(232,69,23)" fg:x="119233" fg:w="52"/><text x="42.8565%" y="6767.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (52 samples, 0.02%)</title><rect x="42.6065%" y="6741" width="0.0186%" height="15" fill="rgb(216,180,54)" fg:x="119233" fg:w="52"/><text x="42.8565%" y="6751.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (52 samples, 0.02%)</title><rect x="42.6065%" y="6725" width="0.0186%" height="15" fill="rgb(216,5,24)" fg:x="119233" fg:w="52"/><text x="42.8565%" y="6735.50"></text></g><g><title>`0x7FF97E62AFA5 (99 samples, 0.04%)</title><rect x="42.6397%" y="6725" width="0.0354%" height="15" fill="rgb(225,89,9)" fg:x="119326" fg:w="99"/><text x="42.8897%" y="6735.50"></text></g><g><title>`0x7FF97E62AFBA (138 samples, 0.05%)</title><rect x="42.6751%" y="6725" width="0.0493%" height="15" fill="rgb(243,75,33)" fg:x="119425" fg:w="138"/><text x="42.9251%" y="6735.50"></text></g><g><title>`0x7FF97E62AFE0 (215 samples, 0.08%)</title><rect x="42.7258%" y="6725" width="0.0768%" height="15" fill="rgb(247,141,45)" fg:x="119567" fg:w="215"/><text x="42.9758%" y="6735.50"></text></g><g><title>`0x7FF97E62BB70 (278 samples, 0.10%)</title><rect x="42.8041%" y="6709" width="0.0993%" height="15" fill="rgb(232,177,36)" fg:x="119786" fg:w="278"/><text x="43.0541%" y="6719.50"></text></g><g><title>`0x7FF97E62BB84 (274 samples, 0.10%)</title><rect x="42.9042%" y="6709" width="0.0979%" height="15" fill="rgb(219,125,36)" fg:x="120066" fg:w="274"/><text x="43.1542%" y="6719.50"></text></g><g><title>`0x7FF97E62C2B1 (275 samples, 0.10%)</title><rect x="43.0067%" y="6709" width="0.0983%" height="15" fill="rgb(227,94,9)" fg:x="120353" fg:w="275"/><text x="43.2567%" y="6719.50"></text></g><g><title>`0x7FF97E62C38A (243 samples, 0.09%)</title><rect x="43.1264%" y="6709" width="0.0868%" height="15" fill="rgb(240,34,52)" fg:x="120688" fg:w="243"/><text x="43.3764%" y="6719.50"></text></g><g><title>`0x7FF97E69CB43 (179 samples, 0.06%)</title><rect x="43.2133%" y="6709" width="0.0640%" height="15" fill="rgb(216,45,12)" fg:x="120931" fg:w="179"/><text x="43.4633%" y="6719.50"></text></g><g><title>`0x7FF97E69CB6A (83 samples, 0.03%)</title><rect x="43.2844%" y="6709" width="0.0297%" height="15" fill="rgb(246,21,19)" fg:x="121130" fg:w="83"/><text x="43.5344%" y="6719.50"></text></g><g><title>`0x7FF97E69CE16 (29 samples, 0.01%)</title><rect x="43.4062%" y="6709" width="0.0104%" height="15" fill="rgb(213,98,42)" fg:x="121471" fg:w="29"/><text x="43.6562%" y="6719.50"></text></g><g><title>`0x7FF97E62AFF1 (1,749 samples, 0.62%)</title><rect x="42.8037%" y="6725" width="0.6250%" height="15" fill="rgb(250,136,47)" fg:x="119785" fg:w="1749"/><text x="43.0537%" y="6735.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (2,277 samples, 0.81%)</title><rect x="42.6394%" y="6757" width="0.8137%" height="15" fill="rgb(251,124,27)" fg:x="119325" fg:w="2277"/><text x="42.8894%" y="6767.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (2,277 samples, 0.81%)</title><rect x="42.6394%" y="6741" width="0.8137%" height="15" fill="rgb(229,180,14)" fg:x="119325" fg:w="2277"/><text x="42.8894%" y="6751.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (59 samples, 0.02%)</title><rect x="43.4319%" y="6725" width="0.0211%" height="15" fill="rgb(245,216,25)" fg:x="121543" fg:w="59"/><text x="43.6819%" y="6735.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::dealloc (59 samples, 0.02%)</title><rect x="43.4319%" y="6709" width="0.0211%" height="15" fill="rgb(251,43,5)" fg:x="121543" fg:w="59"/><text x="43.6819%" y="6719.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;tuple$ (2,342 samples, 0.84%)</title><rect x="42.6258%" y="6821" width="0.8369%" height="15" fill="rgb(250,128,24)" fg:x="119287" fg:w="2342"/><text x="42.8758%" y="6831.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (2,342 samples, 0.84%)</title><rect x="42.6258%" y="6805" width="0.8369%" height="15" fill="rgb(217,117,27)" fg:x="119287" fg:w="2342"/><text x="42.8758%" y="6815.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (2,342 samples, 0.84%)</title><rect x="42.6258%" y="6789" width="0.8369%" height="15" fill="rgb(245,147,4)" fg:x="119287" fg:w="2342"/><text x="42.8758%" y="6799.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (2,304 samples, 0.82%)</title><rect x="42.6394%" y="6773" width="0.8233%" height="15" fill="rgb(242,201,35)" fg:x="119325" fg:w="2304"/><text x="42.8894%" y="6783.50"></text></g><g><title>neural_network.exe`core::iter::adapters::rev::impl$1::next(core::iter::adapters::rev::Rev&lt;core::ops::range::Range (34 samples, 0.01%)</title><rect x="43.4745%" y="6725" width="0.0121%" height="15" fill="rgb(218,181,1)" fg:x="121662" fg:w="34"/><text x="43.7245%" y="6735.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$7::next_back(core::ops::range::Range (34 samples, 0.01%)</title><rect x="43.4745%" y="6709" width="0.0121%" height="15" fill="rgb(222,6,29)" fg:x="121662" fg:w="34"/><text x="43.7245%" y="6719.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$5::spec_next_back(core::ops::range::Range (34 samples, 0.01%)</title><rect x="43.4745%" y="6693" width="0.0121%" height="15" fill="rgb(208,186,3)" fg:x="121662" fg:w="34"/><text x="43.7245%" y="6703.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy(tuple$&lt;usize,usize&gt;*, tuple$ (54 samples, 0.02%)</title><rect x="43.5159%" y="6693" width="0.0193%" height="15" fill="rgb(216,36,26)" fg:x="121778" fg:w="54"/><text x="43.7659%" y="6703.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::swap(ref_mut$&lt;slice2$&lt;tuple$ (218 samples, 0.08%)</title><rect x="43.4866%" y="6725" width="0.0779%" height="15" fill="rgb(248,201,23)" fg:x="121696" fg:w="218"/><text x="43.7366%" y="6735.50"></text></g><g><title>neural_network.exe`core::ptr::swap(tuple$&lt;usize,usize&gt;*, tuple$ (136 samples, 0.05%)</title><rect x="43.5159%" y="6709" width="0.0486%" height="15" fill="rgb(251,170,31)" fg:x="121778" fg:w="136"/><text x="43.7659%" y="6719.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping(tuple$&lt;usize,usize&gt;*, tuple$ (82 samples, 0.03%)</title><rect x="43.5352%" y="6693" width="0.0293%" height="15" fill="rgb(207,110,25)" fg:x="121832" fg:w="82"/><text x="43.7852%" y="6703.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::round(rand_chacha::guts::State&lt;ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (62 samples, 0.02%)</title><rect x="43.6631%" y="6453" width="0.0222%" height="15" fill="rgb(250,54,15)" fg:x="122190" fg:w="62"/><text x="43.9131%" y="6463.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide::impl_avx2 (81 samples, 0.03%)</title><rect x="43.6578%" y="6501" width="0.0289%" height="15" fill="rgb(227,68,33)" fg:x="122175" fg:w="81"/><text x="43.9078%" y="6511.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide::fn_impl(ppv_lite86::x86_64::Avx2Machine (80 samples, 0.03%)</title><rect x="43.6581%" y="6485" width="0.0286%" height="15" fill="rgb(238,34,41)" fg:x="122176" fg:w="80"/><text x="43.9081%" y="6495.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide_impl(ppv_lite86::x86_64::Avx2Machine (80 samples, 0.03%)</title><rect x="43.6581%" y="6469" width="0.0286%" height="15" fill="rgb(220,11,15)" fg:x="122176" fg:w="80"/><text x="43.9081%" y="6479.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place (631 samples, 0.23%)</title><rect x="43.4627%" y="6821" width="0.2255%" height="15" fill="rgb(246,111,35)" fg:x="121629" fg:w="631"/><text x="43.7127%" y="6831.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (631 samples, 0.23%)</title><rect x="43.4627%" y="6805" width="0.2255%" height="15" fill="rgb(209,88,53)" fg:x="121629" fg:w="631"/><text x="43.7127%" y="6815.50"></text></g><g><title>neural_network.exe`alloc::rc::impl$30::drop(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (631 samples, 0.23%)</title><rect x="43.4627%" y="6789" width="0.2255%" height="15" fill="rgb(231,185,47)" fg:x="121629" fg:w="631"/><text x="43.7127%" y="6799.50"></text></g><g><title>neural_network.exe`alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;::inner (621 samples, 0.22%)</title><rect x="43.4663%" y="6773" width="0.2219%" height="15" fill="rgb(233,154,1)" fg:x="121639" fg:w="621"/><text x="43.7163%" y="6783.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;alloc::rc::RcBox&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt; &gt; &gt;::as_ref (621 samples, 0.22%)</title><rect x="43.4663%" y="6757" width="0.2219%" height="15" fill="rgb(225,15,46)" fg:x="121639" fg:w="621"/><text x="43.7163%" y="6767.50"></text></g><g><title>neural_network.exe`rand::seq::impl$0::shuffle&lt;tuple$&lt;usize,usize&gt;,rand::rngs::thread::ThreadRng&gt;(ref_mut$&lt;slice2$&lt;tuple$ (620 samples, 0.22%)</title><rect x="43.4666%" y="6741" width="0.2215%" height="15" fill="rgb(211,135,41)" fg:x="121640" fg:w="620"/><text x="43.7166%" y="6751.50"></text></g><g><title>neural_network.exe`rand::seq::gen_index (346 samples, 0.12%)</title><rect x="43.5645%" y="6725" width="0.1236%" height="15" fill="rgb(208,54,0)" fg:x="121914" fg:w="346"/><text x="43.8145%" y="6735.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen_range(rand::rngs::thread::ThreadRng*, core::ops::range::Range (344 samples, 0.12%)</title><rect x="43.5652%" y="6709" width="0.1229%" height="15" fill="rgb(244,136,14)" fg:x="121916" fg:w="344"/><text x="43.8152%" y="6719.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$6::sample_single(core::ops::range::Range (344 samples, 0.12%)</title><rect x="43.5652%" y="6693" width="0.1229%" height="15" fill="rgb(241,56,14)" fg:x="121916" fg:w="344"/><text x="43.8152%" y="6703.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single (344 samples, 0.12%)</title><rect x="43.5652%" y="6677" width="0.1229%" height="15" fill="rgb(205,80,24)" fg:x="121916" fg:w="344"/><text x="43.8152%" y="6687.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single_inclusive (344 samples, 0.12%)</title><rect x="43.5652%" y="6661" width="0.1229%" height="15" fill="rgb(220,57,4)" fg:x="121916" fg:w="344"/><text x="43.8152%" y="6671.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen (252 samples, 0.09%)</title><rect x="43.5981%" y="6645" width="0.0900%" height="15" fill="rgb(226,193,50)" fg:x="122008" fg:w="252"/><text x="43.8481%" y="6655.50"></text></g><g><title>neural_network.exe`rand::distributions::integer::impl$2::sample (252 samples, 0.09%)</title><rect x="43.5981%" y="6629" width="0.0900%" height="15" fill="rgb(231,168,22)" fg:x="122008" fg:w="252"/><text x="43.8481%" y="6639.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::impl$1::next_u32 (252 samples, 0.09%)</title><rect x="43.5981%" y="6613" width="0.0900%" height="15" fill="rgb(254,215,14)" fg:x="122008" fg:w="252"/><text x="43.8481%" y="6623.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$1::next_u32(rand::rngs::adapter::reseeding::ReseedingRng (252 samples, 0.09%)</title><rect x="43.5981%" y="6597" width="0.0900%" height="15" fill="rgb(211,115,16)" fg:x="122008" fg:w="252"/><text x="43.8481%" y="6607.50"></text></g><g><title>neural_network.exe`rand_core::block::impl$2::next_u32(rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore (252 samples, 0.09%)</title><rect x="43.5981%" y="6581" width="0.0900%" height="15" fill="rgb(236,210,16)" fg:x="122008" fg:w="252"/><text x="43.8481%" y="6591.50"></text></g><g><title>neural_network.exe`rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;::generate_and_set (108 samples, 0.04%)</title><rect x="43.6496%" y="6565" width="0.0386%" height="15" fill="rgb(221,94,12)" fg:x="122152" fg:w="108"/><text x="43.8996%" y="6575.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$4::generate(rand::rngs::adapter::reseeding::ReseedingCore&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt;*, rand_chacha::chacha::Array64 (108 samples, 0.04%)</title><rect x="43.6496%" y="6549" width="0.0386%" height="15" fill="rgb(235,218,49)" fg:x="122152" fg:w="108"/><text x="43.8996%" y="6559.50"></text></g><g><title>neural_network.exe`rand_chacha::chacha::impl$23::generate(rand_chacha::chacha::ChaCha12Core*, rand_chacha::chacha::Array64 (89 samples, 0.03%)</title><rect x="43.6564%" y="6533" width="0.0318%" height="15" fill="rgb(217,114,14)" fg:x="122171" fg:w="89"/><text x="43.9064%" y="6543.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::ChaCha::refill4 (89 samples, 0.03%)</title><rect x="43.6564%" y="6517" width="0.0318%" height="15" fill="rgb(216,145,22)" fg:x="122171" fg:w="89"/><text x="43.9064%" y="6527.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::contains(ref$&lt;slice2$&lt;tuple$&lt;usize,usize&gt; &gt; &gt;, tuple$ (933 samples, 0.33%)</title><rect x="43.6882%" y="6821" width="0.3334%" height="15" fill="rgb(217,112,39)" fg:x="122260" fg:w="933"/><text x="43.9382%" y="6831.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (933 samples, 0.33%)</title><rect x="43.6882%" y="6805" width="0.3334%" height="15" fill="rgb(225,85,32)" fg:x="122260" fg:w="933"/><text x="43.9382%" y="6815.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (933 samples, 0.33%)</title><rect x="43.6882%" y="6789" width="0.3334%" height="15" fill="rgb(245,209,47)" fg:x="122260" fg:w="933"/><text x="43.9382%" y="6799.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (123 samples, 0.04%)</title><rect x="43.9776%" y="6773" width="0.0440%" height="15" fill="rgb(218,220,15)" fg:x="123070" fg:w="123"/><text x="44.2276%" y="6783.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (46 samples, 0.02%)</title><rect x="44.0051%" y="6757" width="0.0164%" height="15" fill="rgb(222,202,31)" fg:x="123147" fg:w="46"/><text x="44.2551%" y="6767.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (46 samples, 0.02%)</title><rect x="44.0051%" y="6741" width="0.0164%" height="15" fill="rgb(243,203,4)" fg:x="123147" fg:w="46"/><text x="44.2551%" y="6751.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (46 samples, 0.02%)</title><rect x="44.0051%" y="6725" width="0.0164%" height="15" fill="rgb(237,92,17)" fg:x="123147" fg:w="46"/><text x="44.2551%" y="6735.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::impl$13::eq(core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;*, core::ptr::non_null::NonNull&lt;tuple$ (32 samples, 0.01%)</title><rect x="44.1037%" y="6805" width="0.0114%" height="15" fill="rgb(231,119,7)" fg:x="123423" fg:w="32"/><text x="44.3537%" y="6815.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (340 samples, 0.12%)</title><rect x="44.0216%" y="6821" width="0.1215%" height="15" fill="rgb(237,82,41)" fg:x="123193" fg:w="340"/><text x="44.2716%" y="6831.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (78 samples, 0.03%)</title><rect x="44.1152%" y="6805" width="0.0279%" height="15" fill="rgb(226,81,48)" fg:x="123455" fg:w="78"/><text x="44.3652%" y="6815.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (78 samples, 0.03%)</title><rect x="44.1152%" y="6789" width="0.0279%" height="15" fill="rgb(234,70,51)" fg:x="123455" fg:w="78"/><text x="44.3652%" y="6799.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (78 samples, 0.03%)</title><rect x="44.1152%" y="6773" width="0.0279%" height="15" fill="rgb(251,86,4)" fg:x="123455" fg:w="78"/><text x="44.3652%" y="6783.50"></text></g><g><title>neural_network.exe`core::tuple::impl$12::eq(tuple$&lt;usize,usize&gt;*, tuple$ (28 samples, 0.01%)</title><rect x="44.1430%" y="6821" width="0.0100%" height="15" fill="rgb(244,144,28)" fg:x="123533" fg:w="28"/><text x="44.3930%" y="6831.50"></text></g><g><title>`0x7FF97E62BB6A (34 samples, 0.01%)</title><rect x="44.2885%" y="6757" width="0.0121%" height="15" fill="rgb(232,161,39)" fg:x="123940" fg:w="34"/><text x="44.5385%" y="6767.50"></text></g><g><title>`0x7FF97E62BB7F (34 samples, 0.01%)</title><rect x="44.3049%" y="6757" width="0.0121%" height="15" fill="rgb(247,34,51)" fg:x="123986" fg:w="34"/><text x="44.5549%" y="6767.50"></text></g><g><title>`0x7FF97E69CB81 (30 samples, 0.01%)</title><rect x="44.3843%" y="6757" width="0.0107%" height="15" fill="rgb(225,132,2)" fg:x="124208" fg:w="30"/><text x="44.6343%" y="6767.50"></text></g><g><title>`0x7FF97E69CBA1 (42 samples, 0.02%)</title><rect x="44.4111%" y="6757" width="0.0150%" height="15" fill="rgb(209,159,44)" fg:x="124283" fg:w="42"/><text x="44.6611%" y="6767.50"></text></g><g><title>`0x7FF97E69CBBC (31 samples, 0.01%)</title><rect x="44.4396%" y="6757" width="0.0111%" height="15" fill="rgb(251,214,1)" fg:x="124363" fg:w="31"/><text x="44.6896%" y="6767.50"></text></g><g><title>`0x7FF97E69CC6F (108 samples, 0.04%)</title><rect x="44.4632%" y="6757" width="0.0386%" height="15" fill="rgb(247,84,47)" fg:x="124429" fg:w="108"/><text x="44.7132%" y="6767.50"></text></g><g><title>`0x7FF97E62AFF1 (702 samples, 0.25%)</title><rect x="44.2863%" y="6773" width="0.2509%" height="15" fill="rgb(240,111,43)" fg:x="123934" fg:w="702"/><text x="44.5363%" y="6783.50"></text></g><g><title>`0x7FF97E62D57C (111 samples, 0.04%)</title><rect x="44.7730%" y="6549" width="0.0397%" height="15" fill="rgb(215,214,35)" fg:x="125296" fg:w="111"/><text x="45.0230%" y="6559.50"></text></g><g><title>`0x7FF97E62D588 (55 samples, 0.02%)</title><rect x="44.8127%" y="6549" width="0.0197%" height="15" fill="rgb(248,207,23)" fg:x="125407" fg:w="55"/><text x="45.0627%" y="6559.50"></text></g><g><title>`0x7FF97E62D66D (36 samples, 0.01%)</title><rect x="44.8556%" y="6549" width="0.0129%" height="15" fill="rgb(214,186,4)" fg:x="125527" fg:w="36"/><text x="45.1056%" y="6559.50"></text></g><g><title>`0x7FF97E68F861 (44 samples, 0.02%)</title><rect x="44.8699%" y="6533" width="0.0157%" height="15" fill="rgb(220,133,22)" fg:x="125567" fg:w="44"/><text x="45.1199%" y="6543.50"></text></g><g><title>`0x7FF97E68F87F (37 samples, 0.01%)</title><rect x="44.8877%" y="6533" width="0.0132%" height="15" fill="rgb(239,134,19)" fg:x="125617" fg:w="37"/><text x="45.1377%" y="6543.50"></text></g><g><title>`0x7FF97E68F8EE (36 samples, 0.01%)</title><rect x="44.9020%" y="6533" width="0.0129%" height="15" fill="rgb(250,140,9)" fg:x="125657" fg:w="36"/><text x="45.1520%" y="6543.50"></text></g><g><title>`0x7FF97E68F908 (29 samples, 0.01%)</title><rect x="44.9167%" y="6533" width="0.0104%" height="15" fill="rgb(225,59,14)" fg:x="125698" fg:w="29"/><text x="45.1667%" y="6543.50"></text></g><g><title>`0x7FF97E68F921 (31 samples, 0.01%)</title><rect x="44.9278%" y="6533" width="0.0111%" height="15" fill="rgb(214,152,51)" fg:x="125729" fg:w="31"/><text x="45.1778%" y="6543.50"></text></g><g><title>`0x7FF97E62D68A (223 samples, 0.08%)</title><rect x="44.8684%" y="6549" width="0.0797%" height="15" fill="rgb(251,227,43)" fg:x="125563" fg:w="223"/><text x="45.1184%" y="6559.50"></text></g><g><title>`0x7FF97E62D6A8 (31 samples, 0.01%)</title><rect x="44.9589%" y="6549" width="0.0111%" height="15" fill="rgb(241,96,17)" fg:x="125816" fg:w="31"/><text x="45.2089%" y="6559.50"></text></g><g><title>`0x7FF97E62D723 (55 samples, 0.02%)</title><rect x="44.9996%" y="6549" width="0.0197%" height="15" fill="rgb(234,198,43)" fg:x="125930" fg:w="55"/><text x="45.2496%" y="6559.50"></text></g><g><title>`0x7FF97E62CC9A (749 samples, 0.27%)</title><rect x="44.7705%" y="6565" width="0.2676%" height="15" fill="rgb(220,108,29)" fg:x="125289" fg:w="749"/><text x="45.0205%" y="6575.50"></text></g><g><title>`0x7FF97E62CCC1 (69 samples, 0.02%)</title><rect x="45.0389%" y="6565" width="0.0247%" height="15" fill="rgb(226,163,33)" fg:x="126040" fg:w="69"/><text x="45.2889%" y="6575.50"></text></g><g><title>`0x7FF97E62CCF8 (34 samples, 0.01%)</title><rect x="45.0646%" y="6565" width="0.0121%" height="15" fill="rgb(205,194,45)" fg:x="126112" fg:w="34"/><text x="45.3146%" y="6575.50"></text></g><g><title>`0x7FF97E632442 (28 samples, 0.01%)</title><rect x="45.1497%" y="6533" width="0.0100%" height="15" fill="rgb(206,143,44)" fg:x="126350" fg:w="28"/><text x="45.3997%" y="6543.50"></text></g><g><title>`0x7FF97E63244E (44 samples, 0.02%)</title><rect x="45.1665%" y="6533" width="0.0157%" height="15" fill="rgb(236,136,36)" fg:x="126397" fg:w="44"/><text x="45.4165%" y="6543.50"></text></g><g><title>`0x7FF97E632473 (55 samples, 0.02%)</title><rect x="45.1822%" y="6533" width="0.0197%" height="15" fill="rgb(249,172,42)" fg:x="126441" fg:w="55"/><text x="45.4322%" y="6543.50"></text></g><g><title>`0x7FF97E63249F (79 samples, 0.03%)</title><rect x="45.2029%" y="6533" width="0.0282%" height="15" fill="rgb(216,139,23)" fg:x="126499" fg:w="79"/><text x="45.4529%" y="6543.50"></text></g><g><title>`0x7FF97E6324C5 (127 samples, 0.05%)</title><rect x="45.2354%" y="6533" width="0.0454%" height="15" fill="rgb(207,166,20)" fg:x="126590" fg:w="127"/><text x="45.4854%" y="6543.50"></text></g><g><title>`0x7FF97E6334DC (42 samples, 0.02%)</title><rect x="45.2808%" y="6533" width="0.0150%" height="15" fill="rgb(210,209,22)" fg:x="126717" fg:w="42"/><text x="45.5308%" y="6543.50"></text></g><g><title>`0x7FF97E633500 (62 samples, 0.02%)</title><rect x="45.2965%" y="6533" width="0.0222%" height="15" fill="rgb(232,118,20)" fg:x="126761" fg:w="62"/><text x="45.5465%" y="6543.50"></text></g><g><title>`0x7FF97E62CB02 (30 samples, 0.01%)</title><rect x="45.3337%" y="6517" width="0.0107%" height="15" fill="rgb(238,113,42)" fg:x="126865" fg:w="30"/><text x="45.5837%" y="6527.50"></text></g><g><title>`0x7FF97E62D68A (123 samples, 0.04%)</title><rect x="45.5081%" y="6501" width="0.0440%" height="15" fill="rgb(231,42,5)" fg:x="127353" fg:w="123"/><text x="45.7581%" y="6511.50"></text></g><g><title>`0x7FF97E62D723 (50 samples, 0.02%)</title><rect x="45.5695%" y="6501" width="0.0179%" height="15" fill="rgb(243,166,24)" fg:x="127525" fg:w="50"/><text x="45.8195%" y="6511.50"></text></g><g><title>`0x7FF97E62D740 (50 samples, 0.02%)</title><rect x="45.5874%" y="6501" width="0.0179%" height="15" fill="rgb(237,226,12)" fg:x="127575" fg:w="50"/><text x="45.8374%" y="6511.50"></text></g><g><title>`0x7FF97E62D759 (33 samples, 0.01%)</title><rect x="45.6139%" y="6501" width="0.0118%" height="15" fill="rgb(229,133,24)" fg:x="127649" fg:w="33"/><text x="45.8639%" y="6511.50"></text></g><g><title>`0x7FF97E62D793 (92 samples, 0.03%)</title><rect x="45.6256%" y="6501" width="0.0329%" height="15" fill="rgb(238,33,43)" fg:x="127682" fg:w="92"/><text x="45.8756%" y="6511.50"></text></g><g><title>`0x7FF97E62CC9A (639 samples, 0.23%)</title><rect x="45.4409%" y="6517" width="0.2283%" height="15" fill="rgb(227,59,38)" fg:x="127165" fg:w="639"/><text x="45.6909%" y="6527.50"></text></g><g><title>`0x7FF97E62CCC1 (79 samples, 0.03%)</title><rect x="45.6696%" y="6517" width="0.0282%" height="15" fill="rgb(230,97,0)" fg:x="127805" fg:w="79"/><text x="45.9196%" y="6527.50"></text></g><g><title>`0x7FF97E62CCF8 (56 samples, 0.02%)</title><rect x="45.6982%" y="6517" width="0.0200%" height="15" fill="rgb(250,173,50)" fg:x="127885" fg:w="56"/><text x="45.9482%" y="6527.50"></text></g><g><title>`0x7FF97E633505 (1,121 samples, 0.40%)</title><rect x="45.3187%" y="6533" width="0.4006%" height="15" fill="rgb(240,15,50)" fg:x="126823" fg:w="1121"/><text x="45.5687%" y="6543.50"></text></g><g><title>`0x7FF97E696B96 (475 samples, 0.17%)</title><rect x="45.7221%" y="6517" width="0.1697%" height="15" fill="rgb(221,93,22)" fg:x="127952" fg:w="475"/><text x="45.9721%" y="6527.50"></text></g><g><title>`0x7FF97E696C00 (55 samples, 0.02%)</title><rect x="45.8944%" y="6517" width="0.0197%" height="15" fill="rgb(245,180,53)" fg:x="128434" fg:w="55"/><text x="46.1444%" y="6527.50"></text></g><g><title>`0x7FF97E696C13 (51 samples, 0.02%)</title><rect x="45.9212%" y="6517" width="0.0182%" height="15" fill="rgb(231,88,51)" fg:x="128509" fg:w="51"/><text x="46.1712%" y="6527.50"></text></g><g><title>`0x7FF97E696C22 (55 samples, 0.02%)</title><rect x="45.9483%" y="6517" width="0.0197%" height="15" fill="rgb(240,58,21)" fg:x="128585" fg:w="55"/><text x="46.1983%" y="6527.50"></text></g><g><title>`0x7FF97E633550 (719 samples, 0.26%)</title><rect x="45.7203%" y="6533" width="0.2569%" height="15" fill="rgb(237,21,10)" fg:x="127947" fg:w="719"/><text x="45.9703%" y="6543.50"></text></g><g><title>`0x7FF97E69CC6F (38 samples, 0.01%)</title><rect x="46.0462%" y="6501" width="0.0136%" height="15" fill="rgb(218,43,11)" fg:x="128859" fg:w="38"/><text x="46.2962%" y="6511.50"></text></g><g><title>`0x7FF97E69CCAF (157 samples, 0.06%)</title><rect x="46.0727%" y="6501" width="0.0561%" height="15" fill="rgb(218,221,29)" fg:x="128933" fg:w="157"/><text x="46.3227%" y="6511.50"></text></g><g><title>`0x7FF97E69CCF4 (30 samples, 0.01%)</title><rect x="46.1288%" y="6501" width="0.0107%" height="15" fill="rgb(214,118,42)" fg:x="129090" fg:w="30"/><text x="46.3788%" y="6511.50"></text></g><g><title>`0x7FF97E62AFF1 (422 samples, 0.15%)</title><rect x="46.0001%" y="6517" width="0.1508%" height="15" fill="rgb(251,200,26)" fg:x="128730" fg:w="422"/><text x="46.2501%" y="6527.50"></text></g><g><title>`0x7FF97E633562 (491 samples, 0.18%)</title><rect x="45.9816%" y="6533" width="0.1755%" height="15" fill="rgb(237,101,39)" fg:x="128678" fg:w="491"/><text x="46.2316%" y="6543.50"></text></g><g><title>`0x7FF97E633598 (38 samples, 0.01%)</title><rect x="46.1667%" y="6533" width="0.0136%" height="15" fill="rgb(251,117,11)" fg:x="129196" fg:w="38"/><text x="46.4167%" y="6543.50"></text></g><g><title>`0x7FF97E6322C7 (3,111 samples, 1.11%)</title><rect x="45.1239%" y="6549" width="1.1117%" height="15" fill="rgb(216,223,23)" fg:x="126278" fg:w="3111"/><text x="45.3739%" y="6559.50"></text></g><g><title>`0x7FF97E6335AC (154 samples, 0.06%)</title><rect x="46.1806%" y="6533" width="0.0550%" height="15" fill="rgb(251,54,12)" fg:x="129235" fg:w="154"/><text x="46.4306%" y="6543.50"></text></g><g><title>`0x7FF97E6322FB (44 samples, 0.02%)</title><rect x="46.2356%" y="6549" width="0.0157%" height="15" fill="rgb(254,176,54)" fg:x="129389" fg:w="44"/><text x="46.4856%" y="6559.50"></text></g><g><title>`0x7FF97E632307 (60 samples, 0.02%)</title><rect x="46.2524%" y="6549" width="0.0214%" height="15" fill="rgb(210,32,8)" fg:x="129436" fg:w="60"/><text x="46.5024%" y="6559.50"></text></g><g><title>`0x7FF97E632312 (68 samples, 0.02%)</title><rect x="46.2739%" y="6549" width="0.0243%" height="15" fill="rgb(235,52,38)" fg:x="129496" fg:w="68"/><text x="46.5239%" y="6559.50"></text></g><g><title>`0x7FF97E63218A (3,346 samples, 1.20%)</title><rect x="45.1032%" y="6565" width="1.1957%" height="15" fill="rgb(231,4,44)" fg:x="126220" fg:w="3346"/><text x="45.3532%" y="6575.50"></text></g><g><title>`0x7FF97E63219E (125 samples, 0.04%)</title><rect x="46.2996%" y="6565" width="0.0447%" height="15" fill="rgb(249,2,32)" fg:x="129568" fg:w="125"/><text x="46.5496%" y="6575.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_realloc (41 samples, 0.01%)</title><rect x="46.3482%" y="6565" width="0.0147%" height="15" fill="rgb(224,65,26)" fg:x="129704" fg:w="41"/><text x="46.5982%" y="6575.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (4,555 samples, 1.63%)</title><rect x="44.7380%" y="6613" width="1.6277%" height="15" fill="rgb(250,73,40)" fg:x="125198" fg:w="4555"/><text x="44.9880%" y="6623.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (4,555 samples, 1.63%)</title><rect x="44.7380%" y="6597" width="1.6277%" height="15" fill="rgb(253,177,16)" fg:x="125198" fg:w="4555"/><text x="44.9880%" y="6607.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (4,551 samples, 1.63%)</title><rect x="44.7394%" y="6581" width="1.6262%" height="15" fill="rgb(217,32,34)" fg:x="125202" fg:w="4551"/><text x="44.9894%" y="6591.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_mut_ptr (5,245 samples, 1.87%)</title><rect x="44.5665%" y="6757" width="1.8742%" height="15" fill="rgb(212,7,10)" fg:x="124718" fg:w="5245"/><text x="44.8165%" y="6767.50">n..</text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (5,240 samples, 1.87%)</title><rect x="44.5683%" y="6741" width="1.8725%" height="15" fill="rgb(245,89,8)" fg:x="124723" fg:w="5240"/><text x="44.8183%" y="6751.50">n..</text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (5,240 samples, 1.87%)</title><rect x="44.5683%" y="6725" width="1.8725%" height="15" fill="rgb(237,16,53)" fg:x="124723" fg:w="5240"/><text x="44.8183%" y="6735.50">n..</text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (5,240 samples, 1.87%)</title><rect x="44.5683%" y="6709" width="1.8725%" height="15" fill="rgb(250,204,30)" fg:x="124723" fg:w="5240"/><text x="44.8183%" y="6719.50">n..</text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::grow_one&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; (5,225 samples, 1.87%)</title><rect x="44.5736%" y="6693" width="1.8671%" height="15" fill="rgb(208,77,27)" fg:x="124738" fg:w="5225"/><text x="44.8236%" y="6703.50">n..</text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (5,061 samples, 1.81%)</title><rect x="44.6322%" y="6677" width="1.8085%" height="15" fill="rgb(250,204,28)" fg:x="124902" fg:w="5061"/><text x="44.8822%" y="6687.50">n..</text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (5,050 samples, 1.80%)</title><rect x="44.6362%" y="6661" width="1.8046%" height="15" fill="rgb(244,63,21)" fg:x="124913" fg:w="5050"/><text x="44.8862%" y="6671.50">n..</text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (4,963 samples, 1.77%)</title><rect x="44.6673%" y="6645" width="1.7735%" height="15" fill="rgb(236,85,44)" fg:x="125000" fg:w="4963"/><text x="44.9173%" y="6655.50">n..</text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (4,874 samples, 1.74%)</title><rect x="44.6991%" y="6629" width="1.7417%" height="15" fill="rgb(215,98,4)" fg:x="125089" fg:w="4874"/><text x="44.9491%" y="6639.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;, alloc::raw_vec::finish_grow::closure_env$0 (210 samples, 0.08%)</title><rect x="46.3657%" y="6613" width="0.0750%" height="15" fill="rgb(235,38,11)" fg:x="129753" fg:w="210"/><text x="46.6157%" y="6623.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (5,912 samples, 2.11%)</title><rect x="44.5436%" y="6773" width="2.1126%" height="15" fill="rgb(254,186,25)" fg:x="124654" fg:w="5912"/><text x="44.7936%" y="6783.50">n..</text></g><g><title>neural_network.exe`core::ptr::write(tuple$&lt;usize,usize&gt;*, tuple$ (603 samples, 0.22%)</title><rect x="46.4407%" y="6757" width="0.2155%" height="15" fill="rgb(225,55,31)" fg:x="129963" fg:w="603"/><text x="46.6907%" y="6767.50"></text></g><g><title>`0x7FF968D51381 (614 samples, 0.22%)</title><rect x="46.6977%" y="6709" width="0.2194%" height="15" fill="rgb(211,15,21)" fg:x="130682" fg:w="614"/><text x="46.9477%" y="6719.50"></text></g><g><title>`0x7FF97E62CAFF (53 samples, 0.02%)</title><rect x="46.9635%" y="6645" width="0.0189%" height="15" fill="rgb(215,187,41)" fg:x="131426" fg:w="53"/><text x="47.2135%" y="6655.50"></text></g><g><title>`0x7FF97E62CB20 (69 samples, 0.02%)</title><rect x="46.9850%" y="6645" width="0.0247%" height="15" fill="rgb(248,69,32)" fg:x="131486" fg:w="69"/><text x="47.2350%" y="6655.50"></text></g><g><title>`0x7FF97E62CB3D (77 samples, 0.03%)</title><rect x="47.0200%" y="6645" width="0.0275%" height="15" fill="rgb(252,102,52)" fg:x="131584" fg:w="77"/><text x="47.2700%" y="6655.50"></text></g><g><title>`0x7FF97E62CB84 (59 samples, 0.02%)</title><rect x="47.0546%" y="6645" width="0.0211%" height="15" fill="rgb(253,140,32)" fg:x="131681" fg:w="59"/><text x="47.3046%" y="6655.50"></text></g><g><title>`0x7FF97E62CBA3 (30 samples, 0.01%)</title><rect x="47.0804%" y="6645" width="0.0107%" height="15" fill="rgb(216,56,42)" fg:x="131753" fg:w="30"/><text x="47.3304%" y="6655.50"></text></g><g><title>`0x7FF97E62CC36 (49 samples, 0.02%)</title><rect x="47.1197%" y="6645" width="0.0175%" height="15" fill="rgb(216,184,14)" fg:x="131863" fg:w="49"/><text x="47.3697%" y="6655.50"></text></g><g><title>`0x7FF97E62CC65 (34 samples, 0.01%)</title><rect x="47.1483%" y="6645" width="0.0121%" height="15" fill="rgb(237,187,27)" fg:x="131943" fg:w="34"/><text x="47.3983%" y="6655.50"></text></g><g><title>`0x7FF97E62CC95 (42 samples, 0.02%)</title><rect x="47.1665%" y="6645" width="0.0150%" height="15" fill="rgb(219,65,3)" fg:x="131994" fg:w="42"/><text x="47.4165%" y="6655.50"></text></g><g><title>`0x7FF97E62D4E2 (42 samples, 0.02%)</title><rect x="47.1886%" y="6629" width="0.0150%" height="15" fill="rgb(245,83,25)" fg:x="132056" fg:w="42"/><text x="47.4386%" y="6639.50"></text></g><g><title>`0x7FF97E62D51D (34 samples, 0.01%)</title><rect x="47.2319%" y="6629" width="0.0121%" height="15" fill="rgb(214,205,45)" fg:x="132177" fg:w="34"/><text x="47.4819%" y="6639.50"></text></g><g><title>`0x7FF97E62D5E2 (84 samples, 0.03%)</title><rect x="47.2708%" y="6629" width="0.0300%" height="15" fill="rgb(241,20,18)" fg:x="132286" fg:w="84"/><text x="47.5208%" y="6639.50"></text></g><g><title>`0x7FF97E62D68A (69 samples, 0.02%)</title><rect x="47.3069%" y="6629" width="0.0247%" height="15" fill="rgb(232,163,23)" fg:x="132387" fg:w="69"/><text x="47.5569%" y="6639.50"></text></g><g><title>`0x7FF97E62D6C7 (61 samples, 0.02%)</title><rect x="47.3459%" y="6629" width="0.0218%" height="15" fill="rgb(214,5,46)" fg:x="132496" fg:w="61"/><text x="47.5959%" y="6639.50"></text></g><g><title>`0x7FF97E62D723 (38 samples, 0.01%)</title><rect x="47.3795%" y="6629" width="0.0136%" height="15" fill="rgb(229,78,17)" fg:x="132590" fg:w="38"/><text x="47.6295%" y="6639.50"></text></g><g><title>`0x7FF97E62CC9A (682 samples, 0.24%)</title><rect x="47.1815%" y="6645" width="0.2437%" height="15" fill="rgb(248,89,10)" fg:x="132036" fg:w="682"/><text x="47.4315%" y="6655.50"></text></g><g><title>`0x7FF97E62CCC1 (38 samples, 0.01%)</title><rect x="47.4270%" y="6645" width="0.0136%" height="15" fill="rgb(248,54,15)" fg:x="132723" fg:w="38"/><text x="47.6770%" y="6655.50"></text></g><g><title>`0x7FF97E62CCF8 (44 samples, 0.02%)</title><rect x="47.4416%" y="6645" width="0.0157%" height="15" fill="rgb(223,116,6)" fg:x="132764" fg:w="44"/><text x="47.6916%" y="6655.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (1,508 samples, 0.54%)</title><rect x="46.9564%" y="6709" width="0.5389%" height="15" fill="rgb(205,125,38)" fg:x="131406" fg:w="1508"/><text x="47.2064%" y="6719.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (1,508 samples, 0.54%)</title><rect x="46.9564%" y="6693" width="0.5389%" height="15" fill="rgb(251,78,38)" fg:x="131406" fg:w="1508"/><text x="47.2064%" y="6703.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (1,508 samples, 0.54%)</title><rect x="46.9564%" y="6677" width="0.5389%" height="15" fill="rgb(253,78,28)" fg:x="131406" fg:w="1508"/><text x="47.2064%" y="6687.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (1,508 samples, 0.54%)</title><rect x="46.9564%" y="6661" width="0.5389%" height="15" fill="rgb(209,120,3)" fg:x="131406" fg:w="1508"/><text x="47.2064%" y="6671.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::process_heap_alloc (38 samples, 0.01%)</title><rect x="47.4817%" y="6645" width="0.0136%" height="15" fill="rgb(238,229,9)" fg:x="132876" fg:w="38"/><text x="47.7317%" y="6655.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$&lt;tuple$ (2,332 samples, 0.83%)</title><rect x="46.6669%" y="6741" width="0.8333%" height="15" fill="rgb(253,159,18)" fg:x="130596" fg:w="2332"/><text x="46.9169%" y="6751.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$&lt;tuple$ (2,332 samples, 0.83%)</title><rect x="46.6669%" y="6725" width="0.8333%" height="15" fill="rgb(244,42,34)" fg:x="130596" fg:w="2332"/><text x="46.9169%" y="6735.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$11::clone(alloc::vec::Vec&lt;tuple$ (2,344 samples, 0.84%)</title><rect x="46.6630%" y="6773" width="0.8376%" height="15" fill="rgb(224,8,7)" fg:x="130585" fg:w="2344"/><text x="46.9130%" y="6783.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (2,344 samples, 0.84%)</title><rect x="46.6630%" y="6757" width="0.8376%" height="15" fill="rgb(210,201,45)" fg:x="130585" fg:w="2344"/><text x="46.9130%" y="6767.50"></text></g><g><title>neural_network.exe`core::cmp::impls::impl$21::eq (48 samples, 0.02%)</title><rect x="47.5449%" y="6757" width="0.0172%" height="15" fill="rgb(252,185,21)" fg:x="133053" fg:w="48"/><text x="47.7949%" y="6767.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (1,855 samples, 0.66%)</title><rect x="47.5621%" y="6757" width="0.6629%" height="15" fill="rgb(223,131,1)" fg:x="133101" fg:w="1855"/><text x="47.8121%" y="6767.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (1,855 samples, 0.66%)</title><rect x="47.5621%" y="6741" width="0.6629%" height="15" fill="rgb(245,141,16)" fg:x="133101" fg:w="1855"/><text x="47.8121%" y="6751.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (184 samples, 0.07%)</title><rect x="48.1592%" y="6725" width="0.0658%" height="15" fill="rgb(229,55,45)" fg:x="134772" fg:w="184"/><text x="48.4092%" y="6735.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (34 samples, 0.01%)</title><rect x="48.2249%" y="6741" width="0.0121%" height="15" fill="rgb(208,92,15)" fg:x="134956" fg:w="34"/><text x="48.4749%" y="6751.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (34 samples, 0.01%)</title><rect x="48.2249%" y="6725" width="0.0121%" height="15" fill="rgb(234,185,47)" fg:x="134956" fg:w="34"/><text x="48.4749%" y="6735.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (34 samples, 0.01%)</title><rect x="48.2249%" y="6709" width="0.0121%" height="15" fill="rgb(253,104,50)" fg:x="134956" fg:w="34"/><text x="48.4749%" y="6719.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (34 samples, 0.01%)</title><rect x="48.2249%" y="6693" width="0.0121%" height="15" fill="rgb(205,70,7)" fg:x="134956" fg:w="34"/><text x="48.4749%" y="6703.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$ (2,518 samples, 0.90%)</title><rect x="47.5006%" y="6773" width="0.8998%" height="15" fill="rgb(240,178,43)" fg:x="132929" fg:w="2518"/><text x="47.7506%" y="6783.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;tuple$ (491 samples, 0.18%)</title><rect x="48.2249%" y="6757" width="0.1755%" height="15" fill="rgb(214,112,2)" fg:x="134956" fg:w="491"/><text x="48.4749%" y="6767.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;tuple$ (457 samples, 0.16%)</title><rect x="48.2371%" y="6741" width="0.1633%" height="15" fill="rgb(206,46,17)" fg:x="134990" fg:w="457"/><text x="48.4871%" y="6751.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (49 samples, 0.02%)</title><rect x="48.4004%" y="6741" width="0.0175%" height="15" fill="rgb(225,220,16)" fg:x="135447" fg:w="49"/><text x="48.6504%" y="6751.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (49 samples, 0.02%)</title><rect x="48.4004%" y="6725" width="0.0175%" height="15" fill="rgb(238,65,40)" fg:x="135447" fg:w="49"/><text x="48.6504%" y="6735.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (49 samples, 0.02%)</title><rect x="48.4004%" y="6709" width="0.0175%" height="15" fill="rgb(230,151,21)" fg:x="135447" fg:w="49"/><text x="48.6504%" y="6719.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (49 samples, 0.02%)</title><rect x="48.4004%" y="6693" width="0.0175%" height="15" fill="rgb(218,58,49)" fg:x="135447" fg:w="49"/><text x="48.6504%" y="6703.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (84 samples, 0.03%)</title><rect x="48.4004%" y="6757" width="0.0300%" height="15" fill="rgb(219,179,14)" fg:x="135447" fg:w="84"/><text x="48.6504%" y="6767.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;tuple$ (35 samples, 0.01%)</title><rect x="48.4179%" y="6741" width="0.0125%" height="15" fill="rgb(223,72,1)" fg:x="135496" fg:w="35"/><text x="48.6679%" y="6751.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, core::ops::range::Range (2,196 samples, 0.78%)</title><rect x="48.4004%" y="6773" width="0.7847%" height="15" fill="rgb(238,126,10)" fg:x="135447" fg:w="2196"/><text x="48.6504%" y="6783.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (2,112 samples, 0.75%)</title><rect x="48.4304%" y="6757" width="0.7547%" height="15" fill="rgb(224,206,38)" fg:x="135531" fg:w="2112"/><text x="48.6804%" y="6767.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (2,112 samples, 0.75%)</title><rect x="48.4304%" y="6741" width="0.7547%" height="15" fill="rgb(212,201,54)" fg:x="135531" fg:w="2112"/><text x="48.6804%" y="6751.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (245 samples, 0.09%)</title><rect x="49.0975%" y="6725" width="0.0875%" height="15" fill="rgb(218,154,48)" fg:x="137398" fg:w="245"/><text x="49.3475%" y="6735.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (60 samples, 0.02%)</title><rect x="49.1637%" y="6709" width="0.0214%" height="15" fill="rgb(232,93,24)" fg:x="137583" fg:w="60"/><text x="49.4137%" y="6719.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (60 samples, 0.02%)</title><rect x="49.1637%" y="6693" width="0.0214%" height="15" fill="rgb(245,30,21)" fg:x="137583" fg:w="60"/><text x="49.4137%" y="6703.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (60 samples, 0.02%)</title><rect x="49.1637%" y="6677" width="0.0214%" height="15" fill="rgb(242,148,29)" fg:x="137583" fg:w="60"/><text x="49.4137%" y="6687.50"></text></g><g><title>`0x7FF97E62AFA5 (83 samples, 0.03%)</title><rect x="49.2030%" y="6677" width="0.0297%" height="15" fill="rgb(244,153,54)" fg:x="137693" fg:w="83"/><text x="49.4530%" y="6687.50"></text></g><g><title>`0x7FF97E62AFBA (143 samples, 0.05%)</title><rect x="49.2333%" y="6677" width="0.0511%" height="15" fill="rgb(252,87,22)" fg:x="137778" fg:w="143"/><text x="49.4833%" y="6687.50"></text></g><g><title>`0x7FF97E62AFE0 (212 samples, 0.08%)</title><rect x="49.2859%" y="6677" width="0.0758%" height="15" fill="rgb(210,51,29)" fg:x="137925" fg:w="212"/><text x="49.5359%" y="6687.50"></text></g><g><title>`0x7FF97E62BB70 (237 samples, 0.08%)</title><rect x="49.3641%" y="6661" width="0.0847%" height="15" fill="rgb(242,136,47)" fg:x="138144" fg:w="237"/><text x="49.6141%" y="6671.50"></text></g><g><title>`0x7FF97E62BB84 (250 samples, 0.09%)</title><rect x="49.4495%" y="6661" width="0.0893%" height="15" fill="rgb(238,68,4)" fg:x="138383" fg:w="250"/><text x="49.6995%" y="6671.50"></text></g><g><title>`0x7FF97E62C2B1 (264 samples, 0.09%)</title><rect x="49.5428%" y="6661" width="0.0943%" height="15" fill="rgb(242,161,30)" fg:x="138644" fg:w="264"/><text x="49.7928%" y="6671.50"></text></g><g><title>`0x7FF97E62C337 (31 samples, 0.01%)</title><rect x="49.6396%" y="6661" width="0.0111%" height="15" fill="rgb(218,58,44)" fg:x="138915" fg:w="31"/><text x="49.8896%" y="6671.50"></text></g><g><title>`0x7FF97E62C38A (230 samples, 0.08%)</title><rect x="49.6632%" y="6661" width="0.0822%" height="15" fill="rgb(252,125,32)" fg:x="138981" fg:w="230"/><text x="49.9132%" y="6671.50"></text></g><g><title>`0x7FF97E69CB43 (156 samples, 0.06%)</title><rect x="49.7454%" y="6661" width="0.0557%" height="15" fill="rgb(219,178,0)" fg:x="139211" fg:w="156"/><text x="49.9954%" y="6671.50"></text></g><g><title>`0x7FF97E69CB6A (74 samples, 0.03%)</title><rect x="49.8072%" y="6661" width="0.0264%" height="15" fill="rgb(213,152,7)" fg:x="139384" fg:w="74"/><text x="50.0572%" y="6671.50"></text></g><g><title>`0x7FF97E69CB8E (33 samples, 0.01%)</title><rect x="49.8365%" y="6661" width="0.0118%" height="15" fill="rgb(249,109,34)" fg:x="139466" fg:w="33"/><text x="50.0865%" y="6671.50"></text></g><g><title>`0x7FF97E62AFF1 (1,530 samples, 0.55%)</title><rect x="49.3620%" y="6677" width="0.5467%" height="15" fill="rgb(232,96,21)" fg:x="138138" fg:w="1530"/><text x="49.6120%" y="6687.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (2,015 samples, 0.72%)</title><rect x="49.2019%" y="6709" width="0.7200%" height="15" fill="rgb(228,27,39)" fg:x="137690" fg:w="2015"/><text x="49.4519%" y="6719.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (2,015 samples, 0.72%)</title><rect x="49.2019%" y="6693" width="0.7200%" height="15" fill="rgb(211,182,52)" fg:x="137690" fg:w="2015"/><text x="49.4519%" y="6703.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (34 samples, 0.01%)</title><rect x="49.9098%" y="6677" width="0.0121%" height="15" fill="rgb(234,178,38)" fg:x="139671" fg:w="34"/><text x="50.1598%" y="6687.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::dealloc (34 samples, 0.01%)</title><rect x="49.9098%" y="6661" width="0.0121%" height="15" fill="rgb(221,111,3)" fg:x="139671" fg:w="34"/><text x="50.1598%" y="6671.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;tuple$ (2,089 samples, 0.75%)</title><rect x="49.1872%" y="6773" width="0.7465%" height="15" fill="rgb(228,175,21)" fg:x="137649" fg:w="2089"/><text x="49.4372%" y="6783.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (2,089 samples, 0.75%)</title><rect x="49.1872%" y="6757" width="0.7465%" height="15" fill="rgb(228,174,43)" fg:x="137649" fg:w="2089"/><text x="49.4372%" y="6767.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (2,089 samples, 0.75%)</title><rect x="49.1872%" y="6741" width="0.7465%" height="15" fill="rgb(211,191,0)" fg:x="137649" fg:w="2089"/><text x="49.4372%" y="6751.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (2,048 samples, 0.73%)</title><rect x="49.2019%" y="6725" width="0.7318%" height="15" fill="rgb(253,117,3)" fg:x="137690" fg:w="2048"/><text x="49.4519%" y="6735.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::current_memory (33 samples, 0.01%)</title><rect x="49.9219%" y="6709" width="0.0118%" height="15" fill="rgb(241,127,19)" fg:x="139705" fg:w="33"/><text x="50.1719%" y="6719.50"></text></g><g><title>neural_network.exe`core::num::impl$11::unchecked_mul (33 samples, 0.01%)</title><rect x="49.9219%" y="6693" width="0.0118%" height="15" fill="rgb(218,103,12)" fg:x="139705" fg:w="33"/><text x="50.1719%" y="6703.50"></text></g><g><title>neural_network.exe`core::iter::adapters::rev::impl$1::next(core::iter::adapters::rev::Rev&lt;core::ops::range::Range (35 samples, 0.01%)</title><rect x="49.9391%" y="6677" width="0.0125%" height="15" fill="rgb(236,214,43)" fg:x="139753" fg:w="35"/><text x="50.1891%" y="6687.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$7::next_back(core::ops::range::Range (35 samples, 0.01%)</title><rect x="49.9391%" y="6661" width="0.0125%" height="15" fill="rgb(244,144,19)" fg:x="139753" fg:w="35"/><text x="50.1891%" y="6671.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$5::spec_next_back(core::ops::range::Range (35 samples, 0.01%)</title><rect x="49.9391%" y="6645" width="0.0125%" height="15" fill="rgb(246,188,10)" fg:x="139753" fg:w="35"/><text x="50.1891%" y="6655.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy(tuple$&lt;usize,usize&gt;*, tuple$ (52 samples, 0.02%)</title><rect x="49.9770%" y="6645" width="0.0186%" height="15" fill="rgb(212,193,33)" fg:x="139859" fg:w="52"/><text x="50.2270%" y="6655.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::swap(ref_mut$&lt;slice2$&lt;tuple$ (198 samples, 0.07%)</title><rect x="49.9516%" y="6677" width="0.0708%" height="15" fill="rgb(241,51,29)" fg:x="139788" fg:w="198"/><text x="50.2016%" y="6687.50"></text></g><g><title>neural_network.exe`core::ptr::swap(tuple$&lt;usize,usize&gt;*, tuple$ (127 samples, 0.05%)</title><rect x="49.9770%" y="6661" width="0.0454%" height="15" fill="rgb(211,58,19)" fg:x="139859" fg:w="127"/><text x="50.2270%" y="6671.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping(tuple$&lt;usize,usize&gt;*, tuple$ (75 samples, 0.03%)</title><rect x="49.9955%" y="6645" width="0.0268%" height="15" fill="rgb(229,111,26)" fg:x="139911" fg:w="75"/><text x="50.2455%" y="6655.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::round(rand_chacha::guts::State&lt;ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (68 samples, 0.02%)</title><rect x="50.1127%" y="6405" width="0.0243%" height="15" fill="rgb(213,115,40)" fg:x="140239" fg:w="68"/><text x="50.3627%" y="6415.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide::impl_avx2 (86 samples, 0.03%)</title><rect x="50.1081%" y="6453" width="0.0307%" height="15" fill="rgb(209,56,44)" fg:x="140226" fg:w="86"/><text x="50.3581%" y="6463.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide::fn_impl(ppv_lite86::x86_64::Avx2Machine (86 samples, 0.03%)</title><rect x="50.1081%" y="6437" width="0.0307%" height="15" fill="rgb(230,108,32)" fg:x="140226" fg:w="86"/><text x="50.3581%" y="6447.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide_impl(ppv_lite86::x86_64::Avx2Machine (86 samples, 0.03%)</title><rect x="50.1081%" y="6421" width="0.0307%" height="15" fill="rgb(216,165,31)" fg:x="140226" fg:w="86"/><text x="50.3581%" y="6431.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place (577 samples, 0.21%)</title><rect x="49.9337%" y="6773" width="0.2062%" height="15" fill="rgb(218,122,21)" fg:x="139738" fg:w="577"/><text x="50.1837%" y="6783.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (577 samples, 0.21%)</title><rect x="49.9337%" y="6757" width="0.2062%" height="15" fill="rgb(223,224,47)" fg:x="139738" fg:w="577"/><text x="50.1837%" y="6767.50"></text></g><g><title>neural_network.exe`alloc::rc::impl$30::drop(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (577 samples, 0.21%)</title><rect x="49.9337%" y="6741" width="0.2062%" height="15" fill="rgb(238,102,44)" fg:x="139738" fg:w="577"/><text x="50.1837%" y="6751.50"></text></g><g><title>neural_network.exe`alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;::inner (575 samples, 0.21%)</title><rect x="49.9344%" y="6725" width="0.2055%" height="15" fill="rgb(236,46,40)" fg:x="139740" fg:w="575"/><text x="50.1844%" y="6735.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;alloc::rc::RcBox&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt; &gt; &gt;::as_ref (575 samples, 0.21%)</title><rect x="49.9344%" y="6709" width="0.2055%" height="15" fill="rgb(247,202,50)" fg:x="139740" fg:w="575"/><text x="50.1844%" y="6719.50"></text></g><g><title>neural_network.exe`rand::seq::impl$0::shuffle&lt;tuple$&lt;usize,usize&gt;,rand::rngs::thread::ThreadRng&gt;(ref_mut$&lt;slice2$&lt;tuple$ (575 samples, 0.21%)</title><rect x="49.9344%" y="6693" width="0.2055%" height="15" fill="rgb(209,99,20)" fg:x="139740" fg:w="575"/><text x="50.1844%" y="6703.50"></text></g><g><title>neural_network.exe`rand::seq::gen_index (329 samples, 0.12%)</title><rect x="50.0223%" y="6677" width="0.1176%" height="15" fill="rgb(252,27,34)" fg:x="139986" fg:w="329"/><text x="50.2723%" y="6687.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen_range(rand::rngs::thread::ThreadRng*, core::ops::range::Range (328 samples, 0.12%)</title><rect x="50.0227%" y="6661" width="0.1172%" height="15" fill="rgb(215,206,23)" fg:x="139987" fg:w="328"/><text x="50.2727%" y="6671.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$6::sample_single(core::ops::range::Range (328 samples, 0.12%)</title><rect x="50.0227%" y="6645" width="0.1172%" height="15" fill="rgb(212,135,36)" fg:x="139987" fg:w="328"/><text x="50.2727%" y="6655.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single (328 samples, 0.12%)</title><rect x="50.0227%" y="6629" width="0.1172%" height="15" fill="rgb(240,189,1)" fg:x="139987" fg:w="328"/><text x="50.2727%" y="6639.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single_inclusive (328 samples, 0.12%)</title><rect x="50.0227%" y="6613" width="0.1172%" height="15" fill="rgb(242,56,20)" fg:x="139987" fg:w="328"/><text x="50.2727%" y="6623.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen (261 samples, 0.09%)</title><rect x="50.0466%" y="6597" width="0.0933%" height="15" fill="rgb(247,132,33)" fg:x="140054" fg:w="261"/><text x="50.2966%" y="6607.50"></text></g><g><title>neural_network.exe`rand::distributions::integer::impl$2::sample (261 samples, 0.09%)</title><rect x="50.0466%" y="6581" width="0.0933%" height="15" fill="rgb(208,149,11)" fg:x="140054" fg:w="261"/><text x="50.2966%" y="6591.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::impl$1::next_u32 (261 samples, 0.09%)</title><rect x="50.0466%" y="6565" width="0.0933%" height="15" fill="rgb(211,33,11)" fg:x="140054" fg:w="261"/><text x="50.2966%" y="6575.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$1::next_u32(rand::rngs::adapter::reseeding::ReseedingRng (261 samples, 0.09%)</title><rect x="50.0466%" y="6549" width="0.0933%" height="15" fill="rgb(221,29,38)" fg:x="140054" fg:w="261"/><text x="50.2966%" y="6559.50"></text></g><g><title>neural_network.exe`rand_core::block::impl$2::next_u32(rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore (261 samples, 0.09%)</title><rect x="50.0466%" y="6533" width="0.0933%" height="15" fill="rgb(206,182,49)" fg:x="140054" fg:w="261"/><text x="50.2966%" y="6543.50"></text></g><g><title>neural_network.exe`rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;::generate_and_set (100 samples, 0.04%)</title><rect x="50.1042%" y="6517" width="0.0357%" height="15" fill="rgb(216,140,1)" fg:x="140215" fg:w="100"/><text x="50.3542%" y="6527.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$4::generate(rand::rngs::adapter::reseeding::ReseedingCore&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt;*, rand_chacha::chacha::Array64 (100 samples, 0.04%)</title><rect x="50.1042%" y="6501" width="0.0357%" height="15" fill="rgb(232,57,40)" fg:x="140215" fg:w="100"/><text x="50.3542%" y="6511.50"></text></g><g><title>neural_network.exe`rand_chacha::chacha::impl$23::generate(rand_chacha::chacha::ChaCha12Core*, rand_chacha::chacha::Array64 (93 samples, 0.03%)</title><rect x="50.1067%" y="6485" width="0.0332%" height="15" fill="rgb(224,186,18)" fg:x="140222" fg:w="93"/><text x="50.3567%" y="6495.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::ChaCha::refill4 (93 samples, 0.03%)</title><rect x="50.1067%" y="6469" width="0.0332%" height="15" fill="rgb(215,121,11)" fg:x="140222" fg:w="93"/><text x="50.3567%" y="6479.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::contains(ref$&lt;slice2$&lt;tuple$&lt;usize,usize&gt; &gt; &gt;, tuple$ (937 samples, 0.33%)</title><rect x="50.1399%" y="6773" width="0.3348%" height="15" fill="rgb(245,147,10)" fg:x="140315" fg:w="937"/><text x="50.3899%" y="6783.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (937 samples, 0.33%)</title><rect x="50.1399%" y="6757" width="0.3348%" height="15" fill="rgb(238,153,13)" fg:x="140315" fg:w="937"/><text x="50.3899%" y="6767.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (937 samples, 0.33%)</title><rect x="50.1399%" y="6741" width="0.3348%" height="15" fill="rgb(233,108,0)" fg:x="140315" fg:w="937"/><text x="50.3899%" y="6751.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (117 samples, 0.04%)</title><rect x="50.4329%" y="6725" width="0.0418%" height="15" fill="rgb(212,157,17)" fg:x="141135" fg:w="117"/><text x="50.6829%" y="6735.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (51 samples, 0.02%)</title><rect x="50.4565%" y="6709" width="0.0182%" height="15" fill="rgb(225,213,38)" fg:x="141201" fg:w="51"/><text x="50.7065%" y="6719.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (51 samples, 0.02%)</title><rect x="50.4565%" y="6693" width="0.0182%" height="15" fill="rgb(248,16,11)" fg:x="141201" fg:w="51"/><text x="50.7065%" y="6703.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (51 samples, 0.02%)</title><rect x="50.4565%" y="6677" width="0.0182%" height="15" fill="rgb(241,33,4)" fg:x="141201" fg:w="51"/><text x="50.7065%" y="6687.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (343 samples, 0.12%)</title><rect x="50.4747%" y="6773" width="0.1226%" height="15" fill="rgb(222,26,43)" fg:x="141252" fg:w="343"/><text x="50.7247%" y="6783.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (94 samples, 0.03%)</title><rect x="50.5637%" y="6757" width="0.0336%" height="15" fill="rgb(243,29,36)" fg:x="141501" fg:w="94"/><text x="50.8137%" y="6767.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (94 samples, 0.03%)</title><rect x="50.5637%" y="6741" width="0.0336%" height="15" fill="rgb(241,9,27)" fg:x="141501" fg:w="94"/><text x="50.8137%" y="6751.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (94 samples, 0.03%)</title><rect x="50.5637%" y="6725" width="0.0336%" height="15" fill="rgb(205,117,26)" fg:x="141501" fg:w="94"/><text x="50.8137%" y="6735.50"></text></g><g><title>`0x7FF97E62BB7F (28 samples, 0.01%)</title><rect x="50.7599%" y="6709" width="0.0100%" height="15" fill="rgb(209,80,39)" fg:x="142050" fg:w="28"/><text x="51.0099%" y="6719.50"></text></g><g><title>`0x7FF97E69CB70 (38 samples, 0.01%)</title><rect x="50.8206%" y="6709" width="0.0136%" height="15" fill="rgb(239,155,6)" fg:x="142220" fg:w="38"/><text x="51.0706%" y="6719.50"></text></g><g><title>`0x7FF97E69CB81 (32 samples, 0.01%)</title><rect x="50.8381%" y="6709" width="0.0114%" height="15" fill="rgb(212,104,12)" fg:x="142269" fg:w="32"/><text x="51.0881%" y="6719.50"></text></g><g><title>`0x7FF97E69CB9D (28 samples, 0.01%)</title><rect x="50.8585%" y="6709" width="0.0100%" height="15" fill="rgb(234,204,3)" fg:x="142326" fg:w="28"/><text x="51.1085%" y="6719.50"></text></g><g><title>`0x7FF97E69CBBC (46 samples, 0.02%)</title><rect x="50.8964%" y="6709" width="0.0164%" height="15" fill="rgb(251,218,7)" fg:x="142432" fg:w="46"/><text x="51.1464%" y="6719.50"></text></g><g><title>`0x7FF97E69CC6F (87 samples, 0.03%)</title><rect x="50.9253%" y="6709" width="0.0311%" height="15" fill="rgb(221,81,32)" fg:x="142513" fg:w="87"/><text x="51.1753%" y="6719.50"></text></g><g><title>`0x7FF97E69CCAF (32 samples, 0.01%)</title><rect x="50.9607%" y="6709" width="0.0114%" height="15" fill="rgb(214,152,26)" fg:x="142612" fg:w="32"/><text x="51.2107%" y="6719.50"></text></g><g><title>`0x7FF97E69CD55 (107 samples, 0.04%)</title><rect x="50.9836%" y="6709" width="0.0382%" height="15" fill="rgb(223,22,3)" fg:x="142676" fg:w="107"/><text x="51.2336%" y="6719.50"></text></g><g><title>`0x7FF97E69CD6B (88 samples, 0.03%)</title><rect x="51.0222%" y="6709" width="0.0314%" height="15" fill="rgb(207,174,7)" fg:x="142784" fg:w="88"/><text x="51.2722%" y="6719.50"></text></g><g><title>`0x7FF97E637A93 (44 samples, 0.02%)</title><rect x="51.0640%" y="6693" width="0.0157%" height="15" fill="rgb(224,19,52)" fg:x="142901" fg:w="44"/><text x="51.3140%" y="6703.50"></text></g><g><title>`0x7FF97E693D8A (42 samples, 0.02%)</title><rect x="51.0647%" y="6677" width="0.0150%" height="15" fill="rgb(228,24,14)" fg:x="142903" fg:w="42"/><text x="51.3147%" y="6687.50"></text></g><g><title>`0x7FF97E69CE16 (69 samples, 0.02%)</title><rect x="51.0583%" y="6709" width="0.0247%" height="15" fill="rgb(230,153,43)" fg:x="142885" fg:w="69"/><text x="51.3083%" y="6719.50"></text></g><g><title>`0x7FF97E62AFF1 (1,029 samples, 0.37%)</title><rect x="50.7474%" y="6725" width="0.3677%" height="15" fill="rgb(231,106,12)" fg:x="142015" fg:w="1029"/><text x="50.9974%" y="6735.50"></text></g><g><title>`0x7FF97E62D57C (110 samples, 0.04%)</title><rect x="51.3270%" y="6501" width="0.0393%" height="15" fill="rgb(215,92,2)" fg:x="143637" fg:w="110"/><text x="51.5770%" y="6511.50"></text></g><g><title>`0x7FF97E62D588 (31 samples, 0.01%)</title><rect x="51.3663%" y="6501" width="0.0111%" height="15" fill="rgb(249,143,25)" fg:x="143747" fg:w="31"/><text x="51.6163%" y="6511.50"></text></g><g><title>`0x7FF97E62D66D (29 samples, 0.01%)</title><rect x="51.3988%" y="6501" width="0.0104%" height="15" fill="rgb(252,7,35)" fg:x="143838" fg:w="29"/><text x="51.6488%" y="6511.50"></text></g><g><title>`0x7FF97E68F861 (44 samples, 0.02%)</title><rect x="51.4127%" y="6485" width="0.0157%" height="15" fill="rgb(216,69,40)" fg:x="143877" fg:w="44"/><text x="51.6627%" y="6495.50"></text></g><g><title>`0x7FF97E68F87F (29 samples, 0.01%)</title><rect x="51.4302%" y="6485" width="0.0104%" height="15" fill="rgb(240,36,33)" fg:x="143926" fg:w="29"/><text x="51.6802%" y="6495.50"></text></g><g><title>`0x7FF97E68F8EE (29 samples, 0.01%)</title><rect x="51.4420%" y="6485" width="0.0104%" height="15" fill="rgb(231,128,14)" fg:x="143959" fg:w="29"/><text x="51.6920%" y="6495.50"></text></g><g><title>`0x7FF97E68F908 (29 samples, 0.01%)</title><rect x="51.4542%" y="6485" width="0.0104%" height="15" fill="rgb(245,143,14)" fg:x="143993" fg:w="29"/><text x="51.7042%" y="6495.50"></text></g><g><title>`0x7FF97E62D68A (207 samples, 0.07%)</title><rect x="51.4092%" y="6501" width="0.0740%" height="15" fill="rgb(222,130,28)" fg:x="143867" fg:w="207"/><text x="51.6592%" y="6511.50"></text></g><g><title>`0x7FF97E62D6A8 (29 samples, 0.01%)</title><rect x="51.4939%" y="6501" width="0.0104%" height="15" fill="rgb(212,10,48)" fg:x="144104" fg:w="29"/><text x="51.7439%" y="6511.50"></text></g><g><title>`0x7FF97E62D6C7 (30 samples, 0.01%)</title><rect x="51.5049%" y="6501" width="0.0107%" height="15" fill="rgb(254,118,45)" fg:x="144135" fg:w="30"/><text x="51.7549%" y="6511.50"></text></g><g><title>`0x7FF97E62D723 (38 samples, 0.01%)</title><rect x="51.5332%" y="6501" width="0.0136%" height="15" fill="rgb(228,6,45)" fg:x="144214" fg:w="38"/><text x="51.7832%" y="6511.50"></text></g><g><title>`0x7FF97E62DA96 (61 samples, 0.02%)</title><rect x="51.5707%" y="6501" width="0.0218%" height="15" fill="rgb(241,18,35)" fg:x="144319" fg:w="61"/><text x="51.8207%" y="6511.50"></text></g><g><title>`0x7FF97E65354E (73 samples, 0.03%)</title><rect x="51.6207%" y="6485" width="0.0261%" height="15" fill="rgb(227,214,53)" fg:x="144459" fg:w="73"/><text x="51.8707%" y="6495.50"></text></g><g><title>`0x7FF97E693D45 (67 samples, 0.02%)</title><rect x="51.6229%" y="6469" width="0.0239%" height="15" fill="rgb(224,107,51)" fg:x="144465" fg:w="67"/><text x="51.8729%" y="6479.50"></text></g><g><title>`0x7FF97E62DB41 (137 samples, 0.05%)</title><rect x="51.6093%" y="6501" width="0.0490%" height="15" fill="rgb(248,60,28)" fg:x="144427" fg:w="137"/><text x="51.8593%" y="6511.50"></text></g><g><title>`0x7FF97E631990 (72 samples, 0.03%)</title><rect x="51.6872%" y="6485" width="0.0257%" height="15" fill="rgb(249,101,23)" fg:x="144645" fg:w="72"/><text x="51.9372%" y="6495.50"></text></g><g><title>`0x7FF97E631A59 (47 samples, 0.02%)</title><rect x="51.7197%" y="6485" width="0.0168%" height="15" fill="rgb(228,51,19)" fg:x="144736" fg:w="47"/><text x="51.9697%" y="6495.50"></text></g><g><title>`0x7FF97E631AD7 (49 samples, 0.02%)</title><rect x="51.7408%" y="6485" width="0.0175%" height="15" fill="rgb(213,20,6)" fg:x="144795" fg:w="49"/><text x="51.9908%" y="6495.50"></text></g><g><title>`0x7FF97E631B14 (49 samples, 0.02%)</title><rect x="51.7611%" y="6485" width="0.0175%" height="15" fill="rgb(212,124,10)" fg:x="144852" fg:w="49"/><text x="52.0111%" y="6495.50"></text></g><g><title>`0x7FF97E631C86 (58 samples, 0.02%)</title><rect x="51.7787%" y="6469" width="0.0207%" height="15" fill="rgb(248,3,40)" fg:x="144901" fg:w="58"/><text x="52.0287%" y="6479.50"></text></g><g><title>`0x7FF97E631CA3 (98 samples, 0.04%)</title><rect x="51.7994%" y="6469" width="0.0350%" height="15" fill="rgb(223,178,23)" fg:x="144959" fg:w="98"/><text x="52.0494%" y="6479.50"></text></g><g><title>`0x7FF97E631B1F (158 samples, 0.06%)</title><rect x="51.7787%" y="6485" width="0.0565%" height="15" fill="rgb(240,132,45)" fg:x="144901" fg:w="158"/><text x="52.0287%" y="6495.50"></text></g><g><title>`0x7FF97E62DBBF (465 samples, 0.17%)</title><rect x="51.6704%" y="6501" width="0.1662%" height="15" fill="rgb(245,164,36)" fg:x="144598" fg:w="465"/><text x="51.9204%" y="6511.50"></text></g><g><title>`0x7FF97E62DBDD (215 samples, 0.08%)</title><rect x="51.8365%" y="6501" width="0.0768%" height="15" fill="rgb(231,188,53)" fg:x="145063" fg:w="215"/><text x="52.0865%" y="6511.50"></text></g><g><title>`0x7FF97E62CC9A (1,660 samples, 0.59%)</title><rect x="51.3241%" y="6517" width="0.5932%" height="15" fill="rgb(237,198,39)" fg:x="143629" fg:w="1660"/><text x="51.5741%" y="6527.50"></text></g><g><title>`0x7FF97E62CCC1 (52 samples, 0.02%)</title><rect x="51.9194%" y="6517" width="0.0186%" height="15" fill="rgb(223,120,35)" fg:x="145295" fg:w="52"/><text x="52.1694%" y="6527.50"></text></g><g><title>`0x7FF97E62CCF8 (48 samples, 0.02%)</title><rect x="51.9395%" y="6517" width="0.0172%" height="15" fill="rgb(253,107,49)" fg:x="145351" fg:w="48"/><text x="52.1895%" y="6527.50"></text></g><g><title>`0x7FF97E63215F (31 samples, 0.01%)</title><rect x="51.9698%" y="6517" width="0.0111%" height="15" fill="rgb(216,44,31)" fg:x="145436" fg:w="31"/><text x="52.2198%" y="6527.50"></text></g><g><title>`0x7FF97E632438 (33 samples, 0.01%)</title><rect x="52.0238%" y="6485" width="0.0118%" height="15" fill="rgb(253,87,21)" fg:x="145587" fg:w="33"/><text x="52.2738%" y="6495.50"></text></g><g><title>`0x7FF97E632442 (38 samples, 0.01%)</title><rect x="52.0359%" y="6485" width="0.0136%" height="15" fill="rgb(226,18,2)" fg:x="145621" fg:w="38"/><text x="52.2859%" y="6495.50"></text></g><g><title>`0x7FF97E632447 (48 samples, 0.02%)</title><rect x="52.0495%" y="6485" width="0.0172%" height="15" fill="rgb(216,8,46)" fg:x="145659" fg:w="48"/><text x="52.2995%" y="6495.50"></text></g><g><title>`0x7FF97E63244E (38 samples, 0.01%)</title><rect x="52.0667%" y="6485" width="0.0136%" height="15" fill="rgb(226,140,39)" fg:x="145707" fg:w="38"/><text x="52.3167%" y="6495.50"></text></g><g><title>`0x7FF97E632473 (77 samples, 0.03%)</title><rect x="52.0802%" y="6485" width="0.0275%" height="15" fill="rgb(221,194,54)" fg:x="145745" fg:w="77"/><text x="52.3302%" y="6495.50"></text></g><g><title>`0x7FF97E63249F (110 samples, 0.04%)</title><rect x="52.1085%" y="6485" width="0.0393%" height="15" fill="rgb(213,92,11)" fg:x="145824" fg:w="110"/><text x="52.3585%" y="6495.50"></text></g><g><title>`0x7FF97E6324C5 (122 samples, 0.04%)</title><rect x="52.1535%" y="6485" width="0.0436%" height="15" fill="rgb(229,162,46)" fg:x="145950" fg:w="122"/><text x="52.4035%" y="6495.50"></text></g><g><title>`0x7FF97E6334DC (34 samples, 0.01%)</title><rect x="52.1971%" y="6485" width="0.0121%" height="15" fill="rgb(214,111,36)" fg:x="146072" fg:w="34"/><text x="52.4471%" y="6495.50"></text></g><g><title>`0x7FF97E633500 (44 samples, 0.02%)</title><rect x="52.2092%" y="6485" width="0.0157%" height="15" fill="rgb(207,6,21)" fg:x="146106" fg:w="44"/><text x="52.4592%" y="6495.50"></text></g><g><title>`0x7FF97E62D57C (86 samples, 0.03%)</title><rect x="52.3693%" y="6453" width="0.0307%" height="15" fill="rgb(213,127,38)" fg:x="146554" fg:w="86"/><text x="52.6193%" y="6463.50"></text></g><g><title>`0x7FF97E62D68A (104 samples, 0.04%)</title><rect x="52.4272%" y="6453" width="0.0372%" height="15" fill="rgb(238,118,32)" fg:x="146716" fg:w="104"/><text x="52.6772%" y="6463.50"></text></g><g><title>`0x7FF97E62D723 (31 samples, 0.01%)</title><rect x="52.4812%" y="6453" width="0.0111%" height="15" fill="rgb(240,139,39)" fg:x="146867" fg:w="31"/><text x="52.7312%" y="6463.50"></text></g><g><title>`0x7FF97E65354E (37 samples, 0.01%)</title><rect x="52.5226%" y="6437" width="0.0132%" height="15" fill="rgb(235,10,37)" fg:x="146983" fg:w="37"/><text x="52.7726%" y="6447.50"></text></g><g><title>`0x7FF97E693D45 (35 samples, 0.01%)</title><rect x="52.5233%" y="6421" width="0.0125%" height="15" fill="rgb(249,171,38)" fg:x="146985" fg:w="35"/><text x="52.7733%" y="6431.50"></text></g><g><title>`0x7FF97E62DB41 (44 samples, 0.02%)</title><rect x="52.5205%" y="6453" width="0.0157%" height="15" fill="rgb(242,144,32)" fg:x="146977" fg:w="44"/><text x="52.7705%" y="6463.50"></text></g><g><title>`0x7FF97E631B1F (32 samples, 0.01%)</title><rect x="52.5466%" y="6437" width="0.0114%" height="15" fill="rgb(217,117,21)" fg:x="147050" fg:w="32"/><text x="52.7966%" y="6447.50"></text></g><g><title>`0x7FF97E62DBBF (58 samples, 0.02%)</title><rect x="52.5380%" y="6453" width="0.0207%" height="15" fill="rgb(249,87,1)" fg:x="147026" fg:w="58"/><text x="52.7880%" y="6463.50"></text></g><g><title>`0x7FF97E62DBDD (43 samples, 0.02%)</title><rect x="52.5587%" y="6453" width="0.0154%" height="15" fill="rgb(248,196,48)" fg:x="147084" fg:w="43"/><text x="52.8087%" y="6463.50"></text></g><g><title>`0x7FF97E62CC9A (731 samples, 0.26%)</title><rect x="52.3139%" y="6469" width="0.2612%" height="15" fill="rgb(251,206,33)" fg:x="146399" fg:w="731"/><text x="52.5639%" y="6479.50"></text></g><g><title>`0x7FF97E62CCC1 (59 samples, 0.02%)</title><rect x="52.5752%" y="6469" width="0.0211%" height="15" fill="rgb(232,141,28)" fg:x="147130" fg:w="59"/><text x="52.8252%" y="6479.50"></text></g><g><title>`0x7FF97E62CCF8 (47 samples, 0.02%)</title><rect x="52.5966%" y="6469" width="0.0168%" height="15" fill="rgb(209,167,14)" fg:x="147190" fg:w="47"/><text x="52.8466%" y="6479.50"></text></g><g><title>`0x7FF97E633505 (1,090 samples, 0.39%)</title><rect x="52.2250%" y="6485" width="0.3895%" height="15" fill="rgb(225,11,50)" fg:x="146150" fg:w="1090"/><text x="52.4750%" y="6495.50"></text></g><g><title>`0x7FF97E696B96 (501 samples, 0.18%)</title><rect x="52.6241%" y="6469" width="0.1790%" height="15" fill="rgb(209,50,20)" fg:x="147267" fg:w="501"/><text x="52.8741%" y="6479.50"></text></g><g><title>`0x7FF97E696C00 (46 samples, 0.02%)</title><rect x="52.8064%" y="6469" width="0.0164%" height="15" fill="rgb(212,17,46)" fg:x="147777" fg:w="46"/><text x="53.0564%" y="6479.50"></text></g><g><title>`0x7FF97E696C13 (44 samples, 0.02%)</title><rect x="52.8274%" y="6469" width="0.0157%" height="15" fill="rgb(216,101,39)" fg:x="147836" fg:w="44"/><text x="53.0774%" y="6479.50"></text></g><g><title>`0x7FF97E696C22 (79 samples, 0.03%)</title><rect x="52.8542%" y="6469" width="0.0282%" height="15" fill="rgb(212,228,48)" fg:x="147911" fg:w="79"/><text x="53.1042%" y="6479.50"></text></g><g><title>`0x7FF97E633550 (781 samples, 0.28%)</title><rect x="52.6163%" y="6485" width="0.2791%" height="15" fill="rgb(250,6,50)" fg:x="147245" fg:w="781"/><text x="52.8663%" y="6495.50"></text></g><g><title>`0x7FF97E69CC6F (31 samples, 0.01%)</title><rect x="52.9804%" y="6453" width="0.0111%" height="15" fill="rgb(250,160,48)" fg:x="148264" fg:w="31"/><text x="53.2304%" y="6463.50"></text></g><g><title>`0x7FF97E69CC88 (35 samples, 0.01%)</title><rect x="52.9918%" y="6453" width="0.0125%" height="15" fill="rgb(244,216,33)" fg:x="148296" fg:w="35"/><text x="53.2418%" y="6463.50"></text></g><g><title>`0x7FF97E69CCAF (218 samples, 0.08%)</title><rect x="53.0072%" y="6453" width="0.0779%" height="15" fill="rgb(207,157,5)" fg:x="148339" fg:w="218"/><text x="53.2572%" y="6463.50"></text></g><g><title>`0x7FF97E62AFF1 (602 samples, 0.22%)</title><rect x="52.9293%" y="6469" width="0.2151%" height="15" fill="rgb(228,199,8)" fg:x="148121" fg:w="602"/><text x="53.1793%" y="6479.50"></text></g><g><title>`0x7FF97E633562 (703 samples, 0.25%)</title><rect x="52.8975%" y="6485" width="0.2512%" height="15" fill="rgb(227,80,20)" fg:x="148032" fg:w="703"/><text x="53.1475%" y="6495.50"></text></g><g><title>`0x7FF97E6322C7 (3,368 samples, 1.20%)</title><rect x="52.0063%" y="6501" width="1.2035%" height="15" fill="rgb(222,9,33)" fg:x="145538" fg:w="3368"/><text x="52.2563%" y="6511.50"></text></g><g><title>`0x7FF97E6335AC (144 samples, 0.05%)</title><rect x="53.1583%" y="6485" width="0.0515%" height="15" fill="rgb(239,44,28)" fg:x="148762" fg:w="144"/><text x="53.4083%" y="6495.50"></text></g><g><title>`0x7FF97E6322FB (46 samples, 0.02%)</title><rect x="53.2101%" y="6501" width="0.0164%" height="15" fill="rgb(249,187,43)" fg:x="148907" fg:w="46"/><text x="53.4601%" y="6511.50"></text></g><g><title>`0x7FF97E632307 (70 samples, 0.03%)</title><rect x="53.2269%" y="6501" width="0.0250%" height="15" fill="rgb(216,141,28)" fg:x="148954" fg:w="70"/><text x="53.4769%" y="6511.50"></text></g><g><title>`0x7FF97E632312 (108 samples, 0.04%)</title><rect x="53.2520%" y="6501" width="0.0386%" height="15" fill="rgb(230,154,53)" fg:x="149024" fg:w="108"/><text x="53.5020%" y="6511.50"></text></g><g><title>`0x7FF97E63218A (3,644 samples, 1.30%)</title><rect x="51.9891%" y="6517" width="1.3021%" height="15" fill="rgb(227,82,4)" fg:x="145490" fg:w="3644"/><text x="52.2391%" y="6527.50"></text></g><g><title>`0x7FF97E63219E (94 samples, 0.03%)</title><rect x="53.2913%" y="6517" width="0.0336%" height="15" fill="rgb(220,107,16)" fg:x="149134" fg:w="94"/><text x="53.5413%" y="6527.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_realloc (73 samples, 0.03%)</title><rect x="53.3313%" y="6517" width="0.0261%" height="15" fill="rgb(207,187,2)" fg:x="149246" fg:w="73"/><text x="53.5813%" y="6527.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::realloc (39 samples, 0.01%)</title><rect x="53.3434%" y="6501" width="0.0139%" height="15" fill="rgb(210,162,52)" fg:x="149280" fg:w="39"/><text x="53.5934%" y="6511.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (5,762 samples, 2.06%)</title><rect x="51.3002%" y="6565" width="2.0590%" height="15" fill="rgb(217,216,49)" fg:x="143562" fg:w="5762"/><text x="51.5502%" y="6575.50">n..</text></g><g><title>neural_network.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (5,762 samples, 2.06%)</title><rect x="51.3002%" y="6549" width="2.0590%" height="15" fill="rgb(218,146,49)" fg:x="143562" fg:w="5762"/><text x="51.5502%" y="6559.50">n..</text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (5,762 samples, 2.06%)</title><rect x="51.3002%" y="6533" width="2.0590%" height="15" fill="rgb(216,55,40)" fg:x="143562" fg:w="5762"/><text x="51.5502%" y="6543.50">n..</text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_mut_ptr (6,341 samples, 2.27%)</title><rect x="51.1505%" y="6709" width="2.2659%" height="15" fill="rgb(208,196,21)" fg:x="143143" fg:w="6341"/><text x="51.4005%" y="6719.50">n..</text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (6,339 samples, 2.27%)</title><rect x="51.1512%" y="6693" width="2.2652%" height="15" fill="rgb(242,117,42)" fg:x="143145" fg:w="6339"/><text x="51.4012%" y="6703.50">n..</text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (6,339 samples, 2.27%)</title><rect x="51.1512%" y="6677" width="2.2652%" height="15" fill="rgb(210,11,23)" fg:x="143145" fg:w="6339"/><text x="51.4012%" y="6687.50">n..</text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (6,339 samples, 2.27%)</title><rect x="51.1512%" y="6661" width="2.2652%" height="15" fill="rgb(217,110,2)" fg:x="143145" fg:w="6339"/><text x="51.4012%" y="6671.50">n..</text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::grow_one&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; (6,323 samples, 2.26%)</title><rect x="51.1569%" y="6645" width="2.2594%" height="15" fill="rgb(229,77,54)" fg:x="143161" fg:w="6323"/><text x="51.4069%" y="6655.50">n..</text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (6,184 samples, 2.21%)</title><rect x="51.2066%" y="6629" width="2.2098%" height="15" fill="rgb(218,53,16)" fg:x="143300" fg:w="6184"/><text x="51.4566%" y="6639.50">n..</text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (6,175 samples, 2.21%)</title><rect x="51.2098%" y="6613" width="2.2066%" height="15" fill="rgb(215,38,13)" fg:x="143309" fg:w="6175"/><text x="51.4598%" y="6623.50">n..</text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (6,091 samples, 2.18%)</title><rect x="51.2398%" y="6597" width="2.1765%" height="15" fill="rgb(235,42,18)" fg:x="143393" fg:w="6091"/><text x="51.4898%" y="6607.50">n..</text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (6,033 samples, 2.16%)</title><rect x="51.2605%" y="6581" width="2.1558%" height="15" fill="rgb(219,66,54)" fg:x="143451" fg:w="6033"/><text x="51.5105%" y="6591.50">n..</text></g><g><title>neural_network.exe`enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;, alloc::raw_vec::finish_grow::closure_env$0 (160 samples, 0.06%)</title><rect x="53.3592%" y="6565" width="0.0572%" height="15" fill="rgb(222,205,4)" fg:x="149324" fg:w="160"/><text x="53.6092%" y="6575.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (6,991 samples, 2.50%)</title><rect x="51.1226%" y="6725" width="2.4982%" height="15" fill="rgb(227,213,46)" fg:x="143065" fg:w="6991"/><text x="51.3726%" y="6735.50">ne..</text></g><g><title>neural_network.exe`core::ptr::write(tuple$&lt;usize,usize&gt;*, tuple$ (572 samples, 0.20%)</title><rect x="53.4163%" y="6709" width="0.2044%" height="15" fill="rgb(250,145,42)" fg:x="149484" fg:w="572"/><text x="53.6663%" y="6719.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::remove (60 samples, 0.02%)</title><rect x="53.6207%" y="6725" width="0.0214%" height="15" fill="rgb(219,15,2)" fg:x="150056" fg:w="60"/><text x="53.8707%" y="6735.50"></text></g><g><title>`0x7FF968D5135E (28 samples, 0.01%)</title><rect x="53.6608%" y="6661" width="0.0100%" height="15" fill="rgb(231,181,52)" fg:x="150168" fg:w="28"/><text x="53.9108%" y="6671.50"></text></g><g><title>`0x7FF968D51381 (700 samples, 0.25%)</title><rect x="53.6708%" y="6661" width="0.2501%" height="15" fill="rgb(235,1,42)" fg:x="150196" fg:w="700"/><text x="53.9208%" y="6671.50"></text></g><g><title>`0x7FF97E62CAFF (53 samples, 0.02%)</title><rect x="53.9809%" y="6597" width="0.0189%" height="15" fill="rgb(249,88,27)" fg:x="151064" fg:w="53"/><text x="54.2309%" y="6607.50"></text></g><g><title>`0x7FF97E62CB20 (51 samples, 0.02%)</title><rect x="54.0024%" y="6597" width="0.0182%" height="15" fill="rgb(235,145,16)" fg:x="151124" fg:w="51"/><text x="54.2524%" y="6607.50"></text></g><g><title>`0x7FF97E62CB3D (38 samples, 0.01%)</title><rect x="54.0306%" y="6597" width="0.0136%" height="15" fill="rgb(237,114,19)" fg:x="151203" fg:w="38"/><text x="54.2806%" y="6607.50"></text></g><g><title>`0x7FF97E62CC65 (40 samples, 0.01%)</title><rect x="54.1142%" y="6597" width="0.0143%" height="15" fill="rgb(238,51,50)" fg:x="151437" fg:w="40"/><text x="54.3642%" y="6607.50"></text></g><g><title>`0x7FF97E62CC95 (29 samples, 0.01%)</title><rect x="54.1335%" y="6597" width="0.0104%" height="15" fill="rgb(205,194,25)" fg:x="151491" fg:w="29"/><text x="54.3835%" y="6607.50"></text></g><g><title>`0x7FF97E62D4E2 (31 samples, 0.01%)</title><rect x="54.1514%" y="6581" width="0.0111%" height="15" fill="rgb(215,203,17)" fg:x="151541" fg:w="31"/><text x="54.4014%" y="6591.50"></text></g><g><title>`0x7FF97E62D5E2 (42 samples, 0.02%)</title><rect x="54.2289%" y="6581" width="0.0150%" height="15" fill="rgb(233,112,49)" fg:x="151758" fg:w="42"/><text x="54.4789%" y="6591.50"></text></g><g><title>`0x7FF97E62D68A (67 samples, 0.02%)</title><rect x="54.2504%" y="6581" width="0.0239%" height="15" fill="rgb(241,130,26)" fg:x="151818" fg:w="67"/><text x="54.5004%" y="6591.50"></text></g><g><title>`0x7FF97E62D6C7 (28 samples, 0.01%)</title><rect x="54.2843%" y="6581" width="0.0100%" height="15" fill="rgb(252,223,19)" fg:x="151913" fg:w="28"/><text x="54.5343%" y="6591.50"></text></g><g><title>`0x7FF97E62DB41 (37 samples, 0.01%)</title><rect x="54.3454%" y="6581" width="0.0132%" height="15" fill="rgb(211,95,25)" fg:x="152084" fg:w="37"/><text x="54.5954%" y="6591.50"></text></g><g><title>`0x7FF97E631B1F (52 samples, 0.02%)</title><rect x="54.3726%" y="6565" width="0.0186%" height="15" fill="rgb(251,182,27)" fg:x="152160" fg:w="52"/><text x="54.6226%" y="6575.50"></text></g><g><title>`0x7FF97E62DBBF (90 samples, 0.03%)</title><rect x="54.3593%" y="6581" width="0.0322%" height="15" fill="rgb(238,24,4)" fg:x="152123" fg:w="90"/><text x="54.6093%" y="6591.50"></text></g><g><title>`0x7FF97E62CC9A (731 samples, 0.26%)</title><rect x="54.1439%" y="6597" width="0.2612%" height="15" fill="rgb(224,220,25)" fg:x="151520" fg:w="731"/><text x="54.3939%" y="6607.50"></text></g><g><title>`0x7FF97E62DBDD (38 samples, 0.01%)</title><rect x="54.3915%" y="6581" width="0.0136%" height="15" fill="rgb(239,133,26)" fg:x="152213" fg:w="38"/><text x="54.6415%" y="6591.50"></text></g><g><title>`0x7FF97E62CCC1 (40 samples, 0.01%)</title><rect x="54.4069%" y="6597" width="0.0143%" height="15" fill="rgb(211,94,48)" fg:x="152256" fg:w="40"/><text x="54.6569%" y="6607.50"></text></g><g><title>`0x7FF97E62CCF8 (38 samples, 0.01%)</title><rect x="54.4226%" y="6597" width="0.0136%" height="15" fill="rgb(239,87,6)" fg:x="152300" fg:w="38"/><text x="54.6726%" y="6607.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_alloc (32 samples, 0.01%)</title><rect x="54.4551%" y="6597" width="0.0114%" height="15" fill="rgb(227,62,0)" fg:x="152391" fg:w="32"/><text x="54.7051%" y="6607.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (1,415 samples, 0.51%)</title><rect x="53.9731%" y="6661" width="0.5056%" height="15" fill="rgb(211,226,4)" fg:x="151042" fg:w="1415"/><text x="54.2231%" y="6671.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (1,415 samples, 0.51%)</title><rect x="53.9731%" y="6645" width="0.5056%" height="15" fill="rgb(253,38,52)" fg:x="151042" fg:w="1415"/><text x="54.2231%" y="6655.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (1,415 samples, 0.51%)</title><rect x="53.9731%" y="6629" width="0.5056%" height="15" fill="rgb(229,126,40)" fg:x="151042" fg:w="1415"/><text x="54.2231%" y="6639.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (1,415 samples, 0.51%)</title><rect x="53.9731%" y="6613" width="0.5056%" height="15" fill="rgb(229,165,44)" fg:x="151042" fg:w="1415"/><text x="54.2231%" y="6623.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::process_heap_alloc (34 samples, 0.01%)</title><rect x="54.4665%" y="6597" width="0.0121%" height="15" fill="rgb(247,95,47)" fg:x="152423" fg:w="34"/><text x="54.7165%" y="6607.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$&lt;tuple$ (2,354 samples, 0.84%)</title><rect x="53.6436%" y="6693" width="0.8412%" height="15" fill="rgb(216,140,30)" fg:x="150120" fg:w="2354"/><text x="53.8936%" y="6703.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$&lt;tuple$ (2,354 samples, 0.84%)</title><rect x="53.6436%" y="6677" width="0.8412%" height="15" fill="rgb(246,214,8)" fg:x="150120" fg:w="2354"/><text x="53.8936%" y="6687.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$11::clone(alloc::vec::Vec&lt;tuple$ (2,361 samples, 0.84%)</title><rect x="53.6422%" y="6725" width="0.8437%" height="15" fill="rgb(227,224,15)" fg:x="150116" fg:w="2361"/><text x="53.8922%" y="6735.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (2,361 samples, 0.84%)</title><rect x="53.6422%" y="6709" width="0.8437%" height="15" fill="rgb(233,175,4)" fg:x="150116" fg:w="2361"/><text x="53.8922%" y="6719.50"></text></g><g><title>neural_network.exe`core::cmp::impls::impl$21::eq (49 samples, 0.02%)</title><rect x="54.5323%" y="6709" width="0.0175%" height="15" fill="rgb(221,66,45)" fg:x="152607" fg:w="49"/><text x="54.7823%" y="6719.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (2,025 samples, 0.72%)</title><rect x="54.5498%" y="6709" width="0.7236%" height="15" fill="rgb(221,178,18)" fg:x="152656" fg:w="2025"/><text x="54.7998%" y="6719.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (2,025 samples, 0.72%)</title><rect x="54.5498%" y="6693" width="0.7236%" height="15" fill="rgb(213,81,29)" fg:x="152656" fg:w="2025"/><text x="54.7998%" y="6703.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (230 samples, 0.08%)</title><rect x="55.1912%" y="6677" width="0.0822%" height="15" fill="rgb(220,89,49)" fg:x="154451" fg:w="230"/><text x="55.4412%" y="6687.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (48 samples, 0.02%)</title><rect x="55.2734%" y="6693" width="0.0172%" height="15" fill="rgb(227,60,33)" fg:x="154681" fg:w="48"/><text x="55.5234%" y="6703.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (48 samples, 0.02%)</title><rect x="55.2734%" y="6677" width="0.0172%" height="15" fill="rgb(205,113,12)" fg:x="154681" fg:w="48"/><text x="55.5234%" y="6687.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (48 samples, 0.02%)</title><rect x="55.2734%" y="6661" width="0.0172%" height="15" fill="rgb(211,32,1)" fg:x="154681" fg:w="48"/><text x="55.5234%" y="6671.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (48 samples, 0.02%)</title><rect x="55.2734%" y="6645" width="0.0172%" height="15" fill="rgb(246,2,12)" fg:x="154681" fg:w="48"/><text x="55.5234%" y="6655.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$ (2,741 samples, 0.98%)</title><rect x="54.4858%" y="6725" width="0.9795%" height="15" fill="rgb(243,37,27)" fg:x="152477" fg:w="2741"/><text x="54.7358%" y="6735.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;tuple$ (537 samples, 0.19%)</title><rect x="55.2734%" y="6709" width="0.1919%" height="15" fill="rgb(248,211,31)" fg:x="154681" fg:w="537"/><text x="55.5234%" y="6719.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;tuple$ (489 samples, 0.17%)</title><rect x="55.2906%" y="6693" width="0.1747%" height="15" fill="rgb(242,146,47)" fg:x="154729" fg:w="489"/><text x="55.5406%" y="6703.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (43 samples, 0.02%)</title><rect x="55.4653%" y="6693" width="0.0154%" height="15" fill="rgb(206,70,20)" fg:x="155218" fg:w="43"/><text x="55.7153%" y="6703.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (43 samples, 0.02%)</title><rect x="55.4653%" y="6677" width="0.0154%" height="15" fill="rgb(215,10,51)" fg:x="155218" fg:w="43"/><text x="55.7153%" y="6687.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (43 samples, 0.02%)</title><rect x="55.4653%" y="6661" width="0.0154%" height="15" fill="rgb(243,178,53)" fg:x="155218" fg:w="43"/><text x="55.7153%" y="6671.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (43 samples, 0.02%)</title><rect x="55.4653%" y="6645" width="0.0154%" height="15" fill="rgb(233,221,20)" fg:x="155218" fg:w="43"/><text x="55.7153%" y="6655.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (95 samples, 0.03%)</title><rect x="55.4653%" y="6709" width="0.0339%" height="15" fill="rgb(218,95,35)" fg:x="155218" fg:w="95"/><text x="55.7153%" y="6719.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;tuple$ (52 samples, 0.02%)</title><rect x="55.4807%" y="6693" width="0.0186%" height="15" fill="rgb(229,13,5)" fg:x="155261" fg:w="52"/><text x="55.7307%" y="6703.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, core::ops::range::Range (2,403 samples, 0.86%)</title><rect x="55.4653%" y="6725" width="0.8587%" height="15" fill="rgb(252,164,30)" fg:x="155218" fg:w="2403"/><text x="55.7153%" y="6735.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (2,308 samples, 0.82%)</title><rect x="55.4993%" y="6709" width="0.8247%" height="15" fill="rgb(232,68,36)" fg:x="155313" fg:w="2308"/><text x="55.7493%" y="6719.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (2,308 samples, 0.82%)</title><rect x="55.4993%" y="6693" width="0.8247%" height="15" fill="rgb(219,59,54)" fg:x="155313" fg:w="2308"/><text x="55.7493%" y="6703.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (288 samples, 0.10%)</title><rect x="56.2211%" y="6677" width="0.1029%" height="15" fill="rgb(250,92,33)" fg:x="157333" fg:w="288"/><text x="56.4711%" y="6687.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (64 samples, 0.02%)</title><rect x="56.3011%" y="6661" width="0.0229%" height="15" fill="rgb(229,162,54)" fg:x="157557" fg:w="64"/><text x="56.5511%" y="6671.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (64 samples, 0.02%)</title><rect x="56.3011%" y="6645" width="0.0229%" height="15" fill="rgb(244,114,52)" fg:x="157557" fg:w="64"/><text x="56.5511%" y="6655.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (64 samples, 0.02%)</title><rect x="56.3011%" y="6629" width="0.0229%" height="15" fill="rgb(212,211,43)" fg:x="157557" fg:w="64"/><text x="56.5511%" y="6639.50"></text></g><g><title>`0x7FF97E62AFA5 (78 samples, 0.03%)</title><rect x="56.3411%" y="6629" width="0.0279%" height="15" fill="rgb(226,147,8)" fg:x="157669" fg:w="78"/><text x="56.5911%" y="6639.50"></text></g><g><title>`0x7FF97E62AFBA (137 samples, 0.05%)</title><rect x="56.3694%" y="6629" width="0.0490%" height="15" fill="rgb(226,23,13)" fg:x="157748" fg:w="137"/><text x="56.6194%" y="6639.50"></text></g><g><title>`0x7FF97E62AFE0 (219 samples, 0.08%)</title><rect x="56.4205%" y="6629" width="0.0783%" height="15" fill="rgb(240,63,4)" fg:x="157891" fg:w="219"/><text x="56.6705%" y="6639.50"></text></g><g><title>`0x7FF97E62BB70 (312 samples, 0.11%)</title><rect x="56.5005%" y="6613" width="0.1115%" height="15" fill="rgb(221,1,32)" fg:x="158115" fg:w="312"/><text x="56.7505%" y="6623.50"></text></g><g><title>`0x7FF97E62BB84 (302 samples, 0.11%)</title><rect x="56.6145%" y="6613" width="0.1079%" height="15" fill="rgb(242,117,10)" fg:x="158434" fg:w="302"/><text x="56.8645%" y="6623.50"></text></g><g><title>`0x7FF97E62C2B1 (318 samples, 0.11%)</title><rect x="56.7246%" y="6613" width="0.1136%" height="15" fill="rgb(249,172,44)" fg:x="158742" fg:w="318"/><text x="56.9746%" y="6623.50"></text></g><g><title>`0x7FF97E62C337 (30 samples, 0.01%)</title><rect x="56.8418%" y="6613" width="0.0107%" height="15" fill="rgb(244,46,45)" fg:x="159070" fg:w="30"/><text x="57.0918%" y="6623.50"></text></g><g><title>`0x7FF97E62C38A (261 samples, 0.09%)</title><rect x="56.8650%" y="6613" width="0.0933%" height="15" fill="rgb(206,43,17)" fg:x="159135" fg:w="261"/><text x="57.1150%" y="6623.50"></text></g><g><title>`0x7FF97E69CB43 (186 samples, 0.07%)</title><rect x="56.9583%" y="6613" width="0.0665%" height="15" fill="rgb(239,218,39)" fg:x="159396" fg:w="186"/><text x="57.2083%" y="6623.50"></text></g><g><title>`0x7FF97E69CB6A (78 samples, 0.03%)</title><rect x="57.0330%" y="6613" width="0.0279%" height="15" fill="rgb(208,169,54)" fg:x="159605" fg:w="78"/><text x="57.2830%" y="6623.50"></text></g><g><title>`0x7FF97E69CB8E (36 samples, 0.01%)</title><rect x="57.0651%" y="6613" width="0.0129%" height="15" fill="rgb(247,25,42)" fg:x="159695" fg:w="36"/><text x="57.3151%" y="6623.50"></text></g><g><title>`0x7FF97E69CBD4 (29 samples, 0.01%)</title><rect x="57.0962%" y="6613" width="0.0104%" height="15" fill="rgb(226,23,31)" fg:x="159782" fg:w="29"/><text x="57.3462%" y="6623.50"></text></g><g><title>`0x7FF97E69CD30 (30 samples, 0.01%)</title><rect x="57.1462%" y="6613" width="0.0107%" height="15" fill="rgb(247,16,28)" fg:x="159922" fg:w="30"/><text x="57.3962%" y="6623.50"></text></g><g><title>`0x7FF97E62AFF1 (1,911 samples, 0.68%)</title><rect x="56.4998%" y="6629" width="0.6829%" height="15" fill="rgb(231,147,38)" fg:x="158113" fg:w="1911"/><text x="56.7498%" y="6639.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (2,436 samples, 0.87%)</title><rect x="56.3401%" y="6661" width="0.8705%" height="15" fill="rgb(253,81,48)" fg:x="157666" fg:w="2436"/><text x="56.5901%" y="6671.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (2,436 samples, 0.87%)</title><rect x="56.3401%" y="6645" width="0.8705%" height="15" fill="rgb(249,222,43)" fg:x="157666" fg:w="2436"/><text x="56.5901%" y="6655.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (64 samples, 0.02%)</title><rect x="57.1877%" y="6629" width="0.0229%" height="15" fill="rgb(221,3,27)" fg:x="160038" fg:w="64"/><text x="57.4377%" y="6639.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::dealloc (64 samples, 0.02%)</title><rect x="57.1877%" y="6613" width="0.0229%" height="15" fill="rgb(228,180,5)" fg:x="160038" fg:w="64"/><text x="57.4377%" y="6623.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;tuple$ (2,505 samples, 0.90%)</title><rect x="56.3251%" y="6725" width="0.8951%" height="15" fill="rgb(227,131,42)" fg:x="157624" fg:w="2505"/><text x="56.5751%" y="6735.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (2,505 samples, 0.90%)</title><rect x="56.3251%" y="6709" width="0.8951%" height="15" fill="rgb(212,3,39)" fg:x="157624" fg:w="2505"/><text x="56.5751%" y="6719.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (2,505 samples, 0.90%)</title><rect x="56.3251%" y="6693" width="0.8951%" height="15" fill="rgb(226,45,5)" fg:x="157624" fg:w="2505"/><text x="56.5751%" y="6703.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (2,463 samples, 0.88%)</title><rect x="56.3401%" y="6677" width="0.8801%" height="15" fill="rgb(215,167,45)" fg:x="157666" fg:w="2463"/><text x="56.5901%" y="6687.50"></text></g><g><title>neural_network.exe`core::iter::adapters::rev::impl$1::next(core::iter::adapters::rev::Rev&lt;core::ops::range::Range (39 samples, 0.01%)</title><rect x="57.2284%" y="6629" width="0.0139%" height="15" fill="rgb(250,218,53)" fg:x="160152" fg:w="39"/><text x="57.4784%" y="6639.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$7::next_back(core::ops::range::Range (39 samples, 0.01%)</title><rect x="57.2284%" y="6613" width="0.0139%" height="15" fill="rgb(207,140,0)" fg:x="160152" fg:w="39"/><text x="57.4784%" y="6623.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$5::spec_next_back(core::ops::range::Range (39 samples, 0.01%)</title><rect x="57.2284%" y="6597" width="0.0139%" height="15" fill="rgb(238,133,51)" fg:x="160152" fg:w="39"/><text x="57.4784%" y="6607.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy(tuple$&lt;usize,usize&gt;*, tuple$ (47 samples, 0.02%)</title><rect x="57.2759%" y="6597" width="0.0168%" height="15" fill="rgb(218,203,53)" fg:x="160285" fg:w="47"/><text x="57.5259%" y="6607.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::swap(ref_mut$&lt;slice2$&lt;tuple$ (206 samples, 0.07%)</title><rect x="57.2424%" y="6629" width="0.0736%" height="15" fill="rgb(226,184,25)" fg:x="160191" fg:w="206"/><text x="57.4924%" y="6639.50"></text></g><g><title>neural_network.exe`core::ptr::swap(tuple$&lt;usize,usize&gt;*, tuple$ (112 samples, 0.04%)</title><rect x="57.2759%" y="6613" width="0.0400%" height="15" fill="rgb(231,121,21)" fg:x="160285" fg:w="112"/><text x="57.5259%" y="6623.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping(tuple$&lt;usize,usize&gt;*, tuple$ (65 samples, 0.02%)</title><rect x="57.2927%" y="6597" width="0.0232%" height="15" fill="rgb(251,14,34)" fg:x="160332" fg:w="65"/><text x="57.5427%" y="6607.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::round(rand_chacha::guts::State&lt;ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (54 samples, 0.02%)</title><rect x="57.4014%" y="6357" width="0.0193%" height="15" fill="rgb(249,193,11)" fg:x="160636" fg:w="54"/><text x="57.6514%" y="6367.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide::impl_avx2 (78 samples, 0.03%)</title><rect x="57.3964%" y="6405" width="0.0279%" height="15" fill="rgb(220,172,37)" fg:x="160622" fg:w="78"/><text x="57.6464%" y="6415.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide::fn_impl(ppv_lite86::x86_64::Avx2Machine (76 samples, 0.03%)</title><rect x="57.3971%" y="6389" width="0.0272%" height="15" fill="rgb(231,229,43)" fg:x="160624" fg:w="76"/><text x="57.6471%" y="6399.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide_impl(ppv_lite86::x86_64::Avx2Machine (76 samples, 0.03%)</title><rect x="57.3971%" y="6373" width="0.0272%" height="15" fill="rgb(250,161,5)" fg:x="160624" fg:w="76"/><text x="57.6471%" y="6383.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place (573 samples, 0.20%)</title><rect x="57.2202%" y="6725" width="0.2048%" height="15" fill="rgb(218,225,18)" fg:x="160129" fg:w="573"/><text x="57.4702%" y="6735.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (573 samples, 0.20%)</title><rect x="57.2202%" y="6709" width="0.2048%" height="15" fill="rgb(245,45,42)" fg:x="160129" fg:w="573"/><text x="57.4702%" y="6719.50"></text></g><g><title>neural_network.exe`alloc::rc::impl$30::drop(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (573 samples, 0.20%)</title><rect x="57.2202%" y="6693" width="0.2048%" height="15" fill="rgb(211,115,1)" fg:x="160129" fg:w="573"/><text x="57.4702%" y="6703.50"></text></g><g><title>neural_network.exe`alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;::inner (566 samples, 0.20%)</title><rect x="57.2227%" y="6677" width="0.2023%" height="15" fill="rgb(248,133,52)" fg:x="160136" fg:w="566"/><text x="57.4727%" y="6687.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;alloc::rc::RcBox&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt; &gt; &gt;::as_ref (566 samples, 0.20%)</title><rect x="57.2227%" y="6661" width="0.2023%" height="15" fill="rgb(238,100,21)" fg:x="160136" fg:w="566"/><text x="57.4727%" y="6671.50"></text></g><g><title>neural_network.exe`rand::seq::impl$0::shuffle&lt;tuple$&lt;usize,usize&gt;,rand::rngs::thread::ThreadRng&gt;(ref_mut$&lt;slice2$&lt;tuple$ (566 samples, 0.20%)</title><rect x="57.2227%" y="6645" width="0.2023%" height="15" fill="rgb(247,144,11)" fg:x="160136" fg:w="566"/><text x="57.4727%" y="6655.50"></text></g><g><title>neural_network.exe`rand::seq::gen_index (305 samples, 0.11%)</title><rect x="57.3160%" y="6629" width="0.1090%" height="15" fill="rgb(206,164,16)" fg:x="160397" fg:w="305"/><text x="57.5660%" y="6639.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen_range(rand::rngs::thread::ThreadRng*, core::ops::range::Range (303 samples, 0.11%)</title><rect x="57.3167%" y="6613" width="0.1083%" height="15" fill="rgb(222,34,3)" fg:x="160399" fg:w="303"/><text x="57.5667%" y="6623.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$6::sample_single(core::ops::range::Range (303 samples, 0.11%)</title><rect x="57.3167%" y="6597" width="0.1083%" height="15" fill="rgb(248,82,4)" fg:x="160399" fg:w="303"/><text x="57.5667%" y="6607.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single (303 samples, 0.11%)</title><rect x="57.3167%" y="6581" width="0.1083%" height="15" fill="rgb(228,81,46)" fg:x="160399" fg:w="303"/><text x="57.5667%" y="6591.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single_inclusive (303 samples, 0.11%)</title><rect x="57.3167%" y="6565" width="0.1083%" height="15" fill="rgb(227,67,47)" fg:x="160399" fg:w="303"/><text x="57.5667%" y="6575.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen (239 samples, 0.09%)</title><rect x="57.3395%" y="6549" width="0.0854%" height="15" fill="rgb(215,93,53)" fg:x="160463" fg:w="239"/><text x="57.5895%" y="6559.50"></text></g><g><title>neural_network.exe`rand::distributions::integer::impl$2::sample (239 samples, 0.09%)</title><rect x="57.3395%" y="6533" width="0.0854%" height="15" fill="rgb(248,194,39)" fg:x="160463" fg:w="239"/><text x="57.5895%" y="6543.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::impl$1::next_u32 (239 samples, 0.09%)</title><rect x="57.3395%" y="6517" width="0.0854%" height="15" fill="rgb(215,5,19)" fg:x="160463" fg:w="239"/><text x="57.5895%" y="6527.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$1::next_u32(rand::rngs::adapter::reseeding::ReseedingRng (239 samples, 0.09%)</title><rect x="57.3395%" y="6501" width="0.0854%" height="15" fill="rgb(226,215,51)" fg:x="160463" fg:w="239"/><text x="57.5895%" y="6511.50"></text></g><g><title>neural_network.exe`rand_core::block::impl$2::next_u32(rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore (239 samples, 0.09%)</title><rect x="57.3395%" y="6485" width="0.0854%" height="15" fill="rgb(225,56,26)" fg:x="160463" fg:w="239"/><text x="57.5895%" y="6495.50"></text></g><g><title>neural_network.exe`rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;::generate_and_set (91 samples, 0.03%)</title><rect x="57.3924%" y="6469" width="0.0325%" height="15" fill="rgb(222,75,29)" fg:x="160611" fg:w="91"/><text x="57.6424%" y="6479.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$4::generate(rand::rngs::adapter::reseeding::ReseedingCore&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt;*, rand_chacha::chacha::Array64 (91 samples, 0.03%)</title><rect x="57.3924%" y="6453" width="0.0325%" height="15" fill="rgb(236,139,6)" fg:x="160611" fg:w="91"/><text x="57.6424%" y="6463.50"></text></g><g><title>neural_network.exe`rand_chacha::chacha::impl$23::generate(rand_chacha::chacha::ChaCha12Core*, rand_chacha::chacha::Array64 (83 samples, 0.03%)</title><rect x="57.3953%" y="6437" width="0.0297%" height="15" fill="rgb(223,137,36)" fg:x="160619" fg:w="83"/><text x="57.6453%" y="6447.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::ChaCha::refill4 (83 samples, 0.03%)</title><rect x="57.3953%" y="6421" width="0.0297%" height="15" fill="rgb(226,99,2)" fg:x="160619" fg:w="83"/><text x="57.6453%" y="6431.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::contains(ref$&lt;slice2$&lt;tuple$&lt;usize,usize&gt; &gt; &gt;, tuple$ (972 samples, 0.35%)</title><rect x="57.4250%" y="6725" width="0.3473%" height="15" fill="rgb(206,133,23)" fg:x="160702" fg:w="972"/><text x="57.6750%" y="6735.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (972 samples, 0.35%)</title><rect x="57.4250%" y="6709" width="0.3473%" height="15" fill="rgb(243,173,15)" fg:x="160702" fg:w="972"/><text x="57.6750%" y="6719.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (972 samples, 0.35%)</title><rect x="57.4250%" y="6693" width="0.3473%" height="15" fill="rgb(228,69,28)" fg:x="160702" fg:w="972"/><text x="57.6750%" y="6703.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (125 samples, 0.04%)</title><rect x="57.7276%" y="6677" width="0.0447%" height="15" fill="rgb(212,51,22)" fg:x="161549" fg:w="125"/><text x="57.9776%" y="6687.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (43 samples, 0.02%)</title><rect x="57.7569%" y="6661" width="0.0154%" height="15" fill="rgb(227,113,0)" fg:x="161631" fg:w="43"/><text x="58.0069%" y="6671.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (43 samples, 0.02%)</title><rect x="57.7569%" y="6645" width="0.0154%" height="15" fill="rgb(252,84,27)" fg:x="161631" fg:w="43"/><text x="58.0069%" y="6655.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (43 samples, 0.02%)</title><rect x="57.7569%" y="6629" width="0.0154%" height="15" fill="rgb(223,145,39)" fg:x="161631" fg:w="43"/><text x="58.0069%" y="6639.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (310 samples, 0.11%)</title><rect x="57.7723%" y="6725" width="0.1108%" height="15" fill="rgb(239,219,30)" fg:x="161674" fg:w="310"/><text x="58.0223%" y="6735.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (72 samples, 0.03%)</title><rect x="57.8573%" y="6709" width="0.0257%" height="15" fill="rgb(224,196,39)" fg:x="161912" fg:w="72"/><text x="58.1073%" y="6719.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (72 samples, 0.03%)</title><rect x="57.8573%" y="6693" width="0.0257%" height="15" fill="rgb(205,35,43)" fg:x="161912" fg:w="72"/><text x="58.1073%" y="6703.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (72 samples, 0.03%)</title><rect x="57.8573%" y="6677" width="0.0257%" height="15" fill="rgb(228,201,21)" fg:x="161912" fg:w="72"/><text x="58.1073%" y="6687.50"></text></g><g><title>`0x7FF97E62BB7F (34 samples, 0.01%)</title><rect x="58.0535%" y="6661" width="0.0121%" height="15" fill="rgb(237,118,16)" fg:x="162461" fg:w="34"/><text x="58.3035%" y="6671.50"></text></g><g><title>`0x7FF97E69CB70 (54 samples, 0.02%)</title><rect x="58.1178%" y="6661" width="0.0193%" height="15" fill="rgb(241,17,19)" fg:x="162641" fg:w="54"/><text x="58.3678%" y="6671.50"></text></g><g><title>`0x7FF97E69CB81 (36 samples, 0.01%)</title><rect x="58.1400%" y="6661" width="0.0129%" height="15" fill="rgb(214,10,25)" fg:x="162703" fg:w="36"/><text x="58.3900%" y="6671.50"></text></g><g><title>`0x7FF97E69CB9D (32 samples, 0.01%)</title><rect x="58.1621%" y="6661" width="0.0114%" height="15" fill="rgb(238,37,29)" fg:x="162765" fg:w="32"/><text x="58.4121%" y="6671.50"></text></g><g><title>`0x7FF97E69CBA1 (41 samples, 0.01%)</title><rect x="58.1736%" y="6661" width="0.0147%" height="15" fill="rgb(253,83,25)" fg:x="162797" fg:w="41"/><text x="58.4236%" y="6671.50"></text></g><g><title>`0x7FF97E69CBBC (47 samples, 0.02%)</title><rect x="58.2050%" y="6661" width="0.0168%" height="15" fill="rgb(234,192,12)" fg:x="162885" fg:w="47"/><text x="58.4550%" y="6671.50"></text></g><g><title>`0x7FF97E69CC6F (104 samples, 0.04%)</title><rect x="58.2350%" y="6661" width="0.0372%" height="15" fill="rgb(241,216,45)" fg:x="162969" fg:w="104"/><text x="58.4850%" y="6671.50"></text></g><g><title>`0x7FF97E69CCAF (36 samples, 0.01%)</title><rect x="58.2804%" y="6661" width="0.0129%" height="15" fill="rgb(242,22,33)" fg:x="163096" fg:w="36"/><text x="58.5304%" y="6671.50"></text></g><g><title>`0x7FF97E62AFF1 (740 samples, 0.26%)</title><rect x="58.0356%" y="6677" width="0.2644%" height="15" fill="rgb(231,105,49)" fg:x="162411" fg:w="740"/><text x="58.2856%" y="6687.50"></text></g><g><title>`0x7FF97E62D57C (111 samples, 0.04%)</title><rect x="58.5488%" y="6453" width="0.0397%" height="15" fill="rgb(218,204,15)" fg:x="163847" fg:w="111"/><text x="58.7988%" y="6463.50"></text></g><g><title>`0x7FF97E62D588 (30 samples, 0.01%)</title><rect x="58.5884%" y="6453" width="0.0107%" height="15" fill="rgb(235,138,41)" fg:x="163958" fg:w="30"/><text x="58.8384%" y="6463.50"></text></g><g><title>`0x7FF97E68F861 (43 samples, 0.02%)</title><rect x="58.6281%" y="6437" width="0.0154%" height="15" fill="rgb(246,0,9)" fg:x="164069" fg:w="43"/><text x="58.8781%" y="6447.50"></text></g><g><title>`0x7FF97E68F87F (44 samples, 0.02%)</title><rect x="58.6453%" y="6437" width="0.0157%" height="15" fill="rgb(210,74,4)" fg:x="164117" fg:w="44"/><text x="58.8953%" y="6447.50"></text></g><g><title>`0x7FF97E68F8EE (43 samples, 0.02%)</title><rect x="58.6624%" y="6437" width="0.0154%" height="15" fill="rgb(250,60,41)" fg:x="164165" fg:w="43"/><text x="58.9124%" y="6447.50"></text></g><g><title>`0x7FF97E68F908 (37 samples, 0.01%)</title><rect x="58.6799%" y="6437" width="0.0132%" height="15" fill="rgb(220,115,12)" fg:x="164214" fg:w="37"/><text x="58.9299%" y="6447.50"></text></g><g><title>`0x7FF97E68F921 (34 samples, 0.01%)</title><rect x="58.6942%" y="6437" width="0.0121%" height="15" fill="rgb(237,100,13)" fg:x="164254" fg:w="34"/><text x="58.9442%" y="6447.50"></text></g><g><title>`0x7FF97E62D68A (248 samples, 0.09%)</title><rect x="58.6267%" y="6453" width="0.0886%" height="15" fill="rgb(213,55,26)" fg:x="164065" fg:w="248"/><text x="58.8767%" y="6463.50"></text></g><g><title>`0x7FF97E62D691 (40 samples, 0.01%)</title><rect x="58.7153%" y="6453" width="0.0143%" height="15" fill="rgb(216,17,4)" fg:x="164313" fg:w="40"/><text x="58.9653%" y="6463.50"></text></g><g><title>`0x7FF97E62D6A8 (43 samples, 0.02%)</title><rect x="58.7317%" y="6453" width="0.0154%" height="15" fill="rgb(220,153,47)" fg:x="164359" fg:w="43"/><text x="58.9817%" y="6463.50"></text></g><g><title>`0x7FF97E62D6C7 (29 samples, 0.01%)</title><rect x="58.7492%" y="6453" width="0.0104%" height="15" fill="rgb(215,131,9)" fg:x="164408" fg:w="29"/><text x="58.9992%" y="6463.50"></text></g><g><title>`0x7FF97E62D723 (45 samples, 0.02%)</title><rect x="58.7789%" y="6453" width="0.0161%" height="15" fill="rgb(233,46,42)" fg:x="164491" fg:w="45"/><text x="59.0289%" y="6463.50"></text></g><g><title>`0x7FF97E62CC9A (720 samples, 0.26%)</title><rect x="58.5459%" y="6469" width="0.2573%" height="15" fill="rgb(226,86,7)" fg:x="163839" fg:w="720"/><text x="58.7959%" y="6479.50"></text></g><g><title>`0x7FF97E62CCC1 (49 samples, 0.02%)</title><rect x="58.8053%" y="6469" width="0.0175%" height="15" fill="rgb(239,226,21)" fg:x="164565" fg:w="49"/><text x="59.0553%" y="6479.50"></text></g><g><title>`0x7FF97E62CCF8 (39 samples, 0.01%)</title><rect x="58.8229%" y="6469" width="0.0139%" height="15" fill="rgb(244,137,22)" fg:x="164614" fg:w="39"/><text x="59.0729%" y="6479.50"></text></g><g><title>`0x7FF97E63241D (29 samples, 0.01%)</title><rect x="58.9029%" y="6437" width="0.0104%" height="15" fill="rgb(211,139,35)" fg:x="164838" fg:w="29"/><text x="59.1529%" y="6447.50"></text></g><g><title>`0x7FF97E632442 (49 samples, 0.02%)</title><rect x="58.9211%" y="6437" width="0.0175%" height="15" fill="rgb(214,62,50)" fg:x="164889" fg:w="49"/><text x="59.1711%" y="6447.50"></text></g><g><title>`0x7FF97E63244E (47 samples, 0.02%)</title><rect x="58.9454%" y="6437" width="0.0168%" height="15" fill="rgb(212,113,44)" fg:x="164957" fg:w="47"/><text x="59.1954%" y="6447.50"></text></g><g><title>`0x7FF97E632473 (79 samples, 0.03%)</title><rect x="58.9629%" y="6437" width="0.0282%" height="15" fill="rgb(226,150,43)" fg:x="165006" fg:w="79"/><text x="59.2129%" y="6447.50"></text></g><g><title>`0x7FF97E63249F (89 samples, 0.03%)</title><rect x="58.9926%" y="6437" width="0.0318%" height="15" fill="rgb(250,71,37)" fg:x="165089" fg:w="89"/><text x="59.2426%" y="6447.50"></text></g><g><title>`0x7FF97E6324C5 (120 samples, 0.04%)</title><rect x="59.0323%" y="6437" width="0.0429%" height="15" fill="rgb(219,76,19)" fg:x="165200" fg:w="120"/><text x="59.2823%" y="6447.50"></text></g><g><title>`0x7FF97E62D4E7 (31 samples, 0.01%)</title><rect x="59.1823%" y="6405" width="0.0111%" height="15" fill="rgb(250,39,11)" fg:x="165620" fg:w="31"/><text x="59.4323%" y="6415.50"></text></g><g><title>`0x7FF97E62D524 (29 samples, 0.01%)</title><rect x="59.2131%" y="6405" width="0.0104%" height="15" fill="rgb(230,64,31)" fg:x="165706" fg:w="29"/><text x="59.4631%" y="6415.50"></text></g><g><title>`0x7FF97E62D57C (44 samples, 0.02%)</title><rect x="59.2292%" y="6405" width="0.0157%" height="15" fill="rgb(208,222,23)" fg:x="165751" fg:w="44"/><text x="59.4792%" y="6415.50"></text></g><g><title>`0x7FF97E62D588 (33 samples, 0.01%)</title><rect x="59.2449%" y="6405" width="0.0118%" height="15" fill="rgb(227,125,18)" fg:x="165795" fg:w="33"/><text x="59.4949%" y="6415.50"></text></g><g><title>`0x7FF97E62D68A (100 samples, 0.04%)</title><rect x="59.2713%" y="6405" width="0.0357%" height="15" fill="rgb(234,210,9)" fg:x="165869" fg:w="100"/><text x="59.5213%" y="6415.50"></text></g><g><title>`0x7FF97E62D723 (35 samples, 0.01%)</title><rect x="59.3288%" y="6405" width="0.0125%" height="15" fill="rgb(217,127,24)" fg:x="166030" fg:w="35"/><text x="59.5788%" y="6415.50"></text></g><g><title>`0x7FF97E62D740 (32 samples, 0.01%)</title><rect x="59.3414%" y="6405" width="0.0114%" height="15" fill="rgb(239,141,48)" fg:x="166065" fg:w="32"/><text x="59.5914%" y="6415.50"></text></g><g><title>`0x7FF97E62CC9A (543 samples, 0.19%)</title><rect x="59.1720%" y="6421" width="0.1940%" height="15" fill="rgb(227,109,8)" fg:x="165591" fg:w="543"/><text x="59.4220%" y="6431.50"></text></g><g><title>`0x7FF97E62CCC1 (60 samples, 0.02%)</title><rect x="59.3660%" y="6421" width="0.0214%" height="15" fill="rgb(235,184,23)" fg:x="166134" fg:w="60"/><text x="59.6160%" y="6431.50"></text></g><g><title>`0x7FF97E62CCF8 (40 samples, 0.01%)</title><rect x="59.3875%" y="6421" width="0.0143%" height="15" fill="rgb(227,226,48)" fg:x="166194" fg:w="40"/><text x="59.6375%" y="6431.50"></text></g><g><title>`0x7FF97E633505 (870 samples, 0.31%)</title><rect x="59.0912%" y="6437" width="0.3109%" height="15" fill="rgb(206,150,11)" fg:x="165365" fg:w="870"/><text x="59.3412%" y="6447.50"></text></g><g><title>`0x7FF97E696B96 (501 samples, 0.18%)</title><rect x="59.4064%" y="6421" width="0.1790%" height="15" fill="rgb(254,2,33)" fg:x="166247" fg:w="501"/><text x="59.6564%" y="6431.50"></text></g><g><title>`0x7FF97E696C00 (61 samples, 0.02%)</title><rect x="59.5890%" y="6421" width="0.0218%" height="15" fill="rgb(243,160,20)" fg:x="166758" fg:w="61"/><text x="59.8390%" y="6431.50"></text></g><g><title>`0x7FF97E696C13 (46 samples, 0.02%)</title><rect x="59.6154%" y="6421" width="0.0164%" height="15" fill="rgb(218,208,30)" fg:x="166832" fg:w="46"/><text x="59.8654%" y="6431.50"></text></g><g><title>`0x7FF97E696C22 (63 samples, 0.02%)</title><rect x="59.6358%" y="6421" width="0.0225%" height="15" fill="rgb(224,120,49)" fg:x="166889" fg:w="63"/><text x="59.8858%" y="6431.50"></text></g><g><title>`0x7FF97E633550 (769 samples, 0.27%)</title><rect x="59.4032%" y="6437" width="0.2748%" height="15" fill="rgb(246,12,2)" fg:x="166238" fg:w="769"/><text x="59.6532%" y="6447.50"></text></g><g><title>`0x7FF97E69CC6F (48 samples, 0.02%)</title><rect x="59.7323%" y="6405" width="0.0172%" height="15" fill="rgb(236,117,3)" fg:x="167159" fg:w="48"/><text x="59.9823%" y="6415.50"></text></g><g><title>`0x7FF97E69CCAF (199 samples, 0.07%)</title><rect x="59.7591%" y="6405" width="0.0711%" height="15" fill="rgb(216,128,52)" fg:x="167234" fg:w="199"/><text x="60.0091%" y="6415.50"></text></g><g><title>`0x7FF97E62AFF1 (391 samples, 0.14%)</title><rect x="59.6965%" y="6421" width="0.1397%" height="15" fill="rgb(246,145,19)" fg:x="167059" fg:w="391"/><text x="59.9465%" y="6431.50"></text></g><g><title>`0x7FF97E633562 (449 samples, 0.16%)</title><rect x="59.6794%" y="6437" width="0.1604%" height="15" fill="rgb(222,11,46)" fg:x="167011" fg:w="449"/><text x="59.9294%" y="6447.50"></text></g><g><title>`0x7FF97E6322C7 (2,833 samples, 1.01%)</title><rect x="58.8911%" y="6453" width="1.0123%" height="15" fill="rgb(245,82,36)" fg:x="164805" fg:w="2833"/><text x="59.1411%" y="6463.50"></text></g><g><title>`0x7FF97E6335AC (148 samples, 0.05%)</title><rect x="59.8506%" y="6437" width="0.0529%" height="15" fill="rgb(250,73,51)" fg:x="167490" fg:w="148"/><text x="60.1006%" y="6447.50"></text></g><g><title>`0x7FF97E632307 (39 samples, 0.01%)</title><rect x="59.9113%" y="6453" width="0.0139%" height="15" fill="rgb(221,189,23)" fg:x="167660" fg:w="39"/><text x="60.1613%" y="6463.50"></text></g><g><title>`0x7FF97E632312 (92 samples, 0.03%)</title><rect x="59.9252%" y="6453" width="0.0329%" height="15" fill="rgb(210,33,7)" fg:x="167699" fg:w="92"/><text x="60.1752%" y="6463.50"></text></g><g><title>`0x7FF97E63218A (3,026 samples, 1.08%)</title><rect x="58.8779%" y="6469" width="1.0813%" height="15" fill="rgb(210,107,22)" fg:x="164768" fg:w="3026"/><text x="59.1279%" y="6479.50"></text></g><g><title>`0x7FF97E63219E (105 samples, 0.04%)</title><rect x="59.9592%" y="6469" width="0.0375%" height="15" fill="rgb(222,116,37)" fg:x="167794" fg:w="105"/><text x="60.2092%" y="6479.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_realloc (41 samples, 0.01%)</title><rect x="60.0028%" y="6469" width="0.0147%" height="15" fill="rgb(254,17,48)" fg:x="167916" fg:w="41"/><text x="60.2528%" y="6479.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (4,209 samples, 1.50%)</title><rect x="58.5155%" y="6517" width="1.5040%" height="15" fill="rgb(224,36,32)" fg:x="163754" fg:w="4209"/><text x="58.7655%" y="6527.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (4,209 samples, 1.50%)</title><rect x="58.5155%" y="6501" width="1.5040%" height="15" fill="rgb(232,90,46)" fg:x="163754" fg:w="4209"/><text x="58.7655%" y="6511.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (4,208 samples, 1.50%)</title><rect x="58.5159%" y="6485" width="1.5037%" height="15" fill="rgb(241,66,40)" fg:x="163755" fg:w="4208"/><text x="58.7659%" y="6495.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_mut_ptr (4,933 samples, 1.76%)</title><rect x="58.3365%" y="6661" width="1.7627%" height="15" fill="rgb(249,184,29)" fg:x="163253" fg:w="4933"/><text x="58.5865%" y="6671.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (4,925 samples, 1.76%)</title><rect x="58.3394%" y="6645" width="1.7599%" height="15" fill="rgb(231,181,1)" fg:x="163261" fg:w="4925"/><text x="58.5894%" y="6655.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (4,925 samples, 1.76%)</title><rect x="58.3394%" y="6629" width="1.7599%" height="15" fill="rgb(224,94,2)" fg:x="163261" fg:w="4925"/><text x="58.5894%" y="6639.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (4,925 samples, 1.76%)</title><rect x="58.3394%" y="6613" width="1.7599%" height="15" fill="rgb(229,170,15)" fg:x="163261" fg:w="4925"/><text x="58.5894%" y="6623.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::grow_one&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; (4,905 samples, 1.75%)</title><rect x="58.3465%" y="6597" width="1.7527%" height="15" fill="rgb(240,127,35)" fg:x="163281" fg:w="4905"/><text x="58.5965%" y="6607.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (4,739 samples, 1.69%)</title><rect x="58.4058%" y="6581" width="1.6934%" height="15" fill="rgb(248,196,34)" fg:x="163447" fg:w="4739"/><text x="58.6558%" y="6591.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (4,725 samples, 1.69%)</title><rect x="58.4108%" y="6565" width="1.6884%" height="15" fill="rgb(236,137,7)" fg:x="163461" fg:w="4725"/><text x="58.6608%" y="6575.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (4,636 samples, 1.66%)</title><rect x="58.4426%" y="6549" width="1.6566%" height="15" fill="rgb(235,127,16)" fg:x="163550" fg:w="4636"/><text x="58.6926%" y="6559.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (4,537 samples, 1.62%)</title><rect x="58.4780%" y="6533" width="1.6212%" height="15" fill="rgb(250,192,54)" fg:x="163649" fg:w="4537"/><text x="58.7280%" y="6543.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;, alloc::raw_vec::finish_grow::closure_env$0 (223 samples, 0.08%)</title><rect x="60.0196%" y="6517" width="0.0797%" height="15" fill="rgb(218,98,20)" fg:x="167963" fg:w="223"/><text x="60.2696%" y="6527.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (5,598 samples, 2.00%)</title><rect x="58.3069%" y="6677" width="2.0004%" height="15" fill="rgb(230,176,47)" fg:x="163170" fg:w="5598"/><text x="58.5569%" y="6687.50">n..</text></g><g><title>neural_network.exe`core::ptr::write(tuple$&lt;usize,usize&gt;*, tuple$ (582 samples, 0.21%)</title><rect x="60.0993%" y="6661" width="0.2080%" height="15" fill="rgb(244,2,33)" fg:x="168186" fg:w="582"/><text x="60.3493%" y="6671.50"></text></g><g><title>`0x7FF968D5135E (34 samples, 0.01%)</title><rect x="60.3351%" y="6613" width="0.0121%" height="15" fill="rgb(231,100,17)" fg:x="168846" fg:w="34"/><text x="60.5851%" y="6623.50"></text></g><g><title>`0x7FF968D51381 (626 samples, 0.22%)</title><rect x="60.3473%" y="6613" width="0.2237%" height="15" fill="rgb(245,23,12)" fg:x="168880" fg:w="626"/><text x="60.5973%" y="6623.50"></text></g><g><title>`0x7FF97E62CAFF (35 samples, 0.01%)</title><rect x="60.6281%" y="6549" width="0.0125%" height="15" fill="rgb(249,55,22)" fg:x="169666" fg:w="35"/><text x="60.8781%" y="6559.50"></text></g><g><title>`0x7FF97E62CB20 (41 samples, 0.01%)</title><rect x="60.6417%" y="6549" width="0.0147%" height="15" fill="rgb(207,134,9)" fg:x="169704" fg:w="41"/><text x="60.8917%" y="6559.50"></text></g><g><title>`0x7FF97E62CB3D (61 samples, 0.02%)</title><rect x="60.6653%" y="6549" width="0.0218%" height="15" fill="rgb(218,134,0)" fg:x="169770" fg:w="61"/><text x="60.9153%" y="6559.50"></text></g><g><title>`0x7FF97E62CB84 (42 samples, 0.02%)</title><rect x="60.6917%" y="6549" width="0.0150%" height="15" fill="rgb(213,212,33)" fg:x="169844" fg:w="42"/><text x="60.9417%" y="6559.50"></text></g><g><title>`0x7FF97E62CBA3 (35 samples, 0.01%)</title><rect x="60.7132%" y="6549" width="0.0125%" height="15" fill="rgb(252,106,18)" fg:x="169904" fg:w="35"/><text x="60.9632%" y="6559.50"></text></g><g><title>`0x7FF97E62CC36 (33 samples, 0.01%)</title><rect x="60.7568%" y="6549" width="0.0118%" height="15" fill="rgb(208,126,42)" fg:x="170026" fg:w="33"/><text x="61.0068%" y="6559.50"></text></g><g><title>`0x7FF97E62CC65 (39 samples, 0.01%)</title><rect x="60.7764%" y="6549" width="0.0139%" height="15" fill="rgb(246,175,29)" fg:x="170081" fg:w="39"/><text x="61.0264%" y="6559.50"></text></g><g><title>`0x7FF97E62CC95 (37 samples, 0.01%)</title><rect x="60.8007%" y="6549" width="0.0132%" height="15" fill="rgb(215,13,50)" fg:x="170149" fg:w="37"/><text x="61.0507%" y="6559.50"></text></g><g><title>`0x7FF97E62D4E2 (37 samples, 0.01%)</title><rect x="60.8207%" y="6533" width="0.0132%" height="15" fill="rgb(216,172,15)" fg:x="170205" fg:w="37"/><text x="61.0707%" y="6543.50"></text></g><g><title>`0x7FF97E62D4F3 (28 samples, 0.01%)</title><rect x="60.8450%" y="6533" width="0.0100%" height="15" fill="rgb(212,103,13)" fg:x="170273" fg:w="28"/><text x="61.0950%" y="6543.50"></text></g><g><title>`0x7FF97E62D5E2 (55 samples, 0.02%)</title><rect x="60.8968%" y="6533" width="0.0197%" height="15" fill="rgb(231,171,36)" fg:x="170418" fg:w="55"/><text x="61.1468%" y="6543.50"></text></g><g><title>`0x7FF97E62D68A (43 samples, 0.02%)</title><rect x="60.9204%" y="6533" width="0.0154%" height="15" fill="rgb(250,123,20)" fg:x="170484" fg:w="43"/><text x="61.1704%" y="6543.50"></text></g><g><title>`0x7FF97E62D723 (29 samples, 0.01%)</title><rect x="60.9637%" y="6533" width="0.0104%" height="15" fill="rgb(212,53,50)" fg:x="170605" fg:w="29"/><text x="61.2137%" y="6543.50"></text></g><g><title>`0x7FF97E62CC9A (504 samples, 0.18%)</title><rect x="60.8139%" y="6549" width="0.1801%" height="15" fill="rgb(243,54,12)" fg:x="170186" fg:w="504"/><text x="61.0639%" y="6559.50"></text></g><g><title>`0x7FF97E62CCC1 (37 samples, 0.01%)</title><rect x="60.9958%" y="6549" width="0.0132%" height="15" fill="rgb(234,101,34)" fg:x="170695" fg:w="37"/><text x="61.2458%" y="6559.50"></text></g><g><title>`0x7FF97E62CCF8 (31 samples, 0.01%)</title><rect x="61.0101%" y="6549" width="0.0111%" height="15" fill="rgb(254,67,22)" fg:x="170735" fg:w="31"/><text x="61.2601%" y="6559.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (1,213 samples, 0.43%)</title><rect x="60.6199%" y="6613" width="0.4335%" height="15" fill="rgb(250,35,47)" fg:x="169643" fg:w="1213"/><text x="60.8699%" y="6623.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (1,213 samples, 0.43%)</title><rect x="60.6199%" y="6597" width="0.4335%" height="15" fill="rgb(226,126,38)" fg:x="169643" fg:w="1213"/><text x="60.8699%" y="6607.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (1,213 samples, 0.43%)</title><rect x="60.6199%" y="6581" width="0.4335%" height="15" fill="rgb(216,138,53)" fg:x="169643" fg:w="1213"/><text x="60.8699%" y="6591.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (1,213 samples, 0.43%)</title><rect x="60.6199%" y="6565" width="0.4335%" height="15" fill="rgb(246,199,43)" fg:x="169643" fg:w="1213"/><text x="60.8699%" y="6575.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::process_heap_alloc (33 samples, 0.01%)</title><rect x="61.0416%" y="6549" width="0.0118%" height="15" fill="rgb(232,125,11)" fg:x="170823" fg:w="33"/><text x="61.2916%" y="6559.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$11::clone(alloc::vec::Vec&lt;tuple$ (2,084 samples, 0.74%)</title><rect x="60.3147%" y="6677" width="0.7447%" height="15" fill="rgb(218,219,45)" fg:x="168789" fg:w="2084"/><text x="60.5647%" y="6687.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (2,084 samples, 0.74%)</title><rect x="60.3147%" y="6661" width="0.7447%" height="15" fill="rgb(216,102,54)" fg:x="168789" fg:w="2084"/><text x="60.5647%" y="6671.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$&lt;tuple$ (2,074 samples, 0.74%)</title><rect x="60.3183%" y="6645" width="0.7411%" height="15" fill="rgb(250,228,7)" fg:x="168799" fg:w="2074"/><text x="60.5683%" y="6655.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$&lt;tuple$ (2,074 samples, 0.74%)</title><rect x="60.3183%" y="6629" width="0.7411%" height="15" fill="rgb(226,125,25)" fg:x="168799" fg:w="2074"/><text x="60.5683%" y="6639.50"></text></g><g><title>neural_network.exe`core::cmp::impls::impl$21::eq (39 samples, 0.01%)</title><rect x="61.0987%" y="6661" width="0.0139%" height="15" fill="rgb(224,165,27)" fg:x="170983" fg:w="39"/><text x="61.3487%" y="6671.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (1,897 samples, 0.68%)</title><rect x="61.1127%" y="6661" width="0.6779%" height="15" fill="rgb(233,86,3)" fg:x="171022" fg:w="1897"/><text x="61.3627%" y="6671.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (1,897 samples, 0.68%)</title><rect x="61.1127%" y="6645" width="0.6779%" height="15" fill="rgb(228,116,20)" fg:x="171022" fg:w="1897"/><text x="61.3627%" y="6655.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (185 samples, 0.07%)</title><rect x="61.7244%" y="6629" width="0.0661%" height="15" fill="rgb(209,192,17)" fg:x="172734" fg:w="185"/><text x="61.9744%" y="6639.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (28 samples, 0.01%)</title><rect x="61.7905%" y="6645" width="0.0100%" height="15" fill="rgb(224,88,34)" fg:x="172919" fg:w="28"/><text x="62.0405%" y="6655.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (28 samples, 0.01%)</title><rect x="61.7905%" y="6629" width="0.0100%" height="15" fill="rgb(233,38,6)" fg:x="172919" fg:w="28"/><text x="62.0405%" y="6639.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (28 samples, 0.01%)</title><rect x="61.7905%" y="6613" width="0.0100%" height="15" fill="rgb(212,59,30)" fg:x="172919" fg:w="28"/><text x="62.0405%" y="6623.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (28 samples, 0.01%)</title><rect x="61.7905%" y="6597" width="0.0100%" height="15" fill="rgb(213,80,3)" fg:x="172919" fg:w="28"/><text x="62.0405%" y="6607.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$ (2,531 samples, 0.90%)</title><rect x="61.0594%" y="6677" width="0.9044%" height="15" fill="rgb(251,178,7)" fg:x="170873" fg:w="2531"/><text x="61.3094%" y="6687.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;tuple$ (485 samples, 0.17%)</title><rect x="61.7905%" y="6661" width="0.1733%" height="15" fill="rgb(213,154,26)" fg:x="172919" fg:w="485"/><text x="62.0405%" y="6671.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;tuple$ (457 samples, 0.16%)</title><rect x="61.8006%" y="6645" width="0.1633%" height="15" fill="rgb(238,165,49)" fg:x="172947" fg:w="457"/><text x="62.0506%" y="6655.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (44 samples, 0.02%)</title><rect x="61.9639%" y="6645" width="0.0157%" height="15" fill="rgb(248,91,46)" fg:x="173404" fg:w="44"/><text x="62.2139%" y="6655.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (44 samples, 0.02%)</title><rect x="61.9639%" y="6629" width="0.0157%" height="15" fill="rgb(244,21,52)" fg:x="173404" fg:w="44"/><text x="62.2139%" y="6639.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (44 samples, 0.02%)</title><rect x="61.9639%" y="6613" width="0.0157%" height="15" fill="rgb(247,122,20)" fg:x="173404" fg:w="44"/><text x="62.2139%" y="6623.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (44 samples, 0.02%)</title><rect x="61.9639%" y="6597" width="0.0157%" height="15" fill="rgb(218,27,9)" fg:x="173404" fg:w="44"/><text x="62.2139%" y="6607.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (81 samples, 0.03%)</title><rect x="61.9639%" y="6661" width="0.0289%" height="15" fill="rgb(246,7,6)" fg:x="173404" fg:w="81"/><text x="62.2139%" y="6671.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;tuple$ (37 samples, 0.01%)</title><rect x="61.9796%" y="6645" width="0.0132%" height="15" fill="rgb(227,135,54)" fg:x="173448" fg:w="37"/><text x="62.2296%" y="6655.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, core::ops::range::Range (2,410 samples, 0.86%)</title><rect x="61.9639%" y="6677" width="0.8612%" height="15" fill="rgb(247,14,11)" fg:x="173404" fg:w="2410"/><text x="62.2139%" y="6687.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (2,329 samples, 0.83%)</title><rect x="61.9928%" y="6661" width="0.8322%" height="15" fill="rgb(206,149,34)" fg:x="173485" fg:w="2329"/><text x="62.2428%" y="6671.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (2,329 samples, 0.83%)</title><rect x="61.9928%" y="6645" width="0.8322%" height="15" fill="rgb(227,228,4)" fg:x="173485" fg:w="2329"/><text x="62.2428%" y="6655.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (279 samples, 0.10%)</title><rect x="62.7253%" y="6629" width="0.0997%" height="15" fill="rgb(238,218,28)" fg:x="175535" fg:w="279"/><text x="62.9753%" y="6639.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (64 samples, 0.02%)</title><rect x="62.8022%" y="6613" width="0.0229%" height="15" fill="rgb(252,86,40)" fg:x="175750" fg:w="64"/><text x="63.0522%" y="6623.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (64 samples, 0.02%)</title><rect x="62.8022%" y="6597" width="0.0229%" height="15" fill="rgb(251,225,11)" fg:x="175750" fg:w="64"/><text x="63.0522%" y="6607.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (64 samples, 0.02%)</title><rect x="62.8022%" y="6581" width="0.0229%" height="15" fill="rgb(206,46,49)" fg:x="175750" fg:w="64"/><text x="63.0522%" y="6591.50"></text></g><g><title>`0x7FF97E62AFA5 (66 samples, 0.02%)</title><rect x="62.8411%" y="6581" width="0.0236%" height="15" fill="rgb(245,128,24)" fg:x="175859" fg:w="66"/><text x="63.0911%" y="6591.50"></text></g><g><title>`0x7FF97E62AFBA (134 samples, 0.05%)</title><rect x="62.8658%" y="6581" width="0.0479%" height="15" fill="rgb(219,177,34)" fg:x="175928" fg:w="134"/><text x="63.1158%" y="6591.50"></text></g><g><title>`0x7FF97E62AFE0 (229 samples, 0.08%)</title><rect x="62.9151%" y="6581" width="0.0818%" height="15" fill="rgb(218,60,48)" fg:x="176066" fg:w="229"/><text x="63.1651%" y="6591.50"></text></g><g><title>`0x7FF97E62BB70 (269 samples, 0.10%)</title><rect x="62.9991%" y="6565" width="0.0961%" height="15" fill="rgb(221,11,5)" fg:x="176301" fg:w="269"/><text x="63.2491%" y="6575.50"></text></g><g><title>`0x7FF97E62BB84 (273 samples, 0.10%)</title><rect x="63.0970%" y="6565" width="0.0976%" height="15" fill="rgb(220,148,13)" fg:x="176575" fg:w="273"/><text x="63.3470%" y="6575.50"></text></g><g><title>`0x7FF97E62C2B1 (247 samples, 0.09%)</title><rect x="63.1985%" y="6565" width="0.0883%" height="15" fill="rgb(210,16,3)" fg:x="176859" fg:w="247"/><text x="63.4485%" y="6575.50"></text></g><g><title>`0x7FF97E62C38A (252 samples, 0.09%)</title><rect x="63.3085%" y="6565" width="0.0900%" height="15" fill="rgb(236,80,2)" fg:x="177167" fg:w="252"/><text x="63.5585%" y="6575.50"></text></g><g><title>`0x7FF97E69CB43 (151 samples, 0.05%)</title><rect x="63.3986%" y="6565" width="0.0540%" height="15" fill="rgb(239,129,19)" fg:x="177419" fg:w="151"/><text x="63.6486%" y="6575.50"></text></g><g><title>`0x7FF97E69CB6A (70 samples, 0.03%)</title><rect x="63.4590%" y="6565" width="0.0250%" height="15" fill="rgb(220,106,35)" fg:x="177588" fg:w="70"/><text x="63.7090%" y="6575.50"></text></g><g><title>`0x7FF97E69CB8E (33 samples, 0.01%)</title><rect x="63.4868%" y="6565" width="0.0118%" height="15" fill="rgb(252,139,45)" fg:x="177666" fg:w="33"/><text x="63.7368%" y="6575.50"></text></g><g><title>`0x7FF97E62AFF1 (1,572 samples, 0.56%)</title><rect x="62.9973%" y="6581" width="0.5617%" height="15" fill="rgb(229,8,36)" fg:x="176296" fg:w="1572"/><text x="63.2473%" y="6591.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (2,065 samples, 0.74%)</title><rect x="62.8408%" y="6613" width="0.7379%" height="15" fill="rgb(230,126,33)" fg:x="175858" fg:w="2065"/><text x="63.0908%" y="6623.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (2,065 samples, 0.74%)</title><rect x="62.8408%" y="6597" width="0.7379%" height="15" fill="rgb(239,140,21)" fg:x="175858" fg:w="2065"/><text x="63.0908%" y="6607.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (48 samples, 0.02%)</title><rect x="63.5615%" y="6581" width="0.0172%" height="15" fill="rgb(254,104,9)" fg:x="177875" fg:w="48"/><text x="63.8115%" y="6591.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::dealloc (48 samples, 0.02%)</title><rect x="63.5615%" y="6565" width="0.0172%" height="15" fill="rgb(239,52,14)" fg:x="177875" fg:w="48"/><text x="63.8115%" y="6575.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;tuple$ (2,142 samples, 0.77%)</title><rect x="62.8254%" y="6677" width="0.7654%" height="15" fill="rgb(208,227,44)" fg:x="175815" fg:w="2142"/><text x="63.0754%" y="6687.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (2,142 samples, 0.77%)</title><rect x="62.8254%" y="6661" width="0.7654%" height="15" fill="rgb(246,18,19)" fg:x="175815" fg:w="2142"/><text x="63.0754%" y="6671.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (2,142 samples, 0.77%)</title><rect x="62.8254%" y="6645" width="0.7654%" height="15" fill="rgb(235,228,25)" fg:x="175815" fg:w="2142"/><text x="63.0754%" y="6655.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (2,099 samples, 0.75%)</title><rect x="62.8408%" y="6629" width="0.7501%" height="15" fill="rgb(240,156,20)" fg:x="175858" fg:w="2099"/><text x="63.0908%" y="6639.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::current_memory (34 samples, 0.01%)</title><rect x="63.5787%" y="6613" width="0.0121%" height="15" fill="rgb(224,8,20)" fg:x="177923" fg:w="34"/><text x="63.8287%" y="6623.50"></text></g><g><title>neural_network.exe`core::num::impl$11::unchecked_mul (34 samples, 0.01%)</title><rect x="63.5787%" y="6597" width="0.0121%" height="15" fill="rgb(214,12,52)" fg:x="177923" fg:w="34"/><text x="63.8287%" y="6607.50"></text></g><g><title>neural_network.exe`core::iter::adapters::rev::impl$1::next(core::iter::adapters::rev::Rev&lt;core::ops::range::Range (36 samples, 0.01%)</title><rect x="63.5990%" y="6581" width="0.0129%" height="15" fill="rgb(211,220,47)" fg:x="177980" fg:w="36"/><text x="63.8490%" y="6591.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$7::next_back(core::ops::range::Range (36 samples, 0.01%)</title><rect x="63.5990%" y="6565" width="0.0129%" height="15" fill="rgb(250,173,5)" fg:x="177980" fg:w="36"/><text x="63.8490%" y="6575.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$5::spec_next_back(core::ops::range::Range (36 samples, 0.01%)</title><rect x="63.5990%" y="6549" width="0.0129%" height="15" fill="rgb(250,125,52)" fg:x="177980" fg:w="36"/><text x="63.8490%" y="6559.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy(tuple$&lt;usize,usize&gt;*, tuple$ (49 samples, 0.02%)</title><rect x="63.6366%" y="6549" width="0.0175%" height="15" fill="rgb(209,133,18)" fg:x="178085" fg:w="49"/><text x="63.8866%" y="6559.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::swap(ref_mut$&lt;slice2$&lt;tuple$ (187 samples, 0.07%)</title><rect x="63.6119%" y="6581" width="0.0668%" height="15" fill="rgb(216,173,22)" fg:x="178016" fg:w="187"/><text x="63.8619%" y="6591.50"></text></g><g><title>neural_network.exe`core::ptr::swap(tuple$&lt;usize,usize&gt;*, tuple$ (118 samples, 0.04%)</title><rect x="63.6366%" y="6565" width="0.0422%" height="15" fill="rgb(205,3,22)" fg:x="178085" fg:w="118"/><text x="63.8866%" y="6575.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping(tuple$&lt;usize,usize&gt;*, tuple$ (69 samples, 0.02%)</title><rect x="63.6541%" y="6549" width="0.0247%" height="15" fill="rgb(248,22,20)" fg:x="178134" fg:w="69"/><text x="63.9041%" y="6559.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::round(rand_chacha::guts::State&lt;ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (61 samples, 0.02%)</title><rect x="63.7663%" y="6309" width="0.0218%" height="15" fill="rgb(233,6,29)" fg:x="178448" fg:w="61"/><text x="64.0163%" y="6319.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place (554 samples, 0.20%)</title><rect x="63.5908%" y="6677" width="0.1980%" height="15" fill="rgb(240,22,54)" fg:x="177957" fg:w="554"/><text x="63.8408%" y="6687.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (554 samples, 0.20%)</title><rect x="63.5908%" y="6661" width="0.1980%" height="15" fill="rgb(231,133,32)" fg:x="177957" fg:w="554"/><text x="63.8408%" y="6671.50"></text></g><g><title>neural_network.exe`alloc::rc::impl$30::drop(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (554 samples, 0.20%)</title><rect x="63.5908%" y="6645" width="0.1980%" height="15" fill="rgb(248,193,4)" fg:x="177957" fg:w="554"/><text x="63.8408%" y="6655.50"></text></g><g><title>neural_network.exe`alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;::inner (545 samples, 0.19%)</title><rect x="63.5940%" y="6629" width="0.1947%" height="15" fill="rgb(211,178,46)" fg:x="177966" fg:w="545"/><text x="63.8440%" y="6639.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;alloc::rc::RcBox&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt; &gt; &gt;::as_ref (545 samples, 0.19%)</title><rect x="63.5940%" y="6613" width="0.1947%" height="15" fill="rgb(224,5,42)" fg:x="177966" fg:w="545"/><text x="63.8440%" y="6623.50"></text></g><g><title>neural_network.exe`rand::seq::impl$0::shuffle&lt;tuple$&lt;usize,usize&gt;,rand::rngs::thread::ThreadRng&gt;(ref_mut$&lt;slice2$&lt;tuple$ (545 samples, 0.19%)</title><rect x="63.5940%" y="6597" width="0.1947%" height="15" fill="rgb(239,176,25)" fg:x="177966" fg:w="545"/><text x="63.8440%" y="6607.50"></text></g><g><title>neural_network.exe`rand::seq::gen_index (308 samples, 0.11%)</title><rect x="63.6787%" y="6581" width="0.1101%" height="15" fill="rgb(245,187,50)" fg:x="178203" fg:w="308"/><text x="63.9287%" y="6591.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen_range(rand::rngs::thread::ThreadRng*, core::ops::range::Range (308 samples, 0.11%)</title><rect x="63.6787%" y="6565" width="0.1101%" height="15" fill="rgb(248,24,15)" fg:x="178203" fg:w="308"/><text x="63.9287%" y="6575.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$6::sample_single(core::ops::range::Range (308 samples, 0.11%)</title><rect x="63.6787%" y="6549" width="0.1101%" height="15" fill="rgb(205,166,13)" fg:x="178203" fg:w="308"/><text x="63.9287%" y="6559.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single (308 samples, 0.11%)</title><rect x="63.6787%" y="6533" width="0.1101%" height="15" fill="rgb(208,114,23)" fg:x="178203" fg:w="308"/><text x="63.9287%" y="6543.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single_inclusive (308 samples, 0.11%)</title><rect x="63.6787%" y="6517" width="0.1101%" height="15" fill="rgb(239,127,18)" fg:x="178203" fg:w="308"/><text x="63.9287%" y="6527.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen (235 samples, 0.08%)</title><rect x="63.7048%" y="6501" width="0.0840%" height="15" fill="rgb(219,154,28)" fg:x="178276" fg:w="235"/><text x="63.9548%" y="6511.50"></text></g><g><title>neural_network.exe`rand::distributions::integer::impl$2::sample (235 samples, 0.08%)</title><rect x="63.7048%" y="6485" width="0.0840%" height="15" fill="rgb(225,157,23)" fg:x="178276" fg:w="235"/><text x="63.9548%" y="6495.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::impl$1::next_u32 (235 samples, 0.08%)</title><rect x="63.7048%" y="6469" width="0.0840%" height="15" fill="rgb(219,8,6)" fg:x="178276" fg:w="235"/><text x="63.9548%" y="6479.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$1::next_u32(rand::rngs::adapter::reseeding::ReseedingRng (235 samples, 0.08%)</title><rect x="63.7048%" y="6453" width="0.0840%" height="15" fill="rgb(212,47,6)" fg:x="178276" fg:w="235"/><text x="63.9548%" y="6463.50"></text></g><g><title>neural_network.exe`rand_core::block::impl$2::next_u32(rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore (235 samples, 0.08%)</title><rect x="63.7048%" y="6437" width="0.0840%" height="15" fill="rgb(224,190,4)" fg:x="178276" fg:w="235"/><text x="63.9548%" y="6447.50"></text></g><g><title>neural_network.exe`rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;::generate_and_set (88 samples, 0.03%)</title><rect x="63.7573%" y="6421" width="0.0314%" height="15" fill="rgb(239,183,29)" fg:x="178423" fg:w="88"/><text x="64.0073%" y="6431.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$4::generate(rand::rngs::adapter::reseeding::ReseedingCore&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt;*, rand_chacha::chacha::Array64 (88 samples, 0.03%)</title><rect x="63.7573%" y="6405" width="0.0314%" height="15" fill="rgb(213,57,7)" fg:x="178423" fg:w="88"/><text x="64.0073%" y="6415.50"></text></g><g><title>neural_network.exe`rand_chacha::chacha::impl$23::generate(rand_chacha::chacha::ChaCha12Core*, rand_chacha::chacha::Array64 (77 samples, 0.03%)</title><rect x="63.7613%" y="6389" width="0.0275%" height="15" fill="rgb(216,148,1)" fg:x="178434" fg:w="77"/><text x="64.0113%" y="6399.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::ChaCha::refill4 (77 samples, 0.03%)</title><rect x="63.7613%" y="6373" width="0.0275%" height="15" fill="rgb(236,182,29)" fg:x="178434" fg:w="77"/><text x="64.0113%" y="6383.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide::impl_avx2 (74 samples, 0.03%)</title><rect x="63.7623%" y="6357" width="0.0264%" height="15" fill="rgb(244,120,48)" fg:x="178437" fg:w="74"/><text x="64.0123%" y="6367.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide::fn_impl(ppv_lite86::x86_64::Avx2Machine (74 samples, 0.03%)</title><rect x="63.7623%" y="6341" width="0.0264%" height="15" fill="rgb(206,71,34)" fg:x="178437" fg:w="74"/><text x="64.0123%" y="6351.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide_impl(ppv_lite86::x86_64::Avx2Machine (74 samples, 0.03%)</title><rect x="63.7623%" y="6325" width="0.0264%" height="15" fill="rgb(242,32,6)" fg:x="178437" fg:w="74"/><text x="64.0123%" y="6335.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::contains(ref$&lt;slice2$&lt;tuple$&lt;usize,usize&gt; &gt; &gt;, tuple$ (937 samples, 0.33%)</title><rect x="63.7888%" y="6677" width="0.3348%" height="15" fill="rgb(241,35,3)" fg:x="178511" fg:w="937"/><text x="64.0388%" y="6687.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (937 samples, 0.33%)</title><rect x="63.7888%" y="6661" width="0.3348%" height="15" fill="rgb(222,62,19)" fg:x="178511" fg:w="937"/><text x="64.0388%" y="6671.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (937 samples, 0.33%)</title><rect x="63.7888%" y="6645" width="0.3348%" height="15" fill="rgb(223,110,41)" fg:x="178511" fg:w="937"/><text x="64.0388%" y="6655.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (92 samples, 0.03%)</title><rect x="64.0907%" y="6629" width="0.0329%" height="15" fill="rgb(208,224,4)" fg:x="179356" fg:w="92"/><text x="64.3407%" y="6639.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (45 samples, 0.02%)</title><rect x="64.1075%" y="6613" width="0.0161%" height="15" fill="rgb(241,137,19)" fg:x="179403" fg:w="45"/><text x="64.3575%" y="6623.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (45 samples, 0.02%)</title><rect x="64.1075%" y="6597" width="0.0161%" height="15" fill="rgb(244,24,17)" fg:x="179403" fg:w="45"/><text x="64.3575%" y="6607.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (45 samples, 0.02%)</title><rect x="64.1075%" y="6581" width="0.0161%" height="15" fill="rgb(245,178,49)" fg:x="179403" fg:w="45"/><text x="64.3575%" y="6591.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (303 samples, 0.11%)</title><rect x="64.1236%" y="6677" width="0.1083%" height="15" fill="rgb(219,160,38)" fg:x="179448" fg:w="303"/><text x="64.3736%" y="6687.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (73 samples, 0.03%)</title><rect x="64.2058%" y="6661" width="0.0261%" height="15" fill="rgb(228,137,14)" fg:x="179678" fg:w="73"/><text x="64.4558%" y="6671.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (73 samples, 0.03%)</title><rect x="64.2058%" y="6645" width="0.0261%" height="15" fill="rgb(237,134,11)" fg:x="179678" fg:w="73"/><text x="64.4558%" y="6655.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (73 samples, 0.03%)</title><rect x="64.2058%" y="6629" width="0.0261%" height="15" fill="rgb(211,126,44)" fg:x="179678" fg:w="73"/><text x="64.4558%" y="6639.50"></text></g><g><title>`0x7FF97E69CB70 (28 samples, 0.01%)</title><rect x="64.4609%" y="6613" width="0.0100%" height="15" fill="rgb(226,171,33)" fg:x="180392" fg:w="28"/><text x="64.7109%" y="6623.50"></text></g><g><title>`0x7FF97E69CB81 (35 samples, 0.01%)</title><rect x="64.4734%" y="6613" width="0.0125%" height="15" fill="rgb(253,99,13)" fg:x="180427" fg:w="35"/><text x="64.7234%" y="6623.50"></text></g><g><title>`0x7FF97E69CB9D (33 samples, 0.01%)</title><rect x="64.4938%" y="6613" width="0.0118%" height="15" fill="rgb(244,48,7)" fg:x="180484" fg:w="33"/><text x="64.7438%" y="6623.50"></text></g><g><title>`0x7FF97E69CBA1 (35 samples, 0.01%)</title><rect x="64.5056%" y="6613" width="0.0125%" height="15" fill="rgb(244,217,54)" fg:x="180517" fg:w="35"/><text x="64.7556%" y="6623.50"></text></g><g><title>`0x7FF97E69CBBC (45 samples, 0.02%)</title><rect x="64.5392%" y="6613" width="0.0161%" height="15" fill="rgb(224,15,18)" fg:x="180611" fg:w="45"/><text x="64.7892%" y="6623.50"></text></g><g><title>`0x7FF97E69CC6F (86 samples, 0.03%)</title><rect x="64.5721%" y="6613" width="0.0307%" height="15" fill="rgb(244,99,12)" fg:x="180703" fg:w="86"/><text x="64.8221%" y="6623.50"></text></g><g><title>`0x7FF97E69CCAF (39 samples, 0.01%)</title><rect x="64.6103%" y="6613" width="0.0139%" height="15" fill="rgb(233,226,8)" fg:x="180810" fg:w="39"/><text x="64.8603%" y="6623.50"></text></g><g><title>`0x7FF97E62AFF1 (697 samples, 0.25%)</title><rect x="64.3905%" y="6629" width="0.2491%" height="15" fill="rgb(229,211,3)" fg:x="180195" fg:w="697"/><text x="64.6405%" y="6639.50"></text></g><g><title>`0x7FF97E62D57C (66 samples, 0.02%)</title><rect x="64.8526%" y="6405" width="0.0236%" height="15" fill="rgb(216,140,21)" fg:x="181488" fg:w="66"/><text x="65.1026%" y="6415.50"></text></g><g><title>`0x7FF97E62D588 (31 samples, 0.01%)</title><rect x="64.8762%" y="6405" width="0.0111%" height="15" fill="rgb(234,122,30)" fg:x="181554" fg:w="31"/><text x="65.1262%" y="6415.50"></text></g><g><title>`0x7FF97E62D66D (38 samples, 0.01%)</title><rect x="64.9069%" y="6405" width="0.0136%" height="15" fill="rgb(236,25,46)" fg:x="181640" fg:w="38"/><text x="65.1569%" y="6415.50"></text></g><g><title>`0x7FF97E68F861 (36 samples, 0.01%)</title><rect x="64.9219%" y="6389" width="0.0129%" height="15" fill="rgb(217,52,54)" fg:x="181682" fg:w="36"/><text x="65.1719%" y="6399.50"></text></g><g><title>`0x7FF97E68F87F (28 samples, 0.01%)</title><rect x="64.9362%" y="6389" width="0.0100%" height="15" fill="rgb(222,29,26)" fg:x="181722" fg:w="28"/><text x="65.1862%" y="6399.50"></text></g><g><title>`0x7FF97E68F921 (32 samples, 0.01%)</title><rect x="64.9669%" y="6389" width="0.0114%" height="15" fill="rgb(216,177,29)" fg:x="181808" fg:w="32"/><text x="65.2169%" y="6399.50"></text></g><g><title>`0x7FF97E62D68A (189 samples, 0.07%)</title><rect x="64.9205%" y="6405" width="0.0675%" height="15" fill="rgb(247,136,51)" fg:x="181678" fg:w="189"/><text x="65.1705%" y="6415.50"></text></g><g><title>`0x7FF97E62D691 (29 samples, 0.01%)</title><rect x="64.9880%" y="6405" width="0.0104%" height="15" fill="rgb(231,47,47)" fg:x="181867" fg:w="29"/><text x="65.2380%" y="6415.50"></text></g><g><title>`0x7FF97E62D6A8 (29 samples, 0.01%)</title><rect x="64.9991%" y="6405" width="0.0104%" height="15" fill="rgb(211,192,36)" fg:x="181898" fg:w="29"/><text x="65.2491%" y="6415.50"></text></g><g><title>`0x7FF97E62D723 (48 samples, 0.02%)</title><rect x="65.0355%" y="6405" width="0.0172%" height="15" fill="rgb(229,156,32)" fg:x="182000" fg:w="48"/><text x="65.2855%" y="6415.50"></text></g><g><title>`0x7FF97E62CC9A (588 samples, 0.21%)</title><rect x="64.8508%" y="6421" width="0.2101%" height="15" fill="rgb(248,213,20)" fg:x="181483" fg:w="588"/><text x="65.1008%" y="6431.50"></text></g><g><title>`0x7FF97E62CCC1 (52 samples, 0.02%)</title><rect x="65.0631%" y="6421" width="0.0186%" height="15" fill="rgb(217,64,7)" fg:x="182077" fg:w="52"/><text x="65.3131%" y="6431.50"></text></g><g><title>`0x7FF97E62CCF8 (37 samples, 0.01%)</title><rect x="65.0823%" y="6421" width="0.0132%" height="15" fill="rgb(232,142,8)" fg:x="182131" fg:w="37"/><text x="65.3323%" y="6431.50"></text></g><g><title>`0x7FF97E63241D (34 samples, 0.01%)</title><rect x="65.1681%" y="6389" width="0.0121%" height="15" fill="rgb(224,92,44)" fg:x="182371" fg:w="34"/><text x="65.4181%" y="6399.50"></text></g><g><title>`0x7FF97E632438 (31 samples, 0.01%)</title><rect x="65.1803%" y="6389" width="0.0111%" height="15" fill="rgb(214,169,17)" fg:x="182405" fg:w="31"/><text x="65.4303%" y="6399.50"></text></g><g><title>`0x7FF97E632442 (44 samples, 0.02%)</title><rect x="65.1913%" y="6389" width="0.0157%" height="15" fill="rgb(210,59,37)" fg:x="182436" fg:w="44"/><text x="65.4413%" y="6399.50"></text></g><g><title>`0x7FF97E632447 (57 samples, 0.02%)</title><rect x="65.2071%" y="6389" width="0.0204%" height="15" fill="rgb(214,116,48)" fg:x="182480" fg:w="57"/><text x="65.4571%" y="6399.50"></text></g><g><title>`0x7FF97E63244E (58 samples, 0.02%)</title><rect x="65.2274%" y="6389" width="0.0207%" height="15" fill="rgb(244,191,6)" fg:x="182537" fg:w="58"/><text x="65.4774%" y="6399.50"></text></g><g><title>`0x7FF97E632473 (110 samples, 0.04%)</title><rect x="65.2482%" y="6389" width="0.0393%" height="15" fill="rgb(241,50,52)" fg:x="182595" fg:w="110"/><text x="65.4982%" y="6399.50"></text></g><g><title>`0x7FF97E63249F (101 samples, 0.04%)</title><rect x="65.2889%" y="6389" width="0.0361%" height="15" fill="rgb(236,75,39)" fg:x="182709" fg:w="101"/><text x="65.5389%" y="6399.50"></text></g><g><title>`0x7FF97E6324C5 (102 samples, 0.04%)</title><rect x="65.3307%" y="6389" width="0.0364%" height="15" fill="rgb(236,99,0)" fg:x="182826" fg:w="102"/><text x="65.5807%" y="6399.50"></text></g><g><title>`0x7FF97E62D57C (70 samples, 0.03%)</title><rect x="65.5026%" y="6357" width="0.0250%" height="15" fill="rgb(207,202,15)" fg:x="183307" fg:w="70"/><text x="65.7526%" y="6367.50"></text></g><g><title>`0x7FF97E62D68A (84 samples, 0.03%)</title><rect x="65.5494%" y="6357" width="0.0300%" height="15" fill="rgb(233,207,14)" fg:x="183438" fg:w="84"/><text x="65.7994%" y="6367.50"></text></g><g><title>`0x7FF97E62D723 (39 samples, 0.01%)</title><rect x="65.5966%" y="6357" width="0.0139%" height="15" fill="rgb(226,27,51)" fg:x="183570" fg:w="39"/><text x="65.8466%" y="6367.50"></text></g><g><title>`0x7FF97E62DBBF (51 samples, 0.02%)</title><rect x="65.6452%" y="6357" width="0.0182%" height="15" fill="rgb(206,104,42)" fg:x="183706" fg:w="51"/><text x="65.8952%" y="6367.50"></text></g><g><title>`0x7FF97E62DBDD (35 samples, 0.01%)</title><rect x="65.6634%" y="6357" width="0.0125%" height="15" fill="rgb(212,225,4)" fg:x="183757" fg:w="35"/><text x="65.9134%" y="6367.50"></text></g><g><title>`0x7FF97E62CC9A (638 samples, 0.23%)</title><rect x="65.4490%" y="6373" width="0.2280%" height="15" fill="rgb(233,96,42)" fg:x="183157" fg:w="638"/><text x="65.6990%" y="6383.50"></text></g><g><title>`0x7FF97E62CCC1 (40 samples, 0.01%)</title><rect x="65.6770%" y="6373" width="0.0143%" height="15" fill="rgb(229,21,32)" fg:x="183795" fg:w="40"/><text x="65.9270%" y="6383.50"></text></g><g><title>`0x7FF97E62CCF8 (34 samples, 0.01%)</title><rect x="65.6916%" y="6373" width="0.0121%" height="15" fill="rgb(226,216,24)" fg:x="183836" fg:w="34"/><text x="65.9416%" y="6383.50"></text></g><g><title>`0x7FF97E633505 (921 samples, 0.33%)</title><rect x="65.3750%" y="6389" width="0.3291%" height="15" fill="rgb(221,163,17)" fg:x="182950" fg:w="921"/><text x="65.6250%" y="6399.50"></text></g><g><title>`0x7FF97E696B96 (419 samples, 0.15%)</title><rect x="65.7098%" y="6373" width="0.1497%" height="15" fill="rgb(216,216,42)" fg:x="183887" fg:w="419"/><text x="65.9598%" y="6383.50"></text></g><g><title>`0x7FF97E696C00 (54 samples, 0.02%)</title><rect x="65.8617%" y="6373" width="0.0193%" height="15" fill="rgb(240,118,7)" fg:x="184312" fg:w="54"/><text x="66.1117%" y="6383.50"></text></g><g><title>`0x7FF97E696C13 (45 samples, 0.02%)</title><rect x="65.8846%" y="6373" width="0.0161%" height="15" fill="rgb(221,67,37)" fg:x="184376" fg:w="45"/><text x="66.1346%" y="6383.50"></text></g><g><title>`0x7FF97E696C22 (54 samples, 0.02%)</title><rect x="65.9035%" y="6373" width="0.0193%" height="15" fill="rgb(241,32,44)" fg:x="184429" fg:w="54"/><text x="66.1535%" y="6383.50"></text></g><g><title>`0x7FF97E633550 (634 samples, 0.23%)</title><rect x="65.7055%" y="6389" width="0.2266%" height="15" fill="rgb(235,204,43)" fg:x="183875" fg:w="634"/><text x="65.9555%" y="6399.50"></text></g><g><title>`0x7FF97E69CC6F (81 samples, 0.03%)</title><rect x="66.0114%" y="6357" width="0.0289%" height="15" fill="rgb(213,116,10)" fg:x="184731" fg:w="81"/><text x="66.2614%" y="6367.50"></text></g><g><title>`0x7FF97E69CCAF (189 samples, 0.07%)</title><rect x="66.0550%" y="6357" width="0.0675%" height="15" fill="rgb(239,15,48)" fg:x="184853" fg:w="189"/><text x="66.3050%" y="6367.50"></text></g><g><title>`0x7FF97E62AFF1 (537 samples, 0.19%)</title><rect x="65.9578%" y="6373" width="0.1919%" height="15" fill="rgb(207,123,36)" fg:x="184581" fg:w="537"/><text x="66.2078%" y="6383.50"></text></g><g><title>`0x7FF97E633562 (629 samples, 0.22%)</title><rect x="65.9353%" y="6389" width="0.2248%" height="15" fill="rgb(209,103,30)" fg:x="184518" fg:w="629"/><text x="66.1853%" y="6399.50"></text></g><g><title>`0x7FF97E62AFF4 (29 samples, 0.01%)</title><rect x="66.1497%" y="6373" width="0.0104%" height="15" fill="rgb(238,100,19)" fg:x="185118" fg:w="29"/><text x="66.3997%" y="6383.50"></text></g><g><title>`0x7FF97E633598 (33 samples, 0.01%)</title><rect x="66.1687%" y="6389" width="0.0118%" height="15" fill="rgb(244,30,14)" fg:x="185171" fg:w="33"/><text x="66.4187%" y="6399.50"></text></g><g><title>`0x7FF97E6322C7 (3,012 samples, 1.08%)</title><rect x="65.1477%" y="6405" width="1.0763%" height="15" fill="rgb(249,174,6)" fg:x="182314" fg:w="3012"/><text x="65.3977%" y="6415.50"></text></g><g><title>`0x7FF97E6335AC (122 samples, 0.04%)</title><rect x="66.1804%" y="6389" width="0.0436%" height="15" fill="rgb(235,213,41)" fg:x="185204" fg:w="122"/><text x="66.4304%" y="6399.50"></text></g><g><title>`0x7FF97E6322FB (49 samples, 0.02%)</title><rect x="66.2244%" y="6405" width="0.0175%" height="15" fill="rgb(213,118,6)" fg:x="185327" fg:w="49"/><text x="66.4744%" y="6415.50"></text></g><g><title>`0x7FF97E632307 (80 samples, 0.03%)</title><rect x="66.2430%" y="6405" width="0.0286%" height="15" fill="rgb(235,44,51)" fg:x="185379" fg:w="80"/><text x="66.4930%" y="6415.50"></text></g><g><title>`0x7FF97E632312 (117 samples, 0.04%)</title><rect x="66.2723%" y="6405" width="0.0418%" height="15" fill="rgb(217,9,53)" fg:x="185461" fg:w="117"/><text x="66.5223%" y="6415.50"></text></g><g><title>`0x7FF97E63218A (3,317 samples, 1.19%)</title><rect x="65.1299%" y="6421" width="1.1853%" height="15" fill="rgb(237,172,34)" fg:x="182264" fg:w="3317"/><text x="65.3799%" y="6431.50"></text></g><g><title>`0x7FF97E63219E (99 samples, 0.04%)</title><rect x="66.3152%" y="6421" width="0.0354%" height="15" fill="rgb(206,206,11)" fg:x="185581" fg:w="99"/><text x="66.5652%" y="6431.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_realloc (46 samples, 0.02%)</title><rect x="66.3605%" y="6421" width="0.0164%" height="15" fill="rgb(214,149,29)" fg:x="185708" fg:w="46"/><text x="66.6105%" y="6431.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::realloc (29 samples, 0.01%)</title><rect x="66.3666%" y="6405" width="0.0104%" height="15" fill="rgb(208,123,3)" fg:x="185725" fg:w="29"/><text x="66.6166%" y="6415.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (4,332 samples, 1.55%)</title><rect x="64.8311%" y="6469" width="1.5480%" height="15" fill="rgb(229,126,4)" fg:x="181428" fg:w="4332"/><text x="65.0811%" y="6479.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (4,332 samples, 1.55%)</title><rect x="64.8311%" y="6453" width="1.5480%" height="15" fill="rgb(222,92,36)" fg:x="181428" fg:w="4332"/><text x="65.0811%" y="6463.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (4,332 samples, 1.55%)</title><rect x="64.8311%" y="6437" width="1.5480%" height="15" fill="rgb(216,39,41)" fg:x="181428" fg:w="4332"/><text x="65.0811%" y="6447.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_mut_ptr (4,907 samples, 1.75%)</title><rect x="64.6807%" y="6613" width="1.7535%" height="15" fill="rgb(253,127,28)" fg:x="181007" fg:w="4907"/><text x="64.9307%" y="6623.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (4,904 samples, 1.75%)</title><rect x="64.6818%" y="6597" width="1.7524%" height="15" fill="rgb(249,152,51)" fg:x="181010" fg:w="4904"/><text x="64.9318%" y="6607.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (4,904 samples, 1.75%)</title><rect x="64.6818%" y="6581" width="1.7524%" height="15" fill="rgb(209,123,42)" fg:x="181010" fg:w="4904"/><text x="64.9318%" y="6591.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (4,904 samples, 1.75%)</title><rect x="64.6818%" y="6565" width="1.7524%" height="15" fill="rgb(241,118,22)" fg:x="181010" fg:w="4904"/><text x="64.9318%" y="6575.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::grow_one&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; (4,888 samples, 1.75%)</title><rect x="64.6875%" y="6549" width="1.7467%" height="15" fill="rgb(208,25,7)" fg:x="181026" fg:w="4888"/><text x="64.9375%" y="6559.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (4,740 samples, 1.69%)</title><rect x="64.7404%" y="6533" width="1.6938%" height="15" fill="rgb(243,144,39)" fg:x="181174" fg:w="4740"/><text x="64.9904%" y="6543.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (4,728 samples, 1.69%)</title><rect x="64.7447%" y="6517" width="1.6895%" height="15" fill="rgb(250,50,5)" fg:x="181186" fg:w="4728"/><text x="64.9947%" y="6527.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (4,638 samples, 1.66%)</title><rect x="64.7768%" y="6501" width="1.6573%" height="15" fill="rgb(207,67,11)" fg:x="181276" fg:w="4638"/><text x="65.0268%" y="6511.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (4,569 samples, 1.63%)</title><rect x="64.8015%" y="6485" width="1.6327%" height="15" fill="rgb(245,204,40)" fg:x="181345" fg:w="4569"/><text x="65.0515%" y="6495.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;, alloc::raw_vec::finish_grow::closure_env$0 (154 samples, 0.06%)</title><rect x="66.3791%" y="6469" width="0.0550%" height="15" fill="rgb(238,228,24)" fg:x="185760" fg:w="154"/><text x="66.6291%" y="6479.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (5,400 samples, 1.93%)</title><rect x="64.6485%" y="6629" width="1.9296%" height="15" fill="rgb(217,116,22)" fg:x="180917" fg:w="5400"/><text x="64.8985%" y="6639.50">n..</text></g><g><title>neural_network.exe`core::ptr::write(tuple$&lt;usize,usize&gt;*, tuple$ (403 samples, 0.14%)</title><rect x="66.4342%" y="6613" width="0.1440%" height="15" fill="rgb(234,98,12)" fg:x="185914" fg:w="403"/><text x="66.6842%" y="6623.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::remove (47 samples, 0.02%)</title><rect x="66.5782%" y="6629" width="0.0168%" height="15" fill="rgb(242,170,50)" fg:x="186317" fg:w="47"/><text x="66.8282%" y="6639.50"></text></g><g><title>`0x7FF968D51381 (593 samples, 0.21%)</title><rect x="66.6153%" y="6565" width="0.2119%" height="15" fill="rgb(235,7,5)" fg:x="186421" fg:w="593"/><text x="66.8653%" y="6575.50"></text></g><g><title>`0x7FF97E62CAFF (48 samples, 0.02%)</title><rect x="66.8798%" y="6501" width="0.0172%" height="15" fill="rgb(241,114,28)" fg:x="187161" fg:w="48"/><text x="67.1298%" y="6511.50"></text></g><g><title>`0x7FF97E62CB20 (54 samples, 0.02%)</title><rect x="66.8976%" y="6501" width="0.0193%" height="15" fill="rgb(246,112,42)" fg:x="187211" fg:w="54"/><text x="67.1476%" y="6511.50"></text></g><g><title>`0x7FF97E62CB3D (48 samples, 0.02%)</title><rect x="66.9223%" y="6501" width="0.0172%" height="15" fill="rgb(248,228,14)" fg:x="187280" fg:w="48"/><text x="67.1723%" y="6511.50"></text></g><g><title>`0x7FF97E62CC65 (36 samples, 0.01%)</title><rect x="66.9984%" y="6501" width="0.0129%" height="15" fill="rgb(208,133,18)" fg:x="187493" fg:w="36"/><text x="67.2484%" y="6511.50"></text></g><g><title>`0x7FF97E62CC95 (38 samples, 0.01%)</title><rect x="67.0170%" y="6501" width="0.0136%" height="15" fill="rgb(207,35,49)" fg:x="187545" fg:w="38"/><text x="67.2670%" y="6511.50"></text></g><g><title>`0x7FF97E62D4E2 (33 samples, 0.01%)</title><rect x="67.0377%" y="6485" width="0.0118%" height="15" fill="rgb(205,68,36)" fg:x="187603" fg:w="33"/><text x="67.2877%" y="6495.50"></text></g><g><title>`0x7FF97E62D4F3 (28 samples, 0.01%)</title><rect x="67.0581%" y="6485" width="0.0100%" height="15" fill="rgb(245,62,40)" fg:x="187660" fg:w="28"/><text x="67.3081%" y="6495.50"></text></g><g><title>`0x7FF97E62D5E2 (49 samples, 0.02%)</title><rect x="67.1106%" y="6485" width="0.0175%" height="15" fill="rgb(228,27,24)" fg:x="187807" fg:w="49"/><text x="67.3606%" y="6495.50"></text></g><g><title>`0x7FF97E62D68A (65 samples, 0.02%)</title><rect x="67.1349%" y="6485" width="0.0232%" height="15" fill="rgb(253,19,12)" fg:x="187875" fg:w="65"/><text x="67.3849%" y="6495.50"></text></g><g><title>`0x7FF97E62D6C7 (42 samples, 0.02%)</title><rect x="67.1696%" y="6485" width="0.0150%" height="15" fill="rgb(232,28,20)" fg:x="187972" fg:w="42"/><text x="67.4196%" y="6495.50"></text></g><g><title>`0x7FF97E62D723 (39 samples, 0.01%)</title><rect x="67.1949%" y="6485" width="0.0139%" height="15" fill="rgb(218,35,51)" fg:x="188043" fg:w="39"/><text x="67.4449%" y="6495.50"></text></g><g><title>`0x7FF97E62DB41 (29 samples, 0.01%)</title><rect x="67.2317%" y="6485" width="0.0104%" height="15" fill="rgb(212,90,40)" fg:x="188146" fg:w="29"/><text x="67.4817%" y="6495.50"></text></g><g><title>`0x7FF97E631B1F (31 samples, 0.01%)</title><rect x="67.2575%" y="6469" width="0.0111%" height="15" fill="rgb(220,172,12)" fg:x="188218" fg:w="31"/><text x="67.5075%" y="6479.50"></text></g><g><title>`0x7FF97E62DBBF (69 samples, 0.02%)</title><rect x="67.2442%" y="6485" width="0.0247%" height="15" fill="rgb(226,159,20)" fg:x="188181" fg:w="69"/><text x="67.4942%" y="6495.50"></text></g><g><title>`0x7FF97E62DBDD (35 samples, 0.01%)</title><rect x="67.2689%" y="6485" width="0.0125%" height="15" fill="rgb(234,205,16)" fg:x="188250" fg:w="35"/><text x="67.5189%" y="6495.50"></text></g><g><title>`0x7FF97E62CC9A (705 samples, 0.25%)</title><rect x="67.0306%" y="6501" width="0.2519%" height="15" fill="rgb(207,9,39)" fg:x="187583" fg:w="705"/><text x="67.2806%" y="6511.50"></text></g><g><title>`0x7FF97E62CCC1 (38 samples, 0.01%)</title><rect x="67.2832%" y="6501" width="0.0136%" height="15" fill="rgb(249,143,15)" fg:x="188290" fg:w="38"/><text x="67.5332%" y="6511.50"></text></g><g><title>`0x7FF97E62CCF8 (36 samples, 0.01%)</title><rect x="67.2978%" y="6501" width="0.0129%" height="15" fill="rgb(253,133,29)" fg:x="188331" fg:w="36"/><text x="67.5478%" y="6511.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_alloc (38 samples, 0.01%)</title><rect x="67.3286%" y="6501" width="0.0136%" height="15" fill="rgb(221,187,0)" fg:x="188417" fg:w="38"/><text x="67.5786%" y="6511.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (1,354 samples, 0.48%)</title><rect x="66.8730%" y="6565" width="0.4838%" height="15" fill="rgb(205,204,26)" fg:x="187142" fg:w="1354"/><text x="67.1230%" y="6575.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (1,354 samples, 0.48%)</title><rect x="66.8730%" y="6549" width="0.4838%" height="15" fill="rgb(224,68,54)" fg:x="187142" fg:w="1354"/><text x="67.1230%" y="6559.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (1,354 samples, 0.48%)</title><rect x="66.8730%" y="6533" width="0.4838%" height="15" fill="rgb(209,67,4)" fg:x="187142" fg:w="1354"/><text x="67.1230%" y="6543.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (1,354 samples, 0.48%)</title><rect x="66.8730%" y="6517" width="0.4838%" height="15" fill="rgb(228,229,18)" fg:x="187142" fg:w="1354"/><text x="67.1230%" y="6527.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::process_heap_alloc (41 samples, 0.01%)</title><rect x="67.3422%" y="6501" width="0.0147%" height="15" fill="rgb(231,89,13)" fg:x="188455" fg:w="41"/><text x="67.5922%" y="6511.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$&lt;tuple$ (2,136 samples, 0.76%)</title><rect x="66.5982%" y="6597" width="0.7633%" height="15" fill="rgb(210,182,18)" fg:x="186373" fg:w="2136"/><text x="66.8482%" y="6607.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$&lt;tuple$ (2,136 samples, 0.76%)</title><rect x="66.5982%" y="6581" width="0.7633%" height="15" fill="rgb(240,105,2)" fg:x="186373" fg:w="2136"/><text x="66.8482%" y="6591.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$11::clone(alloc::vec::Vec&lt;tuple$ (2,148 samples, 0.77%)</title><rect x="66.5950%" y="6629" width="0.7676%" height="15" fill="rgb(207,170,50)" fg:x="186364" fg:w="2148"/><text x="66.8450%" y="6639.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (2,148 samples, 0.77%)</title><rect x="66.5950%" y="6613" width="0.7676%" height="15" fill="rgb(232,133,24)" fg:x="186364" fg:w="2148"/><text x="66.8450%" y="6623.50"></text></g><g><title>neural_network.exe`core::cmp::impls::impl$21::eq (46 samples, 0.02%)</title><rect x="67.4000%" y="6613" width="0.0164%" height="15" fill="rgb(235,166,27)" fg:x="188617" fg:w="46"/><text x="67.6500%" y="6623.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (1,874 samples, 0.67%)</title><rect x="67.4165%" y="6613" width="0.6697%" height="15" fill="rgb(209,19,13)" fg:x="188663" fg:w="1874"/><text x="67.6665%" y="6623.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (1,874 samples, 0.67%)</title><rect x="67.4165%" y="6597" width="0.6697%" height="15" fill="rgb(226,79,39)" fg:x="188663" fg:w="1874"/><text x="67.6665%" y="6607.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (244 samples, 0.09%)</title><rect x="67.9989%" y="6581" width="0.0872%" height="15" fill="rgb(222,163,10)" fg:x="190293" fg:w="244"/><text x="68.2489%" y="6591.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (32 samples, 0.01%)</title><rect x="68.0861%" y="6597" width="0.0114%" height="15" fill="rgb(214,44,19)" fg:x="190537" fg:w="32"/><text x="68.3361%" y="6607.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (32 samples, 0.01%)</title><rect x="68.0861%" y="6581" width="0.0114%" height="15" fill="rgb(210,217,13)" fg:x="190537" fg:w="32"/><text x="68.3361%" y="6591.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (32 samples, 0.01%)</title><rect x="68.0861%" y="6565" width="0.0114%" height="15" fill="rgb(237,61,54)" fg:x="190537" fg:w="32"/><text x="68.3361%" y="6575.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (32 samples, 0.01%)</title><rect x="68.0861%" y="6549" width="0.0114%" height="15" fill="rgb(226,184,24)" fg:x="190537" fg:w="32"/><text x="68.3361%" y="6559.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$ (2,496 samples, 0.89%)</title><rect x="67.3625%" y="6629" width="0.8919%" height="15" fill="rgb(223,226,4)" fg:x="188512" fg:w="2496"/><text x="67.6125%" y="6639.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;tuple$ (471 samples, 0.17%)</title><rect x="68.0861%" y="6613" width="0.1683%" height="15" fill="rgb(210,26,41)" fg:x="190537" fg:w="471"/><text x="68.3361%" y="6623.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;tuple$ (439 samples, 0.16%)</title><rect x="68.0976%" y="6597" width="0.1569%" height="15" fill="rgb(220,221,6)" fg:x="190569" fg:w="439"/><text x="68.3476%" y="6607.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (36 samples, 0.01%)</title><rect x="68.2544%" y="6597" width="0.0129%" height="15" fill="rgb(225,89,49)" fg:x="191008" fg:w="36"/><text x="68.5044%" y="6607.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (36 samples, 0.01%)</title><rect x="68.2544%" y="6581" width="0.0129%" height="15" fill="rgb(218,70,45)" fg:x="191008" fg:w="36"/><text x="68.5044%" y="6591.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (36 samples, 0.01%)</title><rect x="68.2544%" y="6565" width="0.0129%" height="15" fill="rgb(238,166,21)" fg:x="191008" fg:w="36"/><text x="68.5044%" y="6575.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (36 samples, 0.01%)</title><rect x="68.2544%" y="6549" width="0.0129%" height="15" fill="rgb(224,141,44)" fg:x="191008" fg:w="36"/><text x="68.5044%" y="6559.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (77 samples, 0.03%)</title><rect x="68.2544%" y="6613" width="0.0275%" height="15" fill="rgb(230,12,49)" fg:x="191008" fg:w="77"/><text x="68.5044%" y="6623.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;tuple$ (41 samples, 0.01%)</title><rect x="68.2673%" y="6597" width="0.0147%" height="15" fill="rgb(212,174,12)" fg:x="191044" fg:w="41"/><text x="68.5173%" y="6607.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, core::ops::range::Range (2,234 samples, 0.80%)</title><rect x="68.2544%" y="6629" width="0.7983%" height="15" fill="rgb(246,67,9)" fg:x="191008" fg:w="2234"/><text x="68.5044%" y="6639.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (2,157 samples, 0.77%)</title><rect x="68.2820%" y="6613" width="0.7708%" height="15" fill="rgb(239,35,23)" fg:x="191085" fg:w="2157"/><text x="68.5320%" y="6623.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (2,157 samples, 0.77%)</title><rect x="68.2820%" y="6597" width="0.7708%" height="15" fill="rgb(211,167,0)" fg:x="191085" fg:w="2157"/><text x="68.5320%" y="6607.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (241 samples, 0.09%)</title><rect x="68.9666%" y="6581" width="0.0861%" height="15" fill="rgb(225,119,45)" fg:x="193001" fg:w="241"/><text x="69.2166%" y="6591.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (56 samples, 0.02%)</title><rect x="69.0327%" y="6565" width="0.0200%" height="15" fill="rgb(210,162,6)" fg:x="193186" fg:w="56"/><text x="69.2827%" y="6575.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (56 samples, 0.02%)</title><rect x="69.0327%" y="6549" width="0.0200%" height="15" fill="rgb(208,118,35)" fg:x="193186" fg:w="56"/><text x="69.2827%" y="6559.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (56 samples, 0.02%)</title><rect x="69.0327%" y="6533" width="0.0200%" height="15" fill="rgb(239,4,53)" fg:x="193186" fg:w="56"/><text x="69.2827%" y="6543.50"></text></g><g><title>`0x7FF97E62AFA5 (61 samples, 0.02%)</title><rect x="69.0699%" y="6533" width="0.0218%" height="15" fill="rgb(213,130,21)" fg:x="193290" fg:w="61"/><text x="69.3199%" y="6543.50"></text></g><g><title>`0x7FF97E62AFBA (101 samples, 0.04%)</title><rect x="69.0920%" y="6533" width="0.0361%" height="15" fill="rgb(235,148,0)" fg:x="193352" fg:w="101"/><text x="69.3420%" y="6543.50"></text></g><g><title>`0x7FF97E62AFE0 (166 samples, 0.06%)</title><rect x="69.1288%" y="6533" width="0.0593%" height="15" fill="rgb(244,224,18)" fg:x="193455" fg:w="166"/><text x="69.3788%" y="6543.50"></text></g><g><title>`0x7FF97E62BB70 (260 samples, 0.09%)</title><rect x="69.1885%" y="6517" width="0.0929%" height="15" fill="rgb(211,214,4)" fg:x="193622" fg:w="260"/><text x="69.4385%" y="6527.50"></text></g><g><title>`0x7FF97E62BB84 (243 samples, 0.09%)</title><rect x="69.2821%" y="6517" width="0.0868%" height="15" fill="rgb(206,119,25)" fg:x="193884" fg:w="243"/><text x="69.5321%" y="6527.50"></text></g><g><title>`0x7FF97E62C2B1 (252 samples, 0.09%)</title><rect x="69.3733%" y="6517" width="0.0900%" height="15" fill="rgb(243,93,47)" fg:x="194139" fg:w="252"/><text x="69.6233%" y="6527.50"></text></g><g><title>`0x7FF97E62C38A (240 samples, 0.09%)</title><rect x="69.4830%" y="6517" width="0.0858%" height="15" fill="rgb(224,194,6)" fg:x="194446" fg:w="240"/><text x="69.7330%" y="6527.50"></text></g><g><title>`0x7FF97E69CB43 (146 samples, 0.05%)</title><rect x="69.5687%" y="6517" width="0.0522%" height="15" fill="rgb(243,229,6)" fg:x="194686" fg:w="146"/><text x="69.8187%" y="6527.50"></text></g><g><title>`0x7FF97E69CB6A (79 samples, 0.03%)</title><rect x="69.6277%" y="6517" width="0.0282%" height="15" fill="rgb(207,23,50)" fg:x="194851" fg:w="79"/><text x="69.8777%" y="6527.50"></text></g><g><title>`0x7FF97E62AFF1 (1,546 samples, 0.55%)</title><rect x="69.1882%" y="6533" width="0.5524%" height="15" fill="rgb(253,192,32)" fg:x="193621" fg:w="1546"/><text x="69.4382%" y="6543.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (1,939 samples, 0.69%)</title><rect x="69.0699%" y="6565" width="0.6929%" height="15" fill="rgb(213,21,6)" fg:x="193290" fg:w="1939"/><text x="69.3199%" y="6575.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (1,939 samples, 0.69%)</title><rect x="69.0699%" y="6549" width="0.6929%" height="15" fill="rgb(243,151,13)" fg:x="193290" fg:w="1939"/><text x="69.3199%" y="6559.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (55 samples, 0.02%)</title><rect x="69.7431%" y="6533" width="0.0197%" height="15" fill="rgb(233,165,41)" fg:x="195174" fg:w="55"/><text x="69.9931%" y="6543.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::dealloc (55 samples, 0.02%)</title><rect x="69.7431%" y="6517" width="0.0197%" height="15" fill="rgb(246,176,45)" fg:x="195174" fg:w="55"/><text x="69.9931%" y="6527.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;tuple$ (2,011 samples, 0.72%)</title><rect x="69.0538%" y="6629" width="0.7186%" height="15" fill="rgb(217,170,52)" fg:x="193245" fg:w="2011"/><text x="69.3038%" y="6639.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (2,011 samples, 0.72%)</title><rect x="69.0538%" y="6613" width="0.7186%" height="15" fill="rgb(214,203,54)" fg:x="193245" fg:w="2011"/><text x="69.3038%" y="6623.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (2,011 samples, 0.72%)</title><rect x="69.0538%" y="6597" width="0.7186%" height="15" fill="rgb(248,215,49)" fg:x="193245" fg:w="2011"/><text x="69.3038%" y="6607.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (1,966 samples, 0.70%)</title><rect x="69.0699%" y="6581" width="0.7025%" height="15" fill="rgb(208,46,10)" fg:x="193290" fg:w="1966"/><text x="69.3199%" y="6591.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy(tuple$&lt;usize,usize&gt;*, tuple$ (32 samples, 0.01%)</title><rect x="69.8156%" y="6501" width="0.0114%" height="15" fill="rgb(254,5,31)" fg:x="195377" fg:w="32"/><text x="70.0656%" y="6511.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::swap(ref_mut$&lt;slice2$&lt;tuple$ (164 samples, 0.06%)</title><rect x="69.7878%" y="6533" width="0.0586%" height="15" fill="rgb(222,104,33)" fg:x="195299" fg:w="164"/><text x="70.0378%" y="6543.50"></text></g><g><title>neural_network.exe`core::ptr::swap(tuple$&lt;usize,usize&gt;*, tuple$ (86 samples, 0.03%)</title><rect x="69.8156%" y="6517" width="0.0307%" height="15" fill="rgb(248,49,16)" fg:x="195377" fg:w="86"/><text x="70.0656%" y="6527.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping(tuple$&lt;usize,usize&gt;*, tuple$ (54 samples, 0.02%)</title><rect x="69.8271%" y="6501" width="0.0193%" height="15" fill="rgb(232,198,41)" fg:x="195409" fg:w="54"/><text x="70.0771%" y="6511.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::round(rand_chacha::guts::State&lt;ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (37 samples, 0.01%)</title><rect x="69.9243%" y="6261" width="0.0132%" height="15" fill="rgb(214,125,3)" fg:x="195681" fg:w="37"/><text x="70.1743%" y="6271.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place (464 samples, 0.17%)</title><rect x="69.7724%" y="6629" width="0.1658%" height="15" fill="rgb(229,220,28)" fg:x="195256" fg:w="464"/><text x="70.0224%" y="6639.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (464 samples, 0.17%)</title><rect x="69.7724%" y="6613" width="0.1658%" height="15" fill="rgb(222,64,37)" fg:x="195256" fg:w="464"/><text x="70.0224%" y="6623.50"></text></g><g><title>neural_network.exe`alloc::rc::impl$30::drop(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (464 samples, 0.17%)</title><rect x="69.7724%" y="6597" width="0.1658%" height="15" fill="rgb(249,184,13)" fg:x="195256" fg:w="464"/><text x="70.0224%" y="6607.50"></text></g><g><title>neural_network.exe`alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;::inner (460 samples, 0.16%)</title><rect x="69.7738%" y="6581" width="0.1644%" height="15" fill="rgb(252,176,6)" fg:x="195260" fg:w="460"/><text x="70.0238%" y="6591.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;alloc::rc::RcBox&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt; &gt; &gt;::as_ref (458 samples, 0.16%)</title><rect x="69.7746%" y="6565" width="0.1637%" height="15" fill="rgb(228,153,7)" fg:x="195262" fg:w="458"/><text x="70.0246%" y="6575.50"></text></g><g><title>neural_network.exe`rand::seq::impl$0::shuffle&lt;tuple$&lt;usize,usize&gt;,rand::rngs::thread::ThreadRng&gt;(ref_mut$&lt;slice2$&lt;tuple$ (457 samples, 0.16%)</title><rect x="69.7749%" y="6549" width="0.1633%" height="15" fill="rgb(242,193,5)" fg:x="195263" fg:w="457"/><text x="70.0249%" y="6559.50"></text></g><g><title>neural_network.exe`rand::seq::gen_index (257 samples, 0.09%)</title><rect x="69.8464%" y="6533" width="0.0918%" height="15" fill="rgb(232,140,9)" fg:x="195463" fg:w="257"/><text x="70.0964%" y="6543.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen_range(rand::rngs::thread::ThreadRng*, core::ops::range::Range (257 samples, 0.09%)</title><rect x="69.8464%" y="6517" width="0.0918%" height="15" fill="rgb(213,222,16)" fg:x="195463" fg:w="257"/><text x="70.0964%" y="6527.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$6::sample_single(core::ops::range::Range (257 samples, 0.09%)</title><rect x="69.8464%" y="6501" width="0.0918%" height="15" fill="rgb(222,75,50)" fg:x="195463" fg:w="257"/><text x="70.0964%" y="6511.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single (257 samples, 0.09%)</title><rect x="69.8464%" y="6485" width="0.0918%" height="15" fill="rgb(205,180,2)" fg:x="195463" fg:w="257"/><text x="70.0964%" y="6495.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single_inclusive (257 samples, 0.09%)</title><rect x="69.8464%" y="6469" width="0.0918%" height="15" fill="rgb(216,34,7)" fg:x="195463" fg:w="257"/><text x="70.0964%" y="6479.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen (191 samples, 0.07%)</title><rect x="69.8700%" y="6453" width="0.0683%" height="15" fill="rgb(253,16,32)" fg:x="195529" fg:w="191"/><text x="70.1200%" y="6463.50"></text></g><g><title>neural_network.exe`rand::distributions::integer::impl$2::sample (191 samples, 0.07%)</title><rect x="69.8700%" y="6437" width="0.0683%" height="15" fill="rgb(208,97,28)" fg:x="195529" fg:w="191"/><text x="70.1200%" y="6447.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::impl$1::next_u32 (191 samples, 0.07%)</title><rect x="69.8700%" y="6421" width="0.0683%" height="15" fill="rgb(225,92,11)" fg:x="195529" fg:w="191"/><text x="70.1200%" y="6431.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$1::next_u32(rand::rngs::adapter::reseeding::ReseedingRng (191 samples, 0.07%)</title><rect x="69.8700%" y="6405" width="0.0683%" height="15" fill="rgb(243,38,12)" fg:x="195529" fg:w="191"/><text x="70.1200%" y="6415.50"></text></g><g><title>neural_network.exe`rand_core::block::impl$2::next_u32(rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore (191 samples, 0.07%)</title><rect x="69.8700%" y="6389" width="0.0683%" height="15" fill="rgb(208,139,16)" fg:x="195529" fg:w="191"/><text x="70.1200%" y="6399.50"></text></g><g><title>neural_network.exe`rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;::generate_and_set (67 samples, 0.02%)</title><rect x="69.9143%" y="6373" width="0.0239%" height="15" fill="rgb(227,24,9)" fg:x="195653" fg:w="67"/><text x="70.1643%" y="6383.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$4::generate(rand::rngs::adapter::reseeding::ReseedingCore&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt;*, rand_chacha::chacha::Array64 (67 samples, 0.02%)</title><rect x="69.9143%" y="6357" width="0.0239%" height="15" fill="rgb(206,62,11)" fg:x="195653" fg:w="67"/><text x="70.1643%" y="6367.50"></text></g><g><title>neural_network.exe`rand_chacha::chacha::impl$23::generate(rand_chacha::chacha::ChaCha12Core*, rand_chacha::chacha::Array64 (55 samples, 0.02%)</title><rect x="69.9186%" y="6341" width="0.0197%" height="15" fill="rgb(228,134,27)" fg:x="195665" fg:w="55"/><text x="70.1686%" y="6351.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::ChaCha::refill4 (55 samples, 0.02%)</title><rect x="69.9186%" y="6325" width="0.0197%" height="15" fill="rgb(205,55,33)" fg:x="195665" fg:w="55"/><text x="70.1686%" y="6335.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide::impl_avx2 (55 samples, 0.02%)</title><rect x="69.9186%" y="6309" width="0.0197%" height="15" fill="rgb(243,75,43)" fg:x="195665" fg:w="55"/><text x="70.1686%" y="6319.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide::fn_impl(ppv_lite86::x86_64::Avx2Machine (55 samples, 0.02%)</title><rect x="69.9186%" y="6293" width="0.0197%" height="15" fill="rgb(223,27,42)" fg:x="195665" fg:w="55"/><text x="70.1686%" y="6303.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide_impl(ppv_lite86::x86_64::Avx2Machine (55 samples, 0.02%)</title><rect x="69.9186%" y="6277" width="0.0197%" height="15" fill="rgb(232,189,33)" fg:x="195665" fg:w="55"/><text x="70.1686%" y="6287.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::contains(ref$&lt;slice2$&lt;tuple$&lt;usize,usize&gt; &gt; &gt;, tuple$ (899 samples, 0.32%)</title><rect x="69.9382%" y="6629" width="0.3212%" height="15" fill="rgb(210,9,39)" fg:x="195720" fg:w="899"/><text x="70.1882%" y="6639.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (899 samples, 0.32%)</title><rect x="69.9382%" y="6613" width="0.3212%" height="15" fill="rgb(242,85,26)" fg:x="195720" fg:w="899"/><text x="70.1882%" y="6623.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (899 samples, 0.32%)</title><rect x="69.9382%" y="6597" width="0.3212%" height="15" fill="rgb(248,44,4)" fg:x="195720" fg:w="899"/><text x="70.1882%" y="6607.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (96 samples, 0.03%)</title><rect x="70.2252%" y="6581" width="0.0343%" height="15" fill="rgb(250,96,46)" fg:x="196523" fg:w="96"/><text x="70.4752%" y="6591.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (36 samples, 0.01%)</title><rect x="70.2466%" y="6565" width="0.0129%" height="15" fill="rgb(229,116,26)" fg:x="196583" fg:w="36"/><text x="70.4966%" y="6575.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (36 samples, 0.01%)</title><rect x="70.2466%" y="6549" width="0.0129%" height="15" fill="rgb(246,94,34)" fg:x="196583" fg:w="36"/><text x="70.4966%" y="6559.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (36 samples, 0.01%)</title><rect x="70.2466%" y="6533" width="0.0129%" height="15" fill="rgb(251,73,21)" fg:x="196583" fg:w="36"/><text x="70.4966%" y="6543.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (278 samples, 0.10%)</title><rect x="70.2595%" y="6629" width="0.0993%" height="15" fill="rgb(254,121,25)" fg:x="196619" fg:w="278"/><text x="70.5095%" y="6639.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (81 samples, 0.03%)</title><rect x="70.3299%" y="6613" width="0.0289%" height="15" fill="rgb(215,161,49)" fg:x="196816" fg:w="81"/><text x="70.5799%" y="6623.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (81 samples, 0.03%)</title><rect x="70.3299%" y="6597" width="0.0289%" height="15" fill="rgb(221,43,13)" fg:x="196816" fg:w="81"/><text x="70.5799%" y="6607.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (81 samples, 0.03%)</title><rect x="70.3299%" y="6581" width="0.0289%" height="15" fill="rgb(249,5,37)" fg:x="196816" fg:w="81"/><text x="70.5799%" y="6591.50"></text></g><g><title>`0x7FF97E69CB81 (29 samples, 0.01%)</title><rect x="70.5478%" y="6565" width="0.0104%" height="15" fill="rgb(226,25,44)" fg:x="197426" fg:w="29"/><text x="70.7978%" y="6575.50"></text></g><g><title>`0x7FF97E69CBA1 (32 samples, 0.01%)</title><rect x="70.5739%" y="6565" width="0.0114%" height="15" fill="rgb(238,189,16)" fg:x="197499" fg:w="32"/><text x="70.8239%" y="6575.50"></text></g><g><title>`0x7FF97E69CBBC (31 samples, 0.01%)</title><rect x="70.6032%" y="6565" width="0.0111%" height="15" fill="rgb(251,186,8)" fg:x="197581" fg:w="31"/><text x="70.8532%" y="6575.50"></text></g><g><title>`0x7FF97E69CC6F (83 samples, 0.03%)</title><rect x="70.6272%" y="6565" width="0.0297%" height="15" fill="rgb(254,34,31)" fg:x="197648" fg:w="83"/><text x="70.8772%" y="6575.50"></text></g><g><title>`0x7FF97E69CCAF (33 samples, 0.01%)</title><rect x="70.6633%" y="6565" width="0.0118%" height="15" fill="rgb(225,215,27)" fg:x="197749" fg:w="33"/><text x="70.9133%" y="6575.50"></text></g><g><title>`0x7FF97E69CD55 (49 samples, 0.02%)</title><rect x="70.6843%" y="6565" width="0.0175%" height="15" fill="rgb(221,192,48)" fg:x="197808" fg:w="49"/><text x="70.9343%" y="6575.50"></text></g><g><title>`0x7FF97E69CD6B (44 samples, 0.02%)</title><rect x="70.7018%" y="6565" width="0.0157%" height="15" fill="rgb(219,137,20)" fg:x="197857" fg:w="44"/><text x="70.9518%" y="6575.50"></text></g><g><title>`0x7FF97E69CE16 (31 samples, 0.01%)</title><rect x="70.7211%" y="6565" width="0.0111%" height="15" fill="rgb(219,84,11)" fg:x="197911" fg:w="31"/><text x="70.9711%" y="6575.50"></text></g><g><title>`0x7FF97E62AFF1 (766 samples, 0.27%)</title><rect x="70.4803%" y="6581" width="0.2737%" height="15" fill="rgb(224,10,23)" fg:x="197237" fg:w="766"/><text x="70.7303%" y="6591.50"></text></g><g><title>`0x7FF97E62D57C (85 samples, 0.03%)</title><rect x="70.9523%" y="6357" width="0.0304%" height="15" fill="rgb(248,22,39)" fg:x="198558" fg:w="85"/><text x="71.2023%" y="6367.50"></text></g><g><title>`0x7FF97E62D588 (32 samples, 0.01%)</title><rect x="70.9827%" y="6357" width="0.0114%" height="15" fill="rgb(212,154,20)" fg:x="198643" fg:w="32"/><text x="71.2327%" y="6367.50"></text></g><g><title>`0x7FF97E62D66D (29 samples, 0.01%)</title><rect x="71.0113%" y="6357" width="0.0104%" height="15" fill="rgb(236,199,50)" fg:x="198723" fg:w="29"/><text x="71.2613%" y="6367.50"></text></g><g><title>`0x7FF97E68F861 (30 samples, 0.01%)</title><rect x="71.0252%" y="6341" width="0.0107%" height="15" fill="rgb(211,9,17)" fg:x="198762" fg:w="30"/><text x="71.2752%" y="6351.50"></text></g><g><title>`0x7FF97E68F87F (30 samples, 0.01%)</title><rect x="71.0381%" y="6341" width="0.0107%" height="15" fill="rgb(243,216,36)" fg:x="198798" fg:w="30"/><text x="71.2881%" y="6351.50"></text></g><g><title>`0x7FF97E68F921 (32 samples, 0.01%)</title><rect x="71.0735%" y="6341" width="0.0114%" height="15" fill="rgb(250,2,10)" fg:x="198897" fg:w="32"/><text x="71.3235%" y="6351.50"></text></g><g><title>`0x7FF97E62D68A (200 samples, 0.07%)</title><rect x="71.0224%" y="6357" width="0.0715%" height="15" fill="rgb(226,50,48)" fg:x="198754" fg:w="200"/><text x="71.2724%" y="6367.50"></text></g><g><title>`0x7FF97E62D691 (36 samples, 0.01%)</title><rect x="71.0938%" y="6357" width="0.0129%" height="15" fill="rgb(243,81,16)" fg:x="198954" fg:w="36"/><text x="71.3438%" y="6367.50"></text></g><g><title>`0x7FF97E62D723 (42 samples, 0.02%)</title><rect x="71.1439%" y="6357" width="0.0150%" height="15" fill="rgb(250,14,2)" fg:x="199094" fg:w="42"/><text x="71.3939%" y="6367.50"></text></g><g><title>`0x7FF97E65354E (29 samples, 0.01%)</title><rect x="71.1950%" y="6341" width="0.0104%" height="15" fill="rgb(233,135,29)" fg:x="199237" fg:w="29"/><text x="71.4450%" y="6351.50"></text></g><g><title>`0x7FF97E62DB41 (59 samples, 0.02%)</title><rect x="71.1889%" y="6357" width="0.0211%" height="15" fill="rgb(224,64,43)" fg:x="199220" fg:w="59"/><text x="71.4389%" y="6367.50"></text></g><g><title>`0x7FF97E631990 (40 samples, 0.01%)</title><rect x="71.2196%" y="6341" width="0.0143%" height="15" fill="rgb(238,84,13)" fg:x="199306" fg:w="40"/><text x="71.4696%" y="6351.50"></text></g><g><title>`0x7FF97E631CA3 (54 samples, 0.02%)</title><rect x="71.2707%" y="6325" width="0.0193%" height="15" fill="rgb(253,48,26)" fg:x="199449" fg:w="54"/><text x="71.5207%" y="6335.50"></text></g><g><title>`0x7FF97E62DBBF (215 samples, 0.08%)</title><rect x="71.2139%" y="6357" width="0.0768%" height="15" fill="rgb(205,223,31)" fg:x="199290" fg:w="215"/><text x="71.4639%" y="6367.50"></text></g><g><title>`0x7FF97E631B1F (83 samples, 0.03%)</title><rect x="71.2611%" y="6341" width="0.0297%" height="15" fill="rgb(221,41,32)" fg:x="199422" fg:w="83"/><text x="71.5111%" y="6351.50"></text></g><g><title>`0x7FF97E62DBDD (87 samples, 0.03%)</title><rect x="71.2907%" y="6357" width="0.0311%" height="15" fill="rgb(213,158,31)" fg:x="199505" fg:w="87"/><text x="71.5407%" y="6367.50"></text></g><g><title>`0x7FF97E62CC9A (1,053 samples, 0.38%)</title><rect x="70.9495%" y="6373" width="0.3763%" height="15" fill="rgb(245,126,43)" fg:x="198550" fg:w="1053"/><text x="71.1995%" y="6383.50"></text></g><g><title>`0x7FF97E62CCC1 (51 samples, 0.02%)</title><rect x="71.3258%" y="6373" width="0.0182%" height="15" fill="rgb(227,7,22)" fg:x="199603" fg:w="51"/><text x="71.5758%" y="6383.50"></text></g><g><title>`0x7FF97E62CCF8 (36 samples, 0.01%)</title><rect x="71.3454%" y="6373" width="0.0129%" height="15" fill="rgb(252,90,44)" fg:x="199658" fg:w="36"/><text x="71.5954%" y="6383.50"></text></g><g><title>`0x7FF97E63241D (35 samples, 0.01%)</title><rect x="71.4130%" y="6341" width="0.0125%" height="15" fill="rgb(253,91,0)" fg:x="199847" fg:w="35"/><text x="71.6630%" y="6351.50"></text></g><g><title>`0x7FF97E632438 (40 samples, 0.01%)</title><rect x="71.4255%" y="6341" width="0.0143%" height="15" fill="rgb(252,175,49)" fg:x="199882" fg:w="40"/><text x="71.6755%" y="6351.50"></text></g><g><title>`0x7FF97E632442 (40 samples, 0.01%)</title><rect x="71.4401%" y="6341" width="0.0143%" height="15" fill="rgb(246,150,1)" fg:x="199923" fg:w="40"/><text x="71.6901%" y="6351.50"></text></g><g><title>`0x7FF97E63244E (70 samples, 0.03%)</title><rect x="71.4612%" y="6341" width="0.0250%" height="15" fill="rgb(241,192,25)" fg:x="199982" fg:w="70"/><text x="71.7112%" y="6351.50"></text></g><g><title>`0x7FF97E632473 (84 samples, 0.03%)</title><rect x="71.4862%" y="6341" width="0.0300%" height="15" fill="rgb(239,187,11)" fg:x="200052" fg:w="84"/><text x="71.7362%" y="6351.50"></text></g><g><title>`0x7FF97E63249F (86 samples, 0.03%)</title><rect x="71.5173%" y="6341" width="0.0307%" height="15" fill="rgb(218,202,51)" fg:x="200139" fg:w="86"/><text x="71.7673%" y="6351.50"></text></g><g><title>`0x7FF97E6324C5 (77 samples, 0.03%)</title><rect x="71.5530%" y="6341" width="0.0275%" height="15" fill="rgb(225,176,8)" fg:x="200239" fg:w="77"/><text x="71.8030%" y="6351.50"></text></g><g><title>`0x7FF97E62D57C (57 samples, 0.02%)</title><rect x="71.6988%" y="6309" width="0.0204%" height="15" fill="rgb(219,122,41)" fg:x="200647" fg:w="57"/><text x="71.9488%" y="6319.50"></text></g><g><title>`0x7FF97E62D588 (29 samples, 0.01%)</title><rect x="71.7192%" y="6309" width="0.0104%" height="15" fill="rgb(248,140,20)" fg:x="200704" fg:w="29"/><text x="71.9692%" y="6319.50"></text></g><g><title>`0x7FF97E62D68A (81 samples, 0.03%)</title><rect x="71.7435%" y="6309" width="0.0289%" height="15" fill="rgb(245,41,37)" fg:x="200772" fg:w="81"/><text x="71.9935%" y="6319.50"></text></g><g><title>`0x7FF97E62D723 (38 samples, 0.01%)</title><rect x="71.7857%" y="6309" width="0.0136%" height="15" fill="rgb(235,82,39)" fg:x="200890" fg:w="38"/><text x="72.0357%" y="6319.50"></text></g><g><title>`0x7FF97E62CC9A (463 samples, 0.17%)</title><rect x="71.6549%" y="6325" width="0.1654%" height="15" fill="rgb(230,108,42)" fg:x="200524" fg:w="463"/><text x="71.9049%" y="6335.50"></text></g><g><title>`0x7FF97E62CCC1 (45 samples, 0.02%)</title><rect x="71.8203%" y="6325" width="0.0161%" height="15" fill="rgb(215,150,50)" fg:x="200987" fg:w="45"/><text x="72.0703%" y="6335.50"></text></g><g><title>`0x7FF97E62CCF8 (39 samples, 0.01%)</title><rect x="71.8364%" y="6325" width="0.0139%" height="15" fill="rgb(233,212,5)" fg:x="201032" fg:w="39"/><text x="72.0864%" y="6335.50"></text></g><g><title>`0x7FF97E633505 (738 samples, 0.26%)</title><rect x="71.5877%" y="6341" width="0.2637%" height="15" fill="rgb(245,80,22)" fg:x="200336" fg:w="738"/><text x="71.8377%" y="6351.50"></text></g><g><title>`0x7FF97E696B96 (366 samples, 0.13%)</title><rect x="71.8543%" y="6325" width="0.1308%" height="15" fill="rgb(238,129,16)" fg:x="201082" fg:w="366"/><text x="72.1043%" y="6335.50"></text></g><g><title>`0x7FF97E696C00 (55 samples, 0.02%)</title><rect x="71.9908%" y="6325" width="0.0197%" height="15" fill="rgb(240,19,0)" fg:x="201464" fg:w="55"/><text x="72.2408%" y="6335.50"></text></g><g><title>`0x7FF97E696C13 (39 samples, 0.01%)</title><rect x="72.0172%" y="6325" width="0.0139%" height="15" fill="rgb(232,42,35)" fg:x="201538" fg:w="39"/><text x="72.2672%" y="6335.50"></text></g><g><title>`0x7FF97E696C22 (55 samples, 0.02%)</title><rect x="72.0358%" y="6325" width="0.0197%" height="15" fill="rgb(223,130,24)" fg:x="201590" fg:w="55"/><text x="72.2858%" y="6335.50"></text></g><g><title>`0x7FF97E633550 (611 samples, 0.22%)</title><rect x="71.8518%" y="6341" width="0.2183%" height="15" fill="rgb(237,16,22)" fg:x="201075" fg:w="611"/><text x="72.1018%" y="6351.50"></text></g><g><title>`0x7FF97E69CC6F (79 samples, 0.03%)</title><rect x="72.1176%" y="6309" width="0.0282%" height="15" fill="rgb(248,192,20)" fg:x="201819" fg:w="79"/><text x="72.3676%" y="6319.50"></text></g><g><title>`0x7FF97E69CCAF (215 samples, 0.08%)</title><rect x="72.1630%" y="6309" width="0.0768%" height="15" fill="rgb(233,167,2)" fg:x="201946" fg:w="215"/><text x="72.4130%" y="6319.50"></text></g><g><title>`0x7FF97E62AFF1 (475 samples, 0.17%)</title><rect x="72.0844%" y="6325" width="0.1697%" height="15" fill="rgb(252,71,44)" fg:x="201726" fg:w="475"/><text x="72.3344%" y="6335.50"></text></g><g><title>`0x7FF97E633562 (531 samples, 0.19%)</title><rect x="72.0719%" y="6341" width="0.1897%" height="15" fill="rgb(238,37,47)" fg:x="201691" fg:w="531"/><text x="72.3219%" y="6351.50"></text></g><g><title>`0x7FF97E63356B (31 samples, 0.01%)</title><rect x="72.2616%" y="6341" width="0.0111%" height="15" fill="rgb(214,202,54)" fg:x="202222" fg:w="31"/><text x="72.5116%" y="6351.50"></text></g><g><title>`0x7FF97E633598 (31 samples, 0.01%)</title><rect x="72.2731%" y="6341" width="0.0111%" height="15" fill="rgb(254,165,40)" fg:x="202254" fg:w="31"/><text x="72.5231%" y="6351.50"></text></g><g><title>`0x7FF97E6322C7 (2,579 samples, 0.92%)</title><rect x="71.3947%" y="6357" width="0.9216%" height="15" fill="rgb(246,173,38)" fg:x="199796" fg:w="2579"/><text x="71.6447%" y="6367.50"></text></g><g><title>`0x7FF97E6335AC (90 samples, 0.03%)</title><rect x="72.2841%" y="6341" width="0.0322%" height="15" fill="rgb(215,3,27)" fg:x="202285" fg:w="90"/><text x="72.5341%" y="6351.50"></text></g><g><title>`0x7FF97E6322FB (35 samples, 0.01%)</title><rect x="72.3163%" y="6357" width="0.0125%" height="15" fill="rgb(239,169,51)" fg:x="202375" fg:w="35"/><text x="72.5663%" y="6367.50"></text></g><g><title>`0x7FF97E632307 (57 samples, 0.02%)</title><rect x="72.3292%" y="6357" width="0.0204%" height="15" fill="rgb(212,5,25)" fg:x="202411" fg:w="57"/><text x="72.5792%" y="6367.50"></text></g><g><title>`0x7FF97E632312 (80 samples, 0.03%)</title><rect x="72.3502%" y="6357" width="0.0286%" height="15" fill="rgb(243,45,17)" fg:x="202470" fg:w="80"/><text x="72.6002%" y="6367.50"></text></g><g><title>`0x7FF97E63218A (2,780 samples, 0.99%)</title><rect x="71.3858%" y="6373" width="0.9934%" height="15" fill="rgb(242,97,9)" fg:x="199771" fg:w="2780"/><text x="71.6358%" y="6383.50"></text></g><g><title>`0x7FF97E63219E (92 samples, 0.03%)</title><rect x="72.3796%" y="6373" width="0.0329%" height="15" fill="rgb(228,71,31)" fg:x="202552" fg:w="92"/><text x="72.6296%" y="6383.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_realloc (34 samples, 0.01%)</title><rect x="72.4189%" y="6373" width="0.0121%" height="15" fill="rgb(252,184,16)" fg:x="202662" fg:w="34"/><text x="72.6689%" y="6383.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (4,221 samples, 1.51%)</title><rect x="70.9234%" y="6421" width="1.5083%" height="15" fill="rgb(236,169,46)" fg:x="198477" fg:w="4221"/><text x="71.1734%" y="6431.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (4,221 samples, 1.51%)</title><rect x="70.9234%" y="6405" width="1.5083%" height="15" fill="rgb(207,17,47)" fg:x="198477" fg:w="4221"/><text x="71.1734%" y="6415.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (4,216 samples, 1.51%)</title><rect x="70.9252%" y="6389" width="1.5065%" height="15" fill="rgb(206,201,28)" fg:x="198482" fg:w="4216"/><text x="71.1752%" y="6399.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_mut_ptr (4,762 samples, 1.70%)</title><rect x="70.7880%" y="6565" width="1.7016%" height="15" fill="rgb(224,184,23)" fg:x="198098" fg:w="4762"/><text x="71.0380%" y="6575.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (4,754 samples, 1.70%)</title><rect x="70.7908%" y="6549" width="1.6988%" height="15" fill="rgb(208,139,48)" fg:x="198106" fg:w="4754"/><text x="71.0408%" y="6559.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (4,754 samples, 1.70%)</title><rect x="70.7908%" y="6533" width="1.6988%" height="15" fill="rgb(208,130,10)" fg:x="198106" fg:w="4754"/><text x="71.0408%" y="6543.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (4,754 samples, 1.70%)</title><rect x="70.7908%" y="6517" width="1.6988%" height="15" fill="rgb(211,213,45)" fg:x="198106" fg:w="4754"/><text x="71.0408%" y="6527.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::grow_one&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; (4,736 samples, 1.69%)</title><rect x="70.7973%" y="6501" width="1.6924%" height="15" fill="rgb(235,100,30)" fg:x="198124" fg:w="4736"/><text x="71.0473%" y="6511.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (4,609 samples, 1.65%)</title><rect x="70.8426%" y="6485" width="1.6470%" height="15" fill="rgb(206,144,31)" fg:x="198251" fg:w="4609"/><text x="71.0926%" y="6495.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (4,592 samples, 1.64%)</title><rect x="70.8487%" y="6469" width="1.6409%" height="15" fill="rgb(224,200,26)" fg:x="198268" fg:w="4592"/><text x="71.0987%" y="6479.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (4,534 samples, 1.62%)</title><rect x="70.8694%" y="6453" width="1.6202%" height="15" fill="rgb(247,104,53)" fg:x="198326" fg:w="4534"/><text x="71.1194%" y="6463.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (4,469 samples, 1.60%)</title><rect x="70.8927%" y="6437" width="1.5969%" height="15" fill="rgb(220,14,17)" fg:x="198391" fg:w="4469"/><text x="71.1427%" y="6447.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;, alloc::raw_vec::finish_grow::closure_env$0 (162 samples, 0.06%)</title><rect x="72.4317%" y="6421" width="0.0579%" height="15" fill="rgb(230,140,40)" fg:x="202698" fg:w="162"/><text x="72.6817%" y="6431.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (5,182 samples, 1.85%)</title><rect x="70.7662%" y="6581" width="1.8517%" height="15" fill="rgb(229,2,41)" fg:x="198037" fg:w="5182"/><text x="71.0162%" y="6591.50">n..</text></g><g><title>neural_network.exe`core::ptr::write(tuple$&lt;usize,usize&gt;*, tuple$ (359 samples, 0.13%)</title><rect x="72.4896%" y="6565" width="0.1283%" height="15" fill="rgb(232,89,16)" fg:x="202860" fg:w="359"/><text x="72.7396%" y="6575.50"></text></g><g><title>`0x7FF968D51381 (496 samples, 0.18%)</title><rect x="72.6490%" y="6517" width="0.1772%" height="15" fill="rgb(247,59,52)" fg:x="203306" fg:w="496"/><text x="72.8990%" y="6527.50"></text></g><g><title>`0x7FF97E62CAFF (35 samples, 0.01%)</title><rect x="72.8716%" y="6453" width="0.0125%" height="15" fill="rgb(226,110,21)" fg:x="203929" fg:w="35"/><text x="73.1216%" y="6463.50"></text></g><g><title>`0x7FF97E62CB20 (45 samples, 0.02%)</title><rect x="72.8855%" y="6453" width="0.0161%" height="15" fill="rgb(224,176,43)" fg:x="203968" fg:w="45"/><text x="73.1355%" y="6463.50"></text></g><g><title>`0x7FF97E62CB3D (61 samples, 0.02%)</title><rect x="72.9141%" y="6453" width="0.0218%" height="15" fill="rgb(221,73,6)" fg:x="204048" fg:w="61"/><text x="73.1641%" y="6463.50"></text></g><g><title>`0x7FF97E62CB84 (50 samples, 0.02%)</title><rect x="72.9445%" y="6453" width="0.0179%" height="15" fill="rgb(232,78,19)" fg:x="204133" fg:w="50"/><text x="73.1945%" y="6463.50"></text></g><g><title>`0x7FF97E62CC65 (40 samples, 0.01%)</title><rect x="73.0195%" y="6453" width="0.0143%" height="15" fill="rgb(233,112,48)" fg:x="204343" fg:w="40"/><text x="73.2695%" y="6463.50"></text></g><g><title>`0x7FF97E62D5E2 (63 samples, 0.02%)</title><rect x="73.1074%" y="6437" width="0.0225%" height="15" fill="rgb(243,131,47)" fg:x="204589" fg:w="63"/><text x="73.3574%" y="6447.50"></text></g><g><title>`0x7FF97E62D68A (65 samples, 0.02%)</title><rect x="73.1371%" y="6437" width="0.0232%" height="15" fill="rgb(226,51,1)" fg:x="204672" fg:w="65"/><text x="73.3871%" y="6447.50"></text></g><g><title>`0x7FF97E62D6C7 (33 samples, 0.01%)</title><rect x="73.1678%" y="6437" width="0.0118%" height="15" fill="rgb(247,58,7)" fg:x="204758" fg:w="33"/><text x="73.4178%" y="6447.50"></text></g><g><title>`0x7FF97E62CC9A (485 samples, 0.17%)</title><rect x="73.0449%" y="6453" width="0.1733%" height="15" fill="rgb(209,7,32)" fg:x="204414" fg:w="485"/><text x="73.2949%" y="6463.50"></text></g><g><title>`0x7FF97E62CCC1 (29 samples, 0.01%)</title><rect x="73.2200%" y="6453" width="0.0104%" height="15" fill="rgb(209,39,41)" fg:x="204904" fg:w="29"/><text x="73.4700%" y="6463.50"></text></g><g><title>`0x7FF97E62CCF8 (29 samples, 0.01%)</title><rect x="73.2307%" y="6453" width="0.0104%" height="15" fill="rgb(226,182,46)" fg:x="204934" fg:w="29"/><text x="73.4807%" y="6463.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (1,150 samples, 0.41%)</title><rect x="72.8648%" y="6517" width="0.4109%" height="15" fill="rgb(230,219,10)" fg:x="203910" fg:w="1150"/><text x="73.1148%" y="6527.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (1,150 samples, 0.41%)</title><rect x="72.8648%" y="6501" width="0.4109%" height="15" fill="rgb(227,175,30)" fg:x="203910" fg:w="1150"/><text x="73.1148%" y="6511.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (1,150 samples, 0.41%)</title><rect x="72.8648%" y="6485" width="0.4109%" height="15" fill="rgb(217,2,50)" fg:x="203910" fg:w="1150"/><text x="73.1148%" y="6495.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (1,150 samples, 0.41%)</title><rect x="72.8648%" y="6469" width="0.4109%" height="15" fill="rgb(229,160,0)" fg:x="203910" fg:w="1150"/><text x="73.1148%" y="6479.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::process_heap_alloc (41 samples, 0.01%)</title><rect x="73.2611%" y="6453" width="0.0147%" height="15" fill="rgb(207,78,37)" fg:x="205019" fg:w="41"/><text x="73.5111%" y="6463.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$&lt;tuple$ (1,814 samples, 0.65%)</title><rect x="72.6286%" y="6549" width="0.6482%" height="15" fill="rgb(225,57,0)" fg:x="203249" fg:w="1814"/><text x="72.8786%" y="6559.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$&lt;tuple$ (1,814 samples, 0.65%)</title><rect x="72.6286%" y="6533" width="0.6482%" height="15" fill="rgb(232,154,2)" fg:x="203249" fg:w="1814"/><text x="72.8786%" y="6543.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$11::clone(alloc::vec::Vec&lt;tuple$ (1,820 samples, 0.65%)</title><rect x="72.6272%" y="6581" width="0.6504%" height="15" fill="rgb(241,212,25)" fg:x="203245" fg:w="1820"/><text x="72.8772%" y="6591.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (1,820 samples, 0.65%)</title><rect x="72.6272%" y="6565" width="0.6504%" height="15" fill="rgb(226,69,20)" fg:x="203245" fg:w="1820"/><text x="72.8772%" y="6575.50"></text></g><g><title>neural_network.exe`core::cmp::impls::impl$21::eq (31 samples, 0.01%)</title><rect x="73.3133%" y="6565" width="0.0111%" height="15" fill="rgb(247,184,54)" fg:x="205165" fg:w="31"/><text x="73.5633%" y="6575.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (1,510 samples, 0.54%)</title><rect x="73.3244%" y="6565" width="0.5396%" height="15" fill="rgb(210,145,0)" fg:x="205196" fg:w="1510"/><text x="73.5744%" y="6575.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (1,510 samples, 0.54%)</title><rect x="73.3244%" y="6549" width="0.5396%" height="15" fill="rgb(253,82,12)" fg:x="205196" fg:w="1510"/><text x="73.5744%" y="6559.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (158 samples, 0.06%)</title><rect x="73.8075%" y="6533" width="0.0565%" height="15" fill="rgb(245,42,11)" fg:x="206548" fg:w="158"/><text x="74.0575%" y="6543.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (31 samples, 0.01%)</title><rect x="73.8639%" y="6549" width="0.0111%" height="15" fill="rgb(219,147,32)" fg:x="206706" fg:w="31"/><text x="74.1139%" y="6559.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (31 samples, 0.01%)</title><rect x="73.8639%" y="6533" width="0.0111%" height="15" fill="rgb(246,12,7)" fg:x="206706" fg:w="31"/><text x="74.1139%" y="6543.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (31 samples, 0.01%)</title><rect x="73.8639%" y="6517" width="0.0111%" height="15" fill="rgb(243,50,9)" fg:x="206706" fg:w="31"/><text x="74.1139%" y="6527.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (31 samples, 0.01%)</title><rect x="73.8639%" y="6501" width="0.0111%" height="15" fill="rgb(219,149,6)" fg:x="206706" fg:w="31"/><text x="74.1139%" y="6511.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$ (2,067 samples, 0.74%)</title><rect x="73.2775%" y="6581" width="0.7386%" height="15" fill="rgb(241,51,42)" fg:x="205065" fg:w="2067"/><text x="73.5275%" y="6591.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;tuple$ (426 samples, 0.15%)</title><rect x="73.8639%" y="6565" width="0.1522%" height="15" fill="rgb(226,128,27)" fg:x="206706" fg:w="426"/><text x="74.1139%" y="6575.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;tuple$ (395 samples, 0.14%)</title><rect x="73.8750%" y="6549" width="0.1411%" height="15" fill="rgb(244,144,4)" fg:x="206737" fg:w="395"/><text x="74.1250%" y="6559.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (38 samples, 0.01%)</title><rect x="74.0162%" y="6549" width="0.0136%" height="15" fill="rgb(221,4,13)" fg:x="207132" fg:w="38"/><text x="74.2662%" y="6559.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (38 samples, 0.01%)</title><rect x="74.0162%" y="6533" width="0.0136%" height="15" fill="rgb(208,170,28)" fg:x="207132" fg:w="38"/><text x="74.2662%" y="6543.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (38 samples, 0.01%)</title><rect x="74.0162%" y="6517" width="0.0136%" height="15" fill="rgb(226,131,13)" fg:x="207132" fg:w="38"/><text x="74.2662%" y="6527.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (38 samples, 0.01%)</title><rect x="74.0162%" y="6501" width="0.0136%" height="15" fill="rgb(215,72,41)" fg:x="207132" fg:w="38"/><text x="74.2662%" y="6511.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (77 samples, 0.03%)</title><rect x="74.0162%" y="6565" width="0.0275%" height="15" fill="rgb(243,108,20)" fg:x="207132" fg:w="77"/><text x="74.2662%" y="6575.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;tuple$ (39 samples, 0.01%)</title><rect x="74.0297%" y="6549" width="0.0139%" height="15" fill="rgb(230,189,17)" fg:x="207170" fg:w="39"/><text x="74.2797%" y="6559.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, core::ops::range::Range (2,167 samples, 0.77%)</title><rect x="74.0162%" y="6581" width="0.7744%" height="15" fill="rgb(220,50,17)" fg:x="207132" fg:w="2167"/><text x="74.2662%" y="6591.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (2,090 samples, 0.75%)</title><rect x="74.0437%" y="6565" width="0.7468%" height="15" fill="rgb(248,152,48)" fg:x="207209" fg:w="2090"/><text x="74.2937%" y="6575.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (2,090 samples, 0.75%)</title><rect x="74.0437%" y="6549" width="0.7468%" height="15" fill="rgb(244,91,11)" fg:x="207209" fg:w="2090"/><text x="74.2937%" y="6559.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (233 samples, 0.08%)</title><rect x="74.7073%" y="6533" width="0.0833%" height="15" fill="rgb(220,157,5)" fg:x="209066" fg:w="233"/><text x="74.9573%" y="6543.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (52 samples, 0.02%)</title><rect x="74.7719%" y="6517" width="0.0186%" height="15" fill="rgb(253,137,8)" fg:x="209247" fg:w="52"/><text x="75.0219%" y="6527.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (52 samples, 0.02%)</title><rect x="74.7719%" y="6501" width="0.0186%" height="15" fill="rgb(217,137,51)" fg:x="209247" fg:w="52"/><text x="75.0219%" y="6511.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (52 samples, 0.02%)</title><rect x="74.7719%" y="6485" width="0.0186%" height="15" fill="rgb(218,209,53)" fg:x="209247" fg:w="52"/><text x="75.0219%" y="6495.50"></text></g><g><title>`0x7FF97E62AFA5 (58 samples, 0.02%)</title><rect x="74.8044%" y="6485" width="0.0207%" height="15" fill="rgb(249,137,25)" fg:x="209338" fg:w="58"/><text x="75.0544%" y="6495.50"></text></g><g><title>`0x7FF97E62AFBA (106 samples, 0.04%)</title><rect x="74.8259%" y="6485" width="0.0379%" height="15" fill="rgb(239,155,26)" fg:x="209398" fg:w="106"/><text x="75.0759%" y="6495.50"></text></g><g><title>`0x7FF97E62AFE0 (149 samples, 0.05%)</title><rect x="74.8652%" y="6485" width="0.0532%" height="15" fill="rgb(227,85,46)" fg:x="209508" fg:w="149"/><text x="75.1152%" y="6495.50"></text></g><g><title>`0x7FF97E62BB70 (207 samples, 0.07%)</title><rect x="74.9195%" y="6469" width="0.0740%" height="15" fill="rgb(251,107,43)" fg:x="209660" fg:w="207"/><text x="75.1695%" y="6479.50"></text></g><g><title>`0x7FF97E62BB84 (208 samples, 0.07%)</title><rect x="74.9946%" y="6469" width="0.0743%" height="15" fill="rgb(234,170,33)" fg:x="209870" fg:w="208"/><text x="75.2446%" y="6479.50"></text></g><g><title>`0x7FF97E62C2B1 (186 samples, 0.07%)</title><rect x="75.0728%" y="6469" width="0.0665%" height="15" fill="rgb(206,29,35)" fg:x="210089" fg:w="186"/><text x="75.3228%" y="6479.50"></text></g><g><title>`0x7FF97E62C38A (191 samples, 0.07%)</title><rect x="75.1575%" y="6469" width="0.0683%" height="15" fill="rgb(227,138,25)" fg:x="210326" fg:w="191"/><text x="75.4075%" y="6479.50"></text></g><g><title>`0x7FF97E69CB43 (129 samples, 0.05%)</title><rect x="75.2257%" y="6469" width="0.0461%" height="15" fill="rgb(249,131,35)" fg:x="210517" fg:w="129"/><text x="75.4757%" y="6479.50"></text></g><g><title>`0x7FF97E69CB6A (71 samples, 0.03%)</title><rect x="75.2783%" y="6469" width="0.0254%" height="15" fill="rgb(239,6,40)" fg:x="210664" fg:w="71"/><text x="75.5283%" y="6479.50"></text></g><g><title>`0x7FF97E62AFF1 (1,261 samples, 0.45%)</title><rect x="74.9188%" y="6485" width="0.4506%" height="15" fill="rgb(246,136,47)" fg:x="209658" fg:w="1261"/><text x="75.1688%" y="6495.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (1,642 samples, 0.59%)</title><rect x="74.8034%" y="6517" width="0.5867%" height="15" fill="rgb(253,58,26)" fg:x="209335" fg:w="1642"/><text x="75.0534%" y="6527.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (1,642 samples, 0.59%)</title><rect x="74.8034%" y="6501" width="0.5867%" height="15" fill="rgb(237,141,10)" fg:x="209335" fg:w="1642"/><text x="75.0534%" y="6511.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (42 samples, 0.02%)</title><rect x="75.3751%" y="6485" width="0.0150%" height="15" fill="rgb(234,156,12)" fg:x="210935" fg:w="42"/><text x="75.6251%" y="6495.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::dealloc (42 samples, 0.02%)</title><rect x="75.3751%" y="6469" width="0.0150%" height="15" fill="rgb(243,224,36)" fg:x="210935" fg:w="42"/><text x="75.6251%" y="6479.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;tuple$ (1,694 samples, 0.61%)</title><rect x="74.7909%" y="6581" width="0.6053%" height="15" fill="rgb(205,229,51)" fg:x="209300" fg:w="1694"/><text x="75.0409%" y="6591.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (1,694 samples, 0.61%)</title><rect x="74.7909%" y="6565" width="0.6053%" height="15" fill="rgb(223,189,4)" fg:x="209300" fg:w="1694"/><text x="75.0409%" y="6575.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (1,694 samples, 0.61%)</title><rect x="74.7909%" y="6549" width="0.6053%" height="15" fill="rgb(249,167,54)" fg:x="209300" fg:w="1694"/><text x="75.0409%" y="6559.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (1,659 samples, 0.59%)</title><rect x="74.8034%" y="6533" width="0.5928%" height="15" fill="rgb(218,34,28)" fg:x="209335" fg:w="1659"/><text x="75.0534%" y="6543.50"></text></g><g><title>neural_network.exe`core::iter::adapters::rev::impl$1::next(core::iter::adapters::rev::Rev&lt;core::ops::range::Range (31 samples, 0.01%)</title><rect x="75.4008%" y="6485" width="0.0111%" height="15" fill="rgb(232,109,42)" fg:x="211007" fg:w="31"/><text x="75.6508%" y="6495.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$7::next_back(core::ops::range::Range (31 samples, 0.01%)</title><rect x="75.4008%" y="6469" width="0.0111%" height="15" fill="rgb(248,214,46)" fg:x="211007" fg:w="31"/><text x="75.6508%" y="6479.50"></text></g><g><title>neural_network.exe`core::iter::range::impl$5::spec_next_back(core::ops::range::Range (31 samples, 0.01%)</title><rect x="75.4008%" y="6453" width="0.0111%" height="15" fill="rgb(244,216,40)" fg:x="211007" fg:w="31"/><text x="75.6508%" y="6463.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy(tuple$&lt;usize,usize&gt;*, tuple$ (48 samples, 0.02%)</title><rect x="75.4337%" y="6453" width="0.0172%" height="15" fill="rgb(231,226,31)" fg:x="211099" fg:w="48"/><text x="75.6837%" y="6463.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::swap(ref_mut$&lt;slice2$&lt;tuple$ (165 samples, 0.06%)</title><rect x="75.4119%" y="6485" width="0.0590%" height="15" fill="rgb(238,38,43)" fg:x="211038" fg:w="165"/><text x="75.6619%" y="6495.50"></text></g><g><title>neural_network.exe`core::ptr::swap(tuple$&lt;usize,usize&gt;*, tuple$ (104 samples, 0.04%)</title><rect x="75.4337%" y="6469" width="0.0372%" height="15" fill="rgb(208,88,43)" fg:x="211099" fg:w="104"/><text x="75.6837%" y="6479.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping(tuple$&lt;usize,usize&gt;*, tuple$ (56 samples, 0.02%)</title><rect x="75.4509%" y="6453" width="0.0200%" height="15" fill="rgb(205,136,37)" fg:x="211147" fg:w="56"/><text x="75.7009%" y="6463.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::round(rand_chacha::guts::State&lt;ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (48 samples, 0.02%)</title><rect x="75.5352%" y="6213" width="0.0172%" height="15" fill="rgb(237,34,14)" fg:x="211383" fg:w="48"/><text x="75.7852%" y="6223.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide::impl_avx2 (56 samples, 0.02%)</title><rect x="75.5327%" y="6261" width="0.0200%" height="15" fill="rgb(236,193,44)" fg:x="211376" fg:w="56"/><text x="75.7827%" y="6271.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide::fn_impl(ppv_lite86::x86_64::Avx2Machine (56 samples, 0.02%)</title><rect x="75.5327%" y="6245" width="0.0200%" height="15" fill="rgb(231,48,10)" fg:x="211376" fg:w="56"/><text x="75.7827%" y="6255.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide_impl(ppv_lite86::x86_64::Avx2Machine (56 samples, 0.02%)</title><rect x="75.5327%" y="6229" width="0.0200%" height="15" fill="rgb(213,141,34)" fg:x="211376" fg:w="56"/><text x="75.7827%" y="6239.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place (441 samples, 0.16%)</title><rect x="75.3962%" y="6581" width="0.1576%" height="15" fill="rgb(249,130,34)" fg:x="210994" fg:w="441"/><text x="75.6462%" y="6591.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (441 samples, 0.16%)</title><rect x="75.3962%" y="6565" width="0.1576%" height="15" fill="rgb(219,42,41)" fg:x="210994" fg:w="441"/><text x="75.6462%" y="6575.50"></text></g><g><title>neural_network.exe`alloc::rc::impl$30::drop(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (441 samples, 0.16%)</title><rect x="75.3962%" y="6549" width="0.1576%" height="15" fill="rgb(224,100,54)" fg:x="210994" fg:w="441"/><text x="75.6462%" y="6559.50"></text></g><g><title>neural_network.exe`alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;::inner (437 samples, 0.16%)</title><rect x="75.3976%" y="6533" width="0.1562%" height="15" fill="rgb(229,200,27)" fg:x="210998" fg:w="437"/><text x="75.6476%" y="6543.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;alloc::rc::RcBox&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt; &gt; &gt;::as_ref (437 samples, 0.16%)</title><rect x="75.3976%" y="6517" width="0.1562%" height="15" fill="rgb(217,118,10)" fg:x="210998" fg:w="437"/><text x="75.6476%" y="6527.50"></text></g><g><title>neural_network.exe`rand::seq::impl$0::shuffle&lt;tuple$&lt;usize,usize&gt;,rand::rngs::thread::ThreadRng&gt;(ref_mut$&lt;slice2$&lt;tuple$ (437 samples, 0.16%)</title><rect x="75.3976%" y="6501" width="0.1562%" height="15" fill="rgb(206,22,3)" fg:x="210998" fg:w="437"/><text x="75.6476%" y="6511.50"></text></g><g><title>neural_network.exe`rand::seq::gen_index (232 samples, 0.08%)</title><rect x="75.4709%" y="6485" width="0.0829%" height="15" fill="rgb(232,163,46)" fg:x="211203" fg:w="232"/><text x="75.7209%" y="6495.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen_range(rand::rngs::thread::ThreadRng*, core::ops::range::Range (231 samples, 0.08%)</title><rect x="75.4712%" y="6469" width="0.0825%" height="15" fill="rgb(206,95,13)" fg:x="211204" fg:w="231"/><text x="75.7212%" y="6479.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$6::sample_single(core::ops::range::Range (231 samples, 0.08%)</title><rect x="75.4712%" y="6453" width="0.0825%" height="15" fill="rgb(253,154,18)" fg:x="211204" fg:w="231"/><text x="75.7212%" y="6463.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single (231 samples, 0.08%)</title><rect x="75.4712%" y="6437" width="0.0825%" height="15" fill="rgb(219,32,23)" fg:x="211204" fg:w="231"/><text x="75.7212%" y="6447.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single_inclusive (231 samples, 0.08%)</title><rect x="75.4712%" y="6421" width="0.0825%" height="15" fill="rgb(230,191,45)" fg:x="211204" fg:w="231"/><text x="75.7212%" y="6431.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen (179 samples, 0.06%)</title><rect x="75.4898%" y="6405" width="0.0640%" height="15" fill="rgb(229,64,36)" fg:x="211256" fg:w="179"/><text x="75.7398%" y="6415.50"></text></g><g><title>neural_network.exe`rand::distributions::integer::impl$2::sample (179 samples, 0.06%)</title><rect x="75.4898%" y="6389" width="0.0640%" height="15" fill="rgb(205,129,25)" fg:x="211256" fg:w="179"/><text x="75.7398%" y="6399.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::impl$1::next_u32 (179 samples, 0.06%)</title><rect x="75.4898%" y="6373" width="0.0640%" height="15" fill="rgb(254,112,7)" fg:x="211256" fg:w="179"/><text x="75.7398%" y="6383.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$1::next_u32(rand::rngs::adapter::reseeding::ReseedingRng (179 samples, 0.06%)</title><rect x="75.4898%" y="6357" width="0.0640%" height="15" fill="rgb(226,53,48)" fg:x="211256" fg:w="179"/><text x="75.7398%" y="6367.50"></text></g><g><title>neural_network.exe`rand_core::block::impl$2::next_u32(rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore (179 samples, 0.06%)</title><rect x="75.4898%" y="6341" width="0.0640%" height="15" fill="rgb(214,153,38)" fg:x="211256" fg:w="179"/><text x="75.7398%" y="6351.50"></text></g><g><title>neural_network.exe`rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;::generate_and_set (68 samples, 0.02%)</title><rect x="75.5295%" y="6325" width="0.0243%" height="15" fill="rgb(243,101,7)" fg:x="211367" fg:w="68"/><text x="75.7795%" y="6335.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$4::generate(rand::rngs::adapter::reseeding::ReseedingCore&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt;*, rand_chacha::chacha::Array64 (68 samples, 0.02%)</title><rect x="75.5295%" y="6309" width="0.0243%" height="15" fill="rgb(240,140,22)" fg:x="211367" fg:w="68"/><text x="75.7795%" y="6319.50"></text></g><g><title>neural_network.exe`rand_chacha::chacha::impl$23::generate(rand_chacha::chacha::ChaCha12Core*, rand_chacha::chacha::Array64 (61 samples, 0.02%)</title><rect x="75.5320%" y="6293" width="0.0218%" height="15" fill="rgb(235,114,2)" fg:x="211374" fg:w="61"/><text x="75.7820%" y="6303.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::ChaCha::refill4 (61 samples, 0.02%)</title><rect x="75.5320%" y="6277" width="0.0218%" height="15" fill="rgb(242,59,12)" fg:x="211374" fg:w="61"/><text x="75.7820%" y="6287.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::contains(ref$&lt;slice2$&lt;tuple$&lt;usize,usize&gt; &gt; &gt;, tuple$ (808 samples, 0.29%)</title><rect x="75.5538%" y="6581" width="0.2887%" height="15" fill="rgb(252,134,9)" fg:x="211435" fg:w="808"/><text x="75.8038%" y="6591.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (808 samples, 0.29%)</title><rect x="75.5538%" y="6565" width="0.2887%" height="15" fill="rgb(236,4,44)" fg:x="211435" fg:w="808"/><text x="75.8038%" y="6575.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (808 samples, 0.29%)</title><rect x="75.5538%" y="6549" width="0.2887%" height="15" fill="rgb(254,172,41)" fg:x="211435" fg:w="808"/><text x="75.8038%" y="6559.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (77 samples, 0.03%)</title><rect x="75.8150%" y="6533" width="0.0275%" height="15" fill="rgb(244,63,20)" fg:x="212166" fg:w="77"/><text x="76.0650%" y="6543.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (33 samples, 0.01%)</title><rect x="75.8307%" y="6517" width="0.0118%" height="15" fill="rgb(250,73,31)" fg:x="212210" fg:w="33"/><text x="76.0807%" y="6527.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (33 samples, 0.01%)</title><rect x="75.8307%" y="6501" width="0.0118%" height="15" fill="rgb(241,38,36)" fg:x="212210" fg:w="33"/><text x="76.0807%" y="6511.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (33 samples, 0.01%)</title><rect x="75.8307%" y="6485" width="0.0118%" height="15" fill="rgb(245,211,2)" fg:x="212210" fg:w="33"/><text x="76.0807%" y="6495.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (250 samples, 0.09%)</title><rect x="75.8425%" y="6581" width="0.0893%" height="15" fill="rgb(206,120,28)" fg:x="212243" fg:w="250"/><text x="76.0925%" y="6591.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (77 samples, 0.03%)</title><rect x="75.9043%" y="6565" width="0.0275%" height="15" fill="rgb(211,59,34)" fg:x="212416" fg:w="77"/><text x="76.1543%" y="6575.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (77 samples, 0.03%)</title><rect x="75.9043%" y="6549" width="0.0275%" height="15" fill="rgb(233,168,5)" fg:x="212416" fg:w="77"/><text x="76.1543%" y="6559.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (77 samples, 0.03%)</title><rect x="75.9043%" y="6533" width="0.0275%" height="15" fill="rgb(234,33,13)" fg:x="212416" fg:w="77"/><text x="76.1543%" y="6543.50"></text></g><g><title>`0x7FF97E69CB9D (30 samples, 0.01%)</title><rect x="76.1398%" y="6517" width="0.0107%" height="15" fill="rgb(231,150,26)" fg:x="213075" fg:w="30"/><text x="76.3898%" y="6527.50"></text></g><g><title>`0x7FF97E69CBA1 (32 samples, 0.01%)</title><rect x="76.1505%" y="6517" width="0.0114%" height="15" fill="rgb(217,191,4)" fg:x="213105" fg:w="32"/><text x="76.4005%" y="6527.50"></text></g><g><title>`0x7FF97E69CBBC (35 samples, 0.01%)</title><rect x="76.1731%" y="6517" width="0.0125%" height="15" fill="rgb(246,198,38)" fg:x="213168" fg:w="35"/><text x="76.4231%" y="6527.50"></text></g><g><title>`0x7FF97E69CC6F (59 samples, 0.02%)</title><rect x="76.2020%" y="6517" width="0.0211%" height="15" fill="rgb(245,64,37)" fg:x="213249" fg:w="59"/><text x="76.4520%" y="6527.50"></text></g><g><title>`0x7FF97E69CD55 (41 samples, 0.01%)</title><rect x="76.2442%" y="6517" width="0.0147%" height="15" fill="rgb(250,30,36)" fg:x="213367" fg:w="41"/><text x="76.4942%" y="6527.50"></text></g><g><title>`0x7FF97E62AFF1 (640 samples, 0.23%)</title><rect x="76.0608%" y="6533" width="0.2287%" height="15" fill="rgb(217,86,53)" fg:x="212854" fg:w="640"/><text x="76.3108%" y="6543.50"></text></g><g><title>`0x7FF97E62D57C (72 samples, 0.03%)</title><rect x="76.4450%" y="6309" width="0.0257%" height="15" fill="rgb(228,157,16)" fg:x="213929" fg:w="72"/><text x="76.6950%" y="6319.50"></text></g><g><title>`0x7FF97E68F861 (32 samples, 0.01%)</title><rect x="76.5057%" y="6293" width="0.0114%" height="15" fill="rgb(217,59,31)" fg:x="214099" fg:w="32"/><text x="76.7557%" y="6303.50"></text></g><g><title>`0x7FF97E68F87F (33 samples, 0.01%)</title><rect x="76.5186%" y="6293" width="0.0118%" height="15" fill="rgb(237,138,41)" fg:x="214135" fg:w="33"/><text x="76.7686%" y="6303.50"></text></g><g><title>`0x7FF97E68F8EE (29 samples, 0.01%)</title><rect x="76.5304%" y="6293" width="0.0104%" height="15" fill="rgb(227,91,49)" fg:x="214168" fg:w="29"/><text x="76.7804%" y="6303.50"></text></g><g><title>`0x7FF97E62D68A (179 samples, 0.06%)</title><rect x="76.5032%" y="6309" width="0.0640%" height="15" fill="rgb(247,21,44)" fg:x="214092" fg:w="179"/><text x="76.7532%" y="6319.50"></text></g><g><title>`0x7FF97E62D723 (31 samples, 0.01%)</title><rect x="76.6086%" y="6309" width="0.0111%" height="15" fill="rgb(219,210,51)" fg:x="214387" fg:w="31"/><text x="76.8586%" y="6319.50"></text></g><g><title>`0x7FF97E62DBBF (132 samples, 0.05%)</title><rect x="76.6490%" y="6309" width="0.0472%" height="15" fill="rgb(209,140,6)" fg:x="214500" fg:w="132"/><text x="76.8990%" y="6319.50"></text></g><g><title>`0x7FF97E631B1F (42 samples, 0.02%)</title><rect x="76.6812%" y="6293" width="0.0150%" height="15" fill="rgb(221,188,24)" fg:x="214590" fg:w="42"/><text x="76.9312%" y="6303.50"></text></g><g><title>`0x7FF97E62DBDD (59 samples, 0.02%)</title><rect x="76.6962%" y="6309" width="0.0211%" height="15" fill="rgb(232,154,20)" fg:x="214632" fg:w="59"/><text x="76.9462%" y="6319.50"></text></g><g><title>`0x7FF97E62CC9A (778 samples, 0.28%)</title><rect x="76.4421%" y="6325" width="0.2780%" height="15" fill="rgb(244,137,50)" fg:x="213921" fg:w="778"/><text x="76.6921%" y="6335.50"></text></g><g><title>`0x7FF97E62CCC1 (45 samples, 0.02%)</title><rect x="76.7212%" y="6325" width="0.0161%" height="15" fill="rgb(225,185,43)" fg:x="214702" fg:w="45"/><text x="76.9712%" y="6335.50"></text></g><g><title>`0x7FF97E62CCF8 (35 samples, 0.01%)</title><rect x="76.7373%" y="6325" width="0.0125%" height="15" fill="rgb(213,205,38)" fg:x="214747" fg:w="35"/><text x="76.9873%" y="6335.50"></text></g><g><title>`0x7FF97E63241D (33 samples, 0.01%)</title><rect x="76.8063%" y="6293" width="0.0118%" height="15" fill="rgb(236,73,12)" fg:x="214940" fg:w="33"/><text x="77.0563%" y="6303.50"></text></g><g><title>`0x7FF97E632438 (40 samples, 0.01%)</title><rect x="76.8180%" y="6293" width="0.0143%" height="15" fill="rgb(235,219,13)" fg:x="214973" fg:w="40"/><text x="77.0680%" y="6303.50"></text></g><g><title>`0x7FF97E632442 (58 samples, 0.02%)</title><rect x="76.8327%" y="6293" width="0.0207%" height="15" fill="rgb(218,59,36)" fg:x="215014" fg:w="58"/><text x="77.0827%" y="6303.50"></text></g><g><title>`0x7FF97E632447 (52 samples, 0.02%)</title><rect x="76.8534%" y="6293" width="0.0186%" height="15" fill="rgb(205,110,39)" fg:x="215072" fg:w="52"/><text x="77.1034%" y="6303.50"></text></g><g><title>`0x7FF97E63244E (62 samples, 0.02%)</title><rect x="76.8720%" y="6293" width="0.0222%" height="15" fill="rgb(218,206,42)" fg:x="215124" fg:w="62"/><text x="77.1220%" y="6303.50"></text></g><g><title>`0x7FF97E632473 (74 samples, 0.03%)</title><rect x="76.8945%" y="6293" width="0.0264%" height="15" fill="rgb(248,125,24)" fg:x="215187" fg:w="74"/><text x="77.1445%" y="6303.50"></text></g><g><title>`0x7FF97E63249F (72 samples, 0.03%)</title><rect x="76.9217%" y="6293" width="0.0257%" height="15" fill="rgb(242,28,27)" fg:x="215263" fg:w="72"/><text x="77.1717%" y="6303.50"></text></g><g><title>`0x7FF97E6324C5 (77 samples, 0.03%)</title><rect x="76.9506%" y="6293" width="0.0275%" height="15" fill="rgb(216,228,15)" fg:x="215344" fg:w="77"/><text x="77.2006%" y="6303.50"></text></g><g><title>`0x7FF97E62D57C (38 samples, 0.01%)</title><rect x="77.0750%" y="6261" width="0.0136%" height="15" fill="rgb(235,116,46)" fg:x="215692" fg:w="38"/><text x="77.3250%" y="6271.50"></text></g><g><title>`0x7FF97E62D68A (69 samples, 0.02%)</title><rect x="77.1064%" y="6261" width="0.0247%" height="15" fill="rgb(224,18,32)" fg:x="215780" fg:w="69"/><text x="77.3564%" y="6271.50"></text></g><g><title>`0x7FF97E62DBBF (46 samples, 0.02%)</title><rect x="77.1865%" y="6261" width="0.0164%" height="15" fill="rgb(252,5,12)" fg:x="216004" fg:w="46"/><text x="77.4365%" y="6271.50"></text></g><g><title>`0x7FF97E62DBDD (28 samples, 0.01%)</title><rect x="77.2029%" y="6261" width="0.0100%" height="15" fill="rgb(251,36,5)" fg:x="216050" fg:w="28"/><text x="77.4529%" y="6271.50"></text></g><g><title>`0x7FF97E62CC9A (508 samples, 0.18%)</title><rect x="77.0321%" y="6277" width="0.1815%" height="15" fill="rgb(217,53,14)" fg:x="215572" fg:w="508"/><text x="77.2821%" y="6287.50"></text></g><g><title>`0x7FF97E62CCC1 (32 samples, 0.01%)</title><rect x="77.2136%" y="6277" width="0.0114%" height="15" fill="rgb(215,86,45)" fg:x="216080" fg:w="32"/><text x="77.4636%" y="6287.50"></text></g><g><title>`0x7FF97E62CCF8 (35 samples, 0.01%)</title><rect x="77.2251%" y="6277" width="0.0125%" height="15" fill="rgb(242,169,11)" fg:x="216112" fg:w="35"/><text x="77.4751%" y="6287.50"></text></g><g><title>`0x7FF97E633505 (716 samples, 0.26%)</title><rect x="76.9824%" y="6293" width="0.2559%" height="15" fill="rgb(211,213,45)" fg:x="215433" fg:w="716"/><text x="77.2324%" y="6303.50"></text></g><g><title>`0x7FF97E696B96 (316 samples, 0.11%)</title><rect x="77.2404%" y="6277" width="0.1129%" height="15" fill="rgb(205,88,11)" fg:x="216155" fg:w="316"/><text x="77.4904%" y="6287.50"></text></g><g><title>`0x7FF97E696C00 (50 samples, 0.02%)</title><rect x="77.3558%" y="6277" width="0.0179%" height="15" fill="rgb(252,69,26)" fg:x="216478" fg:w="50"/><text x="77.6058%" y="6287.50"></text></g><g><title>`0x7FF97E696C13 (51 samples, 0.02%)</title><rect x="77.3773%" y="6277" width="0.0182%" height="15" fill="rgb(246,123,37)" fg:x="216538" fg:w="51"/><text x="77.6273%" y="6287.50"></text></g><g><title>`0x7FF97E696C22 (43 samples, 0.02%)</title><rect x="77.4019%" y="6277" width="0.0154%" height="15" fill="rgb(212,205,5)" fg:x="216607" fg:w="43"/><text x="77.6519%" y="6287.50"></text></g><g><title>`0x7FF97E633550 (539 samples, 0.19%)</title><rect x="77.2383%" y="6293" width="0.1926%" height="15" fill="rgb(253,148,0)" fg:x="216149" fg:w="539"/><text x="77.4883%" y="6303.50"></text></g><g><title>`0x7FF97E69CC6F (100 samples, 0.04%)</title><rect x="77.4831%" y="6261" width="0.0357%" height="15" fill="rgb(239,22,4)" fg:x="216834" fg:w="100"/><text x="77.7331%" y="6271.50"></text></g><g><title>`0x7FF97E69CC88 (31 samples, 0.01%)</title><rect x="77.5188%" y="6261" width="0.0111%" height="15" fill="rgb(226,26,53)" fg:x="216934" fg:w="31"/><text x="77.7688%" y="6271.50"></text></g><g><title>`0x7FF97E69CCAF (275 samples, 0.10%)</title><rect x="77.5363%" y="6261" width="0.0983%" height="15" fill="rgb(225,229,45)" fg:x="216983" fg:w="275"/><text x="77.7863%" y="6271.50"></text></g><g><title>`0x7FF97E62AFF1 (618 samples, 0.22%)</title><rect x="77.4495%" y="6277" width="0.2208%" height="15" fill="rgb(220,60,37)" fg:x="216740" fg:w="618"/><text x="77.6995%" y="6287.50"></text></g><g><title>`0x7FF97E633562 (668 samples, 0.24%)</title><rect x="77.4341%" y="6293" width="0.2387%" height="15" fill="rgb(217,180,35)" fg:x="216697" fg:w="668"/><text x="77.6841%" y="6303.50"></text></g><g><title>`0x7FF97E6335AC (74 samples, 0.03%)</title><rect x="77.6810%" y="6293" width="0.0264%" height="15" fill="rgb(229,7,53)" fg:x="217388" fg:w="74"/><text x="77.9310%" y="6303.50"></text></g><g><title>`0x7FF97E6322C7 (2,571 samples, 0.92%)</title><rect x="76.7891%" y="6309" width="0.9187%" height="15" fill="rgb(254,137,3)" fg:x="214892" fg:w="2571"/><text x="77.0391%" y="6319.50"></text></g><g><title>`0x7FF97E6322FB (38 samples, 0.01%)</title><rect x="77.7078%" y="6309" width="0.0136%" height="15" fill="rgb(215,140,41)" fg:x="217463" fg:w="38"/><text x="77.9578%" y="6319.50"></text></g><g><title>`0x7FF97E632307 (70 samples, 0.03%)</title><rect x="77.7221%" y="6309" width="0.0250%" height="15" fill="rgb(250,80,15)" fg:x="217503" fg:w="70"/><text x="77.9721%" y="6319.50"></text></g><g><title>`0x7FF97E632312 (101 samples, 0.04%)</title><rect x="77.7471%" y="6309" width="0.0361%" height="15" fill="rgb(252,191,6)" fg:x="217573" fg:w="101"/><text x="77.9971%" y="6319.50"></text></g><g><title>`0x7FF97E63218A (2,827 samples, 1.01%)</title><rect x="76.7741%" y="6325" width="1.0102%" height="15" fill="rgb(246,217,18)" fg:x="214850" fg:w="2827"/><text x="77.0241%" y="6335.50"></text></g><g><title>`0x7FF97E63219E (60 samples, 0.02%)</title><rect x="77.7843%" y="6325" width="0.0214%" height="15" fill="rgb(223,93,7)" fg:x="217677" fg:w="60"/><text x="78.0343%" y="6335.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_realloc (38 samples, 0.01%)</title><rect x="77.8118%" y="6325" width="0.0136%" height="15" fill="rgb(225,55,52)" fg:x="217754" fg:w="38"/><text x="78.0618%" y="6335.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (3,926 samples, 1.40%)</title><rect x="76.4246%" y="6373" width="1.4029%" height="15" fill="rgb(240,31,24)" fg:x="213872" fg:w="3926"/><text x="76.6746%" y="6383.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (3,926 samples, 1.40%)</title><rect x="76.4246%" y="6357" width="1.4029%" height="15" fill="rgb(205,56,52)" fg:x="213872" fg:w="3926"/><text x="76.6746%" y="6367.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (3,924 samples, 1.40%)</title><rect x="76.4253%" y="6341" width="1.4022%" height="15" fill="rgb(246,146,12)" fg:x="213874" fg:w="3924"/><text x="76.6753%" y="6351.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_mut_ptr (4,334 samples, 1.55%)</title><rect x="76.3131%" y="6517" width="1.5487%" height="15" fill="rgb(239,84,36)" fg:x="213560" fg:w="4334"/><text x="76.5631%" y="6527.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (4,332 samples, 1.55%)</title><rect x="76.3138%" y="6501" width="1.5480%" height="15" fill="rgb(207,41,40)" fg:x="213562" fg:w="4332"/><text x="76.5638%" y="6511.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (4,332 samples, 1.55%)</title><rect x="76.3138%" y="6485" width="1.5480%" height="15" fill="rgb(241,179,25)" fg:x="213562" fg:w="4332"/><text x="76.5638%" y="6495.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (4,332 samples, 1.55%)</title><rect x="76.3138%" y="6469" width="1.5480%" height="15" fill="rgb(210,0,34)" fg:x="213562" fg:w="4332"/><text x="76.5638%" y="6479.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::grow_one&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; (4,314 samples, 1.54%)</title><rect x="76.3203%" y="6453" width="1.5416%" height="15" fill="rgb(225,217,29)" fg:x="213580" fg:w="4314"/><text x="76.5703%" y="6463.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (4,192 samples, 1.50%)</title><rect x="76.3639%" y="6437" width="1.4980%" height="15" fill="rgb(216,191,38)" fg:x="213702" fg:w="4192"/><text x="76.6139%" y="6447.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (4,179 samples, 1.49%)</title><rect x="76.3685%" y="6421" width="1.4933%" height="15" fill="rgb(232,140,52)" fg:x="213715" fg:w="4179"/><text x="76.6185%" y="6431.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (4,120 samples, 1.47%)</title><rect x="76.3896%" y="6405" width="1.4722%" height="15" fill="rgb(223,158,51)" fg:x="213774" fg:w="4120"/><text x="76.6396%" y="6415.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (4,087 samples, 1.46%)</title><rect x="76.4014%" y="6389" width="1.4604%" height="15" fill="rgb(235,29,51)" fg:x="213807" fg:w="4087"/><text x="76.6514%" y="6399.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;, alloc::raw_vec::finish_grow::closure_env$0 (96 samples, 0.03%)</title><rect x="77.8275%" y="6373" width="0.0343%" height="15" fill="rgb(215,181,18)" fg:x="217798" fg:w="96"/><text x="78.0775%" y="6383.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (4,696 samples, 1.68%)</title><rect x="76.2920%" y="6533" width="1.6781%" height="15" fill="rgb(227,125,34)" fg:x="213501" fg:w="4696"/><text x="76.5420%" y="6543.50"></text></g><g><title>neural_network.exe`core::ptr::write(tuple$&lt;usize,usize&gt;*, tuple$ (303 samples, 0.11%)</title><rect x="77.8618%" y="6517" width="0.1083%" height="15" fill="rgb(230,197,49)" fg:x="217894" fg:w="303"/><text x="78.1118%" y="6527.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::remove (61 samples, 0.02%)</title><rect x="77.9701%" y="6533" width="0.0218%" height="15" fill="rgb(239,141,16)" fg:x="218197" fg:w="61"/><text x="78.2201%" y="6543.50"></text></g><g><title>`0x7FF968D51381 (498 samples, 0.18%)</title><rect x="78.0194%" y="6469" width="0.1780%" height="15" fill="rgb(225,105,43)" fg:x="218335" fg:w="498"/><text x="78.2694%" y="6479.50"></text></g><g><title>`0x7FF97E62CAFF (33 samples, 0.01%)</title><rect x="78.2302%" y="6405" width="0.0118%" height="15" fill="rgb(214,131,14)" fg:x="218925" fg:w="33"/><text x="78.4802%" y="6415.50"></text></g><g><title>`0x7FF97E62CB20 (44 samples, 0.02%)</title><rect x="78.2424%" y="6405" width="0.0157%" height="15" fill="rgb(229,177,11)" fg:x="218959" fg:w="44"/><text x="78.4924%" y="6415.50"></text></g><g><title>`0x7FF97E62CB3D (42 samples, 0.02%)</title><rect x="78.2621%" y="6405" width="0.0150%" height="15" fill="rgb(231,180,14)" fg:x="219014" fg:w="42"/><text x="78.5121%" y="6415.50"></text></g><g><title>`0x7FF97E62D4F3 (32 samples, 0.01%)</title><rect x="78.3678%" y="6389" width="0.0114%" height="15" fill="rgb(232,88,2)" fg:x="219310" fg:w="32"/><text x="78.6178%" y="6399.50"></text></g><g><title>`0x7FF97E62D5E2 (36 samples, 0.01%)</title><rect x="78.4111%" y="6389" width="0.0129%" height="15" fill="rgb(205,220,8)" fg:x="219431" fg:w="36"/><text x="78.6611%" y="6399.50"></text></g><g><title>`0x7FF97E62D68A (65 samples, 0.02%)</title><rect x="78.4286%" y="6389" width="0.0232%" height="15" fill="rgb(225,23,53)" fg:x="219480" fg:w="65"/><text x="78.6786%" y="6399.50"></text></g><g><title>`0x7FF97E62DBBF (49 samples, 0.02%)</title><rect x="78.5150%" y="6389" width="0.0175%" height="15" fill="rgb(213,62,29)" fg:x="219722" fg:w="49"/><text x="78.7650%" y="6399.50"></text></g><g><title>`0x7FF97E62CC9A (543 samples, 0.19%)</title><rect x="78.3492%" y="6405" width="0.1940%" height="15" fill="rgb(227,75,7)" fg:x="219258" fg:w="543"/><text x="78.5992%" y="6415.50"></text></g><g><title>`0x7FF97E62DBDD (30 samples, 0.01%)</title><rect x="78.5326%" y="6389" width="0.0107%" height="15" fill="rgb(207,105,14)" fg:x="219771" fg:w="30"/><text x="78.7826%" y="6399.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_alloc (28 samples, 0.01%)</title><rect x="78.5772%" y="6405" width="0.0100%" height="15" fill="rgb(245,62,29)" fg:x="219896" fg:w="28"/><text x="78.8272%" y="6415.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (1,037 samples, 0.37%)</title><rect x="78.2277%" y="6469" width="0.3706%" height="15" fill="rgb(236,202,4)" fg:x="218918" fg:w="1037"/><text x="78.4777%" y="6479.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (1,037 samples, 0.37%)</title><rect x="78.2277%" y="6453" width="0.3706%" height="15" fill="rgb(250,67,1)" fg:x="218918" fg:w="1037"/><text x="78.4777%" y="6463.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (1,037 samples, 0.37%)</title><rect x="78.2277%" y="6437" width="0.3706%" height="15" fill="rgb(253,115,44)" fg:x="218918" fg:w="1037"/><text x="78.4777%" y="6447.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (1,037 samples, 0.37%)</title><rect x="78.2277%" y="6421" width="0.3706%" height="15" fill="rgb(251,139,18)" fg:x="218918" fg:w="1037"/><text x="78.4777%" y="6431.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::process_heap_alloc (31 samples, 0.01%)</title><rect x="78.5872%" y="6405" width="0.0111%" height="15" fill="rgb(218,22,32)" fg:x="219924" fg:w="31"/><text x="78.8372%" y="6415.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$11::clone(alloc::vec::Vec&lt;tuple$ (1,706 samples, 0.61%)</title><rect x="77.9919%" y="6533" width="0.6096%" height="15" fill="rgb(243,53,5)" fg:x="218258" fg:w="1706"/><text x="78.2419%" y="6543.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (1,706 samples, 0.61%)</title><rect x="77.9919%" y="6517" width="0.6096%" height="15" fill="rgb(227,56,16)" fg:x="218258" fg:w="1706"/><text x="78.2419%" y="6527.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$&lt;tuple$ (1,693 samples, 0.60%)</title><rect x="77.9965%" y="6501" width="0.6050%" height="15" fill="rgb(245,53,0)" fg:x="218271" fg:w="1693"/><text x="78.2465%" y="6511.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$&lt;tuple$ (1,693 samples, 0.60%)</title><rect x="77.9965%" y="6485" width="0.6050%" height="15" fill="rgb(216,170,35)" fg:x="218271" fg:w="1693"/><text x="78.2465%" y="6495.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (1,656 samples, 0.59%)</title><rect x="78.6408%" y="6517" width="0.5918%" height="15" fill="rgb(211,200,8)" fg:x="220074" fg:w="1656"/><text x="78.8908%" y="6527.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (1,656 samples, 0.59%)</title><rect x="78.6408%" y="6501" width="0.5918%" height="15" fill="rgb(228,204,44)" fg:x="220074" fg:w="1656"/><text x="78.8908%" y="6511.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (223 samples, 0.08%)</title><rect x="79.1529%" y="6485" width="0.0797%" height="15" fill="rgb(214,121,17)" fg:x="221507" fg:w="223"/><text x="79.4029%" y="6495.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$ (2,127 samples, 0.76%)</title><rect x="78.6015%" y="6533" width="0.7601%" height="15" fill="rgb(233,64,38)" fg:x="219964" fg:w="2127"/><text x="78.8515%" y="6543.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;tuple$ (361 samples, 0.13%)</title><rect x="79.2326%" y="6517" width="0.1290%" height="15" fill="rgb(253,54,19)" fg:x="221730" fg:w="361"/><text x="79.4826%" y="6527.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;tuple$ (334 samples, 0.12%)</title><rect x="79.2422%" y="6501" width="0.1194%" height="15" fill="rgb(253,94,18)" fg:x="221757" fg:w="334"/><text x="79.4922%" y="6511.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (36 samples, 0.01%)</title><rect x="79.3616%" y="6501" width="0.0129%" height="15" fill="rgb(227,57,52)" fg:x="222091" fg:w="36"/><text x="79.6116%" y="6511.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (36 samples, 0.01%)</title><rect x="79.3616%" y="6485" width="0.0129%" height="15" fill="rgb(230,228,50)" fg:x="222091" fg:w="36"/><text x="79.6116%" y="6495.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (36 samples, 0.01%)</title><rect x="79.3616%" y="6469" width="0.0129%" height="15" fill="rgb(217,205,27)" fg:x="222091" fg:w="36"/><text x="79.6116%" y="6479.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (36 samples, 0.01%)</title><rect x="79.3616%" y="6453" width="0.0129%" height="15" fill="rgb(252,71,50)" fg:x="222091" fg:w="36"/><text x="79.6116%" y="6463.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (79 samples, 0.03%)</title><rect x="79.3616%" y="6517" width="0.0282%" height="15" fill="rgb(209,86,4)" fg:x="222091" fg:w="79"/><text x="79.6116%" y="6527.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;tuple$ (43 samples, 0.02%)</title><rect x="79.3744%" y="6501" width="0.0154%" height="15" fill="rgb(229,94,0)" fg:x="222127" fg:w="43"/><text x="79.6244%" y="6511.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, core::ops::range::Range (2,069 samples, 0.74%)</title><rect x="79.3616%" y="6533" width="0.7393%" height="15" fill="rgb(252,223,21)" fg:x="222091" fg:w="2069"/><text x="79.6116%" y="6543.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (1,990 samples, 0.71%)</title><rect x="79.3898%" y="6517" width="0.7111%" height="15" fill="rgb(230,210,4)" fg:x="222170" fg:w="1990"/><text x="79.6398%" y="6527.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (1,990 samples, 0.71%)</title><rect x="79.3898%" y="6501" width="0.7111%" height="15" fill="rgb(240,149,38)" fg:x="222170" fg:w="1990"/><text x="79.6398%" y="6511.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (238 samples, 0.09%)</title><rect x="80.0159%" y="6485" width="0.0850%" height="15" fill="rgb(254,105,20)" fg:x="223922" fg:w="238"/><text x="80.2659%" y="6495.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (63 samples, 0.02%)</title><rect x="80.0784%" y="6469" width="0.0225%" height="15" fill="rgb(253,87,46)" fg:x="224097" fg:w="63"/><text x="80.3284%" y="6479.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (63 samples, 0.02%)</title><rect x="80.0784%" y="6453" width="0.0225%" height="15" fill="rgb(253,116,33)" fg:x="224097" fg:w="63"/><text x="80.3284%" y="6463.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (63 samples, 0.02%)</title><rect x="80.0784%" y="6437" width="0.0225%" height="15" fill="rgb(229,198,5)" fg:x="224097" fg:w="63"/><text x="80.3284%" y="6447.50"></text></g><g><title>`0x7FF97E62AFA5 (58 samples, 0.02%)</title><rect x="80.1123%" y="6437" width="0.0207%" height="15" fill="rgb(242,38,37)" fg:x="224192" fg:w="58"/><text x="80.3623%" y="6447.50"></text></g><g><title>`0x7FF97E62AFBA (90 samples, 0.03%)</title><rect x="80.1338%" y="6437" width="0.0322%" height="15" fill="rgb(242,69,53)" fg:x="224252" fg:w="90"/><text x="80.3838%" y="6447.50"></text></g><g><title>`0x7FF97E62AFE0 (151 samples, 0.05%)</title><rect x="80.1659%" y="6437" width="0.0540%" height="15" fill="rgb(249,80,16)" fg:x="224342" fg:w="151"/><text x="80.4159%" y="6447.50"></text></g><g><title>`0x7FF97E62BB70 (190 samples, 0.07%)</title><rect x="80.2210%" y="6421" width="0.0679%" height="15" fill="rgb(206,128,11)" fg:x="224496" fg:w="190"/><text x="80.4710%" y="6431.50"></text></g><g><title>`0x7FF97E62BB84 (201 samples, 0.07%)</title><rect x="80.2910%" y="6421" width="0.0718%" height="15" fill="rgb(212,35,20)" fg:x="224692" fg:w="201"/><text x="80.5410%" y="6431.50"></text></g><g><title>`0x7FF97E62C2B1 (172 samples, 0.06%)</title><rect x="80.3653%" y="6421" width="0.0615%" height="15" fill="rgb(236,79,13)" fg:x="224900" fg:w="172"/><text x="80.6153%" y="6431.50"></text></g><g><title>`0x7FF97E62C38A (184 samples, 0.07%)</title><rect x="80.4429%" y="6421" width="0.0658%" height="15" fill="rgb(233,123,3)" fg:x="225117" fg:w="184"/><text x="80.6929%" y="6431.50"></text></g><g><title>`0x7FF97E69CB43 (114 samples, 0.04%)</title><rect x="80.5086%" y="6421" width="0.0407%" height="15" fill="rgb(214,93,52)" fg:x="225301" fg:w="114"/><text x="80.7586%" y="6431.50"></text></g><g><title>`0x7FF97E69CB6A (61 samples, 0.02%)</title><rect x="80.5558%" y="6421" width="0.0218%" height="15" fill="rgb(251,37,40)" fg:x="225433" fg:w="61"/><text x="80.8058%" y="6431.50"></text></g><g><title>`0x7FF97E62AFF1 (1,222 samples, 0.44%)</title><rect x="80.2206%" y="6437" width="0.4367%" height="15" fill="rgb(227,80,54)" fg:x="224495" fg:w="1222"/><text x="80.4706%" y="6447.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (1,568 samples, 0.56%)</title><rect x="80.1120%" y="6469" width="0.5603%" height="15" fill="rgb(254,48,11)" fg:x="224191" fg:w="1568"/><text x="80.3620%" y="6479.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (1,568 samples, 0.56%)</title><rect x="80.1120%" y="6453" width="0.5603%" height="15" fill="rgb(235,193,26)" fg:x="224191" fg:w="1568"/><text x="80.3620%" y="6463.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (35 samples, 0.01%)</title><rect x="80.6598%" y="6437" width="0.0125%" height="15" fill="rgb(229,99,21)" fg:x="225724" fg:w="35"/><text x="80.9098%" y="6447.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::dealloc (35 samples, 0.01%)</title><rect x="80.6598%" y="6421" width="0.0125%" height="15" fill="rgb(211,140,41)" fg:x="225724" fg:w="35"/><text x="80.9098%" y="6431.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;tuple$ (1,633 samples, 0.58%)</title><rect x="80.1020%" y="6533" width="0.5835%" height="15" fill="rgb(240,227,30)" fg:x="224163" fg:w="1633"/><text x="80.3520%" y="6543.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (1,633 samples, 0.58%)</title><rect x="80.1020%" y="6517" width="0.5835%" height="15" fill="rgb(215,224,45)" fg:x="224163" fg:w="1633"/><text x="80.3520%" y="6527.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (1,633 samples, 0.58%)</title><rect x="80.1020%" y="6501" width="0.5835%" height="15" fill="rgb(206,123,31)" fg:x="224163" fg:w="1633"/><text x="80.3520%" y="6511.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (1,605 samples, 0.57%)</title><rect x="80.1120%" y="6485" width="0.5735%" height="15" fill="rgb(210,138,16)" fg:x="224191" fg:w="1605"/><text x="80.3620%" y="6495.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::current_memory (37 samples, 0.01%)</title><rect x="80.6723%" y="6469" width="0.0132%" height="15" fill="rgb(228,57,28)" fg:x="225759" fg:w="37"/><text x="80.9223%" y="6479.50"></text></g><g><title>neural_network.exe`core::num::impl$11::unchecked_mul (37 samples, 0.01%)</title><rect x="80.6723%" y="6453" width="0.0132%" height="15" fill="rgb(242,170,10)" fg:x="225759" fg:w="37"/><text x="80.9223%" y="6463.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy(tuple$&lt;usize,usize&gt;*, tuple$ (44 samples, 0.02%)</title><rect x="80.7223%" y="6405" width="0.0157%" height="15" fill="rgb(228,214,39)" fg:x="225899" fg:w="44"/><text x="80.9723%" y="6415.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::swap(ref_mut$&lt;slice2$&lt;tuple$ (151 samples, 0.05%)</title><rect x="80.7045%" y="6437" width="0.0540%" height="15" fill="rgb(218,179,33)" fg:x="225849" fg:w="151"/><text x="80.9545%" y="6447.50"></text></g><g><title>neural_network.exe`core::ptr::swap(tuple$&lt;usize,usize&gt;*, tuple$ (101 samples, 0.04%)</title><rect x="80.7223%" y="6421" width="0.0361%" height="15" fill="rgb(235,193,39)" fg:x="225899" fg:w="101"/><text x="80.9723%" y="6431.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping(tuple$&lt;usize,usize&gt;*, tuple$ (57 samples, 0.02%)</title><rect x="80.7380%" y="6405" width="0.0204%" height="15" fill="rgb(219,221,36)" fg:x="225943" fg:w="57"/><text x="80.9880%" y="6415.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::round(rand_chacha::guts::State&lt;ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (42 samples, 0.02%)</title><rect x="80.8156%" y="6165" width="0.0150%" height="15" fill="rgb(248,218,19)" fg:x="226160" fg:w="42"/><text x="81.0656%" y="6175.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide::impl_avx2 (53 samples, 0.02%)</title><rect x="80.8124%" y="6213" width="0.0189%" height="15" fill="rgb(205,50,9)" fg:x="226151" fg:w="53"/><text x="81.0624%" y="6223.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide::fn_impl(ppv_lite86::x86_64::Avx2Machine (53 samples, 0.02%)</title><rect x="80.8124%" y="6197" width="0.0189%" height="15" fill="rgb(238,81,28)" fg:x="226151" fg:w="53"/><text x="81.0624%" y="6207.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide_impl(ppv_lite86::x86_64::Avx2Machine (53 samples, 0.02%)</title><rect x="80.8124%" y="6181" width="0.0189%" height="15" fill="rgb(235,110,19)" fg:x="226151" fg:w="53"/><text x="81.0624%" y="6191.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place (413 samples, 0.15%)</title><rect x="80.6855%" y="6533" width="0.1476%" height="15" fill="rgb(214,7,14)" fg:x="225796" fg:w="413"/><text x="80.9355%" y="6543.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (413 samples, 0.15%)</title><rect x="80.6855%" y="6517" width="0.1476%" height="15" fill="rgb(211,77,3)" fg:x="225796" fg:w="413"/><text x="80.9355%" y="6527.50"></text></g><g><title>neural_network.exe`alloc::rc::impl$30::drop(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (413 samples, 0.15%)</title><rect x="80.6855%" y="6501" width="0.1476%" height="15" fill="rgb(229,5,9)" fg:x="225796" fg:w="413"/><text x="80.9355%" y="6511.50"></text></g><g><title>neural_network.exe`alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;::inner (401 samples, 0.14%)</title><rect x="80.6898%" y="6485" width="0.1433%" height="15" fill="rgb(225,90,11)" fg:x="225808" fg:w="401"/><text x="80.9398%" y="6495.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;alloc::rc::RcBox&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt; &gt; &gt;::as_ref (398 samples, 0.14%)</title><rect x="80.6909%" y="6469" width="0.1422%" height="15" fill="rgb(242,56,8)" fg:x="225811" fg:w="398"/><text x="80.9409%" y="6479.50"></text></g><g><title>neural_network.exe`rand::seq::impl$0::shuffle&lt;tuple$&lt;usize,usize&gt;,rand::rngs::thread::ThreadRng&gt;(ref_mut$&lt;slice2$&lt;tuple$ (398 samples, 0.14%)</title><rect x="80.6909%" y="6453" width="0.1422%" height="15" fill="rgb(249,212,39)" fg:x="225811" fg:w="398"/><text x="80.9409%" y="6463.50"></text></g><g><title>neural_network.exe`rand::seq::gen_index (209 samples, 0.07%)</title><rect x="80.7584%" y="6437" width="0.0747%" height="15" fill="rgb(236,90,9)" fg:x="226000" fg:w="209"/><text x="81.0084%" y="6447.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen_range(rand::rngs::thread::ThreadRng*, core::ops::range::Range (208 samples, 0.07%)</title><rect x="80.7588%" y="6421" width="0.0743%" height="15" fill="rgb(206,88,35)" fg:x="226001" fg:w="208"/><text x="81.0088%" y="6431.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$6::sample_single(core::ops::range::Range (208 samples, 0.07%)</title><rect x="80.7588%" y="6405" width="0.0743%" height="15" fill="rgb(205,126,30)" fg:x="226001" fg:w="208"/><text x="81.0088%" y="6415.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single (208 samples, 0.07%)</title><rect x="80.7588%" y="6389" width="0.0743%" height="15" fill="rgb(230,176,12)" fg:x="226001" fg:w="208"/><text x="81.0088%" y="6399.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single_inclusive (208 samples, 0.07%)</title><rect x="80.7588%" y="6373" width="0.0743%" height="15" fill="rgb(243,19,9)" fg:x="226001" fg:w="208"/><text x="81.0088%" y="6383.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen (159 samples, 0.06%)</title><rect x="80.7763%" y="6357" width="0.0568%" height="15" fill="rgb(245,171,17)" fg:x="226050" fg:w="159"/><text x="81.0263%" y="6367.50"></text></g><g><title>neural_network.exe`rand::distributions::integer::impl$2::sample (159 samples, 0.06%)</title><rect x="80.7763%" y="6341" width="0.0568%" height="15" fill="rgb(227,52,21)" fg:x="226050" fg:w="159"/><text x="81.0263%" y="6351.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::impl$1::next_u32 (159 samples, 0.06%)</title><rect x="80.7763%" y="6325" width="0.0568%" height="15" fill="rgb(238,69,14)" fg:x="226050" fg:w="159"/><text x="81.0263%" y="6335.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$1::next_u32(rand::rngs::adapter::reseeding::ReseedingRng (159 samples, 0.06%)</title><rect x="80.7763%" y="6309" width="0.0568%" height="15" fill="rgb(241,156,39)" fg:x="226050" fg:w="159"/><text x="81.0263%" y="6319.50"></text></g><g><title>neural_network.exe`rand_core::block::impl$2::next_u32(rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore (159 samples, 0.06%)</title><rect x="80.7763%" y="6293" width="0.0568%" height="15" fill="rgb(212,227,28)" fg:x="226050" fg:w="159"/><text x="81.0263%" y="6303.50"></text></g><g><title>neural_network.exe`rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;::generate_and_set (65 samples, 0.02%)</title><rect x="80.8099%" y="6277" width="0.0232%" height="15" fill="rgb(209,118,27)" fg:x="226144" fg:w="65"/><text x="81.0599%" y="6287.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$4::generate(rand::rngs::adapter::reseeding::ReseedingCore&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt;*, rand_chacha::chacha::Array64 (65 samples, 0.02%)</title><rect x="80.8099%" y="6261" width="0.0232%" height="15" fill="rgb(226,102,5)" fg:x="226144" fg:w="65"/><text x="81.0599%" y="6271.50"></text></g><g><title>neural_network.exe`rand_chacha::chacha::impl$23::generate(rand_chacha::chacha::ChaCha12Core*, rand_chacha::chacha::Array64 (58 samples, 0.02%)</title><rect x="80.8124%" y="6245" width="0.0207%" height="15" fill="rgb(223,34,3)" fg:x="226151" fg:w="58"/><text x="81.0624%" y="6255.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::ChaCha::refill4 (58 samples, 0.02%)</title><rect x="80.8124%" y="6229" width="0.0207%" height="15" fill="rgb(221,81,38)" fg:x="226151" fg:w="58"/><text x="81.0624%" y="6239.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::contains(ref$&lt;slice2$&lt;tuple$&lt;usize,usize&gt; &gt; &gt;, tuple$ (719 samples, 0.26%)</title><rect x="80.8331%" y="6533" width="0.2569%" height="15" fill="rgb(236,219,28)" fg:x="226209" fg:w="719"/><text x="81.0831%" y="6543.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (719 samples, 0.26%)</title><rect x="80.8331%" y="6517" width="0.2569%" height="15" fill="rgb(213,200,14)" fg:x="226209" fg:w="719"/><text x="81.0831%" y="6527.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (719 samples, 0.26%)</title><rect x="80.8331%" y="6501" width="0.2569%" height="15" fill="rgb(240,33,19)" fg:x="226209" fg:w="719"/><text x="81.0831%" y="6511.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (68 samples, 0.02%)</title><rect x="81.0657%" y="6485" width="0.0243%" height="15" fill="rgb(233,113,27)" fg:x="226860" fg:w="68"/><text x="81.3157%" y="6495.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (33 samples, 0.01%)</title><rect x="81.0782%" y="6469" width="0.0118%" height="15" fill="rgb(220,221,18)" fg:x="226895" fg:w="33"/><text x="81.3282%" y="6479.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (33 samples, 0.01%)</title><rect x="81.0782%" y="6453" width="0.0118%" height="15" fill="rgb(238,92,8)" fg:x="226895" fg:w="33"/><text x="81.3282%" y="6463.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (33 samples, 0.01%)</title><rect x="81.0782%" y="6437" width="0.0118%" height="15" fill="rgb(222,164,16)" fg:x="226895" fg:w="33"/><text x="81.3282%" y="6447.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (252 samples, 0.09%)</title><rect x="81.0900%" y="6533" width="0.0900%" height="15" fill="rgb(241,119,3)" fg:x="226928" fg:w="252"/><text x="81.3400%" y="6543.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (70 samples, 0.03%)</title><rect x="81.1551%" y="6517" width="0.0250%" height="15" fill="rgb(241,44,8)" fg:x="227110" fg:w="70"/><text x="81.4051%" y="6527.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (70 samples, 0.03%)</title><rect x="81.1551%" y="6501" width="0.0250%" height="15" fill="rgb(230,36,40)" fg:x="227110" fg:w="70"/><text x="81.4051%" y="6511.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (70 samples, 0.03%)</title><rect x="81.1551%" y="6485" width="0.0250%" height="15" fill="rgb(243,16,36)" fg:x="227110" fg:w="70"/><text x="81.4051%" y="6495.50"></text></g><g><title>`0x7FF97E69CBA1 (28 samples, 0.01%)</title><rect x="81.3738%" y="6469" width="0.0100%" height="15" fill="rgb(231,4,26)" fg:x="227722" fg:w="28"/><text x="81.6238%" y="6479.50"></text></g><g><title>`0x7FF97E69CBBC (31 samples, 0.01%)</title><rect x="81.3980%" y="6469" width="0.0111%" height="15" fill="rgb(240,9,31)" fg:x="227790" fg:w="31"/><text x="81.6480%" y="6479.50"></text></g><g><title>`0x7FF97E69CC6F (67 samples, 0.02%)</title><rect x="81.4223%" y="6469" width="0.0239%" height="15" fill="rgb(207,173,15)" fg:x="227858" fg:w="67"/><text x="81.6723%" y="6479.50"></text></g><g><title>`0x7FF97E62AFF1 (603 samples, 0.22%)</title><rect x="81.2887%" y="6485" width="0.2155%" height="15" fill="rgb(224,192,53)" fg:x="227484" fg:w="603"/><text x="81.5387%" y="6495.50"></text></g><g><title>`0x7FF97E62D57C (52 samples, 0.02%)</title><rect x="81.6578%" y="6261" width="0.0186%" height="15" fill="rgb(223,67,28)" fg:x="228517" fg:w="52"/><text x="81.9078%" y="6271.50"></text></g><g><title>`0x7FF97E68F861 (33 samples, 0.01%)</title><rect x="81.7032%" y="6245" width="0.0118%" height="15" fill="rgb(211,20,47)" fg:x="228644" fg:w="33"/><text x="81.9532%" y="6255.50"></text></g><g><title>`0x7FF97E62D68A (170 samples, 0.06%)</title><rect x="81.7014%" y="6261" width="0.0607%" height="15" fill="rgb(240,228,2)" fg:x="228639" fg:w="170"/><text x="81.9514%" y="6271.50"></text></g><g><title>`0x7FF97E62D723 (41 samples, 0.01%)</title><rect x="81.7915%" y="6261" width="0.0147%" height="15" fill="rgb(248,151,12)" fg:x="228891" fg:w="41"/><text x="82.0415%" y="6271.50"></text></g><g><title>`0x7FF97E62DB41 (31 samples, 0.01%)</title><rect x="81.8283%" y="6261" width="0.0111%" height="15" fill="rgb(244,8,39)" fg:x="228994" fg:w="31"/><text x="82.0783%" y="6271.50"></text></g><g><title>`0x7FF97E631B1F (33 samples, 0.01%)</title><rect x="81.8787%" y="6245" width="0.0118%" height="15" fill="rgb(222,26,8)" fg:x="229135" fg:w="33"/><text x="82.1287%" y="6255.50"></text></g><g><title>`0x7FF97E62DBBF (141 samples, 0.05%)</title><rect x="81.8411%" y="6261" width="0.0504%" height="15" fill="rgb(213,106,44)" fg:x="229030" fg:w="141"/><text x="82.0911%" y="6271.50"></text></g><g><title>`0x7FF97E62DBDD (45 samples, 0.02%)</title><rect x="81.8915%" y="6261" width="0.0161%" height="15" fill="rgb(214,129,20)" fg:x="229171" fg:w="45"/><text x="82.1415%" y="6271.50"></text></g><g><title>`0x7FF97E62CC9A (711 samples, 0.25%)</title><rect x="81.6557%" y="6277" width="0.2541%" height="15" fill="rgb(212,32,13)" fg:x="228511" fg:w="711"/><text x="81.9057%" y="6287.50"></text></g><g><title>`0x7FF97E62CCC1 (41 samples, 0.01%)</title><rect x="81.9105%" y="6277" width="0.0147%" height="15" fill="rgb(208,168,33)" fg:x="229224" fg:w="41"/><text x="82.1605%" y="6287.50"></text></g><g><title>`0x7FF97E62CCF8 (33 samples, 0.01%)</title><rect x="81.9262%" y="6277" width="0.0118%" height="15" fill="rgb(231,207,8)" fg:x="229268" fg:w="33"/><text x="82.1762%" y="6287.50"></text></g><g><title>`0x7FF97E63241D (46 samples, 0.02%)</title><rect x="81.9784%" y="6245" width="0.0164%" height="15" fill="rgb(235,219,23)" fg:x="229414" fg:w="46"/><text x="82.2284%" y="6255.50"></text></g><g><title>`0x7FF97E632438 (34 samples, 0.01%)</title><rect x="81.9948%" y="6245" width="0.0121%" height="15" fill="rgb(226,216,26)" fg:x="229460" fg:w="34"/><text x="82.2448%" y="6255.50"></text></g><g><title>`0x7FF97E632442 (51 samples, 0.02%)</title><rect x="82.0070%" y="6245" width="0.0182%" height="15" fill="rgb(239,137,16)" fg:x="229494" fg:w="51"/><text x="82.2570%" y="6255.50"></text></g><g><title>`0x7FF97E63244E (54 samples, 0.02%)</title><rect x="82.0298%" y="6245" width="0.0193%" height="15" fill="rgb(207,12,36)" fg:x="229558" fg:w="54"/><text x="82.2798%" y="6255.50"></text></g><g><title>`0x7FF97E632473 (65 samples, 0.02%)</title><rect x="82.0502%" y="6245" width="0.0232%" height="15" fill="rgb(210,214,24)" fg:x="229615" fg:w="65"/><text x="82.3002%" y="6255.50"></text></g><g><title>`0x7FF97E63249F (46 samples, 0.02%)</title><rect x="82.0766%" y="6245" width="0.0164%" height="15" fill="rgb(206,56,30)" fg:x="229689" fg:w="46"/><text x="82.3266%" y="6255.50"></text></g><g><title>`0x7FF97E6324C5 (43 samples, 0.02%)</title><rect x="82.0970%" y="6245" width="0.0154%" height="15" fill="rgb(228,143,26)" fg:x="229746" fg:w="43"/><text x="82.3470%" y="6255.50"></text></g><g><title>`0x7FF97E62D68A (58 samples, 0.02%)</title><rect x="82.2306%" y="6213" width="0.0207%" height="15" fill="rgb(216,218,46)" fg:x="230120" fg:w="58"/><text x="82.4806%" y="6223.50"></text></g><g><title>`0x7FF97E62D723 (31 samples, 0.01%)</title><rect x="82.2582%" y="6213" width="0.0111%" height="15" fill="rgb(206,6,19)" fg:x="230197" fg:w="31"/><text x="82.5082%" y="6223.50"></text></g><g><title>`0x7FF97E62CC9A (265 samples, 0.09%)</title><rect x="82.1835%" y="6229" width="0.0947%" height="15" fill="rgb(239,177,51)" fg:x="229988" fg:w="265"/><text x="82.4335%" y="6239.50"></text></g><g><title>`0x7FF97E62CCC1 (33 samples, 0.01%)</title><rect x="82.2782%" y="6229" width="0.0118%" height="15" fill="rgb(216,55,25)" fg:x="230253" fg:w="33"/><text x="82.5282%" y="6239.50"></text></g><g><title>`0x7FF97E633505 (501 samples, 0.18%)</title><rect x="82.1192%" y="6245" width="0.1790%" height="15" fill="rgb(231,163,29)" fg:x="229808" fg:w="501"/><text x="82.3692%" y="6255.50"></text></g><g><title>`0x7FF97E696B96 (271 samples, 0.10%)</title><rect x="82.3010%" y="6229" width="0.0968%" height="15" fill="rgb(232,149,50)" fg:x="230317" fg:w="271"/><text x="82.5510%" y="6239.50"></text></g><g><title>`0x7FF97E696C00 (36 samples, 0.01%)</title><rect x="82.4036%" y="6229" width="0.0129%" height="15" fill="rgb(223,142,48)" fg:x="230604" fg:w="36"/><text x="82.6536%" y="6239.50"></text></g><g><title>`0x7FF97E696C13 (36 samples, 0.01%)</title><rect x="82.4204%" y="6229" width="0.0129%" height="15" fill="rgb(245,83,23)" fg:x="230651" fg:w="36"/><text x="82.6704%" y="6239.50"></text></g><g><title>`0x7FF97E696C22 (38 samples, 0.01%)</title><rect x="82.4400%" y="6229" width="0.0136%" height="15" fill="rgb(224,63,2)" fg:x="230706" fg:w="38"/><text x="82.6900%" y="6239.50"></text></g><g><title>`0x7FF97E633550 (473 samples, 0.17%)</title><rect x="82.2985%" y="6245" width="0.1690%" height="15" fill="rgb(218,65,53)" fg:x="230310" fg:w="473"/><text x="82.5485%" y="6255.50"></text></g><g><title>`0x7FF97E69CC6F (82 samples, 0.03%)</title><rect x="82.5026%" y="6213" width="0.0293%" height="15" fill="rgb(221,84,29)" fg:x="230881" fg:w="82"/><text x="82.7526%" y="6223.50"></text></g><g><title>`0x7FF97E69CCAF (227 samples, 0.08%)</title><rect x="82.5469%" y="6213" width="0.0811%" height="15" fill="rgb(234,0,32)" fg:x="231005" fg:w="227"/><text x="82.7969%" y="6223.50"></text></g><g><title>`0x7FF97E62AFF1 (450 samples, 0.16%)</title><rect x="82.4761%" y="6229" width="0.1608%" height="15" fill="rgb(206,20,16)" fg:x="230807" fg:w="450"/><text x="82.7261%" y="6239.50"></text></g><g><title>`0x7FF97E633562 (479 samples, 0.17%)</title><rect x="82.4697%" y="6245" width="0.1712%" height="15" fill="rgb(244,172,18)" fg:x="230789" fg:w="479"/><text x="82.7197%" y="6255.50"></text></g><g><title>`0x7FF97E6335AC (53 samples, 0.02%)</title><rect x="82.6480%" y="6245" width="0.0189%" height="15" fill="rgb(254,133,1)" fg:x="231288" fg:w="53"/><text x="82.8980%" y="6255.50"></text></g><g><title>`0x7FF97E6322C7 (1,977 samples, 0.71%)</title><rect x="81.9609%" y="6261" width="0.7065%" height="15" fill="rgb(222,206,41)" fg:x="229365" fg:w="1977"/><text x="82.2109%" y="6271.50"></text></g><g><title>`0x7FF97E632307 (29 samples, 0.01%)</title><rect x="82.6755%" y="6261" width="0.0104%" height="15" fill="rgb(212,3,42)" fg:x="231365" fg:w="29"/><text x="82.9255%" y="6271.50"></text></g><g><title>`0x7FF97E632312 (67 samples, 0.02%)</title><rect x="82.6859%" y="6261" width="0.0239%" height="15" fill="rgb(241,11,4)" fg:x="231394" fg:w="67"/><text x="82.9359%" y="6271.50"></text></g><g><title>`0x7FF97E63218A (2,120 samples, 0.76%)</title><rect x="81.9534%" y="6277" width="0.7576%" height="15" fill="rgb(205,19,26)" fg:x="229344" fg:w="2120"/><text x="82.2034%" y="6287.50"></text></g><g><title>`0x7FF97E63219E (68 samples, 0.02%)</title><rect x="82.7109%" y="6277" width="0.0243%" height="15" fill="rgb(210,179,32)" fg:x="231464" fg:w="68"/><text x="82.9609%" y="6287.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_realloc (31 samples, 0.01%)</title><rect x="82.7395%" y="6277" width="0.0111%" height="15" fill="rgb(227,116,49)" fg:x="231544" fg:w="31"/><text x="82.9895%" y="6287.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (3,113 samples, 1.11%)</title><rect x="81.6393%" y="6325" width="1.1124%" height="15" fill="rgb(211,146,6)" fg:x="228465" fg:w="3113"/><text x="81.8893%" y="6335.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (3,113 samples, 1.11%)</title><rect x="81.6393%" y="6309" width="1.1124%" height="15" fill="rgb(219,44,39)" fg:x="228465" fg:w="3113"/><text x="81.8893%" y="6319.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (3,109 samples, 1.11%)</title><rect x="81.6407%" y="6293" width="1.1110%" height="15" fill="rgb(234,128,11)" fg:x="228469" fg:w="3109"/><text x="81.8907%" y="6303.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_mut_ptr (3,534 samples, 1.26%)</title><rect x="81.5342%" y="6469" width="1.2628%" height="15" fill="rgb(220,183,53)" fg:x="228171" fg:w="3534"/><text x="81.7842%" y="6479.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (3,529 samples, 1.26%)</title><rect x="81.5360%" y="6453" width="1.2610%" height="15" fill="rgb(213,219,32)" fg:x="228176" fg:w="3529"/><text x="81.7860%" y="6463.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (3,529 samples, 1.26%)</title><rect x="81.5360%" y="6437" width="1.2610%" height="15" fill="rgb(232,156,16)" fg:x="228176" fg:w="3529"/><text x="81.7860%" y="6447.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (3,529 samples, 1.26%)</title><rect x="81.5360%" y="6421" width="1.2610%" height="15" fill="rgb(246,135,34)" fg:x="228176" fg:w="3529"/><text x="81.7860%" y="6431.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::grow_one&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; (3,517 samples, 1.26%)</title><rect x="81.5403%" y="6405" width="1.2568%" height="15" fill="rgb(241,99,0)" fg:x="228188" fg:w="3517"/><text x="81.7903%" y="6415.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (3,414 samples, 1.22%)</title><rect x="81.5771%" y="6389" width="1.2200%" height="15" fill="rgb(222,103,45)" fg:x="228291" fg:w="3414"/><text x="81.8271%" y="6399.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (3,404 samples, 1.22%)</title><rect x="81.5806%" y="6373" width="1.2164%" height="15" fill="rgb(212,57,4)" fg:x="228301" fg:w="3404"/><text x="81.8306%" y="6383.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (3,361 samples, 1.20%)</title><rect x="81.5960%" y="6357" width="1.2010%" height="15" fill="rgb(215,68,47)" fg:x="228344" fg:w="3361"/><text x="81.8460%" y="6367.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (3,314 samples, 1.18%)</title><rect x="81.6128%" y="6341" width="1.1842%" height="15" fill="rgb(230,84,2)" fg:x="228391" fg:w="3314"/><text x="81.8628%" y="6351.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;, alloc::raw_vec::finish_grow::closure_env$0 (127 samples, 0.05%)</title><rect x="82.7516%" y="6325" width="0.0454%" height="15" fill="rgb(220,102,14)" fg:x="231578" fg:w="127"/><text x="83.0016%" y="6335.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (3,895 samples, 1.39%)</title><rect x="81.5170%" y="6485" width="1.3918%" height="15" fill="rgb(240,10,32)" fg:x="228123" fg:w="3895"/><text x="81.7670%" y="6495.50"></text></g><g><title>neural_network.exe`core::ptr::write(tuple$&lt;usize,usize&gt;*, tuple$ (313 samples, 0.11%)</title><rect x="82.7970%" y="6469" width="0.1118%" height="15" fill="rgb(215,47,27)" fg:x="231705" fg:w="313"/><text x="83.0470%" y="6479.50"></text></g><g><title>`0x7FF968D51381 (364 samples, 0.13%)</title><rect x="82.9303%" y="6421" width="0.1301%" height="15" fill="rgb(233,188,43)" fg:x="232078" fg:w="364"/><text x="83.1803%" y="6431.50"></text></g><g><title>`0x7FF97E62CB3D (30 samples, 0.01%)</title><rect x="83.1201%" y="6357" width="0.0107%" height="15" fill="rgb(253,190,1)" fg:x="232609" fg:w="30"/><text x="83.3701%" y="6367.50"></text></g><g><title>`0x7FF97E62D5E2 (44 samples, 0.02%)</title><rect x="83.2644%" y="6341" width="0.0157%" height="15" fill="rgb(206,114,52)" fg:x="233013" fg:w="44"/><text x="83.5144%" y="6351.50"></text></g><g><title>`0x7FF97E62D68A (46 samples, 0.02%)</title><rect x="83.2844%" y="6341" width="0.0164%" height="15" fill="rgb(233,120,37)" fg:x="233069" fg:w="46"/><text x="83.5344%" y="6351.50"></text></g><g><title>`0x7FF97E62CC9A (362 samples, 0.13%)</title><rect x="83.2140%" y="6357" width="0.1294%" height="15" fill="rgb(214,52,39)" fg:x="232872" fg:w="362"/><text x="83.4640%" y="6367.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (797 samples, 0.28%)</title><rect x="83.0961%" y="6421" width="0.2848%" height="15" fill="rgb(223,80,29)" fg:x="232542" fg:w="797"/><text x="83.3461%" y="6431.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (797 samples, 0.28%)</title><rect x="83.0961%" y="6405" width="0.2848%" height="15" fill="rgb(230,101,40)" fg:x="232542" fg:w="797"/><text x="83.3461%" y="6415.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (797 samples, 0.28%)</title><rect x="83.0961%" y="6389" width="0.2848%" height="15" fill="rgb(219,211,8)" fg:x="232542" fg:w="797"/><text x="83.3461%" y="6399.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (797 samples, 0.28%)</title><rect x="83.0961%" y="6373" width="0.2848%" height="15" fill="rgb(252,126,28)" fg:x="232542" fg:w="797"/><text x="83.3461%" y="6383.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$11::clone(alloc::vec::Vec&lt;tuple$ (1,326 samples, 0.47%)</title><rect x="82.9117%" y="6485" width="0.4738%" height="15" fill="rgb(215,56,38)" fg:x="232026" fg:w="1326"/><text x="83.1617%" y="6495.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (1,326 samples, 0.47%)</title><rect x="82.9117%" y="6469" width="0.4738%" height="15" fill="rgb(249,55,44)" fg:x="232026" fg:w="1326"/><text x="83.1617%" y="6479.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$&lt;tuple$ (1,319 samples, 0.47%)</title><rect x="82.9142%" y="6453" width="0.4713%" height="15" fill="rgb(220,221,32)" fg:x="232033" fg:w="1319"/><text x="83.1642%" y="6463.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$&lt;tuple$ (1,319 samples, 0.47%)</title><rect x="82.9142%" y="6437" width="0.4713%" height="15" fill="rgb(212,216,41)" fg:x="232033" fg:w="1319"/><text x="83.1642%" y="6447.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (1,264 samples, 0.45%)</title><rect x="83.4195%" y="6469" width="0.4517%" height="15" fill="rgb(228,213,43)" fg:x="233447" fg:w="1264"/><text x="83.6695%" y="6479.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (1,264 samples, 0.45%)</title><rect x="83.4195%" y="6453" width="0.4517%" height="15" fill="rgb(211,31,26)" fg:x="233447" fg:w="1264"/><text x="83.6695%" y="6463.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (152 samples, 0.05%)</title><rect x="83.8169%" y="6437" width="0.0543%" height="15" fill="rgb(229,202,19)" fg:x="234559" fg:w="152"/><text x="84.0669%" y="6447.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (29 samples, 0.01%)</title><rect x="83.8712%" y="6453" width="0.0104%" height="15" fill="rgb(229,105,46)" fg:x="234711" fg:w="29"/><text x="84.1212%" y="6463.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (29 samples, 0.01%)</title><rect x="83.8712%" y="6437" width="0.0104%" height="15" fill="rgb(235,108,1)" fg:x="234711" fg:w="29"/><text x="84.1212%" y="6447.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (29 samples, 0.01%)</title><rect x="83.8712%" y="6421" width="0.0104%" height="15" fill="rgb(245,111,35)" fg:x="234711" fg:w="29"/><text x="84.1212%" y="6431.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (29 samples, 0.01%)</title><rect x="83.8712%" y="6405" width="0.0104%" height="15" fill="rgb(219,185,31)" fg:x="234711" fg:w="29"/><text x="84.1212%" y="6415.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$ (1,692 samples, 0.60%)</title><rect x="83.3856%" y="6485" width="0.6046%" height="15" fill="rgb(214,4,43)" fg:x="233352" fg:w="1692"/><text x="83.6356%" y="6495.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;tuple$ (333 samples, 0.12%)</title><rect x="83.8712%" y="6469" width="0.1190%" height="15" fill="rgb(235,227,40)" fg:x="234711" fg:w="333"/><text x="84.1212%" y="6479.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;tuple$ (304 samples, 0.11%)</title><rect x="83.8815%" y="6453" width="0.1086%" height="15" fill="rgb(230,88,30)" fg:x="234740" fg:w="304"/><text x="84.1315%" y="6463.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (36 samples, 0.01%)</title><rect x="83.9902%" y="6453" width="0.0129%" height="15" fill="rgb(216,217,1)" fg:x="235044" fg:w="36"/><text x="84.2402%" y="6463.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (36 samples, 0.01%)</title><rect x="83.9902%" y="6437" width="0.0129%" height="15" fill="rgb(248,139,50)" fg:x="235044" fg:w="36"/><text x="84.2402%" y="6447.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (36 samples, 0.01%)</title><rect x="83.9902%" y="6421" width="0.0129%" height="15" fill="rgb(233,1,21)" fg:x="235044" fg:w="36"/><text x="84.2402%" y="6431.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (36 samples, 0.01%)</title><rect x="83.9902%" y="6405" width="0.0129%" height="15" fill="rgb(215,183,12)" fg:x="235044" fg:w="36"/><text x="84.2402%" y="6415.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (60 samples, 0.02%)</title><rect x="83.9902%" y="6469" width="0.0214%" height="15" fill="rgb(229,104,42)" fg:x="235044" fg:w="60"/><text x="84.2402%" y="6479.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, core::ops::range::Range (1,789 samples, 0.64%)</title><rect x="83.9902%" y="6485" width="0.6393%" height="15" fill="rgb(243,34,48)" fg:x="235044" fg:w="1789"/><text x="84.2402%" y="6495.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (1,729 samples, 0.62%)</title><rect x="84.0116%" y="6469" width="0.6178%" height="15" fill="rgb(239,11,44)" fg:x="235104" fg:w="1729"/><text x="84.2616%" y="6479.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (1,729 samples, 0.62%)</title><rect x="84.0116%" y="6453" width="0.6178%" height="15" fill="rgb(231,98,35)" fg:x="235104" fg:w="1729"/><text x="84.2616%" y="6463.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (192 samples, 0.07%)</title><rect x="84.5608%" y="6437" width="0.0686%" height="15" fill="rgb(233,28,25)" fg:x="236641" fg:w="192"/><text x="84.8108%" y="6447.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (46 samples, 0.02%)</title><rect x="84.6130%" y="6421" width="0.0164%" height="15" fill="rgb(234,123,11)" fg:x="236787" fg:w="46"/><text x="84.8630%" y="6431.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (46 samples, 0.02%)</title><rect x="84.6130%" y="6405" width="0.0164%" height="15" fill="rgb(220,69,3)" fg:x="236787" fg:w="46"/><text x="84.8630%" y="6415.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (46 samples, 0.02%)</title><rect x="84.6130%" y="6389" width="0.0164%" height="15" fill="rgb(214,64,36)" fg:x="236787" fg:w="46"/><text x="84.8630%" y="6399.50"></text></g><g><title>`0x7FF97E62AFA5 (50 samples, 0.02%)</title><rect x="84.6438%" y="6389" width="0.0179%" height="15" fill="rgb(211,138,32)" fg:x="236873" fg:w="50"/><text x="84.8938%" y="6399.50"></text></g><g><title>`0x7FF97E62AFBA (82 samples, 0.03%)</title><rect x="84.6623%" y="6389" width="0.0293%" height="15" fill="rgb(213,118,47)" fg:x="236925" fg:w="82"/><text x="84.9123%" y="6399.50"></text></g><g><title>`0x7FF97E62AFE0 (149 samples, 0.05%)</title><rect x="84.6920%" y="6389" width="0.0532%" height="15" fill="rgb(243,124,49)" fg:x="237008" fg:w="149"/><text x="84.9420%" y="6399.50"></text></g><g><title>`0x7FF97E62BB70 (200 samples, 0.07%)</title><rect x="84.7477%" y="6373" width="0.0715%" height="15" fill="rgb(221,30,28)" fg:x="237164" fg:w="200"/><text x="84.9977%" y="6383.50"></text></g><g><title>`0x7FF97E62BB84 (178 samples, 0.06%)</title><rect x="84.8196%" y="6373" width="0.0636%" height="15" fill="rgb(246,37,13)" fg:x="237365" fg:w="178"/><text x="85.0696%" y="6383.50"></text></g><g><title>`0x7FF97E62C2B1 (185 samples, 0.07%)</title><rect x="84.8875%" y="6373" width="0.0661%" height="15" fill="rgb(249,66,14)" fg:x="237555" fg:w="185"/><text x="85.1375%" y="6383.50"></text></g><g><title>`0x7FF97E62C38A (157 samples, 0.06%)</title><rect x="84.9682%" y="6373" width="0.0561%" height="15" fill="rgb(213,166,5)" fg:x="237781" fg:w="157"/><text x="85.2182%" y="6383.50"></text></g><g><title>`0x7FF97E69CB43 (113 samples, 0.04%)</title><rect x="85.0243%" y="6373" width="0.0404%" height="15" fill="rgb(221,66,24)" fg:x="237938" fg:w="113"/><text x="85.2743%" y="6383.50"></text></g><g><title>`0x7FF97E69CB6A (54 samples, 0.02%)</title><rect x="85.0697%" y="6373" width="0.0193%" height="15" fill="rgb(210,132,17)" fg:x="238065" fg:w="54"/><text x="85.3197%" y="6383.50"></text></g><g><title>`0x7FF97E62AFF1 (1,098 samples, 0.39%)</title><rect x="84.7452%" y="6389" width="0.3924%" height="15" fill="rgb(243,202,5)" fg:x="237157" fg:w="1098"/><text x="84.9952%" y="6399.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (1,423 samples, 0.51%)</title><rect x="84.6430%" y="6421" width="0.5085%" height="15" fill="rgb(233,70,48)" fg:x="236871" fg:w="1423"/><text x="84.8930%" y="6431.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (1,423 samples, 0.51%)</title><rect x="84.6430%" y="6405" width="0.5085%" height="15" fill="rgb(238,41,26)" fg:x="236871" fg:w="1423"/><text x="84.8930%" y="6415.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (35 samples, 0.01%)</title><rect x="85.1390%" y="6389" width="0.0125%" height="15" fill="rgb(241,19,31)" fg:x="238259" fg:w="35"/><text x="85.3890%" y="6399.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::dealloc (35 samples, 0.01%)</title><rect x="85.1390%" y="6373" width="0.0125%" height="15" fill="rgb(214,76,10)" fg:x="238259" fg:w="35"/><text x="85.3890%" y="6383.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;tuple$ (1,470 samples, 0.53%)</title><rect x="84.6305%" y="6485" width="0.5253%" height="15" fill="rgb(254,202,22)" fg:x="236836" fg:w="1470"/><text x="84.8805%" y="6495.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (1,470 samples, 0.53%)</title><rect x="84.6305%" y="6469" width="0.5253%" height="15" fill="rgb(214,72,24)" fg:x="236836" fg:w="1470"/><text x="84.8805%" y="6479.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (1,470 samples, 0.53%)</title><rect x="84.6305%" y="6453" width="0.5253%" height="15" fill="rgb(221,92,46)" fg:x="236836" fg:w="1470"/><text x="84.8805%" y="6463.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (1,435 samples, 0.51%)</title><rect x="84.6430%" y="6437" width="0.5128%" height="15" fill="rgb(246,13,50)" fg:x="236871" fg:w="1435"/><text x="84.8930%" y="6447.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::swap(ref_mut$&lt;slice2$&lt;tuple$ (105 samples, 0.04%)</title><rect x="85.1705%" y="6389" width="0.0375%" height="15" fill="rgb(240,165,38)" fg:x="238347" fg:w="105"/><text x="85.4205%" y="6399.50"></text></g><g><title>neural_network.exe`core::ptr::swap(tuple$&lt;usize,usize&gt;*, tuple$ (56 samples, 0.02%)</title><rect x="85.1880%" y="6373" width="0.0200%" height="15" fill="rgb(241,24,51)" fg:x="238396" fg:w="56"/><text x="85.4380%" y="6383.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping(tuple$&lt;usize,usize&gt;*, tuple$ (31 samples, 0.01%)</title><rect x="85.1969%" y="6357" width="0.0111%" height="15" fill="rgb(227,51,44)" fg:x="238421" fg:w="31"/><text x="85.4469%" y="6367.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::round(rand_chacha::guts::State&lt;ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2 (39 samples, 0.01%)</title><rect x="85.2584%" y="6117" width="0.0139%" height="15" fill="rgb(231,121,3)" fg:x="238593" fg:w="39"/><text x="85.5084%" y="6127.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide::impl_avx2 (50 samples, 0.02%)</title><rect x="85.2555%" y="6165" width="0.0179%" height="15" fill="rgb(245,3,41)" fg:x="238585" fg:w="50"/><text x="85.5055%" y="6175.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide::fn_impl(ppv_lite86::x86_64::Avx2Machine (50 samples, 0.02%)</title><rect x="85.2555%" y="6149" width="0.0179%" height="15" fill="rgb(214,13,26)" fg:x="238585" fg:w="50"/><text x="85.5055%" y="6159.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide_impl(ppv_lite86::x86_64::Avx2Machine (50 samples, 0.02%)</title><rect x="85.2555%" y="6133" width="0.0179%" height="15" fill="rgb(252,75,11)" fg:x="238585" fg:w="50"/><text x="85.5055%" y="6143.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place (331 samples, 0.12%)</title><rect x="85.1558%" y="6485" width="0.1183%" height="15" fill="rgb(218,226,17)" fg:x="238306" fg:w="331"/><text x="85.4058%" y="6495.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (331 samples, 0.12%)</title><rect x="85.1558%" y="6469" width="0.1183%" height="15" fill="rgb(248,89,38)" fg:x="238306" fg:w="331"/><text x="85.4058%" y="6479.50"></text></g><g><title>neural_network.exe`alloc::rc::impl$30::drop(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (331 samples, 0.12%)</title><rect x="85.1558%" y="6453" width="0.1183%" height="15" fill="rgb(237,73,46)" fg:x="238306" fg:w="331"/><text x="85.4058%" y="6463.50"></text></g><g><title>neural_network.exe`alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;::inner (328 samples, 0.12%)</title><rect x="85.1569%" y="6437" width="0.1172%" height="15" fill="rgb(242,78,33)" fg:x="238309" fg:w="328"/><text x="85.4069%" y="6447.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;alloc::rc::RcBox&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt; &gt; &gt;::as_ref (327 samples, 0.12%)</title><rect x="85.1572%" y="6421" width="0.1168%" height="15" fill="rgb(235,60,3)" fg:x="238310" fg:w="327"/><text x="85.4072%" y="6431.50"></text></g><g><title>neural_network.exe`rand::seq::impl$0::shuffle&lt;tuple$&lt;usize,usize&gt;,rand::rngs::thread::ThreadRng&gt;(ref_mut$&lt;slice2$&lt;tuple$ (327 samples, 0.12%)</title><rect x="85.1572%" y="6405" width="0.1168%" height="15" fill="rgb(216,172,19)" fg:x="238310" fg:w="327"/><text x="85.4072%" y="6415.50"></text></g><g><title>neural_network.exe`rand::seq::gen_index (185 samples, 0.07%)</title><rect x="85.2080%" y="6389" width="0.0661%" height="15" fill="rgb(227,6,42)" fg:x="238452" fg:w="185"/><text x="85.4580%" y="6399.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen_range(rand::rngs::thread::ThreadRng*, core::ops::range::Range (185 samples, 0.07%)</title><rect x="85.2080%" y="6373" width="0.0661%" height="15" fill="rgb(223,207,42)" fg:x="238452" fg:w="185"/><text x="85.4580%" y="6383.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$6::sample_single(core::ops::range::Range (185 samples, 0.07%)</title><rect x="85.2080%" y="6357" width="0.0661%" height="15" fill="rgb(246,138,30)" fg:x="238452" fg:w="185"/><text x="85.4580%" y="6367.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single (185 samples, 0.07%)</title><rect x="85.2080%" y="6341" width="0.0661%" height="15" fill="rgb(251,199,47)" fg:x="238452" fg:w="185"/><text x="85.4580%" y="6351.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single_inclusive (185 samples, 0.07%)</title><rect x="85.2080%" y="6325" width="0.0661%" height="15" fill="rgb(228,218,44)" fg:x="238452" fg:w="185"/><text x="85.4580%" y="6335.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen (137 samples, 0.05%)</title><rect x="85.2251%" y="6309" width="0.0490%" height="15" fill="rgb(220,68,6)" fg:x="238500" fg:w="137"/><text x="85.4751%" y="6319.50"></text></g><g><title>neural_network.exe`rand::distributions::integer::impl$2::sample (137 samples, 0.05%)</title><rect x="85.2251%" y="6293" width="0.0490%" height="15" fill="rgb(240,60,26)" fg:x="238500" fg:w="137"/><text x="85.4751%" y="6303.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::impl$1::next_u32 (137 samples, 0.05%)</title><rect x="85.2251%" y="6277" width="0.0490%" height="15" fill="rgb(211,200,19)" fg:x="238500" fg:w="137"/><text x="85.4751%" y="6287.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$1::next_u32(rand::rngs::adapter::reseeding::ReseedingRng (137 samples, 0.05%)</title><rect x="85.2251%" y="6261" width="0.0490%" height="15" fill="rgb(242,145,30)" fg:x="238500" fg:w="137"/><text x="85.4751%" y="6271.50"></text></g><g><title>neural_network.exe`rand_core::block::impl$2::next_u32(rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore (137 samples, 0.05%)</title><rect x="85.2251%" y="6245" width="0.0490%" height="15" fill="rgb(225,64,13)" fg:x="238500" fg:w="137"/><text x="85.4751%" y="6255.50"></text></g><g><title>neural_network.exe`rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;::generate_and_set (58 samples, 0.02%)</title><rect x="85.2534%" y="6229" width="0.0207%" height="15" fill="rgb(218,103,35)" fg:x="238579" fg:w="58"/><text x="85.5034%" y="6239.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$4::generate(rand::rngs::adapter::reseeding::ReseedingCore&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt;*, rand_chacha::chacha::Array64 (58 samples, 0.02%)</title><rect x="85.2534%" y="6213" width="0.0207%" height="15" fill="rgb(216,93,46)" fg:x="238579" fg:w="58"/><text x="85.5034%" y="6223.50"></text></g><g><title>neural_network.exe`rand_chacha::chacha::impl$23::generate(rand_chacha::chacha::ChaCha12Core*, rand_chacha::chacha::Array64 (53 samples, 0.02%)</title><rect x="85.2552%" y="6197" width="0.0189%" height="15" fill="rgb(225,159,27)" fg:x="238584" fg:w="53"/><text x="85.5052%" y="6207.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::ChaCha::refill4 (53 samples, 0.02%)</title><rect x="85.2552%" y="6181" width="0.0189%" height="15" fill="rgb(225,204,11)" fg:x="238584" fg:w="53"/><text x="85.5052%" y="6191.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::contains(ref$&lt;slice2$&lt;tuple$&lt;usize,usize&gt; &gt; &gt;, tuple$ (674 samples, 0.24%)</title><rect x="85.2741%" y="6485" width="0.2408%" height="15" fill="rgb(205,56,4)" fg:x="238637" fg:w="674"/><text x="85.5241%" y="6495.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (674 samples, 0.24%)</title><rect x="85.2741%" y="6469" width="0.2408%" height="15" fill="rgb(206,6,35)" fg:x="238637" fg:w="674"/><text x="85.5241%" y="6479.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (674 samples, 0.24%)</title><rect x="85.2741%" y="6453" width="0.2408%" height="15" fill="rgb(247,73,52)" fg:x="238637" fg:w="674"/><text x="85.5241%" y="6463.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (60 samples, 0.02%)</title><rect x="85.4935%" y="6437" width="0.0214%" height="15" fill="rgb(246,97,4)" fg:x="239251" fg:w="60"/><text x="85.7435%" y="6447.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (33 samples, 0.01%)</title><rect x="85.5031%" y="6421" width="0.0118%" height="15" fill="rgb(212,37,15)" fg:x="239278" fg:w="33"/><text x="85.7531%" y="6431.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (33 samples, 0.01%)</title><rect x="85.5031%" y="6405" width="0.0118%" height="15" fill="rgb(208,130,40)" fg:x="239278" fg:w="33"/><text x="85.7531%" y="6415.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (33 samples, 0.01%)</title><rect x="85.5031%" y="6389" width="0.0118%" height="15" fill="rgb(236,55,29)" fg:x="239278" fg:w="33"/><text x="85.7531%" y="6399.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (233 samples, 0.08%)</title><rect x="85.5149%" y="6485" width="0.0833%" height="15" fill="rgb(209,156,45)" fg:x="239311" fg:w="233"/><text x="85.7649%" y="6495.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (67 samples, 0.02%)</title><rect x="85.5743%" y="6469" width="0.0239%" height="15" fill="rgb(249,107,4)" fg:x="239477" fg:w="67"/><text x="85.8243%" y="6479.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (67 samples, 0.02%)</title><rect x="85.5743%" y="6453" width="0.0239%" height="15" fill="rgb(227,7,13)" fg:x="239477" fg:w="67"/><text x="85.8243%" y="6463.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (67 samples, 0.02%)</title><rect x="85.5743%" y="6437" width="0.0239%" height="15" fill="rgb(250,129,14)" fg:x="239477" fg:w="67"/><text x="85.8243%" y="6447.50"></text></g><g><title>`0x7FF97E69CC6F (53 samples, 0.02%)</title><rect x="85.7987%" y="6421" width="0.0189%" height="15" fill="rgb(229,92,13)" fg:x="240105" fg:w="53"/><text x="86.0487%" y="6431.50"></text></g><g><title>`0x7FF97E62AFF1 (438 samples, 0.16%)</title><rect x="85.6947%" y="6437" width="0.1565%" height="15" fill="rgb(245,98,39)" fg:x="239814" fg:w="438"/><text x="85.9447%" y="6447.50"></text></g><g><title>`0x7FF97E62D57C (49 samples, 0.02%)</title><rect x="85.9680%" y="6213" width="0.0175%" height="15" fill="rgb(234,135,48)" fg:x="240579" fg:w="49"/><text x="86.2180%" y="6223.50"></text></g><g><title>`0x7FF97E62D68A (122 samples, 0.04%)</title><rect x="86.0077%" y="6213" width="0.0436%" height="15" fill="rgb(230,98,28)" fg:x="240690" fg:w="122"/><text x="86.2577%" y="6223.50"></text></g><g><title>`0x7FF97E62D723 (35 samples, 0.01%)</title><rect x="86.0781%" y="6213" width="0.0125%" height="15" fill="rgb(223,121,0)" fg:x="240887" fg:w="35"/><text x="86.3281%" y="6223.50"></text></g><g><title>`0x7FF97E62DBBF (70 samples, 0.03%)</title><rect x="86.1074%" y="6213" width="0.0250%" height="15" fill="rgb(234,173,33)" fg:x="240969" fg:w="70"/><text x="86.3574%" y="6223.50"></text></g><g><title>`0x7FF97E62CC9A (483 samples, 0.17%)</title><rect x="85.9663%" y="6229" width="0.1726%" height="15" fill="rgb(245,47,8)" fg:x="240574" fg:w="483"/><text x="86.2163%" y="6239.50"></text></g><g><title>`0x7FF97E62CCC1 (32 samples, 0.01%)</title><rect x="86.1392%" y="6229" width="0.0114%" height="15" fill="rgb(205,17,20)" fg:x="241058" fg:w="32"/><text x="86.3892%" y="6239.50"></text></g><g><title>`0x7FF97E63241D (32 samples, 0.01%)</title><rect x="86.1982%" y="6197" width="0.0114%" height="15" fill="rgb(232,151,16)" fg:x="241223" fg:w="32"/><text x="86.4482%" y="6207.50"></text></g><g><title>`0x7FF97E632438 (46 samples, 0.02%)</title><rect x="86.2096%" y="6197" width="0.0164%" height="15" fill="rgb(208,30,32)" fg:x="241255" fg:w="46"/><text x="86.4596%" y="6207.50"></text></g><g><title>`0x7FF97E632442 (34 samples, 0.01%)</title><rect x="86.2260%" y="6197" width="0.0121%" height="15" fill="rgb(254,26,3)" fg:x="241301" fg:w="34"/><text x="86.4760%" y="6207.50"></text></g><g><title>`0x7FF97E632447 (60 samples, 0.02%)</title><rect x="86.2382%" y="6197" width="0.0214%" height="15" fill="rgb(240,177,30)" fg:x="241335" fg:w="60"/><text x="86.4882%" y="6207.50"></text></g><g><title>`0x7FF97E63244E (31 samples, 0.01%)</title><rect x="86.2596%" y="6197" width="0.0111%" height="15" fill="rgb(248,76,44)" fg:x="241395" fg:w="31"/><text x="86.5096%" y="6207.50"></text></g><g><title>`0x7FF97E632473 (47 samples, 0.02%)</title><rect x="86.2707%" y="6197" width="0.0168%" height="15" fill="rgb(241,186,54)" fg:x="241426" fg:w="47"/><text x="86.5207%" y="6207.50"></text></g><g><title>`0x7FF97E63249F (48 samples, 0.02%)</title><rect x="86.2882%" y="6197" width="0.0172%" height="15" fill="rgb(249,171,29)" fg:x="241475" fg:w="48"/><text x="86.5382%" y="6207.50"></text></g><g><title>`0x7FF97E62D57C (36 samples, 0.01%)</title><rect x="86.3883%" y="6165" width="0.0129%" height="15" fill="rgb(237,151,44)" fg:x="241755" fg:w="36"/><text x="86.6383%" y="6175.50"></text></g><g><title>`0x7FF97E62D68A (37 samples, 0.01%)</title><rect x="86.4126%" y="6165" width="0.0132%" height="15" fill="rgb(228,174,30)" fg:x="241823" fg:w="37"/><text x="86.6626%" y="6175.50"></text></g><g><title>`0x7FF97E62DBBF (38 samples, 0.01%)</title><rect x="86.4715%" y="6165" width="0.0136%" height="15" fill="rgb(252,14,37)" fg:x="241988" fg:w="38"/><text x="86.7215%" y="6175.50"></text></g><g><title>`0x7FF97E62CC9A (360 samples, 0.13%)</title><rect x="86.3640%" y="6181" width="0.1286%" height="15" fill="rgb(207,111,40)" fg:x="241687" fg:w="360"/><text x="86.6140%" y="6191.50"></text></g><g><title>`0x7FF97E62CCC1 (35 samples, 0.01%)</title><rect x="86.4926%" y="6181" width="0.0125%" height="15" fill="rgb(248,171,54)" fg:x="242047" fg:w="35"/><text x="86.7426%" y="6191.50"></text></g><g><title>`0x7FF97E633505 (548 samples, 0.20%)</title><rect x="86.3168%" y="6197" width="0.1958%" height="15" fill="rgb(211,127,2)" fg:x="241555" fg:w="548"/><text x="86.5668%" y="6207.50"></text></g><g><title>`0x7FF97E696B96 (226 samples, 0.08%)</title><rect x="86.5162%" y="6181" width="0.0808%" height="15" fill="rgb(236,87,47)" fg:x="242113" fg:w="226"/><text x="86.7662%" y="6191.50"></text></g><g><title>`0x7FF97E696C00 (41 samples, 0.01%)</title><rect x="86.6027%" y="6181" width="0.0147%" height="15" fill="rgb(223,190,45)" fg:x="242355" fg:w="41"/><text x="86.8527%" y="6191.50"></text></g><g><title>`0x7FF97E696C13 (34 samples, 0.01%)</title><rect x="86.6220%" y="6181" width="0.0121%" height="15" fill="rgb(215,5,16)" fg:x="242409" fg:w="34"/><text x="86.8720%" y="6191.50"></text></g><g><title>`0x7FF97E696C22 (37 samples, 0.01%)</title><rect x="86.6373%" y="6181" width="0.0132%" height="15" fill="rgb(252,82,33)" fg:x="242452" fg:w="37"/><text x="86.8873%" y="6191.50"></text></g><g><title>`0x7FF97E633550 (412 samples, 0.15%)</title><rect x="86.5126%" y="6197" width="0.1472%" height="15" fill="rgb(247,213,44)" fg:x="242103" fg:w="412"/><text x="86.7626%" y="6207.50"></text></g><g><title>`0x7FF97E69CC6F (83 samples, 0.03%)</title><rect x="86.6892%" y="6165" width="0.0297%" height="15" fill="rgb(205,196,44)" fg:x="242597" fg:w="83"/><text x="86.9392%" y="6175.50"></text></g><g><title>`0x7FF97E69CC88 (31 samples, 0.01%)</title><rect x="86.7188%" y="6165" width="0.0111%" height="15" fill="rgb(237,96,54)" fg:x="242680" fg:w="31"/><text x="86.9688%" y="6175.50"></text></g><g><title>`0x7FF97E69CCAF (204 samples, 0.07%)</title><rect x="86.7363%" y="6165" width="0.0729%" height="15" fill="rgb(230,113,34)" fg:x="242729" fg:w="204"/><text x="86.9863%" y="6175.50"></text></g><g><title>`0x7FF97E62AFF1 (441 samples, 0.16%)</title><rect x="86.6727%" y="6181" width="0.1576%" height="15" fill="rgb(221,224,12)" fg:x="242551" fg:w="441"/><text x="86.9227%" y="6191.50"></text></g><g><title>`0x7FF97E633562 (483 samples, 0.17%)</title><rect x="86.6599%" y="6197" width="0.1726%" height="15" fill="rgb(219,112,44)" fg:x="242515" fg:w="483"/><text x="86.9099%" y="6207.50"></text></g><g><title>`0x7FF97E6322C7 (1,877 samples, 0.67%)</title><rect x="86.1792%" y="6213" width="0.6707%" height="15" fill="rgb(210,31,13)" fg:x="241170" fg:w="1877"/><text x="86.4292%" y="6223.50"></text></g><g><title>`0x7FF97E6335AC (30 samples, 0.01%)</title><rect x="86.8392%" y="6197" width="0.0107%" height="15" fill="rgb(230,25,16)" fg:x="243017" fg:w="30"/><text x="87.0892%" y="6207.50"></text></g><g><title>`0x7FF97E6322FB (32 samples, 0.01%)</title><rect x="86.8500%" y="6213" width="0.0114%" height="15" fill="rgb(246,108,53)" fg:x="243047" fg:w="32"/><text x="87.1000%" y="6223.50"></text></g><g><title>`0x7FF97E632307 (48 samples, 0.02%)</title><rect x="86.8617%" y="6213" width="0.0172%" height="15" fill="rgb(241,172,50)" fg:x="243080" fg:w="48"/><text x="87.1117%" y="6223.50"></text></g><g><title>`0x7FF97E63218A (2,032 samples, 0.73%)</title><rect x="86.1742%" y="6229" width="0.7261%" height="15" fill="rgb(235,141,10)" fg:x="241156" fg:w="2032"/><text x="86.4242%" y="6239.50"></text></g><g><title>`0x7FF97E632312 (59 samples, 0.02%)</title><rect x="86.8793%" y="6213" width="0.0211%" height="15" fill="rgb(220,174,43)" fg:x="243129" fg:w="59"/><text x="87.1293%" y="6223.50"></text></g><g><title>`0x7FF97E63219E (51 samples, 0.02%)</title><rect x="86.9003%" y="6229" width="0.0182%" height="15" fill="rgb(215,181,40)" fg:x="243188" fg:w="51"/><text x="87.1503%" y="6239.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_realloc (40 samples, 0.01%)</title><rect x="86.9243%" y="6229" width="0.0143%" height="15" fill="rgb(230,97,2)" fg:x="243255" fg:w="40"/><text x="87.1743%" y="6239.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::realloc (28 samples, 0.01%)</title><rect x="86.9286%" y="6213" width="0.0100%" height="15" fill="rgb(211,25,27)" fg:x="243267" fg:w="28"/><text x="87.1786%" y="6223.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (2,765 samples, 0.99%)</title><rect x="85.9513%" y="6277" width="0.9880%" height="15" fill="rgb(230,87,26)" fg:x="240532" fg:w="2765"/><text x="86.2013%" y="6287.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (2,765 samples, 0.99%)</title><rect x="85.9513%" y="6261" width="0.9880%" height="15" fill="rgb(227,160,17)" fg:x="240532" fg:w="2765"/><text x="86.2013%" y="6271.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (2,763 samples, 0.99%)</title><rect x="85.9520%" y="6245" width="0.9873%" height="15" fill="rgb(244,85,34)" fg:x="240534" fg:w="2763"/><text x="86.2020%" y="6255.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_mut_ptr (3,075 samples, 1.10%)</title><rect x="85.8705%" y="6421" width="1.0988%" height="15" fill="rgb(207,70,0)" fg:x="240306" fg:w="3075"/><text x="86.1205%" y="6431.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (3,071 samples, 1.10%)</title><rect x="85.8719%" y="6405" width="1.0974%" height="15" fill="rgb(223,129,7)" fg:x="240310" fg:w="3071"/><text x="86.1219%" y="6415.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (3,071 samples, 1.10%)</title><rect x="85.8719%" y="6389" width="1.0974%" height="15" fill="rgb(246,105,7)" fg:x="240310" fg:w="3071"/><text x="86.1219%" y="6399.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (3,071 samples, 1.10%)</title><rect x="85.8719%" y="6373" width="1.0974%" height="15" fill="rgb(215,154,42)" fg:x="240310" fg:w="3071"/><text x="86.1219%" y="6383.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::grow_one&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; (3,060 samples, 1.09%)</title><rect x="85.8759%" y="6357" width="1.0935%" height="15" fill="rgb(220,215,30)" fg:x="240321" fg:w="3060"/><text x="86.1259%" y="6367.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (2,983 samples, 1.07%)</title><rect x="85.9034%" y="6341" width="1.0659%" height="15" fill="rgb(228,81,51)" fg:x="240398" fg:w="2983"/><text x="86.1534%" y="6351.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (2,979 samples, 1.06%)</title><rect x="85.9048%" y="6325" width="1.0645%" height="15" fill="rgb(247,71,54)" fg:x="240402" fg:w="2979"/><text x="86.1548%" y="6335.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (2,931 samples, 1.05%)</title><rect x="85.9220%" y="6309" width="1.0474%" height="15" fill="rgb(234,176,34)" fg:x="240450" fg:w="2931"/><text x="86.1720%" y="6319.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (2,904 samples, 1.04%)</title><rect x="85.9316%" y="6293" width="1.0377%" height="15" fill="rgb(241,103,54)" fg:x="240477" fg:w="2904"/><text x="86.1816%" y="6303.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;, alloc::raw_vec::finish_grow::closure_env$0 (84 samples, 0.03%)</title><rect x="86.9393%" y="6277" width="0.0300%" height="15" fill="rgb(228,22,34)" fg:x="243297" fg:w="84"/><text x="87.1893%" y="6287.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (3,336 samples, 1.19%)</title><rect x="85.8551%" y="6437" width="1.1921%" height="15" fill="rgb(241,179,48)" fg:x="240263" fg:w="3336"/><text x="86.1051%" y="6447.50"></text></g><g><title>neural_network.exe`core::ptr::write(tuple$&lt;usize,usize&gt;*, tuple$ (218 samples, 0.08%)</title><rect x="86.9693%" y="6421" width="0.0779%" height="15" fill="rgb(235,167,37)" fg:x="243381" fg:w="218"/><text x="87.2193%" y="6431.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::remove (37 samples, 0.01%)</title><rect x="87.0472%" y="6437" width="0.0132%" height="15" fill="rgb(213,109,30)" fg:x="243599" fg:w="37"/><text x="87.2972%" y="6447.50"></text></g><g><title>`0x7FF968D51381 (393 samples, 0.14%)</title><rect x="87.0769%" y="6373" width="0.1404%" height="15" fill="rgb(222,172,16)" fg:x="243682" fg:w="393"/><text x="87.3269%" y="6383.50"></text></g><g><title>`0x7FF97E62CAFF (31 samples, 0.01%)</title><rect x="87.2563%" y="6309" width="0.0111%" height="15" fill="rgb(233,192,5)" fg:x="244184" fg:w="31"/><text x="87.5063%" y="6319.50"></text></g><g><title>`0x7FF97E62CB20 (39 samples, 0.01%)</title><rect x="87.2680%" y="6309" width="0.0139%" height="15" fill="rgb(247,189,41)" fg:x="244217" fg:w="39"/><text x="87.5180%" y="6319.50"></text></g><g><title>`0x7FF97E62D68A (41 samples, 0.01%)</title><rect x="87.3995%" y="6293" width="0.0147%" height="15" fill="rgb(218,134,47)" fg:x="244585" fg:w="41"/><text x="87.6495%" y="6303.50"></text></g><g><title>`0x7FF97E62DBBF (39 samples, 0.01%)</title><rect x="87.4642%" y="6293" width="0.0139%" height="15" fill="rgb(216,29,3)" fg:x="244766" fg:w="39"/><text x="87.7142%" y="6303.50"></text></g><g><title>`0x7FF97E62CC9A (389 samples, 0.14%)</title><rect x="87.3477%" y="6309" width="0.1390%" height="15" fill="rgb(246,140,12)" fg:x="244440" fg:w="389"/><text x="87.5977%" y="6319.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (764 samples, 0.27%)</title><rect x="87.2537%" y="6373" width="0.2730%" height="15" fill="rgb(230,136,11)" fg:x="244177" fg:w="764"/><text x="87.5037%" y="6383.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (764 samples, 0.27%)</title><rect x="87.2537%" y="6357" width="0.2730%" height="15" fill="rgb(247,22,47)" fg:x="244177" fg:w="764"/><text x="87.5037%" y="6367.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (764 samples, 0.27%)</title><rect x="87.2537%" y="6341" width="0.2730%" height="15" fill="rgb(218,84,22)" fg:x="244177" fg:w="764"/><text x="87.5037%" y="6351.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (764 samples, 0.27%)</title><rect x="87.2537%" y="6325" width="0.2730%" height="15" fill="rgb(216,87,39)" fg:x="244177" fg:w="764"/><text x="87.5037%" y="6335.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::process_heap_alloc (39 samples, 0.01%)</title><rect x="87.5128%" y="6309" width="0.0139%" height="15" fill="rgb(221,178,8)" fg:x="244902" fg:w="39"/><text x="87.7628%" y="6319.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$&lt;tuple$ (1,308 samples, 0.47%)</title><rect x="87.0619%" y="6405" width="0.4674%" height="15" fill="rgb(230,42,11)" fg:x="243640" fg:w="1308"/><text x="87.3119%" y="6415.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$&lt;tuple$ (1,308 samples, 0.47%)</title><rect x="87.0619%" y="6389" width="0.4674%" height="15" fill="rgb(237,229,4)" fg:x="243640" fg:w="1308"/><text x="87.3119%" y="6399.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$11::clone(alloc::vec::Vec&lt;tuple$ (1,314 samples, 0.47%)</title><rect x="87.0604%" y="6437" width="0.4695%" height="15" fill="rgb(222,31,33)" fg:x="243636" fg:w="1314"/><text x="87.3104%" y="6447.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (1,314 samples, 0.47%)</title><rect x="87.0604%" y="6421" width="0.4695%" height="15" fill="rgb(210,17,39)" fg:x="243636" fg:w="1314"/><text x="87.3104%" y="6431.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (1,195 samples, 0.43%)</title><rect x="87.5621%" y="6421" width="0.4270%" height="15" fill="rgb(244,93,20)" fg:x="245040" fg:w="1195"/><text x="87.8121%" y="6431.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (1,195 samples, 0.43%)</title><rect x="87.5621%" y="6405" width="0.4270%" height="15" fill="rgb(210,40,47)" fg:x="245040" fg:w="1195"/><text x="87.8121%" y="6415.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (172 samples, 0.06%)</title><rect x="87.9277%" y="6389" width="0.0615%" height="15" fill="rgb(239,211,47)" fg:x="246063" fg:w="172"/><text x="88.1777%" y="6399.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (32 samples, 0.01%)</title><rect x="87.9892%" y="6405" width="0.0114%" height="15" fill="rgb(251,223,49)" fg:x="246235" fg:w="32"/><text x="88.2392%" y="6415.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (32 samples, 0.01%)</title><rect x="87.9892%" y="6389" width="0.0114%" height="15" fill="rgb(221,149,5)" fg:x="246235" fg:w="32"/><text x="88.2392%" y="6399.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (32 samples, 0.01%)</title><rect x="87.9892%" y="6373" width="0.0114%" height="15" fill="rgb(219,224,51)" fg:x="246235" fg:w="32"/><text x="88.2392%" y="6383.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (32 samples, 0.01%)</title><rect x="87.9892%" y="6357" width="0.0114%" height="15" fill="rgb(223,7,8)" fg:x="246235" fg:w="32"/><text x="88.2392%" y="6367.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$ (1,581 samples, 0.56%)</title><rect x="87.5300%" y="6437" width="0.5650%" height="15" fill="rgb(241,217,22)" fg:x="244950" fg:w="1581"/><text x="87.7800%" y="6447.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;tuple$ (296 samples, 0.11%)</title><rect x="87.9892%" y="6421" width="0.1058%" height="15" fill="rgb(248,209,0)" fg:x="246235" fg:w="296"/><text x="88.2392%" y="6431.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;tuple$ (264 samples, 0.09%)</title><rect x="88.0006%" y="6405" width="0.0943%" height="15" fill="rgb(217,205,4)" fg:x="246267" fg:w="264"/><text x="88.2506%" y="6415.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (44 samples, 0.02%)</title><rect x="88.0949%" y="6421" width="0.0157%" height="15" fill="rgb(228,124,39)" fg:x="246531" fg:w="44"/><text x="88.3449%" y="6431.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;tuple$ (30 samples, 0.01%)</title><rect x="88.0999%" y="6405" width="0.0107%" height="15" fill="rgb(250,116,42)" fg:x="246545" fg:w="30"/><text x="88.3499%" y="6415.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, core::ops::range::Range (1,568 samples, 0.56%)</title><rect x="88.0949%" y="6437" width="0.5603%" height="15" fill="rgb(223,202,9)" fg:x="246531" fg:w="1568"/><text x="88.3449%" y="6447.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (1,524 samples, 0.54%)</title><rect x="88.1106%" y="6421" width="0.5446%" height="15" fill="rgb(242,222,40)" fg:x="246575" fg:w="1524"/><text x="88.3606%" y="6431.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (1,524 samples, 0.54%)</title><rect x="88.1106%" y="6405" width="0.5446%" height="15" fill="rgb(229,99,46)" fg:x="246575" fg:w="1524"/><text x="88.3606%" y="6415.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (179 samples, 0.06%)</title><rect x="88.5913%" y="6389" width="0.0640%" height="15" fill="rgb(225,56,46)" fg:x="247920" fg:w="179"/><text x="88.8413%" y="6399.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (33 samples, 0.01%)</title><rect x="88.6434%" y="6373" width="0.0118%" height="15" fill="rgb(227,94,5)" fg:x="248066" fg:w="33"/><text x="88.8934%" y="6383.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (33 samples, 0.01%)</title><rect x="88.6434%" y="6357" width="0.0118%" height="15" fill="rgb(205,112,38)" fg:x="248066" fg:w="33"/><text x="88.8934%" y="6367.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (33 samples, 0.01%)</title><rect x="88.6434%" y="6341" width="0.0118%" height="15" fill="rgb(231,133,46)" fg:x="248066" fg:w="33"/><text x="88.8934%" y="6351.50"></text></g><g><title>`0x7FF97E62AFA5 (44 samples, 0.02%)</title><rect x="88.6692%" y="6341" width="0.0157%" height="15" fill="rgb(217,16,9)" fg:x="248138" fg:w="44"/><text x="88.9192%" y="6351.50"></text></g><g><title>`0x7FF97E62AFBA (78 samples, 0.03%)</title><rect x="88.6849%" y="6341" width="0.0279%" height="15" fill="rgb(249,173,9)" fg:x="248182" fg:w="78"/><text x="88.9349%" y="6351.50"></text></g><g><title>`0x7FF97E62AFE0 (133 samples, 0.05%)</title><rect x="88.7135%" y="6341" width="0.0475%" height="15" fill="rgb(205,163,53)" fg:x="248262" fg:w="133"/><text x="88.9635%" y="6351.50"></text></g><g><title>`0x7FF97E62BB70 (152 samples, 0.05%)</title><rect x="88.7621%" y="6325" width="0.0543%" height="15" fill="rgb(217,54,41)" fg:x="248398" fg:w="152"/><text x="89.0121%" y="6335.50"></text></g><g><title>`0x7FF97E62BB84 (161 samples, 0.06%)</title><rect x="88.8185%" y="6325" width="0.0575%" height="15" fill="rgb(228,216,12)" fg:x="248556" fg:w="161"/><text x="89.0685%" y="6335.50"></text></g><g><title>`0x7FF97E62C2B1 (140 samples, 0.05%)</title><rect x="88.8771%" y="6325" width="0.0500%" height="15" fill="rgb(244,228,15)" fg:x="248720" fg:w="140"/><text x="89.1271%" y="6335.50"></text></g><g><title>`0x7FF97E62C38A (148 samples, 0.05%)</title><rect x="88.9365%" y="6325" width="0.0529%" height="15" fill="rgb(221,176,53)" fg:x="248886" fg:w="148"/><text x="89.1865%" y="6335.50"></text></g><g><title>`0x7FF97E69CB43 (82 samples, 0.03%)</title><rect x="88.9893%" y="6325" width="0.0293%" height="15" fill="rgb(205,94,34)" fg:x="249034" fg:w="82"/><text x="89.2393%" y="6335.50"></text></g><g><title>`0x7FF97E69CB6A (43 samples, 0.02%)</title><rect x="89.0204%" y="6325" width="0.0154%" height="15" fill="rgb(213,110,48)" fg:x="249121" fg:w="43"/><text x="89.2704%" y="6335.50"></text></g><g><title>`0x7FF97E62AFF1 (952 samples, 0.34%)</title><rect x="88.7610%" y="6341" width="0.3402%" height="15" fill="rgb(236,142,28)" fg:x="248395" fg:w="952"/><text x="89.0110%" y="6351.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (1,254 samples, 0.45%)</title><rect x="88.6692%" y="6373" width="0.4481%" height="15" fill="rgb(225,135,29)" fg:x="248138" fg:w="1254"/><text x="88.9192%" y="6383.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (1,254 samples, 0.45%)</title><rect x="88.6692%" y="6357" width="0.4481%" height="15" fill="rgb(252,45,31)" fg:x="248138" fg:w="1254"/><text x="88.9192%" y="6367.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (38 samples, 0.01%)</title><rect x="89.1037%" y="6341" width="0.0136%" height="15" fill="rgb(211,187,50)" fg:x="249354" fg:w="38"/><text x="89.3537%" y="6351.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::dealloc (37 samples, 0.01%)</title><rect x="89.1040%" y="6325" width="0.0132%" height="15" fill="rgb(229,109,7)" fg:x="249355" fg:w="37"/><text x="89.3540%" y="6335.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;tuple$ (1,306 samples, 0.47%)</title><rect x="88.6567%" y="6437" width="0.4667%" height="15" fill="rgb(251,131,51)" fg:x="248103" fg:w="1306"/><text x="88.9067%" y="6447.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (1,306 samples, 0.47%)</title><rect x="88.6567%" y="6421" width="0.4667%" height="15" fill="rgb(251,180,35)" fg:x="248103" fg:w="1306"/><text x="88.9067%" y="6431.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (1,306 samples, 0.47%)</title><rect x="88.6567%" y="6405" width="0.4667%" height="15" fill="rgb(211,46,32)" fg:x="248103" fg:w="1306"/><text x="88.9067%" y="6415.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (1,271 samples, 0.45%)</title><rect x="88.6692%" y="6389" width="0.4542%" height="15" fill="rgb(248,123,17)" fg:x="248138" fg:w="1271"/><text x="88.9192%" y="6399.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::swap(ref_mut$&lt;slice2$&lt;tuple$ (97 samples, 0.03%)</title><rect x="89.1351%" y="6341" width="0.0347%" height="15" fill="rgb(227,141,18)" fg:x="249442" fg:w="97"/><text x="89.3851%" y="6351.50"></text></g><g><title>neural_network.exe`core::ptr::swap(tuple$&lt;usize,usize&gt;*, tuple$ (57 samples, 0.02%)</title><rect x="89.1494%" y="6325" width="0.0204%" height="15" fill="rgb(216,102,9)" fg:x="249482" fg:w="57"/><text x="89.3994%" y="6335.50"></text></g><g><title>neural_network.exe`core::intrinsics::copy_nonoverlapping(tuple$&lt;usize,usize&gt;*, tuple$ (33 samples, 0.01%)</title><rect x="89.1580%" y="6309" width="0.0118%" height="15" fill="rgb(253,47,13)" fg:x="249506" fg:w="33"/><text x="89.4080%" y="6319.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide::impl_avx2 (36 samples, 0.01%)</title><rect x="89.2105%" y="6117" width="0.0129%" height="15" fill="rgb(226,93,23)" fg:x="249653" fg:w="36"/><text x="89.4605%" y="6127.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide::fn_impl(ppv_lite86::x86_64::Avx2Machine (34 samples, 0.01%)</title><rect x="89.2112%" y="6101" width="0.0121%" height="15" fill="rgb(247,104,17)" fg:x="249655" fg:w="34"/><text x="89.4612%" y="6111.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::refill_wide_impl(ppv_lite86::x86_64::Avx2Machine (34 samples, 0.01%)</title><rect x="89.2112%" y="6085" width="0.0121%" height="15" fill="rgb(233,203,26)" fg:x="249655" fg:w="34"/><text x="89.4612%" y="6095.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place (284 samples, 0.10%)</title><rect x="89.1233%" y="6437" width="0.1015%" height="15" fill="rgb(244,98,49)" fg:x="249409" fg:w="284"/><text x="89.3733%" y="6447.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (284 samples, 0.10%)</title><rect x="89.1233%" y="6421" width="0.1015%" height="15" fill="rgb(235,134,22)" fg:x="249409" fg:w="284"/><text x="89.3733%" y="6431.50"></text></g><g><title>neural_network.exe`alloc::rc::impl$30::drop(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (284 samples, 0.10%)</title><rect x="89.1233%" y="6405" width="0.1015%" height="15" fill="rgb(221,70,32)" fg:x="249409" fg:w="284"/><text x="89.3733%" y="6415.50"></text></g><g><title>neural_network.exe`alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;::inner (281 samples, 0.10%)</title><rect x="89.1244%" y="6389" width="0.1004%" height="15" fill="rgb(238,15,50)" fg:x="249412" fg:w="281"/><text x="89.3744%" y="6399.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;alloc::rc::RcBox&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt; &gt; &gt;::as_ref (281 samples, 0.10%)</title><rect x="89.1244%" y="6373" width="0.1004%" height="15" fill="rgb(215,221,48)" fg:x="249412" fg:w="281"/><text x="89.3744%" y="6383.50"></text></g><g><title>neural_network.exe`rand::seq::impl$0::shuffle&lt;tuple$&lt;usize,usize&gt;,rand::rngs::thread::ThreadRng&gt;(ref_mut$&lt;slice2$&lt;tuple$ (280 samples, 0.10%)</title><rect x="89.1248%" y="6357" width="0.1001%" height="15" fill="rgb(236,73,3)" fg:x="249413" fg:w="280"/><text x="89.3748%" y="6367.50"></text></g><g><title>neural_network.exe`rand::seq::gen_index (154 samples, 0.06%)</title><rect x="89.1698%" y="6341" width="0.0550%" height="15" fill="rgb(250,107,11)" fg:x="249539" fg:w="154"/><text x="89.4198%" y="6351.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen_range(rand::rngs::thread::ThreadRng*, core::ops::range::Range (154 samples, 0.06%)</title><rect x="89.1698%" y="6325" width="0.0550%" height="15" fill="rgb(242,39,14)" fg:x="249539" fg:w="154"/><text x="89.4198%" y="6335.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$6::sample_single(core::ops::range::Range (154 samples, 0.06%)</title><rect x="89.1698%" y="6309" width="0.0550%" height="15" fill="rgb(248,164,37)" fg:x="249539" fg:w="154"/><text x="89.4198%" y="6319.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single (154 samples, 0.06%)</title><rect x="89.1698%" y="6293" width="0.0550%" height="15" fill="rgb(217,60,12)" fg:x="249539" fg:w="154"/><text x="89.4198%" y="6303.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single_inclusive (154 samples, 0.06%)</title><rect x="89.1698%" y="6277" width="0.0550%" height="15" fill="rgb(240,125,29)" fg:x="249539" fg:w="154"/><text x="89.4198%" y="6287.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen (118 samples, 0.04%)</title><rect x="89.1827%" y="6261" width="0.0422%" height="15" fill="rgb(208,207,28)" fg:x="249575" fg:w="118"/><text x="89.4327%" y="6271.50"></text></g><g><title>neural_network.exe`rand::distributions::integer::impl$2::sample (118 samples, 0.04%)</title><rect x="89.1827%" y="6245" width="0.0422%" height="15" fill="rgb(209,159,27)" fg:x="249575" fg:w="118"/><text x="89.4327%" y="6255.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::impl$1::next_u32 (118 samples, 0.04%)</title><rect x="89.1827%" y="6229" width="0.0422%" height="15" fill="rgb(251,176,53)" fg:x="249575" fg:w="118"/><text x="89.4327%" y="6239.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$1::next_u32(rand::rngs::adapter::reseeding::ReseedingRng (118 samples, 0.04%)</title><rect x="89.1827%" y="6213" width="0.0422%" height="15" fill="rgb(211,85,7)" fg:x="249575" fg:w="118"/><text x="89.4327%" y="6223.50"></text></g><g><title>neural_network.exe`rand_core::block::impl$2::next_u32(rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore (118 samples, 0.04%)</title><rect x="89.1827%" y="6197" width="0.0422%" height="15" fill="rgb(216,64,54)" fg:x="249575" fg:w="118"/><text x="89.4327%" y="6207.50"></text></g><g><title>neural_network.exe`rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;::generate_and_set (46 samples, 0.02%)</title><rect x="89.2084%" y="6181" width="0.0164%" height="15" fill="rgb(217,54,24)" fg:x="249647" fg:w="46"/><text x="89.4584%" y="6191.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$4::generate(rand::rngs::adapter::reseeding::ReseedingCore&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt;*, rand_chacha::chacha::Array64 (46 samples, 0.02%)</title><rect x="89.2084%" y="6165" width="0.0164%" height="15" fill="rgb(208,206,53)" fg:x="249647" fg:w="46"/><text x="89.4584%" y="6175.50"></text></g><g><title>neural_network.exe`rand_chacha::chacha::impl$23::generate(rand_chacha::chacha::ChaCha12Core*, rand_chacha::chacha::Array64 (41 samples, 0.01%)</title><rect x="89.2102%" y="6149" width="0.0147%" height="15" fill="rgb(251,74,39)" fg:x="249652" fg:w="41"/><text x="89.4602%" y="6159.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::ChaCha::refill4 (41 samples, 0.01%)</title><rect x="89.2102%" y="6133" width="0.0147%" height="15" fill="rgb(226,47,5)" fg:x="249652" fg:w="41"/><text x="89.4602%" y="6143.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::contains(ref$&lt;slice2$&lt;tuple$&lt;usize,usize&gt; &gt; &gt;, tuple$ (554 samples, 0.20%)</title><rect x="89.2248%" y="6437" width="0.1980%" height="15" fill="rgb(234,111,33)" fg:x="249693" fg:w="554"/><text x="89.4748%" y="6447.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (554 samples, 0.20%)</title><rect x="89.2248%" y="6421" width="0.1980%" height="15" fill="rgb(251,14,10)" fg:x="249693" fg:w="554"/><text x="89.4748%" y="6431.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (554 samples, 0.20%)</title><rect x="89.2248%" y="6405" width="0.1980%" height="15" fill="rgb(232,43,0)" fg:x="249693" fg:w="554"/><text x="89.4748%" y="6415.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (60 samples, 0.02%)</title><rect x="89.4014%" y="6389" width="0.0214%" height="15" fill="rgb(222,68,43)" fg:x="250187" fg:w="60"/><text x="89.6514%" y="6399.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (30 samples, 0.01%)</title><rect x="89.4121%" y="6373" width="0.0107%" height="15" fill="rgb(217,24,23)" fg:x="250217" fg:w="30"/><text x="89.6621%" y="6383.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (30 samples, 0.01%)</title><rect x="89.4121%" y="6357" width="0.0107%" height="15" fill="rgb(229,209,14)" fg:x="250217" fg:w="30"/><text x="89.6621%" y="6367.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (30 samples, 0.01%)</title><rect x="89.4121%" y="6341" width="0.0107%" height="15" fill="rgb(250,149,48)" fg:x="250217" fg:w="30"/><text x="89.6621%" y="6351.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (173 samples, 0.06%)</title><rect x="89.4228%" y="6437" width="0.0618%" height="15" fill="rgb(210,120,37)" fg:x="250247" fg:w="173"/><text x="89.6728%" y="6447.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (41 samples, 0.01%)</title><rect x="89.4700%" y="6421" width="0.0147%" height="15" fill="rgb(210,21,8)" fg:x="250379" fg:w="41"/><text x="89.7200%" y="6431.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (41 samples, 0.01%)</title><rect x="89.4700%" y="6405" width="0.0147%" height="15" fill="rgb(243,145,7)" fg:x="250379" fg:w="41"/><text x="89.7200%" y="6415.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (41 samples, 0.01%)</title><rect x="89.4700%" y="6389" width="0.0147%" height="15" fill="rgb(238,178,32)" fg:x="250379" fg:w="41"/><text x="89.7200%" y="6399.50"></text></g><g><title>`0x7FF97E69CC6F (52 samples, 0.02%)</title><rect x="89.6719%" y="6373" width="0.0186%" height="15" fill="rgb(222,4,10)" fg:x="250944" fg:w="52"/><text x="89.9219%" y="6383.50"></text></g><g><title>`0x7FF97E62AFF1 (420 samples, 0.15%)</title><rect x="89.5689%" y="6389" width="0.1501%" height="15" fill="rgb(239,7,37)" fg:x="250656" fg:w="420"/><text x="89.8189%" y="6399.50"></text></g><g><title>`0x7FF97E62D68A (133 samples, 0.05%)</title><rect x="89.8534%" y="6165" width="0.0475%" height="15" fill="rgb(215,31,37)" fg:x="251452" fg:w="133"/><text x="90.1034%" y="6175.50"></text></g><g><title>`0x7FF97E62D723 (36 samples, 0.01%)</title><rect x="89.9234%" y="6165" width="0.0129%" height="15" fill="rgb(224,83,33)" fg:x="251648" fg:w="36"/><text x="90.1734%" y="6175.50"></text></g><g><title>`0x7FF97E62D793 (62 samples, 0.02%)</title><rect x="89.9366%" y="6165" width="0.0222%" height="15" fill="rgb(239,55,3)" fg:x="251685" fg:w="62"/><text x="90.1866%" y="6175.50"></text></g><g><title>`0x7FF97E62DBBF (33 samples, 0.01%)</title><rect x="89.9734%" y="6165" width="0.0118%" height="15" fill="rgb(247,92,11)" fg:x="251788" fg:w="33"/><text x="90.2234%" y="6175.50"></text></g><g><title>`0x7FF97E62CC9A (459 samples, 0.16%)</title><rect x="89.8284%" y="6181" width="0.1640%" height="15" fill="rgb(239,200,7)" fg:x="251382" fg:w="459"/><text x="90.0784%" y="6191.50"></text></g><g><title>`0x7FF97E62CCC1 (37 samples, 0.01%)</title><rect x="89.9924%" y="6181" width="0.0132%" height="15" fill="rgb(227,115,8)" fg:x="251841" fg:w="37"/><text x="90.2424%" y="6191.50"></text></g><g><title>`0x7FF97E63244E (42 samples, 0.02%)</title><rect x="90.0774%" y="6149" width="0.0150%" height="15" fill="rgb(215,189,27)" fg:x="252079" fg:w="42"/><text x="90.3274%" y="6159.50"></text></g><g><title>`0x7FF97E632473 (31 samples, 0.01%)</title><rect x="90.0928%" y="6149" width="0.0111%" height="15" fill="rgb(251,216,39)" fg:x="252122" fg:w="31"/><text x="90.3428%" y="6159.50"></text></g><g><title>`0x7FF97E63249F (28 samples, 0.01%)</title><rect x="90.1046%" y="6149" width="0.0100%" height="15" fill="rgb(207,29,47)" fg:x="252155" fg:w="28"/><text x="90.3546%" y="6159.50"></text></g><g><title>`0x7FF97E62D57C (29 samples, 0.01%)</title><rect x="90.1900%" y="6117" width="0.0104%" height="15" fill="rgb(210,71,34)" fg:x="252394" fg:w="29"/><text x="90.4400%" y="6127.50"></text></g><g><title>`0x7FF97E62D68A (46 samples, 0.02%)</title><rect x="90.2136%" y="6117" width="0.0164%" height="15" fill="rgb(253,217,51)" fg:x="252460" fg:w="46"/><text x="90.4636%" y="6127.50"></text></g><g><title>`0x7FF97E62CC9A (213 samples, 0.08%)</title><rect x="90.1693%" y="6133" width="0.0761%" height="15" fill="rgb(222,117,46)" fg:x="252336" fg:w="213"/><text x="90.4193%" y="6143.50"></text></g><g><title>`0x7FF97E633505 (384 samples, 0.14%)</title><rect x="90.1242%" y="6149" width="0.1372%" height="15" fill="rgb(226,132,6)" fg:x="252210" fg:w="384"/><text x="90.3742%" y="6159.50"></text></g><g><title>`0x7FF97E696B96 (170 samples, 0.06%)</title><rect x="90.2654%" y="6133" width="0.0607%" height="15" fill="rgb(254,145,51)" fg:x="252605" fg:w="170"/><text x="90.5154%" y="6143.50"></text></g><g><title>`0x7FF97E696C00 (28 samples, 0.01%)</title><rect x="90.3276%" y="6133" width="0.0100%" height="15" fill="rgb(231,199,27)" fg:x="252779" fg:w="28"/><text x="90.5776%" y="6143.50"></text></g><g><title>`0x7FF97E696C22 (43 samples, 0.02%)</title><rect x="90.3508%" y="6133" width="0.0154%" height="15" fill="rgb(245,158,14)" fg:x="252844" fg:w="43"/><text x="90.6008%" y="6143.50"></text></g><g><title>`0x7FF97E633550 (301 samples, 0.11%)</title><rect x="90.2629%" y="6149" width="0.1076%" height="15" fill="rgb(240,113,14)" fg:x="252598" fg:w="301"/><text x="90.5129%" y="6159.50"></text></g><g><title>`0x7FF97E69CC6F (61 samples, 0.02%)</title><rect x="90.3908%" y="6117" width="0.0218%" height="15" fill="rgb(210,20,13)" fg:x="252956" fg:w="61"/><text x="90.6408%" y="6127.50"></text></g><g><title>`0x7FF97E69CCAF (114 samples, 0.04%)</title><rect x="90.4298%" y="6117" width="0.0407%" height="15" fill="rgb(241,144,13)" fg:x="253065" fg:w="114"/><text x="90.6798%" y="6127.50"></text></g><g><title>`0x7FF97E62AFF1 (275 samples, 0.10%)</title><rect x="90.3740%" y="6133" width="0.0983%" height="15" fill="rgb(235,43,34)" fg:x="252909" fg:w="275"/><text x="90.6240%" y="6143.50"></text></g><g><title>`0x7FF97E633562 (285 samples, 0.10%)</title><rect x="90.3722%" y="6149" width="0.1018%" height="15" fill="rgb(208,36,20)" fg:x="252904" fg:w="285"/><text x="90.6222%" y="6159.50"></text></g><g><title>`0x7FF97E6322C7 (1,265 samples, 0.45%)</title><rect x="90.0321%" y="6165" width="0.4520%" height="15" fill="rgb(239,204,10)" fg:x="251952" fg:w="1265"/><text x="90.2821%" y="6175.50"></text></g><g><title>`0x7FF97E632312 (36 samples, 0.01%)</title><rect x="90.4998%" y="6165" width="0.0129%" height="15" fill="rgb(217,84,43)" fg:x="253261" fg:w="36"/><text x="90.7498%" y="6175.50"></text></g><g><title>`0x7FF97E63218A (1,362 samples, 0.49%)</title><rect x="90.0267%" y="6181" width="0.4867%" height="15" fill="rgb(241,170,50)" fg:x="251937" fg:w="1362"/><text x="90.2767%" y="6191.50"></text></g><g><title>`0x7FF97E63219E (40 samples, 0.01%)</title><rect x="90.5134%" y="6181" width="0.0143%" height="15" fill="rgb(226,205,29)" fg:x="253299" fg:w="40"/><text x="90.7634%" y="6191.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_realloc (39 samples, 0.01%)</title><rect x="90.5298%" y="6181" width="0.0139%" height="15" fill="rgb(233,113,1)" fg:x="253345" fg:w="39"/><text x="90.7798%" y="6191.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (2,037 samples, 0.73%)</title><rect x="89.8166%" y="6229" width="0.7279%" height="15" fill="rgb(253,98,13)" fg:x="251349" fg:w="2037"/><text x="90.0666%" y="6239.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (2,037 samples, 0.73%)</title><rect x="89.8166%" y="6213" width="0.7279%" height="15" fill="rgb(211,115,12)" fg:x="251349" fg:w="2037"/><text x="90.0666%" y="6223.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (2,035 samples, 0.73%)</title><rect x="89.8173%" y="6197" width="0.7272%" height="15" fill="rgb(208,12,16)" fg:x="251351" fg:w="2035"/><text x="90.0673%" y="6207.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_mut_ptr (2,340 samples, 0.84%)</title><rect x="89.7398%" y="6373" width="0.8362%" height="15" fill="rgb(237,193,54)" fg:x="251134" fg:w="2340"/><text x="89.9898%" y="6383.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (2,335 samples, 0.83%)</title><rect x="89.7415%" y="6357" width="0.8344%" height="15" fill="rgb(243,22,42)" fg:x="251139" fg:w="2335"/><text x="89.9915%" y="6367.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (2,335 samples, 0.83%)</title><rect x="89.7415%" y="6341" width="0.8344%" height="15" fill="rgb(233,151,36)" fg:x="251139" fg:w="2335"/><text x="89.9915%" y="6351.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (2,335 samples, 0.83%)</title><rect x="89.7415%" y="6325" width="0.8344%" height="15" fill="rgb(237,57,45)" fg:x="251139" fg:w="2335"/><text x="89.9915%" y="6335.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::grow_one&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; (2,321 samples, 0.83%)</title><rect x="89.7465%" y="6309" width="0.8294%" height="15" fill="rgb(221,88,17)" fg:x="251153" fg:w="2321"/><text x="89.9965%" y="6319.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (2,245 samples, 0.80%)</title><rect x="89.7737%" y="6293" width="0.8022%" height="15" fill="rgb(230,79,15)" fg:x="251229" fg:w="2245"/><text x="90.0237%" y="6303.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (2,240 samples, 0.80%)</title><rect x="89.7755%" y="6277" width="0.8004%" height="15" fill="rgb(213,57,13)" fg:x="251234" fg:w="2240"/><text x="90.0255%" y="6287.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (2,209 samples, 0.79%)</title><rect x="89.7866%" y="6261" width="0.7894%" height="15" fill="rgb(222,116,39)" fg:x="251265" fg:w="2209"/><text x="90.0366%" y="6271.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (2,174 samples, 0.78%)</title><rect x="89.7991%" y="6245" width="0.7769%" height="15" fill="rgb(245,107,2)" fg:x="251300" fg:w="2174"/><text x="90.0491%" y="6255.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;, alloc::raw_vec::finish_grow::closure_env$0 (88 samples, 0.03%)</title><rect x="90.5445%" y="6229" width="0.0314%" height="15" fill="rgb(238,1,10)" fg:x="253386" fg:w="88"/><text x="90.7945%" y="6239.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (2,552 samples, 0.91%)</title><rect x="89.7251%" y="6389" width="0.9119%" height="15" fill="rgb(249,4,48)" fg:x="251093" fg:w="2552"/><text x="89.9751%" y="6399.50"></text></g><g><title>neural_network.exe`core::ptr::write(tuple$&lt;usize,usize&gt;*, tuple$ (171 samples, 0.06%)</title><rect x="90.5759%" y="6373" width="0.0611%" height="15" fill="rgb(223,151,18)" fg:x="253474" fg:w="171"/><text x="90.8259%" y="6383.50"></text></g><g><title>`0x7FF968D51381 (236 samples, 0.08%)</title><rect x="90.6545%" y="6325" width="0.0843%" height="15" fill="rgb(227,65,43)" fg:x="253694" fg:w="236"/><text x="90.9045%" y="6335.50"></text></g><g><title>`0x7FF97E62CB3D (28 samples, 0.01%)</title><rect x="90.7753%" y="6261" width="0.0100%" height="15" fill="rgb(218,40,45)" fg:x="254032" fg:w="28"/><text x="91.0253%" y="6271.50"></text></g><g><title>`0x7FF97E62CC9A (184 samples, 0.07%)</title><rect x="90.8343%" y="6261" width="0.0658%" height="15" fill="rgb(252,121,31)" fg:x="254197" fg:w="184"/><text x="91.0843%" y="6271.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (485 samples, 0.17%)</title><rect x="90.7546%" y="6325" width="0.1733%" height="15" fill="rgb(219,158,43)" fg:x="253974" fg:w="485"/><text x="91.0046%" y="6335.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (485 samples, 0.17%)</title><rect x="90.7546%" y="6309" width="0.1733%" height="15" fill="rgb(231,162,42)" fg:x="253974" fg:w="485"/><text x="91.0046%" y="6319.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (485 samples, 0.17%)</title><rect x="90.7546%" y="6293" width="0.1733%" height="15" fill="rgb(217,179,25)" fg:x="253974" fg:w="485"/><text x="91.0046%" y="6303.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (485 samples, 0.17%)</title><rect x="90.7546%" y="6277" width="0.1733%" height="15" fill="rgb(206,212,31)" fg:x="253974" fg:w="485"/><text x="91.0046%" y="6287.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$&lt;tuple$ (812 samples, 0.29%)</title><rect x="90.6410%" y="6357" width="0.2902%" height="15" fill="rgb(235,144,12)" fg:x="253656" fg:w="812"/><text x="90.8910%" y="6367.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$&lt;tuple$ (812 samples, 0.29%)</title><rect x="90.6410%" y="6341" width="0.2902%" height="15" fill="rgb(213,51,10)" fg:x="253656" fg:w="812"/><text x="90.8910%" y="6351.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$11::clone(alloc::vec::Vec&lt;tuple$ (815 samples, 0.29%)</title><rect x="90.6402%" y="6389" width="0.2912%" height="15" fill="rgb(231,145,14)" fg:x="253654" fg:w="815"/><text x="90.8902%" y="6399.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (815 samples, 0.29%)</title><rect x="90.6402%" y="6373" width="0.2912%" height="15" fill="rgb(235,15,28)" fg:x="253654" fg:w="815"/><text x="90.8902%" y="6383.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (827 samples, 0.30%)</title><rect x="90.9540%" y="6373" width="0.2955%" height="15" fill="rgb(237,206,10)" fg:x="254532" fg:w="827"/><text x="91.2040%" y="6383.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (827 samples, 0.30%)</title><rect x="90.9540%" y="6357" width="0.2955%" height="15" fill="rgb(236,227,27)" fg:x="254532" fg:w="827"/><text x="91.2040%" y="6367.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (78 samples, 0.03%)</title><rect x="91.2216%" y="6341" width="0.0279%" height="15" fill="rgb(246,83,35)" fg:x="255281" fg:w="78"/><text x="91.4716%" y="6351.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$ (1,068 samples, 0.38%)</title><rect x="90.9315%" y="6389" width="0.3816%" height="15" fill="rgb(220,136,24)" fg:x="254469" fg:w="1068"/><text x="91.1815%" y="6399.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;tuple$ (178 samples, 0.06%)</title><rect x="91.2495%" y="6373" width="0.0636%" height="15" fill="rgb(217,3,25)" fg:x="255359" fg:w="178"/><text x="91.4995%" y="6383.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;tuple$ (163 samples, 0.06%)</title><rect x="91.2549%" y="6357" width="0.0582%" height="15" fill="rgb(239,24,14)" fg:x="255374" fg:w="163"/><text x="91.5049%" y="6367.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (36 samples, 0.01%)</title><rect x="91.3131%" y="6373" width="0.0129%" height="15" fill="rgb(244,16,53)" fg:x="255537" fg:w="36"/><text x="91.5631%" y="6383.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, core::ops::range::Range (1,191 samples, 0.43%)</title><rect x="91.3131%" y="6389" width="0.4256%" height="15" fill="rgb(208,175,44)" fg:x="255537" fg:w="1191"/><text x="91.5631%" y="6399.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (1,155 samples, 0.41%)</title><rect x="91.3260%" y="6373" width="0.4127%" height="15" fill="rgb(252,18,48)" fg:x="255573" fg:w="1155"/><text x="91.5760%" y="6383.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (1,155 samples, 0.41%)</title><rect x="91.3260%" y="6357" width="0.4127%" height="15" fill="rgb(234,199,32)" fg:x="255573" fg:w="1155"/><text x="91.5760%" y="6367.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (120 samples, 0.04%)</title><rect x="91.6958%" y="6341" width="0.0429%" height="15" fill="rgb(225,77,54)" fg:x="256608" fg:w="120"/><text x="91.9458%" y="6351.50"></text></g><g><title>`0x7FF97E62AFA5 (35 samples, 0.01%)</title><rect x="91.7505%" y="6293" width="0.0125%" height="15" fill="rgb(225,42,25)" fg:x="256761" fg:w="35"/><text x="92.0005%" y="6303.50"></text></g><g><title>`0x7FF97E62AFBA (53 samples, 0.02%)</title><rect x="91.7630%" y="6293" width="0.0189%" height="15" fill="rgb(242,227,46)" fg:x="256796" fg:w="53"/><text x="92.0130%" y="6303.50"></text></g><g><title>`0x7FF97E62AFE0 (98 samples, 0.04%)</title><rect x="91.7823%" y="6293" width="0.0350%" height="15" fill="rgb(246,197,35)" fg:x="256850" fg:w="98"/><text x="92.0323%" y="6303.50"></text></g><g><title>`0x7FF97E62BB70 (116 samples, 0.04%)</title><rect x="91.8177%" y="6277" width="0.0415%" height="15" fill="rgb(215,159,26)" fg:x="256949" fg:w="116"/><text x="92.0677%" y="6287.50"></text></g><g><title>`0x7FF97E62BB84 (119 samples, 0.04%)</title><rect x="91.8591%" y="6277" width="0.0425%" height="15" fill="rgb(212,194,50)" fg:x="257065" fg:w="119"/><text x="92.1091%" y="6287.50"></text></g><g><title>`0x7FF97E62C2B1 (119 samples, 0.04%)</title><rect x="91.9034%" y="6277" width="0.0425%" height="15" fill="rgb(246,132,1)" fg:x="257189" fg:w="119"/><text x="92.1534%" y="6287.50"></text></g><g><title>`0x7FF97E62C38A (104 samples, 0.04%)</title><rect x="91.9556%" y="6277" width="0.0372%" height="15" fill="rgb(217,71,7)" fg:x="257335" fg:w="104"/><text x="92.2056%" y="6287.50"></text></g><g><title>`0x7FF97E69CB43 (77 samples, 0.03%)</title><rect x="91.9928%" y="6277" width="0.0275%" height="15" fill="rgb(252,59,32)" fg:x="257439" fg:w="77"/><text x="92.2428%" y="6287.50"></text></g><g><title>`0x7FF97E62AFF1 (685 samples, 0.24%)</title><rect x="91.8173%" y="6293" width="0.2448%" height="15" fill="rgb(253,204,25)" fg:x="256948" fg:w="685"/><text x="92.0673%" y="6303.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (903 samples, 0.32%)</title><rect x="91.7505%" y="6325" width="0.3227%" height="15" fill="rgb(232,21,16)" fg:x="256761" fg:w="903"/><text x="92.0005%" y="6335.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (903 samples, 0.32%)</title><rect x="91.7505%" y="6309" width="0.3227%" height="15" fill="rgb(248,90,29)" fg:x="256761" fg:w="903"/><text x="92.0005%" y="6319.50"></text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (28 samples, 0.01%)</title><rect x="92.0632%" y="6293" width="0.0100%" height="15" fill="rgb(249,223,7)" fg:x="257636" fg:w="28"/><text x="92.3132%" y="6303.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::dealloc (28 samples, 0.01%)</title><rect x="92.0632%" y="6277" width="0.0100%" height="15" fill="rgb(231,119,42)" fg:x="257636" fg:w="28"/><text x="92.3132%" y="6287.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;tuple$ (948 samples, 0.34%)</title><rect x="91.7394%" y="6389" width="0.3388%" height="15" fill="rgb(215,41,35)" fg:x="256730" fg:w="948"/><text x="91.9894%" y="6399.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (948 samples, 0.34%)</title><rect x="91.7394%" y="6373" width="0.3388%" height="15" fill="rgb(220,44,45)" fg:x="256730" fg:w="948"/><text x="91.9894%" y="6383.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (948 samples, 0.34%)</title><rect x="91.7394%" y="6357" width="0.3388%" height="15" fill="rgb(253,197,36)" fg:x="256730" fg:w="948"/><text x="91.9894%" y="6367.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (917 samples, 0.33%)</title><rect x="91.7505%" y="6341" width="0.3277%" height="15" fill="rgb(245,225,54)" fg:x="256761" fg:w="917"/><text x="92.0005%" y="6351.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::swap(ref_mut$&lt;slice2$&lt;tuple$ (85 samples, 0.03%)</title><rect x="92.0875%" y="6293" width="0.0304%" height="15" fill="rgb(239,94,37)" fg:x="257704" fg:w="85"/><text x="92.3375%" y="6303.50"></text></g><g><title>neural_network.exe`core::ptr::swap(tuple$&lt;usize,usize&gt;*, tuple$ (43 samples, 0.02%)</title><rect x="92.1025%" y="6277" width="0.0154%" height="15" fill="rgb(242,217,10)" fg:x="257746" fg:w="43"/><text x="92.3525%" y="6287.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place (222 samples, 0.08%)</title><rect x="92.0782%" y="6389" width="0.0793%" height="15" fill="rgb(250,193,7)" fg:x="257678" fg:w="222"/><text x="92.3282%" y="6399.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (222 samples, 0.08%)</title><rect x="92.0782%" y="6373" width="0.0793%" height="15" fill="rgb(230,104,19)" fg:x="257678" fg:w="222"/><text x="92.3282%" y="6383.50"></text></g><g><title>neural_network.exe`alloc::rc::impl$30::drop(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (222 samples, 0.08%)</title><rect x="92.0782%" y="6357" width="0.0793%" height="15" fill="rgb(230,181,4)" fg:x="257678" fg:w="222"/><text x="92.3282%" y="6367.50"></text></g><g><title>neural_network.exe`alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;::inner (220 samples, 0.08%)</title><rect x="92.0789%" y="6341" width="0.0786%" height="15" fill="rgb(216,219,49)" fg:x="257680" fg:w="220"/><text x="92.3289%" y="6351.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;alloc::rc::RcBox&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt; &gt; &gt;::as_ref (219 samples, 0.08%)</title><rect x="92.0792%" y="6325" width="0.0783%" height="15" fill="rgb(254,144,0)" fg:x="257681" fg:w="219"/><text x="92.3292%" y="6335.50"></text></g><g><title>neural_network.exe`rand::seq::impl$0::shuffle&lt;tuple$&lt;usize,usize&gt;,rand::rngs::thread::ThreadRng&gt;(ref_mut$&lt;slice2$&lt;tuple$ (219 samples, 0.08%)</title><rect x="92.0792%" y="6309" width="0.0783%" height="15" fill="rgb(205,209,38)" fg:x="257681" fg:w="219"/><text x="92.3292%" y="6319.50"></text></g><g><title>neural_network.exe`rand::seq::gen_index (111 samples, 0.04%)</title><rect x="92.1178%" y="6293" width="0.0397%" height="15" fill="rgb(240,21,42)" fg:x="257789" fg:w="111"/><text x="92.3678%" y="6303.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen_range(rand::rngs::thread::ThreadRng*, core::ops::range::Range (111 samples, 0.04%)</title><rect x="92.1178%" y="6277" width="0.0397%" height="15" fill="rgb(241,132,3)" fg:x="257789" fg:w="111"/><text x="92.3678%" y="6287.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$6::sample_single(core::ops::range::Range (111 samples, 0.04%)</title><rect x="92.1178%" y="6261" width="0.0397%" height="15" fill="rgb(225,14,2)" fg:x="257789" fg:w="111"/><text x="92.3678%" y="6271.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single (111 samples, 0.04%)</title><rect x="92.1178%" y="6245" width="0.0397%" height="15" fill="rgb(210,141,35)" fg:x="257789" fg:w="111"/><text x="92.3678%" y="6255.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single_inclusive (111 samples, 0.04%)</title><rect x="92.1178%" y="6229" width="0.0397%" height="15" fill="rgb(251,14,44)" fg:x="257789" fg:w="111"/><text x="92.3678%" y="6239.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen (84 samples, 0.03%)</title><rect x="92.1275%" y="6213" width="0.0300%" height="15" fill="rgb(247,48,18)" fg:x="257816" fg:w="84"/><text x="92.3775%" y="6223.50"></text></g><g><title>neural_network.exe`rand::distributions::integer::impl$2::sample (84 samples, 0.03%)</title><rect x="92.1275%" y="6197" width="0.0300%" height="15" fill="rgb(225,0,40)" fg:x="257816" fg:w="84"/><text x="92.3775%" y="6207.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::impl$1::next_u32 (84 samples, 0.03%)</title><rect x="92.1275%" y="6181" width="0.0300%" height="15" fill="rgb(221,31,33)" fg:x="257816" fg:w="84"/><text x="92.3775%" y="6191.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$1::next_u32(rand::rngs::adapter::reseeding::ReseedingRng (84 samples, 0.03%)</title><rect x="92.1275%" y="6165" width="0.0300%" height="15" fill="rgb(237,42,40)" fg:x="257816" fg:w="84"/><text x="92.3775%" y="6175.50"></text></g><g><title>neural_network.exe`rand_core::block::impl$2::next_u32(rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore (84 samples, 0.03%)</title><rect x="92.1275%" y="6149" width="0.0300%" height="15" fill="rgb(233,51,29)" fg:x="257816" fg:w="84"/><text x="92.3775%" y="6159.50"></text></g><g><title>neural_network.exe`rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;::generate_and_set (32 samples, 0.01%)</title><rect x="92.1461%" y="6133" width="0.0114%" height="15" fill="rgb(226,58,20)" fg:x="257868" fg:w="32"/><text x="92.3961%" y="6143.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$4::generate(rand::rngs::adapter::reseeding::ReseedingCore&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt;*, rand_chacha::chacha::Array64 (32 samples, 0.01%)</title><rect x="92.1461%" y="6117" width="0.0114%" height="15" fill="rgb(208,98,7)" fg:x="257868" fg:w="32"/><text x="92.3961%" y="6127.50"></text></g><g><title>neural_network.exe`rand_chacha::chacha::impl$23::generate(rand_chacha::chacha::ChaCha12Core*, rand_chacha::chacha::Array64 (30 samples, 0.01%)</title><rect x="92.1468%" y="6101" width="0.0107%" height="15" fill="rgb(228,143,44)" fg:x="257870" fg:w="30"/><text x="92.3968%" y="6111.50"></text></g><g><title>neural_network.exe`rand_chacha::guts::ChaCha::refill4 (30 samples, 0.01%)</title><rect x="92.1468%" y="6085" width="0.0107%" height="15" fill="rgb(246,55,38)" fg:x="257870" fg:w="30"/><text x="92.3968%" y="6095.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::contains(ref$&lt;slice2$&lt;tuple$&lt;usize,usize&gt; &gt; &gt;, tuple$ (397 samples, 0.14%)</title><rect x="92.1575%" y="6389" width="0.1419%" height="15" fill="rgb(247,87,16)" fg:x="257900" fg:w="397"/><text x="92.4075%" y="6399.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (397 samples, 0.14%)</title><rect x="92.1575%" y="6373" width="0.1419%" height="15" fill="rgb(234,129,42)" fg:x="257900" fg:w="397"/><text x="92.4075%" y="6383.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (397 samples, 0.14%)</title><rect x="92.1575%" y="6357" width="0.1419%" height="15" fill="rgb(220,82,16)" fg:x="257900" fg:w="397"/><text x="92.4075%" y="6367.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (32 samples, 0.01%)</title><rect x="92.2879%" y="6341" width="0.0114%" height="15" fill="rgb(211,88,4)" fg:x="258265" fg:w="32"/><text x="92.5379%" y="6351.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (124 samples, 0.04%)</title><rect x="92.2994%" y="6389" width="0.0443%" height="15" fill="rgb(248,151,21)" fg:x="258297" fg:w="124"/><text x="92.5494%" y="6399.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (42 samples, 0.02%)</title><rect x="92.3287%" y="6373" width="0.0150%" height="15" fill="rgb(238,163,6)" fg:x="258379" fg:w="42"/><text x="92.5787%" y="6383.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (42 samples, 0.02%)</title><rect x="92.3287%" y="6357" width="0.0150%" height="15" fill="rgb(209,183,11)" fg:x="258379" fg:w="42"/><text x="92.5787%" y="6367.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (42 samples, 0.02%)</title><rect x="92.3287%" y="6341" width="0.0150%" height="15" fill="rgb(219,37,20)" fg:x="258379" fg:w="42"/><text x="92.5787%" y="6351.50"></text></g><g><title>`0x7FF97E69CC6F (37 samples, 0.01%)</title><rect x="92.4834%" y="6325" width="0.0132%" height="15" fill="rgb(210,158,4)" fg:x="258812" fg:w="37"/><text x="92.7334%" y="6335.50"></text></g><g><title>`0x7FF97E62AFF1 (290 samples, 0.10%)</title><rect x="92.4141%" y="6341" width="0.1036%" height="15" fill="rgb(221,167,53)" fg:x="258618" fg:w="290"/><text x="92.6641%" y="6351.50"></text></g><g><title>`0x7FF97E62D57C (37 samples, 0.01%)</title><rect x="92.5920%" y="6117" width="0.0132%" height="15" fill="rgb(237,151,45)" fg:x="259116" fg:w="37"/><text x="92.8420%" y="6127.50"></text></g><g><title>`0x7FF97E62D68A (89 samples, 0.03%)</title><rect x="92.6199%" y="6117" width="0.0318%" height="15" fill="rgb(231,39,3)" fg:x="259194" fg:w="89"/><text x="92.8699%" y="6127.50"></text></g><g><title>`0x7FF97E62DBBF (38 samples, 0.01%)</title><rect x="92.6853%" y="6117" width="0.0136%" height="15" fill="rgb(212,167,28)" fg:x="259377" fg:w="38"/><text x="92.9353%" y="6127.50"></text></g><g><title>`0x7FF97E62CC9A (317 samples, 0.11%)</title><rect x="92.5910%" y="6133" width="0.1133%" height="15" fill="rgb(232,178,8)" fg:x="259113" fg:w="317"/><text x="92.8410%" y="6143.50"></text></g><g><title>`0x7FF97E63241D (31 samples, 0.01%)</title><rect x="92.7450%" y="6101" width="0.0111%" height="15" fill="rgb(225,151,20)" fg:x="259544" fg:w="31"/><text x="92.9950%" y="6111.50"></text></g><g><title>`0x7FF97E632442 (36 samples, 0.01%)</title><rect x="92.7614%" y="6101" width="0.0129%" height="15" fill="rgb(238,3,37)" fg:x="259590" fg:w="36"/><text x="93.0114%" y="6111.50"></text></g><g><title>`0x7FF97E632447 (35 samples, 0.01%)</title><rect x="92.7743%" y="6101" width="0.0125%" height="15" fill="rgb(251,147,42)" fg:x="259626" fg:w="35"/><text x="93.0243%" y="6111.50"></text></g><g><title>`0x7FF97E62D68A (37 samples, 0.01%)</title><rect x="92.8722%" y="6069" width="0.0132%" height="15" fill="rgb(208,173,10)" fg:x="259900" fg:w="37"/><text x="93.1222%" y="6079.50"></text></g><g><title>`0x7FF97E62CC9A (206 samples, 0.07%)</title><rect x="92.8472%" y="6085" width="0.0736%" height="15" fill="rgb(246,225,4)" fg:x="259830" fg:w="206"/><text x="93.0972%" y="6095.50"></text></g><g><title>`0x7FF97E633505 (329 samples, 0.12%)</title><rect x="92.8118%" y="6101" width="0.1176%" height="15" fill="rgb(248,102,6)" fg:x="259731" fg:w="329"/><text x="93.0618%" y="6111.50"></text></g><g><title>`0x7FF97E696B96 (152 samples, 0.05%)</title><rect x="92.9329%" y="6085" width="0.0543%" height="15" fill="rgb(232,6,21)" fg:x="260070" fg:w="152"/><text x="93.1829%" y="6095.50"></text></g><g><title>`0x7FF97E633550 (250 samples, 0.09%)</title><rect x="92.9301%" y="6101" width="0.0893%" height="15" fill="rgb(221,179,22)" fg:x="260062" fg:w="250"/><text x="93.1801%" y="6111.50"></text></g><g><title>`0x7FF97E69CC6F (65 samples, 0.02%)</title><rect x="93.0441%" y="6069" width="0.0232%" height="15" fill="rgb(252,50,20)" fg:x="260381" fg:w="65"/><text x="93.2941%" y="6079.50"></text></g><g><title>`0x7FF97E69CCAF (78 samples, 0.03%)</title><rect x="93.0812%" y="6069" width="0.0279%" height="15" fill="rgb(222,56,38)" fg:x="260485" fg:w="78"/><text x="93.3312%" y="6079.50"></text></g><g><title>`0x7FF97E62AFF1 (246 samples, 0.09%)</title><rect x="93.0262%" y="6085" width="0.0879%" height="15" fill="rgb(206,193,29)" fg:x="260331" fg:w="246"/><text x="93.2762%" y="6095.50"></text></g><g><title>`0x7FF97E633562 (272 samples, 0.10%)</title><rect x="93.0194%" y="6101" width="0.0972%" height="15" fill="rgb(239,192,45)" fg:x="260312" fg:w="272"/><text x="93.2694%" y="6111.50"></text></g><g><title>`0x7FF97E6322C7 (1,097 samples, 0.39%)</title><rect x="92.7325%" y="6117" width="0.3920%" height="15" fill="rgb(254,18,36)" fg:x="259509" fg:w="1097"/><text x="92.9825%" y="6127.50"></text></g><g><title>`0x7FF97E632312 (46 samples, 0.02%)</title><rect x="93.1373%" y="6117" width="0.0164%" height="15" fill="rgb(221,127,11)" fg:x="260642" fg:w="46"/><text x="93.3873%" y="6127.50"></text></g><g><title>`0x7FF97E63218A (1,194 samples, 0.43%)</title><rect x="92.7275%" y="6133" width="0.4267%" height="15" fill="rgb(234,146,35)" fg:x="259495" fg:w="1194"/><text x="92.9775%" y="6143.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (1,650 samples, 0.59%)</title><rect x="92.5842%" y="6181" width="0.5896%" height="15" fill="rgb(254,201,37)" fg:x="259094" fg:w="1650"/><text x="92.8342%" y="6191.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (1,650 samples, 0.59%)</title><rect x="92.5842%" y="6165" width="0.5896%" height="15" fill="rgb(211,202,23)" fg:x="259094" fg:w="1650"/><text x="92.8342%" y="6175.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (1,648 samples, 0.59%)</title><rect x="92.5849%" y="6149" width="0.5889%" height="15" fill="rgb(237,91,2)" fg:x="259096" fg:w="1648"/><text x="92.8349%" y="6159.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_mut_ptr (1,831 samples, 0.65%)</title><rect x="92.5309%" y="6325" width="0.6543%" height="15" fill="rgb(226,228,36)" fg:x="258945" fg:w="1831"/><text x="92.7809%" y="6335.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (1,828 samples, 0.65%)</title><rect x="92.5320%" y="6309" width="0.6532%" height="15" fill="rgb(213,63,50)" fg:x="258948" fg:w="1828"/><text x="92.7820%" y="6319.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (1,828 samples, 0.65%)</title><rect x="92.5320%" y="6293" width="0.6532%" height="15" fill="rgb(235,194,19)" fg:x="258948" fg:w="1828"/><text x="92.7820%" y="6303.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (1,828 samples, 0.65%)</title><rect x="92.5320%" y="6277" width="0.6532%" height="15" fill="rgb(207,204,18)" fg:x="258948" fg:w="1828"/><text x="92.7820%" y="6287.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::grow_one&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; (1,822 samples, 0.65%)</title><rect x="92.5341%" y="6261" width="0.6511%" height="15" fill="rgb(248,8,7)" fg:x="258954" fg:w="1822"/><text x="92.7841%" y="6271.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (1,759 samples, 0.63%)</title><rect x="92.5566%" y="6245" width="0.6286%" height="15" fill="rgb(223,145,47)" fg:x="259017" fg:w="1759"/><text x="92.8066%" y="6255.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (1,754 samples, 0.63%)</title><rect x="92.5584%" y="6229" width="0.6268%" height="15" fill="rgb(228,84,11)" fg:x="259022" fg:w="1754"/><text x="92.8084%" y="6239.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (1,721 samples, 0.61%)</title><rect x="92.5702%" y="6213" width="0.6150%" height="15" fill="rgb(218,76,45)" fg:x="259055" fg:w="1721"/><text x="92.8202%" y="6223.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (1,702 samples, 0.61%)</title><rect x="92.5770%" y="6197" width="0.6082%" height="15" fill="rgb(223,80,15)" fg:x="259074" fg:w="1702"/><text x="92.8270%" y="6207.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;, alloc::raw_vec::finish_grow::closure_env$0 (32 samples, 0.01%)</title><rect x="93.1738%" y="6181" width="0.0114%" height="15" fill="rgb(219,218,33)" fg:x="260744" fg:w="32"/><text x="93.4238%" y="6191.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (1,985 samples, 0.71%)</title><rect x="92.5216%" y="6341" width="0.7093%" height="15" fill="rgb(208,51,11)" fg:x="258919" fg:w="1985"/><text x="92.7716%" y="6351.50"></text></g><g><title>neural_network.exe`core::ptr::write(tuple$&lt;usize,usize&gt;*, tuple$ (128 samples, 0.05%)</title><rect x="93.1852%" y="6325" width="0.0457%" height="15" fill="rgb(229,165,39)" fg:x="260776" fg:w="128"/><text x="93.4352%" y="6335.50"></text></g><g><title>`0x7FF968D51381 (227 samples, 0.08%)</title><rect x="93.2499%" y="6277" width="0.0811%" height="15" fill="rgb(241,100,24)" fg:x="260957" fg:w="227"/><text x="93.4999%" y="6287.50"></text></g><g><title>`0x7FF97E62CAFF (34 samples, 0.01%)</title><rect x="93.3510%" y="6213" width="0.0121%" height="15" fill="rgb(228,14,23)" fg:x="261240" fg:w="34"/><text x="93.6010%" y="6223.50"></text></g><g><title>`0x7FF97E62CB20 (32 samples, 0.01%)</title><rect x="93.3632%" y="6213" width="0.0114%" height="15" fill="rgb(247,116,52)" fg:x="261274" fg:w="32"/><text x="93.6132%" y="6223.50"></text></g><g><title>`0x7FF97E62D5E2 (32 samples, 0.01%)</title><rect x="93.4418%" y="6197" width="0.0114%" height="15" fill="rgb(216,149,33)" fg:x="261494" fg:w="32"/><text x="93.6918%" y="6207.50"></text></g><g><title>`0x7FF97E62CC9A (247 samples, 0.09%)</title><rect x="93.4157%" y="6213" width="0.0883%" height="15" fill="rgb(238,142,29)" fg:x="261421" fg:w="247"/><text x="93.6657%" y="6223.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (519 samples, 0.19%)</title><rect x="93.3485%" y="6277" width="0.1855%" height="15" fill="rgb(224,83,40)" fg:x="261233" fg:w="519"/><text x="93.5985%" y="6287.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (519 samples, 0.19%)</title><rect x="93.3485%" y="6261" width="0.1855%" height="15" fill="rgb(234,165,11)" fg:x="261233" fg:w="519"/><text x="93.5985%" y="6271.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (519 samples, 0.19%)</title><rect x="93.3485%" y="6245" width="0.1855%" height="15" fill="rgb(215,96,23)" fg:x="261233" fg:w="519"/><text x="93.5985%" y="6255.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (519 samples, 0.19%)</title><rect x="93.3485%" y="6229" width="0.1855%" height="15" fill="rgb(233,179,26)" fg:x="261233" fg:w="519"/><text x="93.5985%" y="6239.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$11::clone(alloc::vec::Vec&lt;tuple$ (829 samples, 0.30%)</title><rect x="93.2392%" y="6341" width="0.2962%" height="15" fill="rgb(225,129,33)" fg:x="260927" fg:w="829"/><text x="93.4892%" y="6351.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (829 samples, 0.30%)</title><rect x="93.2392%" y="6325" width="0.2962%" height="15" fill="rgb(237,49,13)" fg:x="260927" fg:w="829"/><text x="93.4892%" y="6335.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$&lt;tuple$ (827 samples, 0.30%)</title><rect x="93.2399%" y="6309" width="0.2955%" height="15" fill="rgb(211,3,31)" fg:x="260929" fg:w="827"/><text x="93.4899%" y="6319.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$&lt;tuple$ (827 samples, 0.30%)</title><rect x="93.2399%" y="6293" width="0.2955%" height="15" fill="rgb(216,152,19)" fg:x="260929" fg:w="827"/><text x="93.4899%" y="6303.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (736 samples, 0.26%)</title><rect x="93.5536%" y="6325" width="0.2630%" height="15" fill="rgb(251,121,35)" fg:x="261807" fg:w="736"/><text x="93.8036%" y="6335.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (736 samples, 0.26%)</title><rect x="93.5536%" y="6309" width="0.2630%" height="15" fill="rgb(210,217,47)" fg:x="261807" fg:w="736"/><text x="93.8036%" y="6319.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (88 samples, 0.03%)</title><rect x="93.7852%" y="6293" width="0.0314%" height="15" fill="rgb(244,116,22)" fg:x="262455" fg:w="88"/><text x="94.0352%" y="6303.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$ (960 samples, 0.34%)</title><rect x="93.5354%" y="6341" width="0.3430%" height="15" fill="rgb(228,17,21)" fg:x="261756" fg:w="960"/><text x="93.7854%" y="6351.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;tuple$ (173 samples, 0.06%)</title><rect x="93.8166%" y="6325" width="0.0618%" height="15" fill="rgb(240,149,34)" fg:x="262543" fg:w="173"/><text x="94.0666%" y="6335.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;tuple$ (158 samples, 0.06%)</title><rect x="93.8220%" y="6309" width="0.0565%" height="15" fill="rgb(208,125,47)" fg:x="262558" fg:w="158"/><text x="94.0720%" y="6319.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (35 samples, 0.01%)</title><rect x="93.8784%" y="6325" width="0.0125%" height="15" fill="rgb(249,186,39)" fg:x="262716" fg:w="35"/><text x="94.1284%" y="6335.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, core::ops::range::Range (1,048 samples, 0.37%)</title><rect x="93.8784%" y="6341" width="0.3745%" height="15" fill="rgb(240,220,33)" fg:x="262716" fg:w="1048"/><text x="94.1284%" y="6351.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (1,013 samples, 0.36%)</title><rect x="93.8909%" y="6325" width="0.3620%" height="15" fill="rgb(243,110,23)" fg:x="262751" fg:w="1013"/><text x="94.1409%" y="6335.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (1,013 samples, 0.36%)</title><rect x="93.8909%" y="6309" width="0.3620%" height="15" fill="rgb(219,163,46)" fg:x="262751" fg:w="1013"/><text x="94.1409%" y="6319.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (117 samples, 0.04%)</title><rect x="94.2111%" y="6293" width="0.0418%" height="15" fill="rgb(216,126,30)" fg:x="263647" fg:w="117"/><text x="94.4611%" y="6303.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter&lt;tuple$ (34 samples, 0.01%)</title><rect x="94.2408%" y="6277" width="0.0121%" height="15" fill="rgb(208,139,11)" fg:x="263730" fg:w="34"/><text x="94.4908%" y="6287.50"></text></g><g><title>neural_network.exe`core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;::post_inc_start (34 samples, 0.01%)</title><rect x="94.2408%" y="6261" width="0.0121%" height="15" fill="rgb(213,118,36)" fg:x="263730" fg:w="34"/><text x="94.4908%" y="6271.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;tuple$&lt;usize,usize&gt; &gt;::add(core::ptr::non_null::NonNull&lt;tuple$ (34 samples, 0.01%)</title><rect x="94.2408%" y="6245" width="0.0121%" height="15" fill="rgb(226,43,17)" fg:x="263730" fg:w="34"/><text x="94.4908%" y="6255.50"></text></g><g><title>`0x7FF97E62AFA5 (41 samples, 0.01%)</title><rect x="94.2597%" y="6245" width="0.0147%" height="15" fill="rgb(254,217,4)" fg:x="263783" fg:w="41"/><text x="94.5097%" y="6255.50"></text></g><g><title>`0x7FF97E62AFBA (52 samples, 0.02%)</title><rect x="94.2754%" y="6245" width="0.0186%" height="15" fill="rgb(210,134,47)" fg:x="263827" fg:w="52"/><text x="94.5254%" y="6255.50"></text></g><g><title>`0x7FF97E62AFE0 (68 samples, 0.02%)</title><rect x="94.2944%" y="6245" width="0.0243%" height="15" fill="rgb(237,24,49)" fg:x="263880" fg:w="68"/><text x="94.5444%" y="6255.50"></text></g><g><title>`0x7FF97E62BB70 (100 samples, 0.04%)</title><rect x="94.3187%" y="6229" width="0.0357%" height="15" fill="rgb(251,39,46)" fg:x="263948" fg:w="100"/><text x="94.5687%" y="6239.50"></text></g><g><title>`0x7FF97E62BB84 (101 samples, 0.04%)</title><rect x="94.3551%" y="6229" width="0.0361%" height="15" fill="rgb(251,220,3)" fg:x="264050" fg:w="101"/><text x="94.6051%" y="6239.50"></text></g><g><title>`0x7FF97E62C2B1 (93 samples, 0.03%)</title><rect x="94.3923%" y="6229" width="0.0332%" height="15" fill="rgb(228,105,12)" fg:x="264154" fg:w="93"/><text x="94.6423%" y="6239.50"></text></g><g><title>`0x7FF97E62C38A (83 samples, 0.03%)</title><rect x="94.4305%" y="6229" width="0.0297%" height="15" fill="rgb(215,196,1)" fg:x="264261" fg:w="83"/><text x="94.6805%" y="6239.50"></text></g><g><title>`0x7FF97E69CB43 (42 samples, 0.02%)</title><rect x="94.4602%" y="6229" width="0.0150%" height="15" fill="rgb(214,33,39)" fg:x="264344" fg:w="42"/><text x="94.7102%" y="6239.50"></text></g><g><title>`0x7FF97E62AFF1 (531 samples, 0.19%)</title><rect x="94.3187%" y="6245" width="0.1897%" height="15" fill="rgb(220,19,52)" fg:x="263948" fg:w="531"/><text x="94.5687%" y="6255.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (723 samples, 0.26%)</title><rect x="94.2594%" y="6277" width="0.2584%" height="15" fill="rgb(221,78,38)" fg:x="263782" fg:w="723"/><text x="94.5094%" y="6287.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (723 samples, 0.26%)</title><rect x="94.2594%" y="6261" width="0.2584%" height="15" fill="rgb(253,30,16)" fg:x="263782" fg:w="723"/><text x="94.5094%" y="6271.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;tuple$ (752 samples, 0.27%)</title><rect x="94.2529%" y="6341" width="0.2687%" height="15" fill="rgb(242,65,0)" fg:x="263764" fg:w="752"/><text x="94.5029%" y="6351.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (752 samples, 0.27%)</title><rect x="94.2529%" y="6325" width="0.2687%" height="15" fill="rgb(235,201,12)" fg:x="263764" fg:w="752"/><text x="94.5029%" y="6335.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (752 samples, 0.27%)</title><rect x="94.2529%" y="6309" width="0.2687%" height="15" fill="rgb(233,161,9)" fg:x="263764" fg:w="752"/><text x="94.5029%" y="6319.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (734 samples, 0.26%)</title><rect x="94.2594%" y="6293" width="0.2623%" height="15" fill="rgb(241,207,41)" fg:x="263782" fg:w="734"/><text x="94.5094%" y="6303.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::swap(ref_mut$&lt;slice2$&lt;tuple$ (64 samples, 0.02%)</title><rect x="94.5292%" y="6245" width="0.0229%" height="15" fill="rgb(212,69,46)" fg:x="264537" fg:w="64"/><text x="94.7792%" y="6255.50"></text></g><g><title>neural_network.exe`core::ptr::swap(tuple$&lt;usize,usize&gt;*, tuple$ (34 samples, 0.01%)</title><rect x="94.5399%" y="6229" width="0.0121%" height="15" fill="rgb(239,69,45)" fg:x="264567" fg:w="34"/><text x="94.7899%" y="6239.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place (173 samples, 0.06%)</title><rect x="94.5216%" y="6341" width="0.0618%" height="15" fill="rgb(242,117,48)" fg:x="264516" fg:w="173"/><text x="94.7716%" y="6351.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (173 samples, 0.06%)</title><rect x="94.5216%" y="6325" width="0.0618%" height="15" fill="rgb(228,41,36)" fg:x="264516" fg:w="173"/><text x="94.7716%" y="6335.50"></text></g><g><title>neural_network.exe`alloc::rc::impl$30::drop(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (173 samples, 0.06%)</title><rect x="94.5216%" y="6309" width="0.0618%" height="15" fill="rgb(212,3,32)" fg:x="264516" fg:w="173"/><text x="94.7716%" y="6319.50"></text></g><g><title>neural_network.exe`alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;::inner (170 samples, 0.06%)</title><rect x="94.5227%" y="6293" width="0.0607%" height="15" fill="rgb(233,41,49)" fg:x="264519" fg:w="170"/><text x="94.7727%" y="6303.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;alloc::rc::RcBox&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt; &gt; &gt;::as_ref (170 samples, 0.06%)</title><rect x="94.5227%" y="6277" width="0.0607%" height="15" fill="rgb(252,170,49)" fg:x="264519" fg:w="170"/><text x="94.7727%" y="6287.50"></text></g><g><title>neural_network.exe`rand::seq::impl$0::shuffle&lt;tuple$&lt;usize,usize&gt;,rand::rngs::thread::ThreadRng&gt;(ref_mut$&lt;slice2$&lt;tuple$ (170 samples, 0.06%)</title><rect x="94.5227%" y="6261" width="0.0607%" height="15" fill="rgb(229,53,26)" fg:x="264519" fg:w="170"/><text x="94.7727%" y="6271.50"></text></g><g><title>neural_network.exe`rand::seq::gen_index (88 samples, 0.03%)</title><rect x="94.5520%" y="6245" width="0.0314%" height="15" fill="rgb(217,157,12)" fg:x="264601" fg:w="88"/><text x="94.8020%" y="6255.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen_range(rand::rngs::thread::ThreadRng*, core::ops::range::Range (88 samples, 0.03%)</title><rect x="94.5520%" y="6229" width="0.0314%" height="15" fill="rgb(227,17,9)" fg:x="264601" fg:w="88"/><text x="94.8020%" y="6239.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$6::sample_single(core::ops::range::Range (88 samples, 0.03%)</title><rect x="94.5520%" y="6213" width="0.0314%" height="15" fill="rgb(218,84,12)" fg:x="264601" fg:w="88"/><text x="94.8020%" y="6223.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single (88 samples, 0.03%)</title><rect x="94.5520%" y="6197" width="0.0314%" height="15" fill="rgb(212,79,24)" fg:x="264601" fg:w="88"/><text x="94.8020%" y="6207.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single_inclusive (88 samples, 0.03%)</title><rect x="94.5520%" y="6181" width="0.0314%" height="15" fill="rgb(217,222,37)" fg:x="264601" fg:w="88"/><text x="94.8020%" y="6191.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen (66 samples, 0.02%)</title><rect x="94.5599%" y="6165" width="0.0236%" height="15" fill="rgb(246,208,8)" fg:x="264623" fg:w="66"/><text x="94.8099%" y="6175.50"></text></g><g><title>neural_network.exe`rand::distributions::integer::impl$2::sample (66 samples, 0.02%)</title><rect x="94.5599%" y="6149" width="0.0236%" height="15" fill="rgb(244,133,10)" fg:x="264623" fg:w="66"/><text x="94.8099%" y="6159.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::impl$1::next_u32 (66 samples, 0.02%)</title><rect x="94.5599%" y="6133" width="0.0236%" height="15" fill="rgb(209,219,41)" fg:x="264623" fg:w="66"/><text x="94.8099%" y="6143.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$1::next_u32(rand::rngs::adapter::reseeding::ReseedingRng (66 samples, 0.02%)</title><rect x="94.5599%" y="6117" width="0.0236%" height="15" fill="rgb(253,175,45)" fg:x="264623" fg:w="66"/><text x="94.8099%" y="6127.50"></text></g><g><title>neural_network.exe`rand_core::block::impl$2::next_u32(rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore (66 samples, 0.02%)</title><rect x="94.5599%" y="6101" width="0.0236%" height="15" fill="rgb(235,100,37)" fg:x="264623" fg:w="66"/><text x="94.8099%" y="6111.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::contains(ref$&lt;slice2$&lt;tuple$&lt;usize,usize&gt; &gt; &gt;, tuple$ (346 samples, 0.12%)</title><rect x="94.5835%" y="6341" width="0.1236%" height="15" fill="rgb(225,87,19)" fg:x="264689" fg:w="346"/><text x="94.8335%" y="6351.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (346 samples, 0.12%)</title><rect x="94.5835%" y="6325" width="0.1236%" height="15" fill="rgb(217,152,17)" fg:x="264689" fg:w="346"/><text x="94.8335%" y="6335.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (346 samples, 0.12%)</title><rect x="94.5835%" y="6309" width="0.1236%" height="15" fill="rgb(235,72,13)" fg:x="264689" fg:w="346"/><text x="94.8335%" y="6319.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (29 samples, 0.01%)</title><rect x="94.6967%" y="6293" width="0.0104%" height="15" fill="rgb(233,140,18)" fg:x="265006" fg:w="29"/><text x="94.9467%" y="6303.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (102 samples, 0.04%)</title><rect x="94.7071%" y="6341" width="0.0364%" height="15" fill="rgb(207,212,28)" fg:x="265035" fg:w="102"/><text x="94.9571%" y="6351.50"></text></g><g><title>`0x7FF97E69CC6F (42 samples, 0.02%)</title><rect x="94.8465%" y="6277" width="0.0150%" height="15" fill="rgb(220,130,25)" fg:x="265425" fg:w="42"/><text x="95.0965%" y="6287.50"></text></g><g><title>`0x7FF97E62AFF1 (249 samples, 0.09%)</title><rect x="94.7886%" y="6293" width="0.0890%" height="15" fill="rgb(205,55,34)" fg:x="265263" fg:w="249"/><text x="95.0386%" y="6303.50"></text></g><g><title>`0x7FF97E62D57C (35 samples, 0.01%)</title><rect x="94.9379%" y="6069" width="0.0125%" height="15" fill="rgb(237,54,35)" fg:x="265681" fg:w="35"/><text x="95.1879%" y="6079.50"></text></g><g><title>`0x7FF97E62D68A (59 samples, 0.02%)</title><rect x="94.9665%" y="6069" width="0.0211%" height="15" fill="rgb(208,67,23)" fg:x="265761" fg:w="59"/><text x="95.2165%" y="6079.50"></text></g><g><title>`0x7FF97E62CC9A (264 samples, 0.09%)</title><rect x="94.9365%" y="6085" width="0.0943%" height="15" fill="rgb(206,207,50)" fg:x="265677" fg:w="264"/><text x="95.1865%" y="6095.50"></text></g><g><title>`0x7FF97E62CC9A (109 samples, 0.04%)</title><rect x="95.1184%" y="6037" width="0.0389%" height="15" fill="rgb(213,211,42)" fg:x="266186" fg:w="109"/><text x="95.3684%" y="6047.50"></text></g><g><title>`0x7FF97E633505 (202 samples, 0.07%)</title><rect x="95.0930%" y="6053" width="0.0722%" height="15" fill="rgb(252,197,50)" fg:x="266115" fg:w="202"/><text x="95.3430%" y="6063.50"></text></g><g><title>`0x7FF97E696B96 (114 samples, 0.04%)</title><rect x="95.1674%" y="6037" width="0.0407%" height="15" fill="rgb(251,211,41)" fg:x="266323" fg:w="114"/><text x="95.4174%" y="6047.50"></text></g><g><title>`0x7FF97E633550 (199 samples, 0.07%)</title><rect x="95.1656%" y="6053" width="0.0711%" height="15" fill="rgb(229,211,5)" fg:x="266318" fg:w="199"/><text x="95.4156%" y="6063.50"></text></g><g><title>`0x7FF97E69CC6F (28 samples, 0.01%)</title><rect x="95.2513%" y="6021" width="0.0100%" height="15" fill="rgb(239,36,31)" fg:x="266558" fg:w="28"/><text x="95.5013%" y="6031.50"></text></g><g><title>`0x7FF97E69CCAF (49 samples, 0.02%)</title><rect x="95.2681%" y="6021" width="0.0175%" height="15" fill="rgb(248,67,31)" fg:x="266605" fg:w="49"/><text x="95.5181%" y="6031.50"></text></g><g><title>`0x7FF97E62AFF1 (135 samples, 0.05%)</title><rect x="95.2381%" y="6037" width="0.0482%" height="15" fill="rgb(249,55,44)" fg:x="266521" fg:w="135"/><text x="95.4881%" y="6047.50"></text></g><g><title>`0x7FF97E633562 (140 samples, 0.05%)</title><rect x="95.2370%" y="6053" width="0.0500%" height="15" fill="rgb(216,82,12)" fg:x="266518" fg:w="140"/><text x="95.4870%" y="6063.50"></text></g><g><title>`0x7FF97E6322C7 (670 samples, 0.24%)</title><rect x="95.0509%" y="6069" width="0.2394%" height="15" fill="rgb(242,174,1)" fg:x="265997" fg:w="670"/><text x="95.3009%" y="6079.50"></text></g><g><title>`0x7FF97E63218A (720 samples, 0.26%)</title><rect x="95.0491%" y="6085" width="0.2573%" height="15" fill="rgb(208,120,29)" fg:x="265992" fg:w="720"/><text x="95.2991%" y="6095.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (1,096 samples, 0.39%)</title><rect x="94.9315%" y="6133" width="0.3916%" height="15" fill="rgb(221,105,43)" fg:x="265663" fg:w="1096"/><text x="95.1815%" y="6143.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (1,096 samples, 0.39%)</title><rect x="94.9315%" y="6117" width="0.3916%" height="15" fill="rgb(234,124,22)" fg:x="265663" fg:w="1096"/><text x="95.1815%" y="6127.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (1,096 samples, 0.39%)</title><rect x="94.9315%" y="6101" width="0.3916%" height="15" fill="rgb(212,23,30)" fg:x="265663" fg:w="1096"/><text x="95.1815%" y="6111.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_mut_ptr (1,262 samples, 0.45%)</title><rect x="94.8886%" y="6277" width="0.4510%" height="15" fill="rgb(219,122,53)" fg:x="265543" fg:w="1262"/><text x="95.1386%" y="6287.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (1,262 samples, 0.45%)</title><rect x="94.8886%" y="6261" width="0.4510%" height="15" fill="rgb(248,84,24)" fg:x="265543" fg:w="1262"/><text x="95.1386%" y="6271.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (1,262 samples, 0.45%)</title><rect x="94.8886%" y="6245" width="0.4510%" height="15" fill="rgb(245,115,18)" fg:x="265543" fg:w="1262"/><text x="95.1386%" y="6255.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (1,262 samples, 0.45%)</title><rect x="94.8886%" y="6229" width="0.4510%" height="15" fill="rgb(227,176,51)" fg:x="265543" fg:w="1262"/><text x="95.1386%" y="6239.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::grow_one&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; (1,256 samples, 0.45%)</title><rect x="94.8908%" y="6213" width="0.4488%" height="15" fill="rgb(229,63,42)" fg:x="265549" fg:w="1256"/><text x="95.1408%" y="6223.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (1,228 samples, 0.44%)</title><rect x="94.9008%" y="6197" width="0.4388%" height="15" fill="rgb(247,202,24)" fg:x="265577" fg:w="1228"/><text x="95.1508%" y="6207.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (1,225 samples, 0.44%)</title><rect x="94.9019%" y="6181" width="0.4377%" height="15" fill="rgb(244,173,20)" fg:x="265580" fg:w="1225"/><text x="95.1519%" y="6191.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (1,201 samples, 0.43%)</title><rect x="94.9104%" y="6165" width="0.4292%" height="15" fill="rgb(242,81,47)" fg:x="265604" fg:w="1201"/><text x="95.1604%" y="6175.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (1,172 samples, 0.42%)</title><rect x="94.9208%" y="6149" width="0.4188%" height="15" fill="rgb(231,185,54)" fg:x="265633" fg:w="1172"/><text x="95.1708%" y="6159.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;, alloc::raw_vec::finish_grow::closure_env$0 (46 samples, 0.02%)</title><rect x="95.3232%" y="6133" width="0.0164%" height="15" fill="rgb(243,55,32)" fg:x="266759" fg:w="46"/><text x="95.5732%" y="6143.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (1,351 samples, 0.48%)</title><rect x="94.8797%" y="6293" width="0.4828%" height="15" fill="rgb(208,167,19)" fg:x="265518" fg:w="1351"/><text x="95.1297%" y="6303.50"></text></g><g><title>neural_network.exe`core::ptr::write(tuple$&lt;usize,usize&gt;*, tuple$ (64 samples, 0.02%)</title><rect x="95.3396%" y="6277" width="0.0229%" height="15" fill="rgb(231,72,35)" fg:x="266805" fg:w="64"/><text x="95.5896%" y="6287.50"></text></g><g><title>`0x7FF968D51381 (110 samples, 0.04%)</title><rect x="95.3725%" y="6229" width="0.0393%" height="15" fill="rgb(250,173,51)" fg:x="266897" fg:w="110"/><text x="95.6225%" y="6239.50"></text></g><g><title>`0x7FF97E62CC9A (116 samples, 0.04%)</title><rect x="95.4768%" y="6165" width="0.0415%" height="15" fill="rgb(209,5,22)" fg:x="267189" fg:w="116"/><text x="95.7268%" y="6175.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (293 samples, 0.10%)</title><rect x="95.4236%" y="6229" width="0.1047%" height="15" fill="rgb(250,174,19)" fg:x="267040" fg:w="293"/><text x="95.6736%" y="6239.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (293 samples, 0.10%)</title><rect x="95.4236%" y="6213" width="0.1047%" height="15" fill="rgb(217,3,49)" fg:x="267040" fg:w="293"/><text x="95.6736%" y="6223.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (293 samples, 0.10%)</title><rect x="95.4236%" y="6197" width="0.1047%" height="15" fill="rgb(218,225,5)" fg:x="267040" fg:w="293"/><text x="95.6736%" y="6207.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (293 samples, 0.10%)</title><rect x="95.4236%" y="6181" width="0.1047%" height="15" fill="rgb(236,89,11)" fg:x="267040" fg:w="293"/><text x="95.6736%" y="6191.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$11::clone(alloc::vec::Vec&lt;tuple$ (462 samples, 0.17%)</title><rect x="95.3643%" y="6293" width="0.1651%" height="15" fill="rgb(206,33,28)" fg:x="266874" fg:w="462"/><text x="95.6143%" y="6303.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (462 samples, 0.17%)</title><rect x="95.3643%" y="6277" width="0.1651%" height="15" fill="rgb(241,56,42)" fg:x="266874" fg:w="462"/><text x="95.6143%" y="6287.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$&lt;tuple$ (461 samples, 0.16%)</title><rect x="95.3646%" y="6261" width="0.1647%" height="15" fill="rgb(222,44,11)" fg:x="266875" fg:w="461"/><text x="95.6146%" y="6271.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$&lt;tuple$ (461 samples, 0.16%)</title><rect x="95.3646%" y="6245" width="0.1647%" height="15" fill="rgb(234,111,20)" fg:x="266875" fg:w="461"/><text x="95.6146%" y="6255.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (473 samples, 0.17%)</title><rect x="95.5436%" y="6277" width="0.1690%" height="15" fill="rgb(237,77,6)" fg:x="267376" fg:w="473"/><text x="95.7936%" y="6287.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (473 samples, 0.17%)</title><rect x="95.5436%" y="6261" width="0.1690%" height="15" fill="rgb(235,111,23)" fg:x="267376" fg:w="473"/><text x="95.7936%" y="6271.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (42 samples, 0.02%)</title><rect x="95.6976%" y="6245" width="0.0150%" height="15" fill="rgb(251,135,29)" fg:x="267807" fg:w="42"/><text x="95.9476%" y="6255.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$ (649 samples, 0.23%)</title><rect x="95.5293%" y="6293" width="0.2319%" height="15" fill="rgb(217,57,1)" fg:x="267336" fg:w="649"/><text x="95.7793%" y="6303.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;tuple$ (136 samples, 0.05%)</title><rect x="95.7127%" y="6277" width="0.0486%" height="15" fill="rgb(249,119,31)" fg:x="267849" fg:w="136"/><text x="95.9627%" y="6287.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;tuple$ (126 samples, 0.05%)</title><rect x="95.7162%" y="6261" width="0.0450%" height="15" fill="rgb(233,164,33)" fg:x="267859" fg:w="126"/><text x="95.9662%" y="6271.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, core::ops::range::Range (659 samples, 0.24%)</title><rect x="95.7613%" y="6293" width="0.2355%" height="15" fill="rgb(250,217,43)" fg:x="267985" fg:w="659"/><text x="96.0113%" y="6303.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (640 samples, 0.23%)</title><rect x="95.7680%" y="6277" width="0.2287%" height="15" fill="rgb(232,154,50)" fg:x="268004" fg:w="640"/><text x="96.0180%" y="6287.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (640 samples, 0.23%)</title><rect x="95.7680%" y="6261" width="0.2287%" height="15" fill="rgb(227,190,8)" fg:x="268004" fg:w="640"/><text x="96.0180%" y="6271.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (68 samples, 0.02%)</title><rect x="95.9724%" y="6245" width="0.0243%" height="15" fill="rgb(209,217,32)" fg:x="268576" fg:w="68"/><text x="96.2224%" y="6255.50"></text></g><g><title>`0x7FF97E62AFBA (44 samples, 0.02%)</title><rect x="96.0100%" y="6197" width="0.0157%" height="15" fill="rgb(243,203,50)" fg:x="268681" fg:w="44"/><text x="96.2600%" y="6207.50"></text></g><g><title>`0x7FF97E62AFE0 (64 samples, 0.02%)</title><rect x="96.0260%" y="6197" width="0.0229%" height="15" fill="rgb(232,152,27)" fg:x="268726" fg:w="64"/><text x="96.2760%" y="6207.50"></text></g><g><title>`0x7FF97E62BB70 (66 samples, 0.02%)</title><rect x="96.0489%" y="6181" width="0.0236%" height="15" fill="rgb(240,34,29)" fg:x="268790" fg:w="66"/><text x="96.2989%" y="6191.50"></text></g><g><title>`0x7FF97E62BB84 (74 samples, 0.03%)</title><rect x="96.0729%" y="6181" width="0.0264%" height="15" fill="rgb(215,185,52)" fg:x="268857" fg:w="74"/><text x="96.3229%" y="6191.50"></text></g><g><title>`0x7FF97E62C2B1 (55 samples, 0.02%)</title><rect x="96.1000%" y="6181" width="0.0197%" height="15" fill="rgb(240,89,49)" fg:x="268933" fg:w="55"/><text x="96.3500%" y="6191.50"></text></g><g><title>`0x7FF97E62C38A (64 samples, 0.02%)</title><rect x="96.1232%" y="6181" width="0.0229%" height="15" fill="rgb(225,12,52)" fg:x="268998" fg:w="64"/><text x="96.3732%" y="6191.50"></text></g><g><title>`0x7FF97E62AFF1 (344 samples, 0.12%)</title><rect x="96.0489%" y="6197" width="0.1229%" height="15" fill="rgb(239,128,45)" fg:x="268790" fg:w="344"/><text x="96.2989%" y="6207.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (488 samples, 0.17%)</title><rect x="96.0021%" y="6229" width="0.1744%" height="15" fill="rgb(211,78,47)" fg:x="268659" fg:w="488"/><text x="96.2521%" y="6239.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (488 samples, 0.17%)</title><rect x="96.0021%" y="6213" width="0.1744%" height="15" fill="rgb(232,31,21)" fg:x="268659" fg:w="488"/><text x="96.2521%" y="6223.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;tuple$ (509 samples, 0.18%)</title><rect x="95.9971%" y="6293" width="0.1819%" height="15" fill="rgb(222,168,14)" fg:x="268645" fg:w="509"/><text x="96.2471%" y="6303.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (509 samples, 0.18%)</title><rect x="95.9971%" y="6277" width="0.1819%" height="15" fill="rgb(209,128,24)" fg:x="268645" fg:w="509"/><text x="96.2471%" y="6287.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (509 samples, 0.18%)</title><rect x="95.9971%" y="6261" width="0.1819%" height="15" fill="rgb(249,35,13)" fg:x="268645" fg:w="509"/><text x="96.2471%" y="6271.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (495 samples, 0.18%)</title><rect x="96.0021%" y="6245" width="0.1769%" height="15" fill="rgb(218,7,2)" fg:x="268659" fg:w="495"/><text x="96.2521%" y="6255.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::swap(ref_mut$&lt;slice2$&lt;tuple$ (50 samples, 0.02%)</title><rect x="96.1811%" y="6197" width="0.0179%" height="15" fill="rgb(238,107,27)" fg:x="269160" fg:w="50"/><text x="96.4311%" y="6207.50"></text></g><g><title>neural_network.exe`core::ptr::swap(tuple$&lt;usize,usize&gt;*, tuple$ (29 samples, 0.01%)</title><rect x="96.1886%" y="6181" width="0.0104%" height="15" fill="rgb(217,88,38)" fg:x="269181" fg:w="29"/><text x="96.4386%" y="6191.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place (129 samples, 0.05%)</title><rect x="96.1790%" y="6293" width="0.0461%" height="15" fill="rgb(230,207,0)" fg:x="269154" fg:w="129"/><text x="96.4290%" y="6303.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (129 samples, 0.05%)</title><rect x="96.1790%" y="6277" width="0.0461%" height="15" fill="rgb(249,64,54)" fg:x="269154" fg:w="129"/><text x="96.4290%" y="6287.50"></text></g><g><title>neural_network.exe`alloc::rc::impl$30::drop(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (129 samples, 0.05%)</title><rect x="96.1790%" y="6261" width="0.0461%" height="15" fill="rgb(231,7,11)" fg:x="269154" fg:w="129"/><text x="96.4290%" y="6271.50"></text></g><g><title>neural_network.exe`alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;::inner (129 samples, 0.05%)</title><rect x="96.1790%" y="6245" width="0.0461%" height="15" fill="rgb(205,149,21)" fg:x="269154" fg:w="129"/><text x="96.4290%" y="6255.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;alloc::rc::RcBox&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt; &gt; &gt;::as_ref (129 samples, 0.05%)</title><rect x="96.1790%" y="6229" width="0.0461%" height="15" fill="rgb(215,126,34)" fg:x="269154" fg:w="129"/><text x="96.4290%" y="6239.50"></text></g><g><title>neural_network.exe`rand::seq::impl$0::shuffle&lt;tuple$&lt;usize,usize&gt;,rand::rngs::thread::ThreadRng&gt;(ref_mut$&lt;slice2$&lt;tuple$ (129 samples, 0.05%)</title><rect x="96.1790%" y="6213" width="0.0461%" height="15" fill="rgb(241,132,45)" fg:x="269154" fg:w="129"/><text x="96.4290%" y="6223.50"></text></g><g><title>neural_network.exe`rand::seq::gen_index (73 samples, 0.03%)</title><rect x="96.1990%" y="6197" width="0.0261%" height="15" fill="rgb(252,69,32)" fg:x="269210" fg:w="73"/><text x="96.4490%" y="6207.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen_range(rand::rngs::thread::ThreadRng*, core::ops::range::Range (72 samples, 0.03%)</title><rect x="96.1994%" y="6181" width="0.0257%" height="15" fill="rgb(232,204,19)" fg:x="269211" fg:w="72"/><text x="96.4494%" y="6191.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$6::sample_single(core::ops::range::Range (72 samples, 0.03%)</title><rect x="96.1994%" y="6165" width="0.0257%" height="15" fill="rgb(249,15,47)" fg:x="269211" fg:w="72"/><text x="96.4494%" y="6175.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single (72 samples, 0.03%)</title><rect x="96.1994%" y="6149" width="0.0257%" height="15" fill="rgb(209,227,23)" fg:x="269211" fg:w="72"/><text x="96.4494%" y="6159.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single_inclusive (72 samples, 0.03%)</title><rect x="96.1994%" y="6133" width="0.0257%" height="15" fill="rgb(248,92,24)" fg:x="269211" fg:w="72"/><text x="96.4494%" y="6143.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen (57 samples, 0.02%)</title><rect x="96.2047%" y="6117" width="0.0204%" height="15" fill="rgb(247,59,2)" fg:x="269226" fg:w="57"/><text x="96.4547%" y="6127.50"></text></g><g><title>neural_network.exe`rand::distributions::integer::impl$2::sample (57 samples, 0.02%)</title><rect x="96.2047%" y="6101" width="0.0204%" height="15" fill="rgb(221,30,5)" fg:x="269226" fg:w="57"/><text x="96.4547%" y="6111.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::impl$1::next_u32 (57 samples, 0.02%)</title><rect x="96.2047%" y="6085" width="0.0204%" height="15" fill="rgb(208,108,53)" fg:x="269226" fg:w="57"/><text x="96.4547%" y="6095.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$1::next_u32(rand::rngs::adapter::reseeding::ReseedingRng (57 samples, 0.02%)</title><rect x="96.2047%" y="6069" width="0.0204%" height="15" fill="rgb(211,183,26)" fg:x="269226" fg:w="57"/><text x="96.4547%" y="6079.50"></text></g><g><title>neural_network.exe`rand_core::block::impl$2::next_u32(rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore (57 samples, 0.02%)</title><rect x="96.2047%" y="6053" width="0.0204%" height="15" fill="rgb(232,132,4)" fg:x="269226" fg:w="57"/><text x="96.4547%" y="6063.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::contains(ref$&lt;slice2$&lt;tuple$&lt;usize,usize&gt; &gt; &gt;, tuple$ (211 samples, 0.08%)</title><rect x="96.2251%" y="6293" width="0.0754%" height="15" fill="rgb(253,128,37)" fg:x="269283" fg:w="211"/><text x="96.4751%" y="6303.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (211 samples, 0.08%)</title><rect x="96.2251%" y="6277" width="0.0754%" height="15" fill="rgb(221,58,24)" fg:x="269283" fg:w="211"/><text x="96.4751%" y="6287.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (211 samples, 0.08%)</title><rect x="96.2251%" y="6261" width="0.0754%" height="15" fill="rgb(230,54,45)" fg:x="269283" fg:w="211"/><text x="96.4751%" y="6271.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (72 samples, 0.03%)</title><rect x="96.3005%" y="6293" width="0.0257%" height="15" fill="rgb(254,21,18)" fg:x="269494" fg:w="72"/><text x="96.5505%" y="6303.50"></text></g><g><title>`0x7FF97E62AFF1 (125 samples, 0.04%)</title><rect x="96.3687%" y="6245" width="0.0447%" height="15" fill="rgb(221,108,0)" fg:x="269685" fg:w="125"/><text x="96.6187%" y="6255.50"></text></g><g><title>`0x7FF97E62D68A (54 samples, 0.02%)</title><rect x="96.4624%" y="6021" width="0.0193%" height="15" fill="rgb(206,95,1)" fg:x="269947" fg:w="54"/><text x="96.7124%" y="6031.50"></text></g><g><title>`0x7FF97E62CC9A (146 samples, 0.05%)</title><rect x="96.4481%" y="6037" width="0.0522%" height="15" fill="rgb(237,52,5)" fg:x="269907" fg:w="146"/><text x="96.6981%" y="6047.50"></text></g><g><title>`0x7FF97E62CC9A (111 samples, 0.04%)</title><rect x="96.5667%" y="5989" width="0.0397%" height="15" fill="rgb(218,150,34)" fg:x="270239" fg:w="111"/><text x="96.8167%" y="5999.50"></text></g><g><title>`0x7FF97E633505 (164 samples, 0.06%)</title><rect x="96.5524%" y="6005" width="0.0586%" height="15" fill="rgb(235,194,28)" fg:x="270199" fg:w="164"/><text x="96.8024%" y="6015.50"></text></g><g><title>`0x7FF97E696B96 (69 samples, 0.02%)</title><rect x="96.6121%" y="5989" width="0.0247%" height="15" fill="rgb(245,92,18)" fg:x="270366" fg:w="69"/><text x="96.8621%" y="5999.50"></text></g><g><title>`0x7FF97E633550 (131 samples, 0.05%)</title><rect x="96.6114%" y="6005" width="0.0468%" height="15" fill="rgb(253,203,53)" fg:x="270364" fg:w="131"/><text x="96.8614%" y="6015.50"></text></g><g><title>`0x7FF97E69CCAF (32 samples, 0.01%)</title><rect x="96.6846%" y="5973" width="0.0114%" height="15" fill="rgb(249,185,47)" fg:x="270569" fg:w="32"/><text x="96.9346%" y="5983.50"></text></g><g><title>`0x7FF97E62AFF1 (111 samples, 0.04%)</title><rect x="96.6625%" y="5989" width="0.0397%" height="15" fill="rgb(252,194,52)" fg:x="270507" fg:w="111"/><text x="96.9125%" y="5999.50"></text></g><g><title>`0x7FF97E633562 (125 samples, 0.04%)</title><rect x="96.6592%" y="6005" width="0.0447%" height="15" fill="rgb(210,53,36)" fg:x="270498" fg:w="125"/><text x="96.9092%" y="6015.50"></text></g><g><title>`0x7FF97E6322C7 (546 samples, 0.20%)</title><rect x="96.5110%" y="6021" width="0.1951%" height="15" fill="rgb(237,37,25)" fg:x="270083" fg:w="546"/><text x="96.7610%" y="6031.50"></text></g><g><title>`0x7FF97E63218A (591 samples, 0.21%)</title><rect x="96.5099%" y="6037" width="0.2112%" height="15" fill="rgb(242,116,27)" fg:x="270080" fg:w="591"/><text x="96.7599%" y="6047.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (801 samples, 0.29%)</title><rect x="96.4448%" y="6085" width="0.2862%" height="15" fill="rgb(213,185,26)" fg:x="269898" fg:w="801"/><text x="96.6948%" y="6095.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (801 samples, 0.29%)</title><rect x="96.4448%" y="6069" width="0.2862%" height="15" fill="rgb(225,204,8)" fg:x="269898" fg:w="801"/><text x="96.6948%" y="6079.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (801 samples, 0.29%)</title><rect x="96.4448%" y="6053" width="0.2862%" height="15" fill="rgb(254,111,37)" fg:x="269898" fg:w="801"/><text x="96.6948%" y="6063.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_mut_ptr (878 samples, 0.31%)</title><rect x="96.4216%" y="6229" width="0.3137%" height="15" fill="rgb(242,35,9)" fg:x="269833" fg:w="878"/><text x="96.6716%" y="6239.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (876 samples, 0.31%)</title><rect x="96.4223%" y="6213" width="0.3130%" height="15" fill="rgb(232,138,49)" fg:x="269835" fg:w="876"/><text x="96.6723%" y="6223.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (876 samples, 0.31%)</title><rect x="96.4223%" y="6197" width="0.3130%" height="15" fill="rgb(247,56,4)" fg:x="269835" fg:w="876"/><text x="96.6723%" y="6207.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (876 samples, 0.31%)</title><rect x="96.4223%" y="6181" width="0.3130%" height="15" fill="rgb(226,179,17)" fg:x="269835" fg:w="876"/><text x="96.6723%" y="6191.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::grow_one&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; (870 samples, 0.31%)</title><rect x="96.4245%" y="6165" width="0.3109%" height="15" fill="rgb(216,163,45)" fg:x="269841" fg:w="870"/><text x="96.6745%" y="6175.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (850 samples, 0.30%)</title><rect x="96.4316%" y="6149" width="0.3037%" height="15" fill="rgb(211,157,3)" fg:x="269861" fg:w="850"/><text x="96.6816%" y="6159.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (848 samples, 0.30%)</title><rect x="96.4323%" y="6133" width="0.3030%" height="15" fill="rgb(234,44,20)" fg:x="269863" fg:w="848"/><text x="96.6823%" y="6143.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (840 samples, 0.30%)</title><rect x="96.4352%" y="6117" width="0.3002%" height="15" fill="rgb(254,138,23)" fg:x="269871" fg:w="840"/><text x="96.6852%" y="6127.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (832 samples, 0.30%)</title><rect x="96.4381%" y="6101" width="0.2973%" height="15" fill="rgb(206,119,39)" fg:x="269879" fg:w="832"/><text x="96.6881%" y="6111.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (969 samples, 0.35%)</title><rect x="96.4159%" y="6245" width="0.3463%" height="15" fill="rgb(231,105,52)" fg:x="269817" fg:w="969"/><text x="96.6659%" y="6255.50"></text></g><g><title>neural_network.exe`core::ptr::write(tuple$&lt;usize,usize&gt;*, tuple$ (75 samples, 0.03%)</title><rect x="96.7354%" y="6229" width="0.0268%" height="15" fill="rgb(250,20,5)" fg:x="270711" fg:w="75"/><text x="96.9854%" y="6239.50"></text></g><g><title>`0x7FF968D51381 (97 samples, 0.03%)</title><rect x="96.7679%" y="6181" width="0.0347%" height="15" fill="rgb(215,198,30)" fg:x="270802" fg:w="97"/><text x="97.0179%" y="6191.50"></text></g><g><title>`0x7FF97E62CC9A (120 samples, 0.04%)</title><rect x="96.8404%" y="6117" width="0.0429%" height="15" fill="rgb(246,142,8)" fg:x="271005" fg:w="120"/><text x="97.0904%" y="6127.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (254 samples, 0.09%)</title><rect x="96.8093%" y="6181" width="0.0908%" height="15" fill="rgb(243,26,38)" fg:x="270918" fg:w="254"/><text x="97.0593%" y="6191.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (254 samples, 0.09%)</title><rect x="96.8093%" y="6165" width="0.0908%" height="15" fill="rgb(205,133,28)" fg:x="270918" fg:w="254"/><text x="97.0593%" y="6175.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (254 samples, 0.09%)</title><rect x="96.8093%" y="6149" width="0.0908%" height="15" fill="rgb(212,34,0)" fg:x="270918" fg:w="254"/><text x="97.0593%" y="6159.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (254 samples, 0.09%)</title><rect x="96.8093%" y="6133" width="0.0908%" height="15" fill="rgb(251,226,22)" fg:x="270918" fg:w="254"/><text x="97.0593%" y="6143.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$11::clone(alloc::vec::Vec&lt;tuple$ (386 samples, 0.14%)</title><rect x="96.7629%" y="6245" width="0.1379%" height="15" fill="rgb(252,119,9)" fg:x="270788" fg:w="386"/><text x="97.0129%" y="6255.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (386 samples, 0.14%)</title><rect x="96.7629%" y="6229" width="0.1379%" height="15" fill="rgb(213,150,50)" fg:x="270788" fg:w="386"/><text x="97.0129%" y="6239.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$&lt;tuple$ (385 samples, 0.14%)</title><rect x="96.7632%" y="6213" width="0.1376%" height="15" fill="rgb(212,24,39)" fg:x="270789" fg:w="385"/><text x="97.0132%" y="6223.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$&lt;tuple$ (385 samples, 0.14%)</title><rect x="96.7632%" y="6197" width="0.1376%" height="15" fill="rgb(213,46,39)" fg:x="270789" fg:w="385"/><text x="97.0132%" y="6207.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (347 samples, 0.12%)</title><rect x="96.9140%" y="6229" width="0.1240%" height="15" fill="rgb(239,106,12)" fg:x="271211" fg:w="347"/><text x="97.1640%" y="6239.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (347 samples, 0.12%)</title><rect x="96.9140%" y="6213" width="0.1240%" height="15" fill="rgb(249,229,21)" fg:x="271211" fg:w="347"/><text x="97.1640%" y="6223.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (39 samples, 0.01%)</title><rect x="97.0241%" y="6197" width="0.0139%" height="15" fill="rgb(212,158,3)" fg:x="271519" fg:w="39"/><text x="97.2741%" y="6207.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$ (469 samples, 0.17%)</title><rect x="96.9008%" y="6245" width="0.1676%" height="15" fill="rgb(253,26,48)" fg:x="271174" fg:w="469"/><text x="97.1508%" y="6255.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;tuple$ (85 samples, 0.03%)</title><rect x="97.0380%" y="6229" width="0.0304%" height="15" fill="rgb(238,178,20)" fg:x="271558" fg:w="85"/><text x="97.2880%" y="6239.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;tuple$ (77 samples, 0.03%)</title><rect x="97.0409%" y="6213" width="0.0275%" height="15" fill="rgb(208,86,15)" fg:x="271566" fg:w="77"/><text x="97.2909%" y="6223.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, core::ops::range::Range (557 samples, 0.20%)</title><rect x="97.0684%" y="6245" width="0.1990%" height="15" fill="rgb(239,42,53)" fg:x="271643" fg:w="557"/><text x="97.3184%" y="6255.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (541 samples, 0.19%)</title><rect x="97.0741%" y="6229" width="0.1933%" height="15" fill="rgb(245,226,8)" fg:x="271659" fg:w="541"/><text x="97.3241%" y="6239.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (541 samples, 0.19%)</title><rect x="97.0741%" y="6213" width="0.1933%" height="15" fill="rgb(216,176,32)" fg:x="271659" fg:w="541"/><text x="97.3241%" y="6223.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (62 samples, 0.02%)</title><rect x="97.2453%" y="6197" width="0.0222%" height="15" fill="rgb(231,186,21)" fg:x="272138" fg:w="62"/><text x="97.4953%" y="6207.50"></text></g><g><title>`0x7FF97E62AFBA (30 samples, 0.01%)</title><rect x="97.2767%" y="6149" width="0.0107%" height="15" fill="rgb(205,95,49)" fg:x="272226" fg:w="30"/><text x="97.5267%" y="6159.50"></text></g><g><title>`0x7FF97E62AFE0 (36 samples, 0.01%)</title><rect x="97.2874%" y="6149" width="0.0129%" height="15" fill="rgb(217,145,8)" fg:x="272256" fg:w="36"/><text x="97.5374%" y="6159.50"></text></g><g><title>`0x7FF97E62BB70 (45 samples, 0.02%)</title><rect x="97.3010%" y="6133" width="0.0161%" height="15" fill="rgb(239,144,48)" fg:x="272294" fg:w="45"/><text x="97.5510%" y="6143.50"></text></g><g><title>`0x7FF97E62BB84 (54 samples, 0.02%)</title><rect x="97.3171%" y="6133" width="0.0193%" height="15" fill="rgb(214,189,23)" fg:x="272339" fg:w="54"/><text x="97.5671%" y="6143.50"></text></g><g><title>`0x7FF97E62C2B1 (42 samples, 0.02%)</title><rect x="97.3371%" y="6133" width="0.0150%" height="15" fill="rgb(229,157,17)" fg:x="272395" fg:w="42"/><text x="97.5871%" y="6143.50"></text></g><g><title>`0x7FF97E62C38A (33 samples, 0.01%)</title><rect x="97.3586%" y="6133" width="0.0118%" height="15" fill="rgb(230,5,48)" fg:x="272455" fg:w="33"/><text x="97.6086%" y="6143.50"></text></g><g><title>`0x7FF97E62AFF1 (262 samples, 0.09%)</title><rect x="97.3003%" y="6149" width="0.0936%" height="15" fill="rgb(224,156,48)" fg:x="272292" fg:w="262"/><text x="97.5503%" y="6159.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (352 samples, 0.13%)</title><rect x="97.2710%" y="6181" width="0.1258%" height="15" fill="rgb(223,14,29)" fg:x="272210" fg:w="352"/><text x="97.5210%" y="6191.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (352 samples, 0.13%)</title><rect x="97.2710%" y="6165" width="0.1258%" height="15" fill="rgb(229,96,36)" fg:x="272210" fg:w="352"/><text x="97.5210%" y="6175.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;tuple$ (366 samples, 0.13%)</title><rect x="97.2678%" y="6245" width="0.1308%" height="15" fill="rgb(231,102,53)" fg:x="272201" fg:w="366"/><text x="97.5178%" y="6255.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (366 samples, 0.13%)</title><rect x="97.2678%" y="6229" width="0.1308%" height="15" fill="rgb(210,77,38)" fg:x="272201" fg:w="366"/><text x="97.5178%" y="6239.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (366 samples, 0.13%)</title><rect x="97.2678%" y="6213" width="0.1308%" height="15" fill="rgb(235,131,6)" fg:x="272201" fg:w="366"/><text x="97.5178%" y="6223.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (357 samples, 0.13%)</title><rect x="97.2710%" y="6197" width="0.1276%" height="15" fill="rgb(252,55,38)" fg:x="272210" fg:w="357"/><text x="97.5210%" y="6207.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place (70 samples, 0.03%)</title><rect x="97.3986%" y="6245" width="0.0250%" height="15" fill="rgb(246,38,14)" fg:x="272567" fg:w="70"/><text x="97.6486%" y="6255.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (70 samples, 0.03%)</title><rect x="97.3986%" y="6229" width="0.0250%" height="15" fill="rgb(242,27,5)" fg:x="272567" fg:w="70"/><text x="97.6486%" y="6239.50"></text></g><g><title>neural_network.exe`alloc::rc::impl$30::drop(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (70 samples, 0.03%)</title><rect x="97.3986%" y="6213" width="0.0250%" height="15" fill="rgb(228,65,35)" fg:x="272567" fg:w="70"/><text x="97.6486%" y="6223.50"></text></g><g><title>neural_network.exe`alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;::inner (70 samples, 0.03%)</title><rect x="97.3986%" y="6197" width="0.0250%" height="15" fill="rgb(245,93,11)" fg:x="272567" fg:w="70"/><text x="97.6486%" y="6207.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;alloc::rc::RcBox&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt; &gt; &gt;::as_ref (70 samples, 0.03%)</title><rect x="97.3986%" y="6181" width="0.0250%" height="15" fill="rgb(213,1,31)" fg:x="272567" fg:w="70"/><text x="97.6486%" y="6191.50"></text></g><g><title>neural_network.exe`rand::seq::impl$0::shuffle&lt;tuple$&lt;usize,usize&gt;,rand::rngs::thread::ThreadRng&gt;(ref_mut$&lt;slice2$&lt;tuple$ (70 samples, 0.03%)</title><rect x="97.3986%" y="6165" width="0.0250%" height="15" fill="rgb(237,205,14)" fg:x="272567" fg:w="70"/><text x="97.6486%" y="6175.50"></text></g><g><title>neural_network.exe`rand::seq::gen_index (39 samples, 0.01%)</title><rect x="97.4097%" y="6149" width="0.0139%" height="15" fill="rgb(232,118,45)" fg:x="272598" fg:w="39"/><text x="97.6597%" y="6159.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen_range(rand::rngs::thread::ThreadRng*, core::ops::range::Range (39 samples, 0.01%)</title><rect x="97.4097%" y="6133" width="0.0139%" height="15" fill="rgb(218,5,6)" fg:x="272598" fg:w="39"/><text x="97.6597%" y="6143.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$6::sample_single(core::ops::range::Range (39 samples, 0.01%)</title><rect x="97.4097%" y="6117" width="0.0139%" height="15" fill="rgb(251,87,51)" fg:x="272598" fg:w="39"/><text x="97.6597%" y="6127.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single (39 samples, 0.01%)</title><rect x="97.4097%" y="6101" width="0.0139%" height="15" fill="rgb(207,225,20)" fg:x="272598" fg:w="39"/><text x="97.6597%" y="6111.50"></text></g><g><title>neural_network.exe`rand::distributions::uniform::impl$39::sample_single_inclusive (39 samples, 0.01%)</title><rect x="97.4097%" y="6085" width="0.0139%" height="15" fill="rgb(222,78,54)" fg:x="272598" fg:w="39"/><text x="97.6597%" y="6095.50"></text></g><g><title>neural_network.exe`rand::rng::Rng::gen (35 samples, 0.01%)</title><rect x="97.4111%" y="6069" width="0.0125%" height="15" fill="rgb(232,85,16)" fg:x="272602" fg:w="35"/><text x="97.6611%" y="6079.50"></text></g><g><title>neural_network.exe`rand::distributions::integer::impl$2::sample (35 samples, 0.01%)</title><rect x="97.4111%" y="6053" width="0.0125%" height="15" fill="rgb(244,25,33)" fg:x="272602" fg:w="35"/><text x="97.6611%" y="6063.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::impl$1::next_u32 (35 samples, 0.01%)</title><rect x="97.4111%" y="6037" width="0.0125%" height="15" fill="rgb(233,24,36)" fg:x="272602" fg:w="35"/><text x="97.6611%" y="6047.50"></text></g><g><title>neural_network.exe`rand::rngs::adapter::reseeding::impl$1::next_u32(rand::rngs::adapter::reseeding::ReseedingRng (35 samples, 0.01%)</title><rect x="97.4111%" y="6021" width="0.0125%" height="15" fill="rgb(253,49,54)" fg:x="272602" fg:w="35"/><text x="97.6611%" y="6031.50"></text></g><g><title>neural_network.exe`rand_core::block::impl$2::next_u32(rand_core::block::BlockRng&lt;rand::rngs::adapter::reseeding::ReseedingCore (35 samples, 0.01%)</title><rect x="97.4111%" y="6005" width="0.0125%" height="15" fill="rgb(245,12,22)" fg:x="272602" fg:w="35"/><text x="97.6611%" y="6015.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::contains(ref$&lt;slice2$&lt;tuple$&lt;usize,usize&gt; &gt; &gt;, tuple$ (158 samples, 0.06%)</title><rect x="97.4236%" y="6245" width="0.0565%" height="15" fill="rgb(253,141,28)" fg:x="272637" fg:w="158"/><text x="97.6736%" y="6255.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (158 samples, 0.06%)</title><rect x="97.4236%" y="6229" width="0.0565%" height="15" fill="rgb(225,207,27)" fg:x="272637" fg:w="158"/><text x="97.6736%" y="6239.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (158 samples, 0.06%)</title><rect x="97.4236%" y="6213" width="0.0565%" height="15" fill="rgb(220,84,2)" fg:x="272637" fg:w="158"/><text x="97.6736%" y="6223.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (51 samples, 0.02%)</title><rect x="97.4801%" y="6245" width="0.0182%" height="15" fill="rgb(224,37,37)" fg:x="272795" fg:w="51"/><text x="97.7301%" y="6255.50"></text></g><g><title>`0x7FF97E62AFF1 (102 samples, 0.04%)</title><rect x="97.5154%" y="6197" width="0.0364%" height="15" fill="rgb(220,143,18)" fg:x="272894" fg:w="102"/><text x="97.7654%" y="6207.50"></text></g><g><title>`0x7FF97E62D68A (34 samples, 0.01%)</title><rect x="97.5887%" y="5973" width="0.0121%" height="15" fill="rgb(210,88,33)" fg:x="273099" fg:w="34"/><text x="97.8387%" y="5983.50"></text></g><g><title>`0x7FF97E62CC9A (107 samples, 0.04%)</title><rect x="97.5783%" y="5989" width="0.0382%" height="15" fill="rgb(219,87,51)" fg:x="273070" fg:w="107"/><text x="97.8283%" y="5999.50"></text></g><g><title>`0x7FF97E62CC9A (55 samples, 0.02%)</title><rect x="97.6612%" y="5941" width="0.0197%" height="15" fill="rgb(211,7,35)" fg:x="273302" fg:w="55"/><text x="97.9112%" y="5951.50"></text></g><g><title>`0x7FF97E633505 (95 samples, 0.03%)</title><rect x="97.6509%" y="5957" width="0.0339%" height="15" fill="rgb(232,77,2)" fg:x="273273" fg:w="95"/><text x="97.9009%" y="5967.50"></text></g><g><title>`0x7FF97E696B96 (51 samples, 0.02%)</title><rect x="97.6859%" y="5941" width="0.0182%" height="15" fill="rgb(249,94,25)" fg:x="273371" fg:w="51"/><text x="97.9359%" y="5951.50"></text></g><g><title>`0x7FF97E633550 (83 samples, 0.03%)</title><rect x="97.6855%" y="5957" width="0.0297%" height="15" fill="rgb(215,112,2)" fg:x="273370" fg:w="83"/><text x="97.9355%" y="5967.50"></text></g><g><title>`0x7FF97E633562 (66 samples, 0.02%)</title><rect x="97.7152%" y="5957" width="0.0236%" height="15" fill="rgb(226,115,48)" fg:x="273453" fg:w="66"/><text x="97.9652%" y="5967.50"></text></g><g><title>`0x7FF97E62AFF1 (66 samples, 0.02%)</title><rect x="97.7152%" y="5941" width="0.0236%" height="15" fill="rgb(249,196,10)" fg:x="273453" fg:w="66"/><text x="97.9652%" y="5951.50"></text></g><g><title>`0x7FF97E6322C7 (319 samples, 0.11%)</title><rect x="97.6262%" y="5973" width="0.1140%" height="15" fill="rgb(237,109,14)" fg:x="273204" fg:w="319"/><text x="97.8762%" y="5983.50"></text></g><g><title>`0x7FF97E63218A (335 samples, 0.12%)</title><rect x="97.6251%" y="5989" width="0.1197%" height="15" fill="rgb(217,103,53)" fg:x="273201" fg:w="335"/><text x="97.8751%" y="5999.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (493 samples, 0.18%)</title><rect x="97.5769%" y="6037" width="0.1762%" height="15" fill="rgb(244,137,9)" fg:x="273066" fg:w="493"/><text x="97.8269%" y="6047.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (493 samples, 0.18%)</title><rect x="97.5769%" y="6021" width="0.1762%" height="15" fill="rgb(227,201,3)" fg:x="273066" fg:w="493"/><text x="97.8269%" y="6031.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (492 samples, 0.18%)</title><rect x="97.5772%" y="6005" width="0.1758%" height="15" fill="rgb(243,94,6)" fg:x="273067" fg:w="492"/><text x="97.8272%" y="6015.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_mut_ptr (565 samples, 0.20%)</title><rect x="97.5569%" y="6181" width="0.2019%" height="15" fill="rgb(235,118,5)" fg:x="273010" fg:w="565"/><text x="97.8069%" y="6191.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (564 samples, 0.20%)</title><rect x="97.5572%" y="6165" width="0.2015%" height="15" fill="rgb(247,10,30)" fg:x="273011" fg:w="564"/><text x="97.8072%" y="6175.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (564 samples, 0.20%)</title><rect x="97.5572%" y="6149" width="0.2015%" height="15" fill="rgb(205,26,28)" fg:x="273011" fg:w="564"/><text x="97.8072%" y="6159.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (564 samples, 0.20%)</title><rect x="97.5572%" y="6133" width="0.2015%" height="15" fill="rgb(206,99,35)" fg:x="273011" fg:w="564"/><text x="97.8072%" y="6143.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::grow_one&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; (562 samples, 0.20%)</title><rect x="97.5580%" y="6117" width="0.2008%" height="15" fill="rgb(238,130,40)" fg:x="273013" fg:w="562"/><text x="97.8080%" y="6127.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (539 samples, 0.19%)</title><rect x="97.5662%" y="6101" width="0.1926%" height="15" fill="rgb(224,126,31)" fg:x="273036" fg:w="539"/><text x="97.8162%" y="6111.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (539 samples, 0.19%)</title><rect x="97.5662%" y="6085" width="0.1926%" height="15" fill="rgb(254,105,17)" fg:x="273036" fg:w="539"/><text x="97.8162%" y="6095.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (532 samples, 0.19%)</title><rect x="97.5687%" y="6069" width="0.1901%" height="15" fill="rgb(216,87,36)" fg:x="273043" fg:w="532"/><text x="97.8187%" y="6079.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (520 samples, 0.19%)</title><rect x="97.5730%" y="6053" width="0.1858%" height="15" fill="rgb(240,21,12)" fg:x="273055" fg:w="520"/><text x="97.8230%" y="6063.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (610 samples, 0.22%)</title><rect x="97.5533%" y="6197" width="0.2180%" height="15" fill="rgb(245,192,34)" fg:x="273000" fg:w="610"/><text x="97.8033%" y="6207.50"></text></g><g><title>neural_network.exe`core::ptr::write(tuple$&lt;usize,usize&gt;*, tuple$ (35 samples, 0.01%)</title><rect x="97.7588%" y="6181" width="0.0125%" height="15" fill="rgb(226,100,49)" fg:x="273575" fg:w="35"/><text x="98.0088%" y="6191.50"></text></g><g><title>`0x7FF968D51381 (45 samples, 0.02%)</title><rect x="97.7738%" y="6133" width="0.0161%" height="15" fill="rgb(245,188,27)" fg:x="273617" fg:w="45"/><text x="98.0238%" y="6143.50"></text></g><g><title>`0x7FF97E62CC9A (43 samples, 0.02%)</title><rect x="97.8074%" y="6069" width="0.0154%" height="15" fill="rgb(212,170,8)" fg:x="273711" fg:w="43"/><text x="98.0574%" y="6079.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$11::clone(alloc::vec::Vec&lt;tuple$ (166 samples, 0.06%)</title><rect x="97.7716%" y="6197" width="0.0593%" height="15" fill="rgb(217,113,29)" fg:x="273611" fg:w="166"/><text x="98.0216%" y="6207.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (166 samples, 0.06%)</title><rect x="97.7716%" y="6181" width="0.0593%" height="15" fill="rgb(237,30,3)" fg:x="273611" fg:w="166"/><text x="98.0216%" y="6191.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$&lt;tuple$ (165 samples, 0.06%)</title><rect x="97.7720%" y="6165" width="0.0590%" height="15" fill="rgb(227,19,28)" fg:x="273612" fg:w="165"/><text x="98.0220%" y="6175.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$&lt;tuple$ (165 samples, 0.06%)</title><rect x="97.7720%" y="6149" width="0.0590%" height="15" fill="rgb(239,172,45)" fg:x="273612" fg:w="165"/><text x="98.0220%" y="6159.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (107 samples, 0.04%)</title><rect x="97.7927%" y="6133" width="0.0382%" height="15" fill="rgb(254,55,39)" fg:x="273670" fg:w="107"/><text x="98.0427%" y="6143.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (107 samples, 0.04%)</title><rect x="97.7927%" y="6117" width="0.0382%" height="15" fill="rgb(249,208,12)" fg:x="273670" fg:w="107"/><text x="98.0427%" y="6127.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (107 samples, 0.04%)</title><rect x="97.7927%" y="6101" width="0.0382%" height="15" fill="rgb(240,52,13)" fg:x="273670" fg:w="107"/><text x="98.0427%" y="6111.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (107 samples, 0.04%)</title><rect x="97.7927%" y="6085" width="0.0382%" height="15" fill="rgb(252,149,13)" fg:x="273670" fg:w="107"/><text x="98.0427%" y="6095.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (187 samples, 0.07%)</title><rect x="97.8385%" y="6181" width="0.0668%" height="15" fill="rgb(232,81,48)" fg:x="273798" fg:w="187"/><text x="98.0885%" y="6191.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (187 samples, 0.07%)</title><rect x="97.8385%" y="6165" width="0.0668%" height="15" fill="rgb(222,144,2)" fg:x="273798" fg:w="187"/><text x="98.0885%" y="6175.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$ (256 samples, 0.09%)</title><rect x="97.8310%" y="6197" width="0.0915%" height="15" fill="rgb(216,81,32)" fg:x="273777" fg:w="256"/><text x="98.0810%" y="6207.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;tuple$ (48 samples, 0.02%)</title><rect x="97.9053%" y="6181" width="0.0172%" height="15" fill="rgb(244,78,51)" fg:x="273985" fg:w="48"/><text x="98.1553%" y="6191.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;tuple$ (44 samples, 0.02%)</title><rect x="97.9067%" y="6165" width="0.0157%" height="15" fill="rgb(217,66,21)" fg:x="273989" fg:w="44"/><text x="98.1567%" y="6175.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, core::ops::range::Range (342 samples, 0.12%)</title><rect x="97.9224%" y="6197" width="0.1222%" height="15" fill="rgb(247,101,42)" fg:x="274033" fg:w="342"/><text x="98.1724%" y="6207.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (333 samples, 0.12%)</title><rect x="97.9257%" y="6181" width="0.1190%" height="15" fill="rgb(227,81,39)" fg:x="274042" fg:w="333"/><text x="98.1757%" y="6191.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (333 samples, 0.12%)</title><rect x="97.9257%" y="6165" width="0.1190%" height="15" fill="rgb(220,223,44)" fg:x="274042" fg:w="333"/><text x="98.1757%" y="6175.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (34 samples, 0.01%)</title><rect x="98.0325%" y="6149" width="0.0121%" height="15" fill="rgb(205,218,2)" fg:x="274341" fg:w="34"/><text x="98.2825%" y="6159.50"></text></g><g><title>`0x7FF97E62BB70 (32 samples, 0.01%)</title><rect x="98.0600%" y="6085" width="0.0114%" height="15" fill="rgb(212,207,28)" fg:x="274418" fg:w="32"/><text x="98.3100%" y="6095.50"></text></g><g><title>`0x7FF97E62BB84 (35 samples, 0.01%)</title><rect x="98.0714%" y="6085" width="0.0125%" height="15" fill="rgb(224,12,41)" fg:x="274450" fg:w="35"/><text x="98.3214%" y="6095.50"></text></g><g><title>`0x7FF97E62AFF1 (147 samples, 0.05%)</title><rect x="98.0600%" y="6101" width="0.0525%" height="15" fill="rgb(216,118,12)" fg:x="274418" fg:w="147"/><text x="98.3100%" y="6111.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (191 samples, 0.07%)</title><rect x="98.0468%" y="6133" width="0.0683%" height="15" fill="rgb(252,97,46)" fg:x="274381" fg:w="191"/><text x="98.2968%" y="6143.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (191 samples, 0.07%)</title><rect x="98.0468%" y="6117" width="0.0683%" height="15" fill="rgb(244,206,19)" fg:x="274381" fg:w="191"/><text x="98.2968%" y="6127.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;tuple$ (199 samples, 0.07%)</title><rect x="98.0446%" y="6197" width="0.0711%" height="15" fill="rgb(231,84,31)" fg:x="274375" fg:w="199"/><text x="98.2946%" y="6207.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (199 samples, 0.07%)</title><rect x="98.0446%" y="6181" width="0.0711%" height="15" fill="rgb(244,133,0)" fg:x="274375" fg:w="199"/><text x="98.2946%" y="6191.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (199 samples, 0.07%)</title><rect x="98.0446%" y="6165" width="0.0711%" height="15" fill="rgb(223,15,50)" fg:x="274375" fg:w="199"/><text x="98.2946%" y="6175.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (193 samples, 0.07%)</title><rect x="98.0468%" y="6149" width="0.0690%" height="15" fill="rgb(250,118,49)" fg:x="274381" fg:w="193"/><text x="98.2968%" y="6159.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place (49 samples, 0.02%)</title><rect x="98.1158%" y="6197" width="0.0175%" height="15" fill="rgb(248,25,38)" fg:x="274574" fg:w="49"/><text x="98.3658%" y="6207.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (49 samples, 0.02%)</title><rect x="98.1158%" y="6181" width="0.0175%" height="15" fill="rgb(215,70,14)" fg:x="274574" fg:w="49"/><text x="98.3658%" y="6191.50"></text></g><g><title>neural_network.exe`alloc::rc::impl$30::drop(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (49 samples, 0.02%)</title><rect x="98.1158%" y="6165" width="0.0175%" height="15" fill="rgb(215,28,15)" fg:x="274574" fg:w="49"/><text x="98.3658%" y="6175.50"></text></g><g><title>neural_network.exe`alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;::inner (49 samples, 0.02%)</title><rect x="98.1158%" y="6149" width="0.0175%" height="15" fill="rgb(243,6,28)" fg:x="274574" fg:w="49"/><text x="98.3658%" y="6159.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;alloc::rc::RcBox&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt; &gt; &gt;::as_ref (49 samples, 0.02%)</title><rect x="98.1158%" y="6133" width="0.0175%" height="15" fill="rgb(222,130,1)" fg:x="274574" fg:w="49"/><text x="98.3658%" y="6143.50"></text></g><g><title>neural_network.exe`rand::seq::impl$0::shuffle&lt;tuple$&lt;usize,usize&gt;,rand::rngs::thread::ThreadRng&gt;(ref_mut$&lt;slice2$&lt;tuple$ (49 samples, 0.02%)</title><rect x="98.1158%" y="6117" width="0.0175%" height="15" fill="rgb(236,166,44)" fg:x="274574" fg:w="49"/><text x="98.3658%" y="6127.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::contains(ref$&lt;slice2$&lt;tuple$&lt;usize,usize&gt; &gt; &gt;, tuple$ (85 samples, 0.03%)</title><rect x="98.1333%" y="6197" width="0.0304%" height="15" fill="rgb(221,108,14)" fg:x="274623" fg:w="85"/><text x="98.3833%" y="6207.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (85 samples, 0.03%)</title><rect x="98.1333%" y="6181" width="0.0304%" height="15" fill="rgb(252,3,45)" fg:x="274623" fg:w="85"/><text x="98.3833%" y="6191.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (85 samples, 0.03%)</title><rect x="98.1333%" y="6165" width="0.0304%" height="15" fill="rgb(237,68,30)" fg:x="274623" fg:w="85"/><text x="98.3833%" y="6175.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::next(core::slice::iter::Iter&lt;tuple$ (33 samples, 0.01%)</title><rect x="98.1636%" y="6197" width="0.0118%" height="15" fill="rgb(211,79,22)" fg:x="274708" fg:w="33"/><text x="98.4136%" y="6207.50"></text></g><g><title>`0x7FF97E62AFF1 (48 samples, 0.02%)</title><rect x="98.1894%" y="6149" width="0.0172%" height="15" fill="rgb(252,185,21)" fg:x="274780" fg:w="48"/><text x="98.4394%" y="6159.50"></text></g><g><title>`0x7FF97E62CC9A (64 samples, 0.02%)</title><rect x="98.2194%" y="5941" width="0.0229%" height="15" fill="rgb(225,189,26)" fg:x="274864" fg:w="64"/><text x="98.4694%" y="5951.50"></text></g><g><title>`0x7FF97E62CC9A (34 samples, 0.01%)</title><rect x="98.2641%" y="5893" width="0.0121%" height="15" fill="rgb(241,30,40)" fg:x="274989" fg:w="34"/><text x="98.5141%" y="5903.50"></text></g><g><title>`0x7FF97E633505 (56 samples, 0.02%)</title><rect x="98.2583%" y="5909" width="0.0200%" height="15" fill="rgb(235,215,44)" fg:x="274973" fg:w="56"/><text x="98.5083%" y="5919.50"></text></g><g><title>`0x7FF97E633550 (40 samples, 0.01%)</title><rect x="98.2783%" y="5909" width="0.0143%" height="15" fill="rgb(205,8,29)" fg:x="275029" fg:w="40"/><text x="98.5283%" y="5919.50"></text></g><g><title>`0x7FF97E62AFF1 (62 samples, 0.02%)</title><rect x="98.2930%" y="5893" width="0.0222%" height="15" fill="rgb(241,137,42)" fg:x="275070" fg:w="62"/><text x="98.5430%" y="5903.50"></text></g><g><title>`0x7FF97E633562 (63 samples, 0.02%)</title><rect x="98.2930%" y="5909" width="0.0225%" height="15" fill="rgb(237,155,2)" fg:x="275070" fg:w="63"/><text x="98.5430%" y="5919.50"></text></g><g><title>`0x7FF97E6322C7 (194 samples, 0.07%)</title><rect x="98.2469%" y="5925" width="0.0693%" height="15" fill="rgb(245,29,42)" fg:x="274941" fg:w="194"/><text x="98.4969%" y="5935.50"></text></g><g><title>`0x7FF97E63218A (203 samples, 0.07%)</title><rect x="98.2469%" y="5941" width="0.0725%" height="15" fill="rgb(234,101,35)" fg:x="274941" fg:w="203"/><text x="98.4969%" y="5951.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (288 samples, 0.10%)</title><rect x="98.2190%" y="5989" width="0.1029%" height="15" fill="rgb(228,64,37)" fg:x="274863" fg:w="288"/><text x="98.4690%" y="5999.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (288 samples, 0.10%)</title><rect x="98.2190%" y="5973" width="0.1029%" height="15" fill="rgb(217,214,36)" fg:x="274863" fg:w="288"/><text x="98.4690%" y="5983.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (288 samples, 0.10%)</title><rect x="98.2190%" y="5957" width="0.1029%" height="15" fill="rgb(243,70,3)" fg:x="274863" fg:w="288"/><text x="98.4690%" y="5967.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_mut_ptr (322 samples, 0.12%)</title><rect x="98.2087%" y="6133" width="0.1151%" height="15" fill="rgb(253,158,52)" fg:x="274834" fg:w="322"/><text x="98.4587%" y="6143.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (322 samples, 0.12%)</title><rect x="98.2087%" y="6117" width="0.1151%" height="15" fill="rgb(234,111,54)" fg:x="274834" fg:w="322"/><text x="98.4587%" y="6127.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (322 samples, 0.12%)</title><rect x="98.2087%" y="6101" width="0.1151%" height="15" fill="rgb(217,70,32)" fg:x="274834" fg:w="322"/><text x="98.4587%" y="6111.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (322 samples, 0.12%)</title><rect x="98.2087%" y="6085" width="0.1151%" height="15" fill="rgb(234,18,33)" fg:x="274834" fg:w="322"/><text x="98.4587%" y="6095.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::grow_one&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; (318 samples, 0.11%)</title><rect x="98.2101%" y="6069" width="0.1136%" height="15" fill="rgb(234,12,49)" fg:x="274838" fg:w="318"/><text x="98.4601%" y="6079.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (309 samples, 0.11%)</title><rect x="98.2133%" y="6053" width="0.1104%" height="15" fill="rgb(236,10,21)" fg:x="274847" fg:w="309"/><text x="98.4633%" y="6063.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (309 samples, 0.11%)</title><rect x="98.2133%" y="6037" width="0.1104%" height="15" fill="rgb(248,182,45)" fg:x="274847" fg:w="309"/><text x="98.4633%" y="6047.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (305 samples, 0.11%)</title><rect x="98.2147%" y="6021" width="0.1090%" height="15" fill="rgb(217,95,36)" fg:x="274851" fg:w="305"/><text x="98.4647%" y="6031.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (302 samples, 0.11%)</title><rect x="98.2158%" y="6005" width="0.1079%" height="15" fill="rgb(212,110,31)" fg:x="274854" fg:w="302"/><text x="98.4658%" y="6015.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (348 samples, 0.12%)</title><rect x="98.2065%" y="6149" width="0.1244%" height="15" fill="rgb(206,32,53)" fg:x="274828" fg:w="348"/><text x="98.4565%" y="6159.50"></text></g><g><title>`0x7FF97E62CC9A (38 samples, 0.01%)</title><rect x="98.3512%" y="6021" width="0.0136%" height="15" fill="rgb(246,141,37)" fg:x="275233" fg:w="38"/><text x="98.6012%" y="6031.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (64 samples, 0.02%)</title><rect x="98.3448%" y="6085" width="0.0229%" height="15" fill="rgb(219,16,7)" fg:x="275215" fg:w="64"/><text x="98.5948%" y="6095.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::with_capacity_in (64 samples, 0.02%)</title><rect x="98.3448%" y="6069" width="0.0229%" height="15" fill="rgb(230,205,45)" fg:x="275215" fg:w="64"/><text x="98.5948%" y="6079.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (64 samples, 0.02%)</title><rect x="98.3448%" y="6053" width="0.0229%" height="15" fill="rgb(231,43,49)" fg:x="275215" fg:w="64"/><text x="98.5948%" y="6063.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (64 samples, 0.02%)</title><rect x="98.3448%" y="6037" width="0.0229%" height="15" fill="rgb(212,106,34)" fg:x="275215" fg:w="64"/><text x="98.5948%" y="6047.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$11::clone(alloc::vec::Vec&lt;tuple$ (104 samples, 0.04%)</title><rect x="98.3309%" y="6149" width="0.0372%" height="15" fill="rgb(206,83,17)" fg:x="275176" fg:w="104"/><text x="98.5809%" y="6159.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (104 samples, 0.04%)</title><rect x="98.3309%" y="6133" width="0.0372%" height="15" fill="rgb(244,154,49)" fg:x="275176" fg:w="104"/><text x="98.5809%" y="6143.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$&lt;tuple$ (104 samples, 0.04%)</title><rect x="98.3309%" y="6117" width="0.0372%" height="15" fill="rgb(244,149,49)" fg:x="275176" fg:w="104"/><text x="98.5809%" y="6127.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$&lt;tuple$ (104 samples, 0.04%)</title><rect x="98.3309%" y="6101" width="0.0372%" height="15" fill="rgb(227,134,18)" fg:x="275176" fg:w="104"/><text x="98.5809%" y="6111.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (114 samples, 0.04%)</title><rect x="98.3713%" y="6133" width="0.0407%" height="15" fill="rgb(237,116,36)" fg:x="275289" fg:w="114"/><text x="98.6213%" y="6143.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (114 samples, 0.04%)</title><rect x="98.3713%" y="6117" width="0.0407%" height="15" fill="rgb(205,129,40)" fg:x="275289" fg:w="114"/><text x="98.6213%" y="6127.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$ (154 samples, 0.06%)</title><rect x="98.3680%" y="6149" width="0.0550%" height="15" fill="rgb(236,178,4)" fg:x="275280" fg:w="154"/><text x="98.6180%" y="6159.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$0::index(ref$&lt;slice2$&lt;tuple$ (31 samples, 0.01%)</title><rect x="98.4120%" y="6133" width="0.0111%" height="15" fill="rgb(251,76,53)" fg:x="275403" fg:w="31"/><text x="98.6620%" y="6143.50"></text></g><g><title>neural_network.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$&lt;tuple$ (30 samples, 0.01%)</title><rect x="98.4123%" y="6117" width="0.0107%" height="15" fill="rgb(242,92,40)" fg:x="275404" fg:w="30"/><text x="98.6623%" y="6127.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, core::ops::range::Range (167 samples, 0.06%)</title><rect x="98.4231%" y="6149" width="0.0597%" height="15" fill="rgb(209,45,30)" fg:x="275434" fg:w="167"/><text x="98.6731%" y="6159.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (164 samples, 0.06%)</title><rect x="98.4241%" y="6133" width="0.0586%" height="15" fill="rgb(218,157,36)" fg:x="275437" fg:w="164"/><text x="98.6741%" y="6143.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (164 samples, 0.06%)</title><rect x="98.4241%" y="6117" width="0.0586%" height="15" fill="rgb(222,186,16)" fg:x="275437" fg:w="164"/><text x="98.6741%" y="6127.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (103 samples, 0.04%)</title><rect x="98.4849%" y="6085" width="0.0368%" height="15" fill="rgb(254,72,35)" fg:x="275607" fg:w="103"/><text x="98.7349%" y="6095.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (103 samples, 0.04%)</title><rect x="98.4849%" y="6069" width="0.0368%" height="15" fill="rgb(224,25,35)" fg:x="275607" fg:w="103"/><text x="98.7349%" y="6079.50"></text></g><g><title>`0x7FF97E62AFF1 (83 samples, 0.03%)</title><rect x="98.4920%" y="6053" width="0.0297%" height="15" fill="rgb(206,135,52)" fg:x="275627" fg:w="83"/><text x="98.7420%" y="6063.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;tuple$ (110 samples, 0.04%)</title><rect x="98.4827%" y="6149" width="0.0393%" height="15" fill="rgb(229,174,47)" fg:x="275601" fg:w="110"/><text x="98.7327%" y="6159.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (110 samples, 0.04%)</title><rect x="98.4827%" y="6133" width="0.0393%" height="15" fill="rgb(242,184,21)" fg:x="275601" fg:w="110"/><text x="98.7327%" y="6143.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (110 samples, 0.04%)</title><rect x="98.4827%" y="6117" width="0.0393%" height="15" fill="rgb(213,22,45)" fg:x="275601" fg:w="110"/><text x="98.7327%" y="6127.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (104 samples, 0.04%)</title><rect x="98.4849%" y="6101" width="0.0372%" height="15" fill="rgb(237,81,54)" fg:x="275607" fg:w="104"/><text x="98.7349%" y="6111.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place (35 samples, 0.01%)</title><rect x="98.5220%" y="6149" width="0.0125%" height="15" fill="rgb(248,177,18)" fg:x="275711" fg:w="35"/><text x="98.7720%" y="6159.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (35 samples, 0.01%)</title><rect x="98.5220%" y="6133" width="0.0125%" height="15" fill="rgb(254,31,16)" fg:x="275711" fg:w="35"/><text x="98.7720%" y="6143.50"></text></g><g><title>neural_network.exe`alloc::rc::impl$30::drop(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (35 samples, 0.01%)</title><rect x="98.5220%" y="6117" width="0.0125%" height="15" fill="rgb(235,20,31)" fg:x="275711" fg:w="35"/><text x="98.7720%" y="6127.50"></text></g><g><title>neural_network.exe`alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;::inner (35 samples, 0.01%)</title><rect x="98.5220%" y="6101" width="0.0125%" height="15" fill="rgb(240,56,43)" fg:x="275711" fg:w="35"/><text x="98.7720%" y="6111.50"></text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;alloc::rc::RcBox&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt; &gt; &gt;::as_ref (35 samples, 0.01%)</title><rect x="98.5220%" y="6085" width="0.0125%" height="15" fill="rgb(237,197,51)" fg:x="275711" fg:w="35"/><text x="98.7720%" y="6095.50"></text></g><g><title>neural_network.exe`rand::seq::impl$0::shuffle&lt;tuple$&lt;usize,usize&gt;,rand::rngs::thread::ThreadRng&gt;(ref_mut$&lt;slice2$&lt;tuple$ (35 samples, 0.01%)</title><rect x="98.5220%" y="6069" width="0.0125%" height="15" fill="rgb(241,162,44)" fg:x="275711" fg:w="35"/><text x="98.7720%" y="6079.50"></text></g><g><title>neural_network.exe`core::slice::impl$0::contains(ref$&lt;slice2$&lt;tuple$&lt;usize,usize&gt; &gt; &gt;, tuple$ (49 samples, 0.02%)</title><rect x="98.5346%" y="6149" width="0.0175%" height="15" fill="rgb(224,23,20)" fg:x="275746" fg:w="49"/><text x="98.7846%" y="6159.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (49 samples, 0.02%)</title><rect x="98.5346%" y="6133" width="0.0175%" height="15" fill="rgb(250,109,34)" fg:x="275746" fg:w="49"/><text x="98.7846%" y="6143.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (49 samples, 0.02%)</title><rect x="98.5346%" y="6117" width="0.0175%" height="15" fill="rgb(214,175,50)" fg:x="275746" fg:w="49"/><text x="98.7846%" y="6127.50"></text></g><g><title>`0x7FF97E62AFF1 (34 samples, 0.01%)</title><rect x="98.5617%" y="6101" width="0.0121%" height="15" fill="rgb(213,182,5)" fg:x="275822" fg:w="34"/><text x="98.8117%" y="6111.50"></text></g><g><title>`0x7FF97E62CC9A (37 samples, 0.01%)</title><rect x="98.5796%" y="5893" width="0.0132%" height="15" fill="rgb(209,199,19)" fg:x="275872" fg:w="37"/><text x="98.8296%" y="5903.50"></text></g><g><title>`0x7FF97E6322C7 (41 samples, 0.01%)</title><rect x="98.5939%" y="5877" width="0.0147%" height="15" fill="rgb(236,224,42)" fg:x="275912" fg:w="41"/><text x="98.8439%" y="5887.50"></text></g><g><title>`0x7FF97E63218A (44 samples, 0.02%)</title><rect x="98.5939%" y="5893" width="0.0157%" height="15" fill="rgb(246,226,29)" fg:x="275912" fg:w="44"/><text x="98.8439%" y="5903.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (89 samples, 0.03%)</title><rect x="98.5796%" y="5941" width="0.0318%" height="15" fill="rgb(227,223,11)" fg:x="275872" fg:w="89"/><text x="98.8296%" y="5951.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (89 samples, 0.03%)</title><rect x="98.5796%" y="5925" width="0.0318%" height="15" fill="rgb(219,7,51)" fg:x="275872" fg:w="89"/><text x="98.8296%" y="5935.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (89 samples, 0.03%)</title><rect x="98.5796%" y="5909" width="0.0318%" height="15" fill="rgb(245,167,10)" fg:x="275872" fg:w="89"/><text x="98.8296%" y="5919.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_mut_ptr (104 samples, 0.04%)</title><rect x="98.5757%" y="6085" width="0.0372%" height="15" fill="rgb(237,224,16)" fg:x="275861" fg:w="104"/><text x="98.8257%" y="6095.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (103 samples, 0.04%)</title><rect x="98.5760%" y="6069" width="0.0368%" height="15" fill="rgb(226,132,13)" fg:x="275862" fg:w="103"/><text x="98.8260%" y="6079.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (103 samples, 0.04%)</title><rect x="98.5760%" y="6053" width="0.0368%" height="15" fill="rgb(214,140,3)" fg:x="275862" fg:w="103"/><text x="98.8260%" y="6063.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (103 samples, 0.04%)</title><rect x="98.5760%" y="6037" width="0.0368%" height="15" fill="rgb(221,177,4)" fg:x="275862" fg:w="103"/><text x="98.8260%" y="6047.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::grow_one&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; (101 samples, 0.04%)</title><rect x="98.5767%" y="6021" width="0.0361%" height="15" fill="rgb(238,139,3)" fg:x="275864" fg:w="101"/><text x="98.8267%" y="6031.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (99 samples, 0.04%)</title><rect x="98.5774%" y="6005" width="0.0354%" height="15" fill="rgb(216,17,39)" fg:x="275866" fg:w="99"/><text x="98.8274%" y="6015.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (99 samples, 0.04%)</title><rect x="98.5774%" y="5989" width="0.0354%" height="15" fill="rgb(238,120,9)" fg:x="275866" fg:w="99"/><text x="98.8274%" y="5999.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (98 samples, 0.04%)</title><rect x="98.5778%" y="5973" width="0.0350%" height="15" fill="rgb(244,92,53)" fg:x="275867" fg:w="98"/><text x="98.8278%" y="5983.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (95 samples, 0.03%)</title><rect x="98.5789%" y="5957" width="0.0339%" height="15" fill="rgb(224,148,33)" fg:x="275870" fg:w="95"/><text x="98.8289%" y="5967.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (117 samples, 0.04%)</title><rect x="98.5739%" y="6101" width="0.0418%" height="15" fill="rgb(243,6,36)" fg:x="275856" fg:w="117"/><text x="98.8239%" y="6111.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$11::clone(alloc::vec::Vec&lt;tuple$ (37 samples, 0.01%)</title><rect x="98.6157%" y="6101" width="0.0132%" height="15" fill="rgb(230,102,11)" fg:x="275973" fg:w="37"/><text x="98.8657%" y="6111.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (37 samples, 0.01%)</title><rect x="98.6157%" y="6085" width="0.0132%" height="15" fill="rgb(234,148,36)" fg:x="275973" fg:w="37"/><text x="98.8657%" y="6095.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$&lt;tuple$ (37 samples, 0.01%)</title><rect x="98.6157%" y="6069" width="0.0132%" height="15" fill="rgb(251,153,25)" fg:x="275973" fg:w="37"/><text x="98.8657%" y="6079.50"></text></g><g><title>neural_network.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$&lt;tuple$ (37 samples, 0.01%)</title><rect x="98.6157%" y="6053" width="0.0132%" height="15" fill="rgb(215,129,8)" fg:x="275973" fg:w="37"/><text x="98.8657%" y="6063.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (41 samples, 0.01%)</title><rect x="98.6300%" y="6085" width="0.0147%" height="15" fill="rgb(224,128,35)" fg:x="276013" fg:w="41"/><text x="98.8800%" y="6095.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (41 samples, 0.01%)</title><rect x="98.6300%" y="6069" width="0.0147%" height="15" fill="rgb(237,56,52)" fg:x="276013" fg:w="41"/><text x="98.8800%" y="6079.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$ (54 samples, 0.02%)</title><rect x="98.6289%" y="6101" width="0.0193%" height="15" fill="rgb(234,213,19)" fg:x="276010" fg:w="54"/><text x="98.8789%" y="6111.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, core::ops::range::Range (77 samples, 0.03%)</title><rect x="98.6482%" y="6101" width="0.0275%" height="15" fill="rgb(252,82,23)" fg:x="276064" fg:w="77"/><text x="98.8982%" y="6111.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (77 samples, 0.03%)</title><rect x="98.6482%" y="6085" width="0.0275%" height="15" fill="rgb(254,201,21)" fg:x="276064" fg:w="77"/><text x="98.8982%" y="6095.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (77 samples, 0.03%)</title><rect x="98.6482%" y="6069" width="0.0275%" height="15" fill="rgb(250,186,11)" fg:x="276064" fg:w="77"/><text x="98.8982%" y="6079.50"></text></g><g><title>`0x7FF97E62AFF1 (38 samples, 0.01%)</title><rect x="98.6789%" y="6005" width="0.0136%" height="15" fill="rgb(211,174,5)" fg:x="276150" fg:w="38"/><text x="98.9289%" y="6015.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (48 samples, 0.02%)</title><rect x="98.6757%" y="6037" width="0.0172%" height="15" fill="rgb(214,121,10)" fg:x="276141" fg:w="48"/><text x="98.9257%" y="6047.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (48 samples, 0.02%)</title><rect x="98.6757%" y="6021" width="0.0172%" height="15" fill="rgb(241,66,2)" fg:x="276141" fg:w="48"/><text x="98.9257%" y="6031.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;tuple$ (49 samples, 0.02%)</title><rect x="98.6757%" y="6101" width="0.0175%" height="15" fill="rgb(220,167,19)" fg:x="276141" fg:w="49"/><text x="98.9257%" y="6111.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (49 samples, 0.02%)</title><rect x="98.6757%" y="6085" width="0.0175%" height="15" fill="rgb(231,54,50)" fg:x="276141" fg:w="49"/><text x="98.9257%" y="6095.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (49 samples, 0.02%)</title><rect x="98.6757%" y="6069" width="0.0175%" height="15" fill="rgb(239,217,53)" fg:x="276141" fg:w="49"/><text x="98.9257%" y="6079.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (49 samples, 0.02%)</title><rect x="98.6757%" y="6053" width="0.0175%" height="15" fill="rgb(248,8,0)" fg:x="276141" fg:w="49"/><text x="98.9257%" y="6063.50"></text></g><g><title>`0x7FF97E6322C7 (29 samples, 0.01%)</title><rect x="98.7168%" y="5829" width="0.0104%" height="15" fill="rgb(229,118,37)" fg:x="276256" fg:w="29"/><text x="98.9668%" y="5839.50"></text></g><g><title>`0x7FF97E63218A (32 samples, 0.01%)</title><rect x="98.7168%" y="5845" width="0.0114%" height="15" fill="rgb(253,223,43)" fg:x="276256" fg:w="32"/><text x="98.9668%" y="5855.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::grow(alloc::alloc::Global*, core::ptr::non_null::NonNull (47 samples, 0.02%)</title><rect x="98.7125%" y="5893" width="0.0168%" height="15" fill="rgb(211,77,36)" fg:x="276244" fg:w="47"/><text x="98.9625%" y="5903.50"></text></g><g><title>neural_network.exe`alloc::alloc::Global::grow_impl(core::ptr::non_null::NonNull (47 samples, 0.02%)</title><rect x="98.7125%" y="5877" width="0.0168%" height="15" fill="rgb(219,3,53)" fg:x="276244" fg:w="47"/><text x="98.9625%" y="5887.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (47 samples, 0.02%)</title><rect x="98.7125%" y="5861" width="0.0168%" height="15" fill="rgb(244,45,42)" fg:x="276244" fg:w="47"/><text x="98.9625%" y="5871.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_mut_ptr (56 samples, 0.02%)</title><rect x="98.7100%" y="6037" width="0.0200%" height="15" fill="rgb(225,95,27)" fg:x="276237" fg:w="56"/><text x="98.9600%" y="6047.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (56 samples, 0.02%)</title><rect x="98.7100%" y="6021" width="0.0200%" height="15" fill="rgb(207,74,8)" fg:x="276237" fg:w="56"/><text x="98.9600%" y="6031.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (56 samples, 0.02%)</title><rect x="98.7100%" y="6005" width="0.0200%" height="15" fill="rgb(243,63,36)" fg:x="276237" fg:w="56"/><text x="98.9600%" y="6015.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (56 samples, 0.02%)</title><rect x="98.7100%" y="5989" width="0.0200%" height="15" fill="rgb(211,180,12)" fg:x="276237" fg:w="56"/><text x="98.9600%" y="5999.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::grow_one&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; (55 samples, 0.02%)</title><rect x="98.7104%" y="5973" width="0.0197%" height="15" fill="rgb(254,166,49)" fg:x="276238" fg:w="55"/><text x="98.9604%" y="5983.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (55 samples, 0.02%)</title><rect x="98.7104%" y="5957" width="0.0197%" height="15" fill="rgb(205,19,0)" fg:x="276238" fg:w="55"/><text x="98.9604%" y="5967.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (54 samples, 0.02%)</title><rect x="98.7107%" y="5941" width="0.0193%" height="15" fill="rgb(224,172,32)" fg:x="276239" fg:w="54"/><text x="98.9607%" y="5951.50"></text></g><g><title>neural_network.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (51 samples, 0.02%)</title><rect x="98.7118%" y="5925" width="0.0182%" height="15" fill="rgb(254,136,30)" fg:x="276242" fg:w="51"/><text x="98.9618%" y="5935.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (51 samples, 0.02%)</title><rect x="98.7118%" y="5909" width="0.0182%" height="15" fill="rgb(246,19,35)" fg:x="276242" fg:w="51"/><text x="98.9618%" y="5919.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::push(tuple$ (59 samples, 0.02%)</title><rect x="98.7100%" y="6053" width="0.0211%" height="15" fill="rgb(219,24,36)" fg:x="276237" fg:w="59"/><text x="98.9600%" y="6063.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$ (36 samples, 0.01%)</title><rect x="98.7397%" y="6053" width="0.0129%" height="15" fill="rgb(251,55,1)" fg:x="276320" fg:w="36"/><text x="98.9897%" y="6063.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$13::index(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, core::ops::range::Range (35 samples, 0.01%)</title><rect x="98.7525%" y="6053" width="0.0125%" height="15" fill="rgb(218,117,39)" fg:x="276356" fg:w="35"/><text x="99.0025%" y="6063.50"></text></g><g><title>neural_network.exe`core::slice::cmp::impl$10::slice_contains(tuple$&lt;usize,usize&gt;*, ref$&lt;slice2$&lt;tuple$ (35 samples, 0.01%)</title><rect x="98.7525%" y="6037" width="0.0125%" height="15" fill="rgb(248,169,11)" fg:x="276356" fg:w="35"/><text x="99.0025%" y="6047.50"></text></g><g><title>neural_network.exe`core::slice::iter::impl$182::any(core::slice::iter::Iter&lt;tuple$&lt;usize,usize&gt; &gt;*, core::slice::cmp::impl$10::slice_contains::closure_env$0&lt;tuple$ (35 samples, 0.01%)</title><rect x="98.7525%" y="6021" width="0.0125%" height="15" fill="rgb(244,40,44)" fg:x="276356" fg:w="35"/><text x="99.0025%" y="6031.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (85 samples, 0.03%)</title><rect x="98.7768%" y="6053" width="0.0304%" height="15" fill="rgb(234,62,37)" fg:x="276424" fg:w="85"/><text x="99.0268%" y="6063.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (85 samples, 0.03%)</title><rect x="98.7768%" y="6037" width="0.0304%" height="15" fill="rgb(207,117,42)" fg:x="276424" fg:w="85"/><text x="99.0268%" y="6047.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (85 samples, 0.03%)</title><rect x="98.7768%" y="6021" width="0.0304%" height="15" fill="rgb(213,43,2)" fg:x="276424" fg:w="85"/><text x="99.0268%" y="6031.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (290 samples, 0.10%)</title><rect x="98.7054%" y="6101" width="0.1036%" height="15" fill="rgb(244,202,51)" fg:x="276224" fg:w="290"/><text x="98.9554%" y="6111.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (290 samples, 0.10%)</title><rect x="98.7054%" y="6085" width="0.1036%" height="15" fill="rgb(253,174,46)" fg:x="276224" fg:w="290"/><text x="98.9554%" y="6095.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (290 samples, 0.10%)</title><rect x="98.7054%" y="6069" width="0.1036%" height="15" fill="rgb(251,23,1)" fg:x="276224" fg:w="290"/><text x="98.9554%" y="6079.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (707 samples, 0.25%)</title><rect x="98.5574%" y="6149" width="0.2526%" height="15" fill="rgb(253,26,1)" fg:x="275810" fg:w="707"/><text x="98.8074%" y="6159.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (707 samples, 0.25%)</title><rect x="98.5574%" y="6133" width="0.2526%" height="15" fill="rgb(216,89,31)" fg:x="275810" fg:w="707"/><text x="98.8074%" y="6143.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (707 samples, 0.25%)</title><rect x="98.5574%" y="6117" width="0.2526%" height="15" fill="rgb(209,109,5)" fg:x="275810" fg:w="707"/><text x="98.8074%" y="6127.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (1,778 samples, 0.64%)</title><rect x="98.1765%" y="6197" width="0.6353%" height="15" fill="rgb(229,63,13)" fg:x="274744" fg:w="1778"/><text x="98.4265%" y="6207.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (1,778 samples, 0.64%)</title><rect x="98.1765%" y="6181" width="0.6353%" height="15" fill="rgb(238,137,54)" fg:x="274744" fg:w="1778"/><text x="98.4265%" y="6191.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (1,778 samples, 0.64%)</title><rect x="98.1765%" y="6165" width="0.6353%" height="15" fill="rgb(228,1,9)" fg:x="274744" fg:w="1778"/><text x="98.4265%" y="6175.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (3,683 samples, 1.32%)</title><rect x="97.5004%" y="6245" width="1.3161%" height="15" fill="rgb(249,120,48)" fg:x="272852" fg:w="3683"/><text x="97.7504%" y="6255.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (3,683 samples, 1.32%)</title><rect x="97.5004%" y="6229" width="1.3161%" height="15" fill="rgb(209,72,36)" fg:x="272852" fg:w="3683"/><text x="97.7504%" y="6239.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (3,683 samples, 1.32%)</title><rect x="97.5004%" y="6213" width="1.3161%" height="15" fill="rgb(247,98,49)" fg:x="272852" fg:w="3683"/><text x="97.7504%" y="6223.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (6,996 samples, 2.50%)</title><rect x="96.3284%" y="6293" width="2.4999%" height="15" fill="rgb(233,75,36)" fg:x="269572" fg:w="6996"/><text x="96.5784%" y="6303.50">ne..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (6,996 samples, 2.50%)</title><rect x="96.3284%" y="6277" width="2.4999%" height="15" fill="rgb(225,14,24)" fg:x="269572" fg:w="6996"/><text x="96.5784%" y="6287.50">ne..</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (6,995 samples, 2.50%)</title><rect x="96.3287%" y="6261" width="2.4996%" height="15" fill="rgb(237,193,20)" fg:x="269573" fg:w="6995"/><text x="96.5787%" y="6271.50">ne..</text></g><g><title>neural_network.exe`rand::rngs::thread::thread_rng (34 samples, 0.01%)</title><rect x="98.8283%" y="6293" width="0.0121%" height="15" fill="rgb(239,122,19)" fg:x="276568" fg:w="34"/><text x="99.0783%" y="6303.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (11,469 samples, 4.10%)</title><rect x="94.7464%" y="6341" width="4.0983%" height="15" fill="rgb(231,220,10)" fg:x="265145" fg:w="11469"/><text x="94.9964%" y="6351.50">neur..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (11,469 samples, 4.10%)</title><rect x="94.7464%" y="6325" width="4.0983%" height="15" fill="rgb(220,66,15)" fg:x="265145" fg:w="11469"/><text x="94.9964%" y="6335.50">neur..</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (11,469 samples, 4.10%)</title><rect x="94.7464%" y="6309" width="4.0983%" height="15" fill="rgb(215,171,52)" fg:x="265145" fg:w="11469"/><text x="94.9964%" y="6319.50">neur..</text></g><g><title>neural_network.exe`rand::rngs::thread::thread_rng (55 samples, 0.02%)</title><rect x="98.8447%" y="6341" width="0.0197%" height="15" fill="rgb(241,169,50)" fg:x="276614" fg:w="55"/><text x="99.0947%" y="6351.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::with (41 samples, 0.01%)</title><rect x="98.8497%" y="6325" width="0.0147%" height="15" fill="rgb(236,189,0)" fg:x="276628" fg:w="41"/><text x="99.0997%" y="6335.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::try_with (41 samples, 0.01%)</title><rect x="98.8497%" y="6309" width="0.0147%" height="15" fill="rgb(217,147,20)" fg:x="276628" fg:w="41"/><text x="99.0997%" y="6319.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (18,261 samples, 6.53%)</title><rect x="92.3483%" y="6389" width="6.5254%" height="15" fill="rgb(206,188,39)" fg:x="258434" fg:w="18261"/><text x="92.5983%" y="6399.50">neural_ne..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (18,261 samples, 6.53%)</title><rect x="92.3483%" y="6373" width="6.5254%" height="15" fill="rgb(227,118,25)" fg:x="258434" fg:w="18261"/><text x="92.5983%" y="6383.50">neural_ne..</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (18,261 samples, 6.53%)</title><rect x="92.3483%" y="6357" width="6.5254%" height="15" fill="rgb(248,171,40)" fg:x="258434" fg:w="18261"/><text x="92.5983%" y="6367.50">neural_ne..</text></g><g><title>neural_network.exe`core::ops::function::FnOnce::call_once(rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure_env$0, enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (28 samples, 0.01%)</title><rect x="98.8783%" y="6341" width="0.0100%" height="15" fill="rgb(251,90,54)" fg:x="276708" fg:w="28"/><text x="99.1283%" y="6351.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure$0(rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure_env$0*, enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (28 samples, 0.01%)</title><rect x="98.8783%" y="6325" width="0.0100%" height="15" fill="rgb(234,11,46)" fg:x="276708" fg:w="28"/><text x="99.1283%" y="6335.50"></text></g><g><title>neural_network.exe`std::sys::thread_local::native::lazy::Storage&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;,tuple$&lt;&gt; &gt;::get_or_init(enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt; &gt; &gt; &gt; &gt;, alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; (*) (28 samples, 0.01%)</title><rect x="98.8783%" y="6309" width="0.0100%" height="15" fill="rgb(229,134,13)" fg:x="276708" fg:w="28"/><text x="99.1283%" y="6319.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::thread_rng (54 samples, 0.02%)</title><rect x="98.8737%" y="6389" width="0.0193%" height="15" fill="rgb(223,129,3)" fg:x="276695" fg:w="54"/><text x="99.1237%" y="6399.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::with (41 samples, 0.01%)</title><rect x="98.8783%" y="6373" width="0.0147%" height="15" fill="rgb(221,124,13)" fg:x="276708" fg:w="41"/><text x="99.1283%" y="6383.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::try_with (41 samples, 0.01%)</title><rect x="98.8783%" y="6357" width="0.0147%" height="15" fill="rgb(234,3,18)" fg:x="276708" fg:w="41"/><text x="99.1283%" y="6367.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (26,345 samples, 9.41%)</title><rect x="89.4893%" y="6437" width="9.4141%" height="15" fill="rgb(249,199,20)" fg:x="250433" fg:w="26345"/><text x="89.7393%" y="6447.50">neural_networ..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (26,345 samples, 9.41%)</title><rect x="89.4893%" y="6421" width="9.4141%" height="15" fill="rgb(224,134,6)" fg:x="250433" fg:w="26345"/><text x="89.7393%" y="6431.50">neural_networ..</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (26,345 samples, 9.41%)</title><rect x="89.4893%" y="6405" width="9.4141%" height="15" fill="rgb(254,83,26)" fg:x="250433" fg:w="26345"/><text x="89.7393%" y="6415.50">neural_networ..</text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (29 samples, 0.01%)</title><rect x="98.8930%" y="6389" width="0.0104%" height="15" fill="rgb(217,88,9)" fg:x="276749" fg:w="29"/><text x="99.1430%" y="6399.50"></text></g><g><title>neural_network.exe`core::ops::function::FnOnce::call_once(rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure_env$0, enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (40 samples, 0.01%)</title><rect x="98.9094%" y="6389" width="0.0143%" height="15" fill="rgb(225,73,2)" fg:x="276795" fg:w="40"/><text x="99.1594%" y="6399.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure$0(rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure_env$0*, enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (40 samples, 0.01%)</title><rect x="98.9094%" y="6373" width="0.0143%" height="15" fill="rgb(226,44,39)" fg:x="276795" fg:w="40"/><text x="99.1594%" y="6383.50"></text></g><g><title>neural_network.exe`std::sys::thread_local::native::lazy::Storage&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;,tuple$&lt;&gt; &gt;::get_or_init(enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt; &gt; &gt; &gt; &gt;, alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; (*) (40 samples, 0.01%)</title><rect x="98.9094%" y="6357" width="0.0143%" height="15" fill="rgb(228,53,17)" fg:x="276795" fg:w="40"/><text x="99.1594%" y="6367.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::thread_rng (77 samples, 0.03%)</title><rect x="98.9033%" y="6437" width="0.0275%" height="15" fill="rgb(212,27,27)" fg:x="276778" fg:w="77"/><text x="99.1533%" y="6447.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::with (60 samples, 0.02%)</title><rect x="98.9094%" y="6421" width="0.0214%" height="15" fill="rgb(241,50,6)" fg:x="276795" fg:w="60"/><text x="99.1594%" y="6431.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::try_with (60 samples, 0.02%)</title><rect x="98.9094%" y="6405" width="0.0214%" height="15" fill="rgb(225,28,51)" fg:x="276795" fg:w="60"/><text x="99.1594%" y="6415.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (37,342 samples, 13.34%)</title><rect x="85.6043%" y="6485" width="13.3437%" height="15" fill="rgb(215,33,16)" fg:x="239561" fg:w="37342"/><text x="85.8543%" y="6495.50">neural_network.exe`e..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (37,342 samples, 13.34%)</title><rect x="85.6043%" y="6469" width="13.3437%" height="15" fill="rgb(243,40,39)" fg:x="239561" fg:w="37342"/><text x="85.8543%" y="6479.50">neural_network.exe`e..</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (37,342 samples, 13.34%)</title><rect x="85.6043%" y="6453" width="13.3437%" height="15" fill="rgb(225,11,42)" fg:x="239561" fg:w="37342"/><text x="85.8543%" y="6463.50">neural_network.exe`n..</text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (48 samples, 0.02%)</title><rect x="98.9308%" y="6437" width="0.0172%" height="15" fill="rgb(241,220,38)" fg:x="276855" fg:w="48"/><text x="99.1808%" y="6447.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::dealloc (43 samples, 0.02%)</title><rect x="98.9326%" y="6421" width="0.0154%" height="15" fill="rgb(244,52,35)" fg:x="276860" fg:w="43"/><text x="99.1826%" y="6431.50"></text></g><g><title>neural_network.exe`core::ops::function::FnOnce::call_once(rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure_env$0, enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (44 samples, 0.02%)</title><rect x="98.9566%" y="6437" width="0.0157%" height="15" fill="rgb(246,42,46)" fg:x="276927" fg:w="44"/><text x="99.2066%" y="6447.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure$0(rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure_env$0*, enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (44 samples, 0.02%)</title><rect x="98.9566%" y="6421" width="0.0157%" height="15" fill="rgb(205,184,13)" fg:x="276927" fg:w="44"/><text x="99.2066%" y="6431.50"></text></g><g><title>neural_network.exe`std::sys::thread_local::native::lazy::Storage&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;,tuple$&lt;&gt; &gt;::get_or_init(enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt; &gt; &gt; &gt; &gt;, alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; (*) (44 samples, 0.02%)</title><rect x="98.9566%" y="6405" width="0.0157%" height="15" fill="rgb(209,48,36)" fg:x="276927" fg:w="44"/><text x="99.2066%" y="6415.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::thread_rng (82 samples, 0.03%)</title><rect x="98.9480%" y="6485" width="0.0293%" height="15" fill="rgb(244,34,51)" fg:x="276903" fg:w="82"/><text x="99.1980%" y="6495.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::with (58 samples, 0.02%)</title><rect x="98.9566%" y="6469" width="0.0207%" height="15" fill="rgb(221,107,33)" fg:x="276927" fg:w="58"/><text x="99.2066%" y="6479.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::try_with (58 samples, 0.02%)</title><rect x="98.9566%" y="6453" width="0.0207%" height="15" fill="rgb(224,203,12)" fg:x="276927" fg:w="58"/><text x="99.2066%" y="6463.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (49,826 samples, 17.80%)</title><rect x="81.1854%" y="6533" width="17.8047%" height="15" fill="rgb(230,215,18)" fg:x="227195" fg:w="49826"/><text x="81.4354%" y="6543.50">neural_network.exe`enum2$&lt;co..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (49,826 samples, 17.80%)</title><rect x="81.1854%" y="6517" width="17.8047%" height="15" fill="rgb(206,185,35)" fg:x="227195" fg:w="49826"/><text x="81.4354%" y="6527.50">neural_network.exe`enum2$&lt;co..</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (49,826 samples, 17.80%)</title><rect x="81.1854%" y="6501" width="17.8047%" height="15" fill="rgb(228,140,34)" fg:x="227195" fg:w="49826"/><text x="81.4354%" y="6511.50">neural_network.exe`neural_ne..</text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (36 samples, 0.01%)</title><rect x="98.9773%" y="6485" width="0.0129%" height="15" fill="rgb(208,93,13)" fg:x="276985" fg:w="36"/><text x="99.2273%" y="6495.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::dealloc (30 samples, 0.01%)</title><rect x="98.9794%" y="6469" width="0.0107%" height="15" fill="rgb(221,193,39)" fg:x="276991" fg:w="30"/><text x="99.2294%" y="6479.50"></text></g><g><title>neural_network.exe`core::ops::function::FnOnce::call_once(rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure_env$0, enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (54 samples, 0.02%)</title><rect x="98.9987%" y="6485" width="0.0193%" height="15" fill="rgb(241,132,34)" fg:x="277045" fg:w="54"/><text x="99.2487%" y="6495.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure$0(rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure_env$0*, enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (54 samples, 0.02%)</title><rect x="98.9987%" y="6469" width="0.0193%" height="15" fill="rgb(221,141,10)" fg:x="277045" fg:w="54"/><text x="99.2487%" y="6479.50"></text></g><g><title>neural_network.exe`std::sys::thread_local::native::lazy::Storage&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;,tuple$&lt;&gt; &gt;::get_or_init(enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt; &gt; &gt; &gt; &gt;, alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; (*) (54 samples, 0.02%)</title><rect x="98.9987%" y="6453" width="0.0193%" height="15" fill="rgb(226,90,31)" fg:x="277045" fg:w="54"/><text x="99.2487%" y="6463.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::thread_rng (93 samples, 0.03%)</title><rect x="98.9902%" y="6533" width="0.0332%" height="15" fill="rgb(243,75,5)" fg:x="277021" fg:w="93"/><text x="99.2402%" y="6543.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::with (69 samples, 0.02%)</title><rect x="98.9987%" y="6517" width="0.0247%" height="15" fill="rgb(227,156,21)" fg:x="277045" fg:w="69"/><text x="99.2487%" y="6527.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::try_with (69 samples, 0.02%)</title><rect x="98.9987%" y="6501" width="0.0247%" height="15" fill="rgb(250,195,8)" fg:x="277045" fg:w="69"/><text x="99.2487%" y="6511.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (64,655 samples, 23.10%)</title><rect x="75.9383%" y="6581" width="23.1037%" height="15" fill="rgb(220,134,5)" fg:x="212511" fg:w="64655"/><text x="76.1883%" y="6591.50">neural_network.exe`enum2$&lt;core::optio..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (64,655 samples, 23.10%)</title><rect x="75.9383%" y="6565" width="23.1037%" height="15" fill="rgb(246,106,34)" fg:x="212511" fg:w="64655"/><text x="76.1883%" y="6575.50">neural_network.exe`enum2$&lt;core::optio..</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (64,655 samples, 23.10%)</title><rect x="75.9383%" y="6549" width="23.1037%" height="15" fill="rgb(205,1,4)" fg:x="212511" fg:w="64655"/><text x="76.1883%" y="6559.50">neural_network.exe`neural_network::fl..</text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (52 samples, 0.02%)</title><rect x="99.0234%" y="6533" width="0.0186%" height="15" fill="rgb(224,151,29)" fg:x="277114" fg:w="52"/><text x="99.2734%" y="6543.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::dealloc (43 samples, 0.02%)</title><rect x="99.0266%" y="6517" width="0.0154%" height="15" fill="rgb(251,196,0)" fg:x="277123" fg:w="43"/><text x="99.2766%" y="6527.50"></text></g><g><title>neural_network.exe`core::ops::function::FnOnce::call_once(rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure_env$0, enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (69 samples, 0.02%)</title><rect x="99.0538%" y="6533" width="0.0247%" height="15" fill="rgb(212,127,0)" fg:x="277199" fg:w="69"/><text x="99.3038%" y="6543.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure$0(rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure_env$0*, enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (69 samples, 0.02%)</title><rect x="99.0538%" y="6517" width="0.0247%" height="15" fill="rgb(236,71,53)" fg:x="277199" fg:w="69"/><text x="99.3038%" y="6527.50"></text></g><g><title>neural_network.exe`std::sys::thread_local::native::lazy::Storage&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;,tuple$&lt;&gt; &gt;::get_or_init(enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt; &gt; &gt; &gt; &gt;, alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; (*) (69 samples, 0.02%)</title><rect x="99.0538%" y="6501" width="0.0247%" height="15" fill="rgb(227,99,0)" fg:x="277199" fg:w="69"/><text x="99.3038%" y="6511.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::thread_rng (129 samples, 0.05%)</title><rect x="99.0420%" y="6581" width="0.0461%" height="15" fill="rgb(239,89,21)" fg:x="277166" fg:w="129"/><text x="99.2920%" y="6591.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::with (96 samples, 0.03%)</title><rect x="99.0538%" y="6565" width="0.0343%" height="15" fill="rgb(243,122,19)" fg:x="277199" fg:w="96"/><text x="99.3038%" y="6575.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::try_with (96 samples, 0.03%)</title><rect x="99.0538%" y="6549" width="0.0343%" height="15" fill="rgb(229,192,45)" fg:x="277199" fg:w="96"/><text x="99.3038%" y="6559.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (80,424 samples, 28.74%)</title><rect x="70.3667%" y="6629" width="28.7386%" height="15" fill="rgb(235,165,35)" fg:x="196919" fg:w="80424"/><text x="70.6167%" y="6639.50">neural_network.exe`enum2$&lt;core::option::Option..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (80,424 samples, 28.74%)</title><rect x="70.3667%" y="6613" width="28.7386%" height="15" fill="rgb(253,202,0)" fg:x="196919" fg:w="80424"/><text x="70.6167%" y="6623.50">neural_network.exe`enum2$&lt;core::option::Option..</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (80,423 samples, 28.74%)</title><rect x="70.3670%" y="6597" width="28.7382%" height="15" fill="rgb(235,51,20)" fg:x="196920" fg:w="80423"/><text x="70.6170%" y="6607.50">neural_network.exe`neural_network::flow::flow_..</text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (48 samples, 0.02%)</title><rect x="99.0881%" y="6581" width="0.0172%" height="15" fill="rgb(218,95,46)" fg:x="277295" fg:w="48"/><text x="99.3381%" y="6591.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::dealloc (38 samples, 0.01%)</title><rect x="99.0916%" y="6565" width="0.0136%" height="15" fill="rgb(212,81,10)" fg:x="277305" fg:w="38"/><text x="99.3416%" y="6575.50"></text></g><g><title>neural_network.exe`core::ops::function::FnOnce::call_once(rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure_env$0, enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (54 samples, 0.02%)</title><rect x="99.1138%" y="6581" width="0.0193%" height="15" fill="rgb(240,59,0)" fg:x="277367" fg:w="54"/><text x="99.3638%" y="6591.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure$0(rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure_env$0*, enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (54 samples, 0.02%)</title><rect x="99.1138%" y="6565" width="0.0193%" height="15" fill="rgb(212,191,42)" fg:x="277367" fg:w="54"/><text x="99.3638%" y="6575.50"></text></g><g><title>neural_network.exe`std::sys::thread_local::native::lazy::Storage&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;,tuple$&lt;&gt; &gt;::get_or_init(enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt; &gt; &gt; &gt; &gt;, alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; (*) (54 samples, 0.02%)</title><rect x="99.1138%" y="6549" width="0.0193%" height="15" fill="rgb(233,140,3)" fg:x="277367" fg:w="54"/><text x="99.3638%" y="6559.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::thread_rng (96 samples, 0.03%)</title><rect x="99.1052%" y="6629" width="0.0343%" height="15" fill="rgb(215,69,23)" fg:x="277343" fg:w="96"/><text x="99.3552%" y="6639.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::with (72 samples, 0.03%)</title><rect x="99.1138%" y="6613" width="0.0257%" height="15" fill="rgb(240,202,20)" fg:x="277367" fg:w="72"/><text x="99.3638%" y="6623.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::try_with (72 samples, 0.03%)</title><rect x="99.1138%" y="6597" width="0.0257%" height="15" fill="rgb(209,146,50)" fg:x="277367" fg:w="72"/><text x="99.3638%" y="6607.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (97,731 samples, 34.92%)</title><rect x="64.2387%" y="6677" width="34.9230%" height="15" fill="rgb(253,102,54)" fg:x="179770" fg:w="97731"/><text x="64.4887%" y="6687.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (97,731 samples, 34.92%)</title><rect x="64.2387%" y="6661" width="34.9230%" height="15" fill="rgb(250,173,47)" fg:x="179770" fg:w="97731"/><text x="64.4887%" y="6671.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec..</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (97,730 samples, 34.92%)</title><rect x="64.2390%" y="6645" width="34.9227%" height="15" fill="rgb(232,142,7)" fg:x="179771" fg:w="97730"/><text x="64.4890%" y="6655.50">neural_network.exe`neural_network::flow::flow_ai::generat..</text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (62 samples, 0.02%)</title><rect x="99.1395%" y="6629" width="0.0222%" height="15" fill="rgb(230,157,47)" fg:x="277439" fg:w="62"/><text x="99.3895%" y="6639.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::dealloc (49 samples, 0.02%)</title><rect x="99.1442%" y="6613" width="0.0175%" height="15" fill="rgb(214,177,35)" fg:x="277452" fg:w="49"/><text x="99.3942%" y="6623.50"></text></g><g><title>neural_network.exe`core::ops::function::FnOnce::call_once(rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure_env$0, enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (67 samples, 0.02%)</title><rect x="99.1753%" y="6629" width="0.0239%" height="15" fill="rgb(234,119,46)" fg:x="277539" fg:w="67"/><text x="99.4253%" y="6639.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure$0(rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure_env$0*, enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (67 samples, 0.02%)</title><rect x="99.1753%" y="6613" width="0.0239%" height="15" fill="rgb(241,180,50)" fg:x="277539" fg:w="67"/><text x="99.4253%" y="6623.50"></text></g><g><title>neural_network.exe`std::sys::thread_local::native::lazy::Storage&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;,tuple$&lt;&gt; &gt;::get_or_init(enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt; &gt; &gt; &gt; &gt;, alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; (*) (67 samples, 0.02%)</title><rect x="99.1753%" y="6597" width="0.0239%" height="15" fill="rgb(221,54,25)" fg:x="277539" fg:w="67"/><text x="99.4253%" y="6607.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::thread_rng (121 samples, 0.04%)</title><rect x="99.1617%" y="6677" width="0.0432%" height="15" fill="rgb(209,157,44)" fg:x="277501" fg:w="121"/><text x="99.4117%" y="6687.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::with (83 samples, 0.03%)</title><rect x="99.1753%" y="6661" width="0.0297%" height="15" fill="rgb(246,115,41)" fg:x="277539" fg:w="83"/><text x="99.4253%" y="6671.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::try_with (83 samples, 0.03%)</title><rect x="99.1753%" y="6645" width="0.0297%" height="15" fill="rgb(229,86,1)" fg:x="277539" fg:w="83"/><text x="99.4253%" y="6655.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (115,666 samples, 41.33%)</title><rect x="57.8909%" y="6725" width="41.3319%" height="15" fill="rgb(240,108,53)" fg:x="162006" fg:w="115666"/><text x="58.1409%" y="6735.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (115,666 samples, 41.33%)</title><rect x="57.8909%" y="6709" width="41.3319%" height="15" fill="rgb(227,134,2)" fg:x="162006" fg:w="115666"/><text x="58.1409%" y="6719.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple..</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (115,665 samples, 41.33%)</title><rect x="57.8913%" y="6693" width="41.3315%" height="15" fill="rgb(213,129,25)" fg:x="162007" fg:w="115665"/><text x="58.1413%" y="6703.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(allo..</text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (50 samples, 0.02%)</title><rect x="99.2049%" y="6677" width="0.0179%" height="15" fill="rgb(226,35,21)" fg:x="277622" fg:w="50"/><text x="99.4549%" y="6687.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::dealloc (44 samples, 0.02%)</title><rect x="99.2071%" y="6661" width="0.0157%" height="15" fill="rgb(208,129,26)" fg:x="277628" fg:w="44"/><text x="99.4571%" y="6671.50"></text></g><g><title>neural_network.exe`core::ops::function::FnOnce::call_once(rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure_env$0, enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (68 samples, 0.02%)</title><rect x="99.2332%" y="6677" width="0.0243%" height="15" fill="rgb(224,83,6)" fg:x="277701" fg:w="68"/><text x="99.4832%" y="6687.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure$0(rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure_env$0*, enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (68 samples, 0.02%)</title><rect x="99.2332%" y="6661" width="0.0243%" height="15" fill="rgb(227,52,39)" fg:x="277701" fg:w="68"/><text x="99.4832%" y="6671.50"></text></g><g><title>neural_network.exe`std::sys::thread_local::native::lazy::Storage&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;,tuple$&lt;&gt; &gt;::get_or_init(enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt; &gt; &gt; &gt; &gt;, alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; (*) (68 samples, 0.02%)</title><rect x="99.2332%" y="6645" width="0.0243%" height="15" fill="rgb(241,30,17)" fg:x="277701" fg:w="68"/><text x="99.4832%" y="6655.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::thread_rng (128 samples, 0.05%)</title><rect x="99.2228%" y="6725" width="0.0457%" height="15" fill="rgb(246,186,42)" fg:x="277672" fg:w="128"/><text x="99.4728%" y="6735.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::with (99 samples, 0.04%)</title><rect x="99.2332%" y="6709" width="0.0354%" height="15" fill="rgb(221,169,15)" fg:x="277701" fg:w="99"/><text x="99.4832%" y="6719.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::try_with (99 samples, 0.04%)</title><rect x="99.2332%" y="6693" width="0.0354%" height="15" fill="rgb(235,108,21)" fg:x="277701" fg:w="99"/><text x="99.4832%" y="6703.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::thread_rng::closure$0(rand::rngs::thread::thread_rng::closure_env$0, alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (31 samples, 0.01%)</title><rect x="99.2575%" y="6677" width="0.0111%" height="15" fill="rgb(219,148,30)" fg:x="277769" fg:w="31"/><text x="99.5075%" y="6687.50"></text></g><g><title>neural_network.exe`alloc::rc::impl$31::clone(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (31 samples, 0.01%)</title><rect x="99.2575%" y="6661" width="0.0111%" height="15" fill="rgb(220,109,5)" fg:x="277769" fg:w="31"/><text x="99.5075%" y="6671.50"></text></g><g><title>neural_network.exe`alloc::rc::RcInnerPtr::inc_strong(alloc::rc::RcBox&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (31 samples, 0.01%)</title><rect x="99.2575%" y="6645" width="0.0111%" height="15" fill="rgb(213,203,48)" fg:x="277769" fg:w="31"/><text x="99.5075%" y="6655.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (136,252 samples, 48.69%)</title><rect x="50.6048%" y="6773" width="48.6880%" height="15" fill="rgb(244,71,33)" fg:x="141616" fg:w="136252"/><text x="50.8548%" y="6783.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usiz..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (136,252 samples, 48.69%)</title><rect x="50.6048%" y="6757" width="48.6880%" height="15" fill="rgb(209,23,2)" fg:x="141616" fg:w="136252"/><text x="50.8548%" y="6767.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usiz..</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (136,252 samples, 48.69%)</title><rect x="50.6048%" y="6741" width="48.6880%" height="15" fill="rgb(219,97,7)" fg:x="141616" fg:w="136252"/><text x="50.8548%" y="6751.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;..</text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (68 samples, 0.02%)</title><rect x="99.2685%" y="6725" width="0.0243%" height="15" fill="rgb(216,161,23)" fg:x="277800" fg:w="68"/><text x="99.5185%" y="6735.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::dealloc (59 samples, 0.02%)</title><rect x="99.2717%" y="6709" width="0.0211%" height="15" fill="rgb(207,45,42)" fg:x="277809" fg:w="59"/><text x="99.5217%" y="6719.50"></text></g><g><title>neural_network.exe`core::ops::function::FnOnce::call_once(rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure_env$0, enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (74 samples, 0.03%)</title><rect x="99.3043%" y="6725" width="0.0264%" height="15" fill="rgb(241,61,4)" fg:x="277900" fg:w="74"/><text x="99.5543%" y="6735.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure$0(rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure_env$0*, enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (74 samples, 0.03%)</title><rect x="99.3043%" y="6709" width="0.0264%" height="15" fill="rgb(236,170,1)" fg:x="277900" fg:w="74"/><text x="99.5543%" y="6719.50"></text></g><g><title>neural_network.exe`std::sys::thread_local::native::lazy::Storage&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;,tuple$&lt;&gt; &gt;::get_or_init(enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt; &gt; &gt; &gt; &gt;, alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; (*) (74 samples, 0.03%)</title><rect x="99.3043%" y="6693" width="0.0264%" height="15" fill="rgb(239,72,5)" fg:x="277900" fg:w="74"/><text x="99.5543%" y="6703.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::thread_rng (131 samples, 0.05%)</title><rect x="99.2928%" y="6773" width="0.0468%" height="15" fill="rgb(214,13,50)" fg:x="277868" fg:w="131"/><text x="99.5428%" y="6783.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::with (99 samples, 0.04%)</title><rect x="99.3043%" y="6757" width="0.0354%" height="15" fill="rgb(224,88,9)" fg:x="277900" fg:w="99"/><text x="99.5543%" y="6767.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::try_with (99 samples, 0.04%)</title><rect x="99.3043%" y="6741" width="0.0354%" height="15" fill="rgb(238,192,34)" fg:x="277900" fg:w="99"/><text x="99.5543%" y="6751.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (154,500 samples, 55.21%)</title><rect x="44.1531%" y="6821" width="55.2087%" height="15" fill="rgb(217,203,50)" fg:x="123561" fg:w="154500"/><text x="44.4031%" y="6831.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::a..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (154,500 samples, 55.21%)</title><rect x="44.1531%" y="6805" width="55.2087%" height="15" fill="rgb(241,123,32)" fg:x="123561" fg:w="154500"/><text x="44.4031%" y="6815.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::a..</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (154,500 samples, 55.21%)</title><rect x="44.1531%" y="6789" width="55.2087%" height="15" fill="rgb(248,151,39)" fg:x="123561" fg:w="154500"/><text x="44.4031%" y="6799.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usiz..</text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (62 samples, 0.02%)</title><rect x="99.3396%" y="6773" width="0.0222%" height="15" fill="rgb(208,89,6)" fg:x="277999" fg:w="62"/><text x="99.5896%" y="6783.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::dealloc (53 samples, 0.02%)</title><rect x="99.3429%" y="6757" width="0.0189%" height="15" fill="rgb(254,43,26)" fg:x="278008" fg:w="53"/><text x="99.5929%" y="6767.50"></text></g><g><title>neural_network.exe`core::ops::function::FnOnce::call_once(rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure_env$0, enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (51 samples, 0.02%)</title><rect x="99.3786%" y="6773" width="0.0182%" height="15" fill="rgb(216,158,13)" fg:x="278108" fg:w="51"/><text x="99.6286%" y="6783.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure$0(rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure_env$0*, enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (51 samples, 0.02%)</title><rect x="99.3786%" y="6757" width="0.0182%" height="15" fill="rgb(212,47,37)" fg:x="278108" fg:w="51"/><text x="99.6286%" y="6767.50"></text></g><g><title>neural_network.exe`std::sys::thread_local::native::lazy::Storage&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;,tuple$&lt;&gt; &gt;::get_or_init(enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt; &gt; &gt; &gt; &gt;, alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; (*) (51 samples, 0.02%)</title><rect x="99.3786%" y="6741" width="0.0182%" height="15" fill="rgb(254,16,10)" fg:x="278108" fg:w="51"/><text x="99.6286%" y="6751.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::thread_rng (121 samples, 0.04%)</title><rect x="99.3618%" y="6821" width="0.0432%" height="15" fill="rgb(223,228,16)" fg:x="278061" fg:w="121"/><text x="99.6118%" y="6831.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::with (74 samples, 0.03%)</title><rect x="99.3786%" y="6805" width="0.0264%" height="15" fill="rgb(249,108,50)" fg:x="278108" fg:w="74"/><text x="99.6286%" y="6815.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::try_with (74 samples, 0.03%)</title><rect x="99.3786%" y="6789" width="0.0264%" height="15" fill="rgb(208,220,5)" fg:x="278108" fg:w="74"/><text x="99.6286%" y="6799.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (173,237 samples, 61.90%)</title><rect x="37.5216%" y="6869" width="61.9042%" height="15" fill="rgb(217,89,48)" fg:x="105003" fg:w="173237"/><text x="37.7716%" y="6879.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Globa..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (173,237 samples, 61.90%)</title><rect x="37.5216%" y="6853" width="61.9042%" height="15" fill="rgb(212,113,41)" fg:x="105003" fg:w="173237"/><text x="37.7716%" y="6863.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Globa..</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (173,237 samples, 61.90%)</title><rect x="37.5216%" y="6837" width="61.9042%" height="15" fill="rgb(231,127,5)" fg:x="105003" fg:w="173237"/><text x="37.7716%" y="6847.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,al..</text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (58 samples, 0.02%)</title><rect x="99.4050%" y="6821" width="0.0207%" height="15" fill="rgb(217,141,17)" fg:x="278182" fg:w="58"/><text x="99.6550%" y="6831.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::dealloc (47 samples, 0.02%)</title><rect x="99.4090%" y="6805" width="0.0168%" height="15" fill="rgb(245,125,54)" fg:x="278193" fg:w="47"/><text x="99.6590%" y="6815.50"></text></g><g><title>neural_network.exe`core::ops::function::FnOnce::call_once(rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure_env$0, enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (71 samples, 0.03%)</title><rect x="99.4390%" y="6821" width="0.0254%" height="15" fill="rgb(248,125,3)" fg:x="278277" fg:w="71"/><text x="99.6890%" y="6831.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure$0(rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure_env$0*, enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (71 samples, 0.03%)</title><rect x="99.4390%" y="6805" width="0.0254%" height="15" fill="rgb(236,119,51)" fg:x="278277" fg:w="71"/><text x="99.6890%" y="6815.50"></text></g><g><title>neural_network.exe`std::sys::thread_local::native::lazy::Storage&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;,tuple$&lt;&gt; &gt;::get_or_init(enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt; &gt; &gt; &gt; &gt;, alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; (*) (71 samples, 0.03%)</title><rect x="99.4390%" y="6789" width="0.0254%" height="15" fill="rgb(239,99,8)" fg:x="278277" fg:w="71"/><text x="99.6890%" y="6799.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::thread_rng (129 samples, 0.05%)</title><rect x="99.4258%" y="6869" width="0.0461%" height="15" fill="rgb(224,228,4)" fg:x="278240" fg:w="129"/><text x="99.6758%" y="6879.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::with (92 samples, 0.03%)</title><rect x="99.4390%" y="6853" width="0.0329%" height="15" fill="rgb(220,131,45)" fg:x="278277" fg:w="92"/><text x="99.6890%" y="6863.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::try_with (92 samples, 0.03%)</title><rect x="99.4390%" y="6837" width="0.0329%" height="15" fill="rgb(215,62,5)" fg:x="278277" fg:w="92"/><text x="99.6890%" y="6847.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (190,265 samples, 67.99%)</title><rect x="31.5033%" y="6917" width="67.9889%" height="15" fill="rgb(253,12,24)" fg:x="88161" fg:w="190265"/><text x="31.7533%" y="6927.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (190,265 samples, 67.99%)</title><rect x="31.5033%" y="6901" width="67.9889%" height="15" fill="rgb(248,120,50)" fg:x="88161" fg:w="190265"/><text x="31.7533%" y="6911.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_..</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (190,264 samples, 67.99%)</title><rect x="31.5036%" y="6885" width="67.9886%" height="15" fill="rgb(245,194,10)" fg:x="88162" fg:w="190264"/><text x="31.7536%" y="6895.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc:..</text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (57 samples, 0.02%)</title><rect x="99.4719%" y="6869" width="0.0204%" height="15" fill="rgb(241,149,38)" fg:x="278369" fg:w="57"/><text x="99.7219%" y="6879.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::dealloc (48 samples, 0.02%)</title><rect x="99.4751%" y="6853" width="0.0172%" height="15" fill="rgb(219,215,7)" fg:x="278378" fg:w="48"/><text x="99.7251%" y="6863.50"></text></g><g><title>neural_network.exe`core::ops::function::FnOnce::call_once(rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure_env$0, enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (58 samples, 0.02%)</title><rect x="99.5044%" y="6869" width="0.0207%" height="15" fill="rgb(208,120,31)" fg:x="278460" fg:w="58"/><text x="99.7544%" y="6879.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure$0(rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure_env$0*, enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (58 samples, 0.02%)</title><rect x="99.5044%" y="6853" width="0.0207%" height="15" fill="rgb(244,30,8)" fg:x="278460" fg:w="58"/><text x="99.7544%" y="6863.50"></text></g><g><title>neural_network.exe`std::sys::thread_local::native::lazy::Storage&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;,tuple$&lt;&gt; &gt;::get_or_init(enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt; &gt; &gt; &gt; &gt;, alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; (*) (58 samples, 0.02%)</title><rect x="99.5044%" y="6837" width="0.0207%" height="15" fill="rgb(238,35,44)" fg:x="278460" fg:w="58"/><text x="99.7544%" y="6847.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::thread_rng (120 samples, 0.04%)</title><rect x="99.4922%" y="6917" width="0.0429%" height="15" fill="rgb(243,218,37)" fg:x="278426" fg:w="120"/><text x="99.7422%" y="6927.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::with (86 samples, 0.03%)</title><rect x="99.5044%" y="6901" width="0.0307%" height="15" fill="rgb(218,169,10)" fg:x="278460" fg:w="86"/><text x="99.7544%" y="6911.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::try_with (86 samples, 0.03%)</title><rect x="99.5044%" y="6885" width="0.0307%" height="15" fill="rgb(221,144,10)" fg:x="278460" fg:w="86"/><text x="99.7544%" y="6895.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::thread_rng::closure$0(rand::rngs::thread::thread_rng::closure_env$0, alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (28 samples, 0.01%)</title><rect x="99.5251%" y="6869" width="0.0100%" height="15" fill="rgb(226,41,38)" fg:x="278518" fg:w="28"/><text x="99.7751%" y="6879.50"></text></g><g><title>neural_network.exe`alloc::rc::impl$31::clone(alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (28 samples, 0.01%)</title><rect x="99.5251%" y="6853" width="0.0100%" height="15" fill="rgb(228,3,1)" fg:x="278518" fg:w="28"/><text x="99.7751%" y="6863.50"></text></g><g><title>neural_network.exe`alloc::rc::RcInnerPtr::inc_strong(alloc::rc::RcBox&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (28 samples, 0.01%)</title><rect x="99.5251%" y="6837" width="0.0100%" height="15" fill="rgb(209,129,12)" fg:x="278518" fg:w="28"/><text x="99.7751%" y="6847.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (206,697 samples, 73.86%)</title><rect x="25.6908%" y="6965" width="73.8607%" height="15" fill="rgb(213,136,33)" fg:x="71895" fg:w="206697"/><text x="25.9408%" y="6975.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (206,697 samples, 73.86%)</title><rect x="25.6908%" y="6949" width="73.8607%" height="15" fill="rgb(209,181,29)" fg:x="71895" fg:w="206697"/><text x="25.9408%" y="6959.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (206,695 samples, 73.86%)</title><rect x="25.6915%" y="6933" width="73.8600%" height="15" fill="rgb(234,173,18)" fg:x="71897" fg:w="206695"/><text x="25.9415%" y="6943.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*,..</text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (46 samples, 0.02%)</title><rect x="99.5351%" y="6917" width="0.0164%" height="15" fill="rgb(227,73,47)" fg:x="278546" fg:w="46"/><text x="99.7851%" y="6927.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::dealloc (40 samples, 0.01%)</title><rect x="99.5372%" y="6901" width="0.0143%" height="15" fill="rgb(234,9,34)" fg:x="278552" fg:w="40"/><text x="99.7872%" y="6911.50"></text></g><g><title>neural_network.exe`core::ops::function::FnOnce::call_once(rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure_env$0, enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (59 samples, 0.02%)</title><rect x="99.5608%" y="6917" width="0.0211%" height="15" fill="rgb(235,172,15)" fg:x="278618" fg:w="59"/><text x="99.8108%" y="6927.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure$0(rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure_env$0*, enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (59 samples, 0.02%)</title><rect x="99.5608%" y="6901" width="0.0211%" height="15" fill="rgb(245,61,2)" fg:x="278618" fg:w="59"/><text x="99.8108%" y="6911.50"></text></g><g><title>neural_network.exe`std::sys::thread_local::native::lazy::Storage&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;,tuple$&lt;&gt; &gt;::get_or_init(enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt; &gt; &gt; &gt; &gt;, alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; (*) (59 samples, 0.02%)</title><rect x="99.5608%" y="6885" width="0.0211%" height="15" fill="rgb(238,39,47)" fg:x="278618" fg:w="59"/><text x="99.8108%" y="6895.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::thread_rng (112 samples, 0.04%)</title><rect x="99.5515%" y="6965" width="0.0400%" height="15" fill="rgb(234,37,24)" fg:x="278592" fg:w="112"/><text x="99.8015%" y="6975.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::with (86 samples, 0.03%)</title><rect x="99.5608%" y="6949" width="0.0307%" height="15" fill="rgb(248,223,24)" fg:x="278618" fg:w="86"/><text x="99.8108%" y="6959.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::try_with (86 samples, 0.03%)</title><rect x="99.5608%" y="6933" width="0.0307%" height="15" fill="rgb(223,12,15)" fg:x="278618" fg:w="86"/><text x="99.8108%" y="6943.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (220,116 samples, 78.66%)</title><rect x="20.9504%" y="7013" width="78.6558%" height="15" fill="rgb(249,6,3)" fg:x="58629" fg:w="220116"/><text x="21.2004%" y="7023.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (220,116 samples, 78.66%)</title><rect x="20.9504%" y="6997" width="78.6558%" height="15" fill="rgb(237,105,33)" fg:x="58629" fg:w="220116"/><text x="21.2004%" y="7007.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (220,115 samples, 78.66%)</title><rect x="20.9507%" y="6981" width="78.6555%" height="15" fill="rgb(252,208,35)" fg:x="58630" fg:w="220115"/><text x="21.2007%" y="6991.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::..</text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (41 samples, 0.01%)</title><rect x="99.5916%" y="6965" width="0.0147%" height="15" fill="rgb(215,181,35)" fg:x="278704" fg:w="41"/><text x="99.8416%" y="6975.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::dealloc (31 samples, 0.01%)</title><rect x="99.5951%" y="6949" width="0.0111%" height="15" fill="rgb(246,212,3)" fg:x="278714" fg:w="31"/><text x="99.8451%" y="6959.50"></text></g><g><title>neural_network.exe`core::ops::function::FnOnce::call_once(rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure_env$0, enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (47 samples, 0.02%)</title><rect x="99.6162%" y="6965" width="0.0168%" height="15" fill="rgb(247,156,24)" fg:x="278773" fg:w="47"/><text x="99.8662%" y="6975.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure$0(rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure_env$0*, enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (47 samples, 0.02%)</title><rect x="99.6162%" y="6949" width="0.0168%" height="15" fill="rgb(248,9,31)" fg:x="278773" fg:w="47"/><text x="99.8662%" y="6959.50"></text></g><g><title>neural_network.exe`std::sys::thread_local::native::lazy::Storage&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;,tuple$&lt;&gt; &gt;::get_or_init(enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt; &gt; &gt; &gt; &gt;, alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; (*) (47 samples, 0.02%)</title><rect x="99.6162%" y="6933" width="0.0168%" height="15" fill="rgb(234,26,45)" fg:x="278773" fg:w="47"/><text x="99.8662%" y="6943.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::thread_rng (102 samples, 0.04%)</title><rect x="99.6062%" y="7013" width="0.0364%" height="15" fill="rgb(249,11,32)" fg:x="278745" fg:w="102"/><text x="99.8562%" y="7023.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::with (74 samples, 0.03%)</title><rect x="99.6162%" y="6997" width="0.0264%" height="15" fill="rgb(249,162,33)" fg:x="278773" fg:w="74"/><text x="99.8662%" y="7007.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::try_with (74 samples, 0.03%)</title><rect x="99.6162%" y="6981" width="0.0264%" height="15" fill="rgb(232,4,32)" fg:x="278773" fg:w="74"/><text x="99.8662%" y="6991.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (237,833 samples, 84.99%)</title><rect x="14.6691%" y="7061" width="84.9868%" height="15" fill="rgb(212,5,45)" fg:x="41051" fg:w="237833"/><text x="14.9191%" y="7071.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (237,833 samples, 84.99%)</title><rect x="14.6691%" y="7045" width="84.9868%" height="15" fill="rgb(227,95,13)" fg:x="41051" fg:w="237833"/><text x="14.9191%" y="7055.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (237,833 samples, 84.99%)</title><rect x="14.6691%" y="7029" width="84.9868%" height="15" fill="rgb(223,205,10)" fg:x="41051" fg:w="237833"/><text x="14.9191%" y="7039.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tu..</text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (37 samples, 0.01%)</title><rect x="99.6427%" y="7013" width="0.0132%" height="15" fill="rgb(222,178,8)" fg:x="278847" fg:w="37"/><text x="99.8927%" y="7023.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::dealloc (31 samples, 0.01%)</title><rect x="99.6448%" y="6997" width="0.0111%" height="15" fill="rgb(216,13,22)" fg:x="278853" fg:w="31"/><text x="99.8948%" y="7007.50"></text></g><g><title>neural_network.exe`core::ops::function::FnOnce::call_once(rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure_env$0, enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (44 samples, 0.02%)</title><rect x="99.6623%" y="7013" width="0.0157%" height="15" fill="rgb(240,167,12)" fg:x="278902" fg:w="44"/><text x="99.9123%" y="7023.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure$0(rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure_env$0*, enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (44 samples, 0.02%)</title><rect x="99.6623%" y="6997" width="0.0157%" height="15" fill="rgb(235,68,35)" fg:x="278902" fg:w="44"/><text x="99.9123%" y="7007.50"></text></g><g><title>neural_network.exe`std::sys::thread_local::native::lazy::Storage&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;,tuple$&lt;&gt; &gt;::get_or_init(enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt; &gt; &gt; &gt; &gt;, alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; (*) (44 samples, 0.02%)</title><rect x="99.6623%" y="6981" width="0.0157%" height="15" fill="rgb(253,40,27)" fg:x="278902" fg:w="44"/><text x="99.9123%" y="6991.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::thread_rng (79 samples, 0.03%)</title><rect x="99.6559%" y="7061" width="0.0282%" height="15" fill="rgb(214,19,28)" fg:x="278884" fg:w="79"/><text x="99.9059%" y="7071.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::with (61 samples, 0.02%)</title><rect x="99.6623%" y="7045" width="0.0218%" height="15" fill="rgb(210,167,45)" fg:x="278902" fg:w="61"/><text x="99.9123%" y="7055.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::try_with (61 samples, 0.02%)</title><rect x="99.6623%" y="7029" width="0.0218%" height="15" fill="rgb(232,97,40)" fg:x="278902" fg:w="61"/><text x="99.9123%" y="7039.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (246,618 samples, 88.13%)</title><rect x="11.5670%" y="7109" width="88.1260%" height="15" fill="rgb(250,35,23)" fg:x="32370" fg:w="246618"/><text x="11.8170%" y="7119.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (246,618 samples, 88.13%)</title><rect x="11.5670%" y="7093" width="88.1260%" height="15" fill="rgb(248,47,53)" fg:x="32370" fg:w="246618"/><text x="11.8170%" y="7103.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (246,618 samples, 88.13%)</title><rect x="11.5670%" y="7077" width="88.1260%" height="15" fill="rgb(226,58,50)" fg:x="32370" fg:w="246618"/><text x="11.8170%" y="7087.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;..</text></g><g><title>neural_network.exe`core::ops::function::FnOnce::call_once(rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure_env$0, enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (33 samples, 0.01%)</title><rect x="99.6984%" y="7061" width="0.0118%" height="15" fill="rgb(217,105,26)" fg:x="279003" fg:w="33"/><text x="99.9484%" y="7071.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure$0(rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure_env$0*, enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (33 samples, 0.01%)</title><rect x="99.6984%" y="7045" width="0.0118%" height="15" fill="rgb(208,64,1)" fg:x="279003" fg:w="33"/><text x="99.9484%" y="7055.50"></text></g><g><title>neural_network.exe`std::sys::thread_local::native::lazy::Storage&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;,tuple$&lt;&gt; &gt;::get_or_init(enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt; &gt; &gt; &gt; &gt;, alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; (*) (33 samples, 0.01%)</title><rect x="99.6984%" y="7029" width="0.0118%" height="15" fill="rgb(214,80,1)" fg:x="279003" fg:w="33"/><text x="99.9484%" y="7039.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::thread_rng (61 samples, 0.02%)</title><rect x="99.6930%" y="7109" width="0.0218%" height="15" fill="rgb(206,175,26)" fg:x="278988" fg:w="61"/><text x="99.9430%" y="7119.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::with (46 samples, 0.02%)</title><rect x="99.6984%" y="7093" width="0.0164%" height="15" fill="rgb(235,156,37)" fg:x="279003" fg:w="46"/><text x="99.9484%" y="7103.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::try_with (46 samples, 0.02%)</title><rect x="99.6984%" y="7077" width="0.0164%" height="15" fill="rgb(213,100,9)" fg:x="279003" fg:w="46"/><text x="99.9484%" y="7087.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (254,595 samples, 90.98%)</title><rect x="8.7459%" y="7157" width="90.9765%" height="15" fill="rgb(241,15,13)" fg:x="24475" fg:w="254595"/><text x="8.9959%" y="7167.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (254,595 samples, 90.98%)</title><rect x="8.7459%" y="7141" width="90.9765%" height="15" fill="rgb(205,97,43)" fg:x="24475" fg:w="254595"/><text x="8.9959%" y="7151.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (254,595 samples, 90.98%)</title><rect x="8.7459%" y="7125" width="90.9765%" height="15" fill="rgb(216,106,32)" fg:x="24475" fg:w="254595"/><text x="8.9959%" y="7135.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize..</text></g><g><title>neural_network.exe`core::ops::function::FnOnce::call_once(rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure_env$0, enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (37 samples, 0.01%)</title><rect x="99.7277%" y="7109" width="0.0132%" height="15" fill="rgb(226,200,8)" fg:x="279085" fg:w="37"/><text x="99.9777%" y="7119.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure$0(rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure_env$0*, enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (37 samples, 0.01%)</title><rect x="99.7277%" y="7093" width="0.0132%" height="15" fill="rgb(244,54,29)" fg:x="279085" fg:w="37"/><text x="99.9777%" y="7103.50"></text></g><g><title>neural_network.exe`std::sys::thread_local::native::lazy::Storage&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;,tuple$&lt;&gt; &gt;::get_or_init(enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt; &gt; &gt; &gt; &gt;, alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; (*) (37 samples, 0.01%)</title><rect x="99.7277%" y="7077" width="0.0132%" height="15" fill="rgb(252,169,12)" fg:x="279085" fg:w="37"/><text x="99.9777%" y="7087.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::thread_rng (65 samples, 0.02%)</title><rect x="99.7223%" y="7157" width="0.0232%" height="15" fill="rgb(231,199,11)" fg:x="279070" fg:w="65"/><text x="99.9723%" y="7167.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::with (50 samples, 0.02%)</title><rect x="99.7277%" y="7141" width="0.0179%" height="15" fill="rgb(233,191,18)" fg:x="279085" fg:w="50"/><text x="99.9777%" y="7151.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::try_with (50 samples, 0.02%)</title><rect x="99.7277%" y="7125" width="0.0179%" height="15" fill="rgb(215,83,47)" fg:x="279085" fg:w="50"/><text x="99.9777%" y="7135.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (260,695 samples, 93.16%)</title><rect x="6.5947%" y="7205" width="93.1563%" height="15" fill="rgb(251,67,19)" fg:x="18455" fg:w="260695"/><text x="6.8447%" y="7215.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (260,695 samples, 93.16%)</title><rect x="6.5947%" y="7189" width="93.1563%" height="15" fill="rgb(240,7,20)" fg:x="18455" fg:w="260695"/><text x="6.8447%" y="7199.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (260,694 samples, 93.16%)</title><rect x="6.5950%" y="7173" width="93.1559%" height="15" fill="rgb(210,150,26)" fg:x="18456" fg:w="260694"/><text x="6.8450%" y="7183.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,us..</text></g><g><title>neural_network.exe`core::ops::function::FnOnce::call_once(rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure_env$0, enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (32 samples, 0.01%)</title><rect x="99.7552%" y="7157" width="0.0114%" height="15" fill="rgb(228,75,42)" fg:x="279162" fg:w="32"/><text x="100.0052%" y="7167.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure$0(rand::rngs::thread::THREAD_RNG_KEY::constant$0::closure_env$0*, enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng (32 samples, 0.01%)</title><rect x="99.7552%" y="7141" width="0.0114%" height="15" fill="rgb(237,134,48)" fg:x="279162" fg:w="32"/><text x="100.0052%" y="7151.50"></text></g><g><title>neural_network.exe`std::sys::thread_local::native::lazy::Storage&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt;,tuple$&lt;&gt; &gt;::get_or_init(enum2$&lt;core::option::Option&lt;ref_mut$&lt;enum2$&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt; &gt; &gt; &gt; &gt;, alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; (*) (32 samples, 0.01%)</title><rect x="99.7552%" y="7125" width="0.0114%" height="15" fill="rgb(205,80,50)" fg:x="279162" fg:w="32"/><text x="100.0052%" y="7135.50"></text></g><g><title>neural_network.exe`rand::rngs::thread::thread_rng (61 samples, 0.02%)</title><rect x="99.7509%" y="7205" width="0.0218%" height="15" fill="rgb(217,74,48)" fg:x="279150" fg:w="61"/><text x="100.0009%" y="7215.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::with (49 samples, 0.02%)</title><rect x="99.7552%" y="7189" width="0.0175%" height="15" fill="rgb(205,82,50)" fg:x="279162" fg:w="49"/><text x="100.0052%" y="7199.50"></text></g><g><title>neural_network.exe`std::thread::local::LocalKey&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;rand_chacha::chacha::ChaCha12Core,rand_core::os::OsRng&gt; &gt;,alloc::alloc::Global&gt; &gt;::try_with (49 samples, 0.02%)</title><rect x="99.7552%" y="7173" width="0.0175%" height="15" fill="rgb(228,1,33)" fg:x="279162" fg:w="49"/><text x="100.0052%" y="7183.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (265,696 samples, 94.94%)</title><rect x="4.8337%" y="7253" width="94.9433%" height="15" fill="rgb(214,50,23)" fg:x="13527" fg:w="265696"/><text x="5.0837%" y="7263.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (265,696 samples, 94.94%)</title><rect x="4.8337%" y="7237" width="94.9433%" height="15" fill="rgb(210,62,9)" fg:x="13527" fg:w="265696"/><text x="5.0837%" y="7247.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (265,696 samples, 94.94%)</title><rect x="4.8337%" y="7221" width="94.9433%" height="15" fill="rgb(210,104,37)" fg:x="13527" fg:w="265696"/><text x="5.0837%" y="7231.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize..</text></g><g><title>neural_network.exe`rand::rngs::thread::thread_rng (37 samples, 0.01%)</title><rect x="99.7770%" y="7253" width="0.0132%" height="15" fill="rgb(232,104,43)" fg:x="279223" fg:w="37"/><text x="100.0270%" y="7263.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (269,303 samples, 96.23%)</title><rect x="3.5627%" y="7301" width="96.2322%" height="15" fill="rgb(244,52,6)" fg:x="9970" fg:w="269303"/><text x="3.8127%" y="7311.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (269,303 samples, 96.23%)</title><rect x="3.5627%" y="7285" width="96.2322%" height="15" fill="rgb(211,174,52)" fg:x="9970" fg:w="269303"/><text x="3.8127%" y="7295.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (269,303 samples, 96.23%)</title><rect x="3.5627%" y="7269" width="96.2322%" height="15" fill="rgb(229,48,4)" fg:x="9970" fg:w="269303"/><text x="3.8127%" y="7279.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,a..</text></g><g><title>neural_network.exe`rand::rngs::thread::thread_rng (28 samples, 0.01%)</title><rect x="99.7949%" y="7301" width="0.0100%" height="15" fill="rgb(205,155,16)" fg:x="279273" fg:w="28"/><text x="100.0449%" y="7311.50"></text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (272,124 samples, 97.24%)</title><rect x="2.5671%" y="7349" width="97.2403%" height="15" fill="rgb(211,141,53)" fg:x="7184" fg:w="272124"/><text x="2.8171%" y="7359.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (272,124 samples, 97.24%)</title><rect x="2.5671%" y="7333" width="97.2403%" height="15" fill="rgb(240,148,11)" fg:x="7184" fg:w="272124"/><text x="2.8171%" y="7343.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (272,124 samples, 97.24%)</title><rect x="2.5671%" y="7317" width="97.2403%" height="15" fill="rgb(214,45,23)" fg:x="7184" fg:w="272124"/><text x="2.8171%" y="7327.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,al..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (274,078 samples, 97.94%)</title><rect x="1.8760%" y="7397" width="97.9385%" height="15" fill="rgb(248,74,26)" fg:x="5250" fg:w="274078"/><text x="2.1260%" y="7407.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (274,078 samples, 97.94%)</title><rect x="1.8760%" y="7381" width="97.9385%" height="15" fill="rgb(218,121,16)" fg:x="5250" fg:w="274078"/><text x="2.1260%" y="7391.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (274,078 samples, 97.94%)</title><rect x="1.8760%" y="7365" width="97.9385%" height="15" fill="rgb(218,10,47)" fg:x="5250" fg:w="274078"/><text x="2.1260%" y="7375.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,all..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (275,360 samples, 98.40%)</title><rect x="1.4204%" y="7445" width="98.3966%" height="15" fill="rgb(227,99,14)" fg:x="3975" fg:w="275360"/><text x="1.6704%" y="7455.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (275,360 samples, 98.40%)</title><rect x="1.4204%" y="7429" width="98.3966%" height="15" fill="rgb(229,83,46)" fg:x="3975" fg:w="275360"/><text x="1.6704%" y="7439.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (275,360 samples, 98.40%)</title><rect x="1.4204%" y="7413" width="98.3966%" height="15" fill="rgb(228,25,1)" fg:x="3975" fg:w="275360"/><text x="1.6704%" y="7423.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,allo..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (276,260 samples, 98.72%)</title><rect x="1.1035%" y="7493" width="98.7182%" height="15" fill="rgb(252,190,15)" fg:x="3088" fg:w="276260"/><text x="1.3535%" y="7503.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (276,260 samples, 98.72%)</title><rect x="1.1035%" y="7477" width="98.7182%" height="15" fill="rgb(213,103,51)" fg:x="3088" fg:w="276260"/><text x="1.3535%" y="7487.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (276,260 samples, 98.72%)</title><rect x="1.1035%" y="7461" width="98.7182%" height="15" fill="rgb(220,38,44)" fg:x="3088" fg:w="276260"/><text x="1.3535%" y="7471.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (276,857 samples, 98.93%)</title><rect x="0.8919%" y="7541" width="98.9316%" height="15" fill="rgb(210,45,26)" fg:x="2496" fg:w="276857"/><text x="1.1419%" y="7551.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (276,857 samples, 98.93%)</title><rect x="0.8919%" y="7525" width="98.9316%" height="15" fill="rgb(205,95,48)" fg:x="2496" fg:w="276857"/><text x="1.1419%" y="7535.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (276,857 samples, 98.93%)</title><rect x="0.8919%" y="7509" width="98.9316%" height="15" fill="rgb(225,179,37)" fg:x="2496" fg:w="276857"/><text x="1.1419%" y="7519.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (277,526 samples, 99.17%)</title><rect x="0.6554%" y="7637" width="99.1706%" height="15" fill="rgb(230,209,3)" fg:x="1834" fg:w="277526"/><text x="0.9054%" y="7647.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (277,526 samples, 99.17%)</title><rect x="0.6554%" y="7621" width="99.1706%" height="15" fill="rgb(248,12,46)" fg:x="1834" fg:w="277526"/><text x="0.9054%" y="7631.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (277,526 samples, 99.17%)</title><rect x="0.6554%" y="7605" width="99.1706%" height="15" fill="rgb(234,18,0)" fg:x="1834" fg:w="277526"/><text x="0.9054%" y="7615.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc:..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (277,247 samples, 99.07%)</title><rect x="0.7551%" y="7589" width="99.0709%" height="15" fill="rgb(238,197,14)" fg:x="2113" fg:w="277247"/><text x="1.0051%" y="7599.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (277,247 samples, 99.07%)</title><rect x="0.7551%" y="7573" width="99.0709%" height="15" fill="rgb(251,162,48)" fg:x="2113" fg:w="277247"/><text x="1.0051%" y="7583.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (277,247 samples, 99.07%)</title><rect x="0.7551%" y="7557" width="99.0709%" height="15" fill="rgb(237,73,42)" fg:x="2113" fg:w="277247"/><text x="1.0051%" y="7567.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (277,701 samples, 99.23%)</title><rect x="0.5932%" y="7685" width="99.2332%" height="15" fill="rgb(211,108,8)" fg:x="1660" fg:w="277701"/><text x="0.8432%" y="7695.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (277,701 samples, 99.23%)</title><rect x="0.5932%" y="7669" width="99.2332%" height="15" fill="rgb(213,45,22)" fg:x="1660" fg:w="277701"/><text x="0.8432%" y="7679.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (277,701 samples, 99.23%)</title><rect x="0.5932%" y="7653" width="99.2332%" height="15" fill="rgb(252,154,5)" fg:x="1660" fg:w="277701"/><text x="0.8432%" y="7663.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc:..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (277,843 samples, 99.28%)</title><rect x="0.5432%" y="7733" width="99.2839%" height="15" fill="rgb(221,79,52)" fg:x="1520" fg:w="277843"/><text x="0.7932%" y="7743.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (277,843 samples, 99.28%)</title><rect x="0.5432%" y="7717" width="99.2839%" height="15" fill="rgb(229,220,36)" fg:x="1520" fg:w="277843"/><text x="0.7932%" y="7727.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (277,843 samples, 99.28%)</title><rect x="0.5432%" y="7701" width="99.2839%" height="15" fill="rgb(211,17,16)" fg:x="1520" fg:w="277843"/><text x="0.7932%" y="7711.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc:..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (278,007 samples, 99.34%)</title><rect x="0.4856%" y="7829" width="99.3425%" height="15" fill="rgb(222,55,31)" fg:x="1359" fg:w="278007"/><text x="0.7356%" y="7839.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (278,007 samples, 99.34%)</title><rect x="0.4856%" y="7813" width="99.3425%" height="15" fill="rgb(221,221,31)" fg:x="1359" fg:w="278007"/><text x="0.7356%" y="7823.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (278,007 samples, 99.34%)</title><rect x="0.4856%" y="7797" width="99.3425%" height="15" fill="rgb(227,168,26)" fg:x="1359" fg:w="278007"/><text x="0.7356%" y="7807.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc:..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (277,933 samples, 99.32%)</title><rect x="0.5121%" y="7781" width="99.3161%" height="15" fill="rgb(224,139,9)" fg:x="1433" fg:w="277933"/><text x="0.7621%" y="7791.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (277,933 samples, 99.32%)</title><rect x="0.5121%" y="7765" width="99.3161%" height="15" fill="rgb(254,172,0)" fg:x="1433" fg:w="277933"/><text x="0.7621%" y="7775.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (277,933 samples, 99.32%)</title><rect x="0.5121%" y="7749" width="99.3161%" height="15" fill="rgb(235,203,1)" fg:x="1433" fg:w="277933"/><text x="0.7621%" y="7759.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc:..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (278,318 samples, 99.45%)</title><rect x="0.3752%" y="8597" width="99.4536%" height="15" fill="rgb(216,205,24)" fg:x="1050" fg:w="278318"/><text x="0.6252%" y="8607.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (278,318 samples, 99.45%)</title><rect x="0.3752%" y="8581" width="99.4536%" height="15" fill="rgb(233,24,6)" fg:x="1050" fg:w="278318"/><text x="0.6252%" y="8591.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (278,318 samples, 99.45%)</title><rect x="0.3752%" y="8565" width="99.4536%" height="15" fill="rgb(244,110,9)" fg:x="1050" fg:w="278318"/><text x="0.6252%" y="8575.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc:..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (278,308 samples, 99.45%)</title><rect x="0.3788%" y="8549" width="99.4501%" height="15" fill="rgb(239,222,42)" fg:x="1060" fg:w="278308"/><text x="0.6288%" y="8559.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (278,308 samples, 99.45%)</title><rect x="0.3788%" y="8533" width="99.4501%" height="15" fill="rgb(218,145,13)" fg:x="1060" fg:w="278308"/><text x="0.6288%" y="8543.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (278,308 samples, 99.45%)</title><rect x="0.3788%" y="8517" width="99.4501%" height="15" fill="rgb(207,69,11)" fg:x="1060" fg:w="278308"/><text x="0.6288%" y="8527.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc:..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (278,300 samples, 99.45%)</title><rect x="0.3816%" y="8501" width="99.4472%" height="15" fill="rgb(220,223,22)" fg:x="1068" fg:w="278300"/><text x="0.6316%" y="8511.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (278,300 samples, 99.45%)</title><rect x="0.3816%" y="8485" width="99.4472%" height="15" fill="rgb(245,102,5)" fg:x="1068" fg:w="278300"/><text x="0.6316%" y="8495.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (278,300 samples, 99.45%)</title><rect x="0.3816%" y="8469" width="99.4472%" height="15" fill="rgb(211,148,2)" fg:x="1068" fg:w="278300"/><text x="0.6316%" y="8479.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc:..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (278,288 samples, 99.44%)</title><rect x="0.3859%" y="8453" width="99.4429%" height="15" fill="rgb(241,13,44)" fg:x="1080" fg:w="278288"/><text x="0.6359%" y="8463.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (278,288 samples, 99.44%)</title><rect x="0.3859%" y="8437" width="99.4429%" height="15" fill="rgb(219,137,21)" fg:x="1080" fg:w="278288"/><text x="0.6359%" y="8447.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (278,288 samples, 99.44%)</title><rect x="0.3859%" y="8421" width="99.4429%" height="15" fill="rgb(242,206,5)" fg:x="1080" fg:w="278288"/><text x="0.6359%" y="8431.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc:..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (278,273 samples, 99.44%)</title><rect x="0.3913%" y="8405" width="99.4375%" height="15" fill="rgb(217,114,22)" fg:x="1095" fg:w="278273"/><text x="0.6413%" y="8415.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (278,273 samples, 99.44%)</title><rect x="0.3913%" y="8389" width="99.4375%" height="15" fill="rgb(253,206,42)" fg:x="1095" fg:w="278273"/><text x="0.6413%" y="8399.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (278,273 samples, 99.44%)</title><rect x="0.3913%" y="8373" width="99.4375%" height="15" fill="rgb(236,102,18)" fg:x="1095" fg:w="278273"/><text x="0.6413%" y="8383.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc:..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (278,264 samples, 99.43%)</title><rect x="0.3945%" y="8357" width="99.4343%" height="15" fill="rgb(208,59,49)" fg:x="1104" fg:w="278264"/><text x="0.6445%" y="8367.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (278,264 samples, 99.43%)</title><rect x="0.3945%" y="8341" width="99.4343%" height="15" fill="rgb(215,194,28)" fg:x="1104" fg:w="278264"/><text x="0.6445%" y="8351.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (278,264 samples, 99.43%)</title><rect x="0.3945%" y="8325" width="99.4343%" height="15" fill="rgb(243,207,11)" fg:x="1104" fg:w="278264"/><text x="0.6445%" y="8335.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc:..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (278,256 samples, 99.43%)</title><rect x="0.3974%" y="8309" width="99.4315%" height="15" fill="rgb(254,179,35)" fg:x="1112" fg:w="278256"/><text x="0.6474%" y="8319.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (278,256 samples, 99.43%)</title><rect x="0.3974%" y="8293" width="99.4315%" height="15" fill="rgb(235,97,3)" fg:x="1112" fg:w="278256"/><text x="0.6474%" y="8303.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (278,256 samples, 99.43%)</title><rect x="0.3974%" y="8277" width="99.4315%" height="15" fill="rgb(215,155,33)" fg:x="1112" fg:w="278256"/><text x="0.6474%" y="8287.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc:..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (278,237 samples, 99.42%)</title><rect x="0.4041%" y="8261" width="99.4247%" height="15" fill="rgb(223,128,12)" fg:x="1131" fg:w="278237"/><text x="0.6541%" y="8271.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (278,237 samples, 99.42%)</title><rect x="0.4041%" y="8245" width="99.4247%" height="15" fill="rgb(208,157,18)" fg:x="1131" fg:w="278237"/><text x="0.6541%" y="8255.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (278,237 samples, 99.42%)</title><rect x="0.4041%" y="8229" width="99.4247%" height="15" fill="rgb(249,70,54)" fg:x="1131" fg:w="278237"/><text x="0.6541%" y="8239.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc:..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (278,223 samples, 99.42%)</title><rect x="0.4092%" y="8213" width="99.4197%" height="15" fill="rgb(244,118,24)" fg:x="1145" fg:w="278223"/><text x="0.6592%" y="8223.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (278,223 samples, 99.42%)</title><rect x="0.4092%" y="8197" width="99.4197%" height="15" fill="rgb(211,54,0)" fg:x="1145" fg:w="278223"/><text x="0.6592%" y="8207.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (278,223 samples, 99.42%)</title><rect x="0.4092%" y="8181" width="99.4197%" height="15" fill="rgb(245,137,45)" fg:x="1145" fg:w="278223"/><text x="0.6592%" y="8191.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc:..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (278,212 samples, 99.42%)</title><rect x="0.4131%" y="8165" width="99.4158%" height="15" fill="rgb(232,154,31)" fg:x="1156" fg:w="278212"/><text x="0.6631%" y="8175.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (278,212 samples, 99.42%)</title><rect x="0.4131%" y="8149" width="99.4158%" height="15" fill="rgb(253,6,39)" fg:x="1156" fg:w="278212"/><text x="0.6631%" y="8159.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (278,212 samples, 99.42%)</title><rect x="0.4131%" y="8133" width="99.4158%" height="15" fill="rgb(234,183,24)" fg:x="1156" fg:w="278212"/><text x="0.6631%" y="8143.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc:..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (278,203 samples, 99.41%)</title><rect x="0.4163%" y="8117" width="99.4125%" height="15" fill="rgb(252,84,40)" fg:x="1165" fg:w="278203"/><text x="0.6663%" y="8127.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (278,203 samples, 99.41%)</title><rect x="0.4163%" y="8101" width="99.4125%" height="15" fill="rgb(224,65,2)" fg:x="1165" fg:w="278203"/><text x="0.6663%" y="8111.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (278,203 samples, 99.41%)</title><rect x="0.4163%" y="8085" width="99.4125%" height="15" fill="rgb(229,38,24)" fg:x="1165" fg:w="278203"/><text x="0.6663%" y="8095.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc:..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (278,186 samples, 99.41%)</title><rect x="0.4224%" y="8069" width="99.4065%" height="15" fill="rgb(218,131,50)" fg:x="1182" fg:w="278186"/><text x="0.6724%" y="8079.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (278,186 samples, 99.41%)</title><rect x="0.4224%" y="8053" width="99.4065%" height="15" fill="rgb(233,106,18)" fg:x="1182" fg:w="278186"/><text x="0.6724%" y="8063.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (278,186 samples, 99.41%)</title><rect x="0.4224%" y="8037" width="99.4065%" height="15" fill="rgb(220,216,11)" fg:x="1182" fg:w="278186"/><text x="0.6724%" y="8047.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc:..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (278,171 samples, 99.40%)</title><rect x="0.4277%" y="8021" width="99.4011%" height="15" fill="rgb(251,100,45)" fg:x="1197" fg:w="278171"/><text x="0.6777%" y="8031.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (278,171 samples, 99.40%)</title><rect x="0.4277%" y="8005" width="99.4011%" height="15" fill="rgb(235,143,32)" fg:x="1197" fg:w="278171"/><text x="0.6777%" y="8015.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (278,171 samples, 99.40%)</title><rect x="0.4277%" y="7989" width="99.4011%" height="15" fill="rgb(248,124,34)" fg:x="1197" fg:w="278171"/><text x="0.6777%" y="7999.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc:..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (278,132 samples, 99.39%)</title><rect x="0.4417%" y="7973" width="99.3872%" height="15" fill="rgb(225,221,4)" fg:x="1236" fg:w="278132"/><text x="0.6917%" y="7983.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (278,132 samples, 99.39%)</title><rect x="0.4417%" y="7957" width="99.3872%" height="15" fill="rgb(242,27,43)" fg:x="1236" fg:w="278132"/><text x="0.6917%" y="7967.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (278,132 samples, 99.39%)</title><rect x="0.4417%" y="7941" width="99.3872%" height="15" fill="rgb(227,54,8)" fg:x="1236" fg:w="278132"/><text x="0.6917%" y="7951.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc:..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (278,104 samples, 99.38%)</title><rect x="0.4517%" y="7925" width="99.3772%" height="15" fill="rgb(253,139,49)" fg:x="1264" fg:w="278104"/><text x="0.7017%" y="7935.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (278,104 samples, 99.38%)</title><rect x="0.4517%" y="7909" width="99.3772%" height="15" fill="rgb(231,26,43)" fg:x="1264" fg:w="278104"/><text x="0.7017%" y="7919.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (278,104 samples, 99.38%)</title><rect x="0.4517%" y="7893" width="99.3772%" height="15" fill="rgb(207,121,39)" fg:x="1264" fg:w="278104"/><text x="0.7017%" y="7903.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc:..</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none (278,075 samples, 99.37%)</title><rect x="0.4620%" y="7877" width="99.3668%" height="15" fill="rgb(223,101,35)" fg:x="1293" fg:w="278075"/><text x="0.7120%" y="7887.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_none</text></g><g><title>neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some (278,075 samples, 99.37%)</title><rect x="0.4620%" y="7861" width="99.3668%" height="15" fill="rgb(232,87,23)" fg:x="1293" fg:w="278075"/><text x="0.7120%" y="7871.50">neural_network.exe`enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt; &gt; &gt;::is_some</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, tuple$&lt;usize,usize&gt;, tuple$&lt;usize,usize&gt;, tuple$ (278,075 samples, 99.37%)</title><rect x="0.4620%" y="7845" width="99.3668%" height="15" fill="rgb(225,180,29)" fg:x="1293" fg:w="278075"/><text x="0.7120%" y="7855.50">neural_network.exe`neural_network::flow::flow_ai::generate_path(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc:..</text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (33 samples, 0.01%)</title><rect x="99.9339%" y="277" width="0.0118%" height="15" fill="rgb(225,25,17)" fg:x="279662" fg:w="33"/><text x="100.1839%" y="287.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (33 samples, 0.01%)</title><rect x="99.9339%" y="261" width="0.0118%" height="15" fill="rgb(223,8,52)" fg:x="279662" fg:w="33"/><text x="100.1839%" y="271.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (33 samples, 0.01%)</title><rect x="99.9339%" y="245" width="0.0118%" height="15" fill="rgb(246,42,21)" fg:x="279662" fg:w="33"/><text x="100.1839%" y="255.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (33 samples, 0.01%)</title><rect x="99.9339%" y="229" width="0.0118%" height="15" fill="rgb(205,64,43)" fg:x="279662" fg:w="33"/><text x="100.1839%" y="239.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (33 samples, 0.01%)</title><rect x="99.9339%" y="213" width="0.0118%" height="15" fill="rgb(221,160,13)" fg:x="279662" fg:w="33"/><text x="100.1839%" y="223.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (33 samples, 0.01%)</title><rect x="99.9339%" y="197" width="0.0118%" height="15" fill="rgb(239,58,35)" fg:x="279662" fg:w="33"/><text x="100.1839%" y="207.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (33 samples, 0.01%)</title><rect x="99.9339%" y="181" width="0.0118%" height="15" fill="rgb(251,26,40)" fg:x="279662" fg:w="33"/><text x="100.1839%" y="191.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (33 samples, 0.01%)</title><rect x="99.9339%" y="165" width="0.0118%" height="15" fill="rgb(247,0,4)" fg:x="279662" fg:w="33"/><text x="100.1839%" y="175.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (31 samples, 0.01%)</title><rect x="99.9346%" y="149" width="0.0111%" height="15" fill="rgb(218,130,10)" fg:x="279664" fg:w="31"/><text x="100.1846%" y="159.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (31 samples, 0.01%)</title><rect x="99.9346%" y="133" width="0.0111%" height="15" fill="rgb(239,32,7)" fg:x="279664" fg:w="31"/><text x="100.1846%" y="143.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (31 samples, 0.01%)</title><rect x="99.9346%" y="117" width="0.0111%" height="15" fill="rgb(210,192,24)" fg:x="279664" fg:w="31"/><text x="100.1846%" y="127.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (31 samples, 0.01%)</title><rect x="99.9346%" y="101" width="0.0111%" height="15" fill="rgb(226,212,17)" fg:x="279664" fg:w="31"/><text x="100.1846%" y="111.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (31 samples, 0.01%)</title><rect x="99.9346%" y="85" width="0.0111%" height="15" fill="rgb(219,201,28)" fg:x="279664" fg:w="31"/><text x="100.1846%" y="95.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (31 samples, 0.01%)</title><rect x="99.9346%" y="69" width="0.0111%" height="15" fill="rgb(235,207,41)" fg:x="279664" fg:w="31"/><text x="100.1846%" y="79.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (31 samples, 0.01%)</title><rect x="99.9346%" y="53" width="0.0111%" height="15" fill="rgb(241,95,54)" fg:x="279664" fg:w="31"/><text x="100.1846%" y="63.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (31 samples, 0.01%)</title><rect x="99.9346%" y="37" width="0.0111%" height="15" fill="rgb(248,12,23)" fg:x="279664" fg:w="31"/><text x="100.1846%" y="47.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (42 samples, 0.02%)</title><rect x="99.9310%" y="405" width="0.0150%" height="15" fill="rgb(228,173,4)" fg:x="279654" fg:w="42"/><text x="100.1810%" y="415.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (42 samples, 0.02%)</title><rect x="99.9310%" y="389" width="0.0150%" height="15" fill="rgb(254,99,5)" fg:x="279654" fg:w="42"/><text x="100.1810%" y="399.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (42 samples, 0.02%)</title><rect x="99.9310%" y="373" width="0.0150%" height="15" fill="rgb(212,184,17)" fg:x="279654" fg:w="42"/><text x="100.1810%" y="383.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (42 samples, 0.02%)</title><rect x="99.9310%" y="357" width="0.0150%" height="15" fill="rgb(252,174,1)" fg:x="279654" fg:w="42"/><text x="100.1810%" y="367.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (42 samples, 0.02%)</title><rect x="99.9310%" y="341" width="0.0150%" height="15" fill="rgb(241,118,51)" fg:x="279654" fg:w="42"/><text x="100.1810%" y="351.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (42 samples, 0.02%)</title><rect x="99.9310%" y="325" width="0.0150%" height="15" fill="rgb(227,94,47)" fg:x="279654" fg:w="42"/><text x="100.1810%" y="335.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (42 samples, 0.02%)</title><rect x="99.9310%" y="309" width="0.0150%" height="15" fill="rgb(229,104,2)" fg:x="279654" fg:w="42"/><text x="100.1810%" y="319.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (42 samples, 0.02%)</title><rect x="99.9310%" y="293" width="0.0150%" height="15" fill="rgb(219,28,31)" fg:x="279654" fg:w="42"/><text x="100.1810%" y="303.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (48 samples, 0.02%)</title><rect x="99.9292%" y="645" width="0.0172%" height="15" fill="rgb(233,109,36)" fg:x="279649" fg:w="48"/><text x="100.1792%" y="655.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (48 samples, 0.02%)</title><rect x="99.9292%" y="629" width="0.0172%" height="15" fill="rgb(246,88,11)" fg:x="279649" fg:w="48"/><text x="100.1792%" y="639.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (48 samples, 0.02%)</title><rect x="99.9292%" y="613" width="0.0172%" height="15" fill="rgb(209,212,17)" fg:x="279649" fg:w="48"/><text x="100.1792%" y="623.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (48 samples, 0.02%)</title><rect x="99.9292%" y="597" width="0.0172%" height="15" fill="rgb(243,59,29)" fg:x="279649" fg:w="48"/><text x="100.1792%" y="607.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (48 samples, 0.02%)</title><rect x="99.9292%" y="581" width="0.0172%" height="15" fill="rgb(244,205,48)" fg:x="279649" fg:w="48"/><text x="100.1792%" y="591.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (48 samples, 0.02%)</title><rect x="99.9292%" y="565" width="0.0172%" height="15" fill="rgb(227,30,6)" fg:x="279649" fg:w="48"/><text x="100.1792%" y="575.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (48 samples, 0.02%)</title><rect x="99.9292%" y="549" width="0.0172%" height="15" fill="rgb(220,205,48)" fg:x="279649" fg:w="48"/><text x="100.1792%" y="559.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (47 samples, 0.02%)</title><rect x="99.9296%" y="533" width="0.0168%" height="15" fill="rgb(250,94,14)" fg:x="279650" fg:w="47"/><text x="100.1796%" y="543.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (47 samples, 0.02%)</title><rect x="99.9296%" y="517" width="0.0168%" height="15" fill="rgb(216,119,42)" fg:x="279650" fg:w="47"/><text x="100.1796%" y="527.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (47 samples, 0.02%)</title><rect x="99.9296%" y="501" width="0.0168%" height="15" fill="rgb(232,155,0)" fg:x="279650" fg:w="47"/><text x="100.1796%" y="511.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (47 samples, 0.02%)</title><rect x="99.9296%" y="485" width="0.0168%" height="15" fill="rgb(212,24,32)" fg:x="279650" fg:w="47"/><text x="100.1796%" y="495.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (47 samples, 0.02%)</title><rect x="99.9296%" y="469" width="0.0168%" height="15" fill="rgb(216,69,20)" fg:x="279650" fg:w="47"/><text x="100.1796%" y="479.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (47 samples, 0.02%)</title><rect x="99.9296%" y="453" width="0.0168%" height="15" fill="rgb(229,73,31)" fg:x="279650" fg:w="47"/><text x="100.1796%" y="463.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (47 samples, 0.02%)</title><rect x="99.9296%" y="437" width="0.0168%" height="15" fill="rgb(224,219,20)" fg:x="279650" fg:w="47"/><text x="100.1796%" y="447.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (47 samples, 0.02%)</title><rect x="99.9296%" y="421" width="0.0168%" height="15" fill="rgb(215,146,41)" fg:x="279650" fg:w="47"/><text x="100.1796%" y="431.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (61 samples, 0.02%)</title><rect x="99.9250%" y="1157" width="0.0218%" height="15" fill="rgb(244,71,31)" fg:x="279637" fg:w="61"/><text x="100.1750%" y="1167.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (61 samples, 0.02%)</title><rect x="99.9250%" y="1141" width="0.0218%" height="15" fill="rgb(224,24,11)" fg:x="279637" fg:w="61"/><text x="100.1750%" y="1151.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (61 samples, 0.02%)</title><rect x="99.9250%" y="1125" width="0.0218%" height="15" fill="rgb(229,76,15)" fg:x="279637" fg:w="61"/><text x="100.1750%" y="1135.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (61 samples, 0.02%)</title><rect x="99.9250%" y="1109" width="0.0218%" height="15" fill="rgb(209,93,2)" fg:x="279637" fg:w="61"/><text x="100.1750%" y="1119.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (61 samples, 0.02%)</title><rect x="99.9250%" y="1093" width="0.0218%" height="15" fill="rgb(216,200,50)" fg:x="279637" fg:w="61"/><text x="100.1750%" y="1103.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (61 samples, 0.02%)</title><rect x="99.9250%" y="1077" width="0.0218%" height="15" fill="rgb(211,67,34)" fg:x="279637" fg:w="61"/><text x="100.1750%" y="1087.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (61 samples, 0.02%)</title><rect x="99.9250%" y="1061" width="0.0218%" height="15" fill="rgb(225,87,47)" fg:x="279637" fg:w="61"/><text x="100.1750%" y="1071.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (57 samples, 0.02%)</title><rect x="99.9264%" y="1045" width="0.0204%" height="15" fill="rgb(217,185,16)" fg:x="279641" fg:w="57"/><text x="100.1764%" y="1055.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (57 samples, 0.02%)</title><rect x="99.9264%" y="1029" width="0.0204%" height="15" fill="rgb(205,0,0)" fg:x="279641" fg:w="57"/><text x="100.1764%" y="1039.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (57 samples, 0.02%)</title><rect x="99.9264%" y="1013" width="0.0204%" height="15" fill="rgb(207,116,45)" fg:x="279641" fg:w="57"/><text x="100.1764%" y="1023.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (57 samples, 0.02%)</title><rect x="99.9264%" y="997" width="0.0204%" height="15" fill="rgb(221,156,26)" fg:x="279641" fg:w="57"/><text x="100.1764%" y="1007.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (57 samples, 0.02%)</title><rect x="99.9264%" y="981" width="0.0204%" height="15" fill="rgb(213,140,4)" fg:x="279641" fg:w="57"/><text x="100.1764%" y="991.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (57 samples, 0.02%)</title><rect x="99.9264%" y="965" width="0.0204%" height="15" fill="rgb(231,224,15)" fg:x="279641" fg:w="57"/><text x="100.1764%" y="975.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (57 samples, 0.02%)</title><rect x="99.9264%" y="949" width="0.0204%" height="15" fill="rgb(244,76,20)" fg:x="279641" fg:w="57"/><text x="100.1764%" y="959.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (57 samples, 0.02%)</title><rect x="99.9264%" y="933" width="0.0204%" height="15" fill="rgb(238,117,7)" fg:x="279641" fg:w="57"/><text x="100.1764%" y="943.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (56 samples, 0.02%)</title><rect x="99.9267%" y="917" width="0.0200%" height="15" fill="rgb(235,1,10)" fg:x="279642" fg:w="56"/><text x="100.1767%" y="927.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (56 samples, 0.02%)</title><rect x="99.9267%" y="901" width="0.0200%" height="15" fill="rgb(216,165,6)" fg:x="279642" fg:w="56"/><text x="100.1767%" y="911.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (56 samples, 0.02%)</title><rect x="99.9267%" y="885" width="0.0200%" height="15" fill="rgb(246,91,35)" fg:x="279642" fg:w="56"/><text x="100.1767%" y="895.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (56 samples, 0.02%)</title><rect x="99.9267%" y="869" width="0.0200%" height="15" fill="rgb(228,96,24)" fg:x="279642" fg:w="56"/><text x="100.1767%" y="879.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (56 samples, 0.02%)</title><rect x="99.9267%" y="853" width="0.0200%" height="15" fill="rgb(254,217,53)" fg:x="279642" fg:w="56"/><text x="100.1767%" y="863.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (56 samples, 0.02%)</title><rect x="99.9267%" y="837" width="0.0200%" height="15" fill="rgb(209,60,0)" fg:x="279642" fg:w="56"/><text x="100.1767%" y="847.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (56 samples, 0.02%)</title><rect x="99.9267%" y="821" width="0.0200%" height="15" fill="rgb(250,93,26)" fg:x="279642" fg:w="56"/><text x="100.1767%" y="831.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (56 samples, 0.02%)</title><rect x="99.9267%" y="805" width="0.0200%" height="15" fill="rgb(211,9,40)" fg:x="279642" fg:w="56"/><text x="100.1767%" y="815.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (51 samples, 0.02%)</title><rect x="99.9285%" y="789" width="0.0182%" height="15" fill="rgb(242,57,20)" fg:x="279647" fg:w="51"/><text x="100.1785%" y="799.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (51 samples, 0.02%)</title><rect x="99.9285%" y="773" width="0.0182%" height="15" fill="rgb(248,85,48)" fg:x="279647" fg:w="51"/><text x="100.1785%" y="783.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (51 samples, 0.02%)</title><rect x="99.9285%" y="757" width="0.0182%" height="15" fill="rgb(212,117,2)" fg:x="279647" fg:w="51"/><text x="100.1785%" y="767.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (51 samples, 0.02%)</title><rect x="99.9285%" y="741" width="0.0182%" height="15" fill="rgb(243,19,3)" fg:x="279647" fg:w="51"/><text x="100.1785%" y="751.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (51 samples, 0.02%)</title><rect x="99.9285%" y="725" width="0.0182%" height="15" fill="rgb(232,217,24)" fg:x="279647" fg:w="51"/><text x="100.1785%" y="735.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (51 samples, 0.02%)</title><rect x="99.9285%" y="709" width="0.0182%" height="15" fill="rgb(224,175,40)" fg:x="279647" fg:w="51"/><text x="100.1785%" y="719.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (51 samples, 0.02%)</title><rect x="99.9285%" y="693" width="0.0182%" height="15" fill="rgb(212,162,32)" fg:x="279647" fg:w="51"/><text x="100.1785%" y="703.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (51 samples, 0.02%)</title><rect x="99.9285%" y="677" width="0.0182%" height="15" fill="rgb(215,9,4)" fg:x="279647" fg:w="51"/><text x="100.1785%" y="687.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (49 samples, 0.02%)</title><rect x="99.9292%" y="661" width="0.0175%" height="15" fill="rgb(242,42,7)" fg:x="279649" fg:w="49"/><text x="100.1792%" y="671.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (70 samples, 0.03%)</title><rect x="99.9221%" y="1413" width="0.0250%" height="15" fill="rgb(242,184,45)" fg:x="279629" fg:w="70"/><text x="100.1721%" y="1423.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (70 samples, 0.03%)</title><rect x="99.9221%" y="1397" width="0.0250%" height="15" fill="rgb(228,111,51)" fg:x="279629" fg:w="70"/><text x="100.1721%" y="1407.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (70 samples, 0.03%)</title><rect x="99.9221%" y="1381" width="0.0250%" height="15" fill="rgb(236,147,17)" fg:x="279629" fg:w="70"/><text x="100.1721%" y="1391.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (70 samples, 0.03%)</title><rect x="99.9221%" y="1365" width="0.0250%" height="15" fill="rgb(210,75,22)" fg:x="279629" fg:w="70"/><text x="100.1721%" y="1375.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (70 samples, 0.03%)</title><rect x="99.9221%" y="1349" width="0.0250%" height="15" fill="rgb(217,159,45)" fg:x="279629" fg:w="70"/><text x="100.1721%" y="1359.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (70 samples, 0.03%)</title><rect x="99.9221%" y="1333" width="0.0250%" height="15" fill="rgb(245,165,53)" fg:x="279629" fg:w="70"/><text x="100.1721%" y="1343.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (70 samples, 0.03%)</title><rect x="99.9221%" y="1317" width="0.0250%" height="15" fill="rgb(251,190,50)" fg:x="279629" fg:w="70"/><text x="100.1721%" y="1327.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (65 samples, 0.02%)</title><rect x="99.9239%" y="1301" width="0.0232%" height="15" fill="rgb(208,203,29)" fg:x="279634" fg:w="65"/><text x="100.1739%" y="1311.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (65 samples, 0.02%)</title><rect x="99.9239%" y="1285" width="0.0232%" height="15" fill="rgb(207,209,35)" fg:x="279634" fg:w="65"/><text x="100.1739%" y="1295.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (65 samples, 0.02%)</title><rect x="99.9239%" y="1269" width="0.0232%" height="15" fill="rgb(230,144,49)" fg:x="279634" fg:w="65"/><text x="100.1739%" y="1279.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (65 samples, 0.02%)</title><rect x="99.9239%" y="1253" width="0.0232%" height="15" fill="rgb(229,31,6)" fg:x="279634" fg:w="65"/><text x="100.1739%" y="1263.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (65 samples, 0.02%)</title><rect x="99.9239%" y="1237" width="0.0232%" height="15" fill="rgb(251,129,24)" fg:x="279634" fg:w="65"/><text x="100.1739%" y="1247.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (65 samples, 0.02%)</title><rect x="99.9239%" y="1221" width="0.0232%" height="15" fill="rgb(235,105,15)" fg:x="279634" fg:w="65"/><text x="100.1739%" y="1231.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (65 samples, 0.02%)</title><rect x="99.9239%" y="1205" width="0.0232%" height="15" fill="rgb(216,52,43)" fg:x="279634" fg:w="65"/><text x="100.1739%" y="1215.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (65 samples, 0.02%)</title><rect x="99.9239%" y="1189" width="0.0232%" height="15" fill="rgb(238,144,41)" fg:x="279634" fg:w="65"/><text x="100.1739%" y="1199.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (62 samples, 0.02%)</title><rect x="99.9250%" y="1173" width="0.0222%" height="15" fill="rgb(243,63,9)" fg:x="279637" fg:w="62"/><text x="100.1750%" y="1183.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (75 samples, 0.03%)</title><rect x="99.9207%" y="1541" width="0.0268%" height="15" fill="rgb(246,208,1)" fg:x="279625" fg:w="75"/><text x="100.1707%" y="1551.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (75 samples, 0.03%)</title><rect x="99.9207%" y="1525" width="0.0268%" height="15" fill="rgb(233,182,18)" fg:x="279625" fg:w="75"/><text x="100.1707%" y="1535.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (75 samples, 0.03%)</title><rect x="99.9207%" y="1509" width="0.0268%" height="15" fill="rgb(242,224,8)" fg:x="279625" fg:w="75"/><text x="100.1707%" y="1519.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (75 samples, 0.03%)</title><rect x="99.9207%" y="1493" width="0.0268%" height="15" fill="rgb(243,54,37)" fg:x="279625" fg:w="75"/><text x="100.1707%" y="1503.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (75 samples, 0.03%)</title><rect x="99.9207%" y="1477" width="0.0268%" height="15" fill="rgb(233,192,12)" fg:x="279625" fg:w="75"/><text x="100.1707%" y="1487.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (75 samples, 0.03%)</title><rect x="99.9207%" y="1461" width="0.0268%" height="15" fill="rgb(251,192,53)" fg:x="279625" fg:w="75"/><text x="100.1707%" y="1471.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (75 samples, 0.03%)</title><rect x="99.9207%" y="1445" width="0.0268%" height="15" fill="rgb(246,141,26)" fg:x="279625" fg:w="75"/><text x="100.1707%" y="1455.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (71 samples, 0.03%)</title><rect x="99.9221%" y="1429" width="0.0254%" height="15" fill="rgb(239,195,19)" fg:x="279629" fg:w="71"/><text x="100.1721%" y="1439.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (76 samples, 0.03%)</title><rect x="99.9207%" y="1557" width="0.0272%" height="15" fill="rgb(241,16,39)" fg:x="279625" fg:w="76"/><text x="100.1707%" y="1567.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (85 samples, 0.03%)</title><rect x="99.9192%" y="1669" width="0.0304%" height="15" fill="rgb(223,13,53)" fg:x="279621" fg:w="85"/><text x="100.1692%" y="1679.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (85 samples, 0.03%)</title><rect x="99.9192%" y="1653" width="0.0304%" height="15" fill="rgb(214,227,0)" fg:x="279621" fg:w="85"/><text x="100.1692%" y="1663.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (85 samples, 0.03%)</title><rect x="99.9192%" y="1637" width="0.0304%" height="15" fill="rgb(228,103,26)" fg:x="279621" fg:w="85"/><text x="100.1692%" y="1647.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (85 samples, 0.03%)</title><rect x="99.9192%" y="1621" width="0.0304%" height="15" fill="rgb(254,177,53)" fg:x="279621" fg:w="85"/><text x="100.1692%" y="1631.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (85 samples, 0.03%)</title><rect x="99.9192%" y="1605" width="0.0304%" height="15" fill="rgb(208,201,34)" fg:x="279621" fg:w="85"/><text x="100.1692%" y="1615.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (85 samples, 0.03%)</title><rect x="99.9192%" y="1589" width="0.0304%" height="15" fill="rgb(212,39,5)" fg:x="279621" fg:w="85"/><text x="100.1692%" y="1599.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (85 samples, 0.03%)</title><rect x="99.9192%" y="1573" width="0.0304%" height="15" fill="rgb(246,117,3)" fg:x="279621" fg:w="85"/><text x="100.1692%" y="1583.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (87 samples, 0.03%)</title><rect x="99.9192%" y="1685" width="0.0311%" height="15" fill="rgb(244,118,39)" fg:x="279621" fg:w="87"/><text x="100.1692%" y="1695.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (95 samples, 0.03%)</title><rect x="99.9167%" y="1925" width="0.0339%" height="15" fill="rgb(241,64,10)" fg:x="279614" fg:w="95"/><text x="100.1667%" y="1935.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (95 samples, 0.03%)</title><rect x="99.9167%" y="1909" width="0.0339%" height="15" fill="rgb(229,39,44)" fg:x="279614" fg:w="95"/><text x="100.1667%" y="1919.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (95 samples, 0.03%)</title><rect x="99.9167%" y="1893" width="0.0339%" height="15" fill="rgb(230,226,3)" fg:x="279614" fg:w="95"/><text x="100.1667%" y="1903.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (95 samples, 0.03%)</title><rect x="99.9167%" y="1877" width="0.0339%" height="15" fill="rgb(222,13,42)" fg:x="279614" fg:w="95"/><text x="100.1667%" y="1887.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (95 samples, 0.03%)</title><rect x="99.9167%" y="1861" width="0.0339%" height="15" fill="rgb(247,180,54)" fg:x="279614" fg:w="95"/><text x="100.1667%" y="1871.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (95 samples, 0.03%)</title><rect x="99.9167%" y="1845" width="0.0339%" height="15" fill="rgb(205,96,16)" fg:x="279614" fg:w="95"/><text x="100.1667%" y="1855.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (95 samples, 0.03%)</title><rect x="99.9167%" y="1829" width="0.0339%" height="15" fill="rgb(205,100,21)" fg:x="279614" fg:w="95"/><text x="100.1667%" y="1839.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (91 samples, 0.03%)</title><rect x="99.9182%" y="1813" width="0.0325%" height="15" fill="rgb(248,51,4)" fg:x="279618" fg:w="91"/><text x="100.1682%" y="1823.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (91 samples, 0.03%)</title><rect x="99.9182%" y="1797" width="0.0325%" height="15" fill="rgb(217,197,30)" fg:x="279618" fg:w="91"/><text x="100.1682%" y="1807.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (91 samples, 0.03%)</title><rect x="99.9182%" y="1781" width="0.0325%" height="15" fill="rgb(240,179,40)" fg:x="279618" fg:w="91"/><text x="100.1682%" y="1791.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (91 samples, 0.03%)</title><rect x="99.9182%" y="1765" width="0.0325%" height="15" fill="rgb(212,185,35)" fg:x="279618" fg:w="91"/><text x="100.1682%" y="1775.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (91 samples, 0.03%)</title><rect x="99.9182%" y="1749" width="0.0325%" height="15" fill="rgb(251,222,31)" fg:x="279618" fg:w="91"/><text x="100.1682%" y="1759.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (91 samples, 0.03%)</title><rect x="99.9182%" y="1733" width="0.0325%" height="15" fill="rgb(208,140,36)" fg:x="279618" fg:w="91"/><text x="100.1682%" y="1743.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (91 samples, 0.03%)</title><rect x="99.9182%" y="1717" width="0.0325%" height="15" fill="rgb(220,148,1)" fg:x="279618" fg:w="91"/><text x="100.1682%" y="1727.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (91 samples, 0.03%)</title><rect x="99.9182%" y="1701" width="0.0325%" height="15" fill="rgb(254,4,28)" fg:x="279618" fg:w="91"/><text x="100.1682%" y="1711.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (101 samples, 0.04%)</title><rect x="99.9150%" y="2053" width="0.0361%" height="15" fill="rgb(222,185,44)" fg:x="279609" fg:w="101"/><text x="100.1650%" y="2063.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (101 samples, 0.04%)</title><rect x="99.9150%" y="2037" width="0.0361%" height="15" fill="rgb(215,74,39)" fg:x="279609" fg:w="101"/><text x="100.1650%" y="2047.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (101 samples, 0.04%)</title><rect x="99.9150%" y="2021" width="0.0361%" height="15" fill="rgb(247,86,4)" fg:x="279609" fg:w="101"/><text x="100.1650%" y="2031.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (101 samples, 0.04%)</title><rect x="99.9150%" y="2005" width="0.0361%" height="15" fill="rgb(231,105,32)" fg:x="279609" fg:w="101"/><text x="100.1650%" y="2015.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (101 samples, 0.04%)</title><rect x="99.9150%" y="1989" width="0.0361%" height="15" fill="rgb(222,65,35)" fg:x="279609" fg:w="101"/><text x="100.1650%" y="1999.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (101 samples, 0.04%)</title><rect x="99.9150%" y="1973" width="0.0361%" height="15" fill="rgb(218,145,35)" fg:x="279609" fg:w="101"/><text x="100.1650%" y="1983.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (101 samples, 0.04%)</title><rect x="99.9150%" y="1957" width="0.0361%" height="15" fill="rgb(208,7,15)" fg:x="279609" fg:w="101"/><text x="100.1650%" y="1967.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (96 samples, 0.03%)</title><rect x="99.9167%" y="1941" width="0.0343%" height="15" fill="rgb(209,83,13)" fg:x="279614" fg:w="96"/><text x="100.1667%" y="1951.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (103 samples, 0.04%)</title><rect x="99.9150%" y="2069" width="0.0368%" height="15" fill="rgb(218,3,10)" fg:x="279609" fg:w="103"/><text x="100.1650%" y="2079.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (117 samples, 0.04%)</title><rect x="99.9103%" y="2309" width="0.0418%" height="15" fill="rgb(211,219,4)" fg:x="279596" fg:w="117"/><text x="100.1603%" y="2319.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (117 samples, 0.04%)</title><rect x="99.9103%" y="2293" width="0.0418%" height="15" fill="rgb(228,194,12)" fg:x="279596" fg:w="117"/><text x="100.1603%" y="2303.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (117 samples, 0.04%)</title><rect x="99.9103%" y="2277" width="0.0418%" height="15" fill="rgb(210,175,7)" fg:x="279596" fg:w="117"/><text x="100.1603%" y="2287.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (117 samples, 0.04%)</title><rect x="99.9103%" y="2261" width="0.0418%" height="15" fill="rgb(243,132,6)" fg:x="279596" fg:w="117"/><text x="100.1603%" y="2271.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (117 samples, 0.04%)</title><rect x="99.9103%" y="2245" width="0.0418%" height="15" fill="rgb(207,72,18)" fg:x="279596" fg:w="117"/><text x="100.1603%" y="2255.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (117 samples, 0.04%)</title><rect x="99.9103%" y="2229" width="0.0418%" height="15" fill="rgb(236,1,18)" fg:x="279596" fg:w="117"/><text x="100.1603%" y="2239.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (117 samples, 0.04%)</title><rect x="99.9103%" y="2213" width="0.0418%" height="15" fill="rgb(227,0,18)" fg:x="279596" fg:w="117"/><text x="100.1603%" y="2223.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (109 samples, 0.04%)</title><rect x="99.9132%" y="2197" width="0.0389%" height="15" fill="rgb(247,37,5)" fg:x="279604" fg:w="109"/><text x="100.1632%" y="2207.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (109 samples, 0.04%)</title><rect x="99.9132%" y="2181" width="0.0389%" height="15" fill="rgb(237,179,24)" fg:x="279604" fg:w="109"/><text x="100.1632%" y="2191.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (109 samples, 0.04%)</title><rect x="99.9132%" y="2165" width="0.0389%" height="15" fill="rgb(226,53,20)" fg:x="279604" fg:w="109"/><text x="100.1632%" y="2175.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (109 samples, 0.04%)</title><rect x="99.9132%" y="2149" width="0.0389%" height="15" fill="rgb(247,75,7)" fg:x="279604" fg:w="109"/><text x="100.1632%" y="2159.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (109 samples, 0.04%)</title><rect x="99.9132%" y="2133" width="0.0389%" height="15" fill="rgb(233,96,12)" fg:x="279604" fg:w="109"/><text x="100.1632%" y="2143.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (109 samples, 0.04%)</title><rect x="99.9132%" y="2117" width="0.0389%" height="15" fill="rgb(224,125,0)" fg:x="279604" fg:w="109"/><text x="100.1632%" y="2127.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (109 samples, 0.04%)</title><rect x="99.9132%" y="2101" width="0.0389%" height="15" fill="rgb(224,92,25)" fg:x="279604" fg:w="109"/><text x="100.1632%" y="2111.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (109 samples, 0.04%)</title><rect x="99.9132%" y="2085" width="0.0389%" height="15" fill="rgb(224,42,24)" fg:x="279604" fg:w="109"/><text x="100.1632%" y="2095.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (119 samples, 0.04%)</title><rect x="99.9103%" y="2325" width="0.0425%" height="15" fill="rgb(234,132,49)" fg:x="279596" fg:w="119"/><text x="100.1603%" y="2335.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (126 samples, 0.05%)</title><rect x="99.9082%" y="2437" width="0.0450%" height="15" fill="rgb(248,100,35)" fg:x="279590" fg:w="126"/><text x="100.1582%" y="2447.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (126 samples, 0.05%)</title><rect x="99.9082%" y="2421" width="0.0450%" height="15" fill="rgb(239,94,40)" fg:x="279590" fg:w="126"/><text x="100.1582%" y="2431.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (126 samples, 0.05%)</title><rect x="99.9082%" y="2405" width="0.0450%" height="15" fill="rgb(235,139,28)" fg:x="279590" fg:w="126"/><text x="100.1582%" y="2415.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (126 samples, 0.05%)</title><rect x="99.9082%" y="2389" width="0.0450%" height="15" fill="rgb(217,144,7)" fg:x="279590" fg:w="126"/><text x="100.1582%" y="2399.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (126 samples, 0.05%)</title><rect x="99.9082%" y="2373" width="0.0450%" height="15" fill="rgb(227,55,4)" fg:x="279590" fg:w="126"/><text x="100.1582%" y="2383.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (126 samples, 0.05%)</title><rect x="99.9082%" y="2357" width="0.0450%" height="15" fill="rgb(252,82,54)" fg:x="279590" fg:w="126"/><text x="100.1582%" y="2367.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (126 samples, 0.05%)</title><rect x="99.9082%" y="2341" width="0.0450%" height="15" fill="rgb(245,172,4)" fg:x="279590" fg:w="126"/><text x="100.1582%" y="2351.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (131 samples, 0.05%)</title><rect x="99.9074%" y="2581" width="0.0468%" height="15" fill="rgb(207,26,27)" fg:x="279588" fg:w="131"/><text x="100.1574%" y="2591.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (131 samples, 0.05%)</title><rect x="99.9074%" y="2565" width="0.0468%" height="15" fill="rgb(252,98,18)" fg:x="279588" fg:w="131"/><text x="100.1574%" y="2575.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (131 samples, 0.05%)</title><rect x="99.9074%" y="2549" width="0.0468%" height="15" fill="rgb(244,8,26)" fg:x="279588" fg:w="131"/><text x="100.1574%" y="2559.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (131 samples, 0.05%)</title><rect x="99.9074%" y="2533" width="0.0468%" height="15" fill="rgb(237,173,45)" fg:x="279588" fg:w="131"/><text x="100.1574%" y="2543.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (131 samples, 0.05%)</title><rect x="99.9074%" y="2517" width="0.0468%" height="15" fill="rgb(208,213,49)" fg:x="279588" fg:w="131"/><text x="100.1574%" y="2527.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (131 samples, 0.05%)</title><rect x="99.9074%" y="2501" width="0.0468%" height="15" fill="rgb(212,122,37)" fg:x="279588" fg:w="131"/><text x="100.1574%" y="2511.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (131 samples, 0.05%)</title><rect x="99.9074%" y="2485" width="0.0468%" height="15" fill="rgb(213,80,17)" fg:x="279588" fg:w="131"/><text x="100.1574%" y="2495.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (131 samples, 0.05%)</title><rect x="99.9074%" y="2469" width="0.0468%" height="15" fill="rgb(206,210,43)" fg:x="279588" fg:w="131"/><text x="100.1574%" y="2479.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (129 samples, 0.05%)</title><rect x="99.9082%" y="2453" width="0.0461%" height="15" fill="rgb(229,214,3)" fg:x="279590" fg:w="129"/><text x="100.1582%" y="2463.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (139 samples, 0.05%)</title><rect x="99.9053%" y="2709" width="0.0497%" height="15" fill="rgb(235,213,29)" fg:x="279582" fg:w="139"/><text x="100.1553%" y="2719.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (139 samples, 0.05%)</title><rect x="99.9053%" y="2693" width="0.0497%" height="15" fill="rgb(248,135,26)" fg:x="279582" fg:w="139"/><text x="100.1553%" y="2703.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (139 samples, 0.05%)</title><rect x="99.9053%" y="2677" width="0.0497%" height="15" fill="rgb(242,188,12)" fg:x="279582" fg:w="139"/><text x="100.1553%" y="2687.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (139 samples, 0.05%)</title><rect x="99.9053%" y="2661" width="0.0497%" height="15" fill="rgb(245,38,12)" fg:x="279582" fg:w="139"/><text x="100.1553%" y="2671.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (139 samples, 0.05%)</title><rect x="99.9053%" y="2645" width="0.0497%" height="15" fill="rgb(218,42,13)" fg:x="279582" fg:w="139"/><text x="100.1553%" y="2655.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (139 samples, 0.05%)</title><rect x="99.9053%" y="2629" width="0.0497%" height="15" fill="rgb(238,132,49)" fg:x="279582" fg:w="139"/><text x="100.1553%" y="2639.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (139 samples, 0.05%)</title><rect x="99.9053%" y="2613" width="0.0497%" height="15" fill="rgb(209,196,19)" fg:x="279582" fg:w="139"/><text x="100.1553%" y="2623.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (139 samples, 0.05%)</title><rect x="99.9053%" y="2597" width="0.0497%" height="15" fill="rgb(244,131,22)" fg:x="279582" fg:w="139"/><text x="100.1553%" y="2607.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (143 samples, 0.05%)</title><rect x="99.9042%" y="2821" width="0.0511%" height="15" fill="rgb(223,18,34)" fg:x="279579" fg:w="143"/><text x="100.1542%" y="2831.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (143 samples, 0.05%)</title><rect x="99.9042%" y="2805" width="0.0511%" height="15" fill="rgb(252,124,54)" fg:x="279579" fg:w="143"/><text x="100.1542%" y="2815.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (143 samples, 0.05%)</title><rect x="99.9042%" y="2789" width="0.0511%" height="15" fill="rgb(229,106,42)" fg:x="279579" fg:w="143"/><text x="100.1542%" y="2799.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (143 samples, 0.05%)</title><rect x="99.9042%" y="2773" width="0.0511%" height="15" fill="rgb(221,129,1)" fg:x="279579" fg:w="143"/><text x="100.1542%" y="2783.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (143 samples, 0.05%)</title><rect x="99.9042%" y="2757" width="0.0511%" height="15" fill="rgb(229,74,15)" fg:x="279579" fg:w="143"/><text x="100.1542%" y="2767.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (143 samples, 0.05%)</title><rect x="99.9042%" y="2741" width="0.0511%" height="15" fill="rgb(210,206,50)" fg:x="279579" fg:w="143"/><text x="100.1542%" y="2751.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (143 samples, 0.05%)</title><rect x="99.9042%" y="2725" width="0.0511%" height="15" fill="rgb(251,114,31)" fg:x="279579" fg:w="143"/><text x="100.1542%" y="2735.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (156 samples, 0.06%)</title><rect x="99.9003%" y="3077" width="0.0557%" height="15" fill="rgb(215,225,28)" fg:x="279568" fg:w="156"/><text x="100.1503%" y="3087.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (156 samples, 0.06%)</title><rect x="99.9003%" y="3061" width="0.0557%" height="15" fill="rgb(237,109,14)" fg:x="279568" fg:w="156"/><text x="100.1503%" y="3071.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (156 samples, 0.06%)</title><rect x="99.9003%" y="3045" width="0.0557%" height="15" fill="rgb(230,13,37)" fg:x="279568" fg:w="156"/><text x="100.1503%" y="3055.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (156 samples, 0.06%)</title><rect x="99.9003%" y="3029" width="0.0557%" height="15" fill="rgb(231,40,28)" fg:x="279568" fg:w="156"/><text x="100.1503%" y="3039.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (156 samples, 0.06%)</title><rect x="99.9003%" y="3013" width="0.0557%" height="15" fill="rgb(231,202,18)" fg:x="279568" fg:w="156"/><text x="100.1503%" y="3023.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (156 samples, 0.06%)</title><rect x="99.9003%" y="2997" width="0.0557%" height="15" fill="rgb(225,33,18)" fg:x="279568" fg:w="156"/><text x="100.1503%" y="3007.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (156 samples, 0.06%)</title><rect x="99.9003%" y="2981" width="0.0557%" height="15" fill="rgb(223,64,47)" fg:x="279568" fg:w="156"/><text x="100.1503%" y="2991.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (150 samples, 0.05%)</title><rect x="99.9024%" y="2965" width="0.0536%" height="15" fill="rgb(234,114,13)" fg:x="279574" fg:w="150"/><text x="100.1524%" y="2975.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (150 samples, 0.05%)</title><rect x="99.9024%" y="2949" width="0.0536%" height="15" fill="rgb(248,56,40)" fg:x="279574" fg:w="150"/><text x="100.1524%" y="2959.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (150 samples, 0.05%)</title><rect x="99.9024%" y="2933" width="0.0536%" height="15" fill="rgb(221,194,21)" fg:x="279574" fg:w="150"/><text x="100.1524%" y="2943.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (150 samples, 0.05%)</title><rect x="99.9024%" y="2917" width="0.0536%" height="15" fill="rgb(242,108,46)" fg:x="279574" fg:w="150"/><text x="100.1524%" y="2927.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (150 samples, 0.05%)</title><rect x="99.9024%" y="2901" width="0.0536%" height="15" fill="rgb(220,106,10)" fg:x="279574" fg:w="150"/><text x="100.1524%" y="2911.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (150 samples, 0.05%)</title><rect x="99.9024%" y="2885" width="0.0536%" height="15" fill="rgb(211,88,4)" fg:x="279574" fg:w="150"/><text x="100.1524%" y="2895.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (150 samples, 0.05%)</title><rect x="99.9024%" y="2869" width="0.0536%" height="15" fill="rgb(214,95,34)" fg:x="279574" fg:w="150"/><text x="100.1524%" y="2879.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (150 samples, 0.05%)</title><rect x="99.9024%" y="2853" width="0.0536%" height="15" fill="rgb(250,160,33)" fg:x="279574" fg:w="150"/><text x="100.1524%" y="2863.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (145 samples, 0.05%)</title><rect x="99.9042%" y="2837" width="0.0518%" height="15" fill="rgb(225,29,10)" fg:x="279579" fg:w="145"/><text x="100.1542%" y="2847.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (158 samples, 0.06%)</title><rect x="99.9003%" y="3093" width="0.0565%" height="15" fill="rgb(224,28,30)" fg:x="279568" fg:w="158"/><text x="100.1503%" y="3103.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (166 samples, 0.06%)</title><rect x="99.8982%" y="3205" width="0.0593%" height="15" fill="rgb(231,77,4)" fg:x="279562" fg:w="166"/><text x="100.1482%" y="3215.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (166 samples, 0.06%)</title><rect x="99.8982%" y="3189" width="0.0593%" height="15" fill="rgb(209,63,21)" fg:x="279562" fg:w="166"/><text x="100.1482%" y="3199.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (166 samples, 0.06%)</title><rect x="99.8982%" y="3173" width="0.0593%" height="15" fill="rgb(226,22,11)" fg:x="279562" fg:w="166"/><text x="100.1482%" y="3183.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (166 samples, 0.06%)</title><rect x="99.8982%" y="3157" width="0.0593%" height="15" fill="rgb(216,82,30)" fg:x="279562" fg:w="166"/><text x="100.1482%" y="3167.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (166 samples, 0.06%)</title><rect x="99.8982%" y="3141" width="0.0593%" height="15" fill="rgb(246,227,38)" fg:x="279562" fg:w="166"/><text x="100.1482%" y="3151.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (166 samples, 0.06%)</title><rect x="99.8982%" y="3125" width="0.0593%" height="15" fill="rgb(251,203,53)" fg:x="279562" fg:w="166"/><text x="100.1482%" y="3135.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (166 samples, 0.06%)</title><rect x="99.8982%" y="3109" width="0.0593%" height="15" fill="rgb(254,101,1)" fg:x="279562" fg:w="166"/><text x="100.1482%" y="3119.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (167 samples, 0.06%)</title><rect x="99.8982%" y="3221" width="0.0597%" height="15" fill="rgb(241,180,5)" fg:x="279562" fg:w="167"/><text x="100.1482%" y="3231.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (180 samples, 0.06%)</title><rect x="99.8942%" y="3461" width="0.0643%" height="15" fill="rgb(218,168,4)" fg:x="279551" fg:w="180"/><text x="100.1442%" y="3471.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (180 samples, 0.06%)</title><rect x="99.8942%" y="3445" width="0.0643%" height="15" fill="rgb(224,223,32)" fg:x="279551" fg:w="180"/><text x="100.1442%" y="3455.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (180 samples, 0.06%)</title><rect x="99.8942%" y="3429" width="0.0643%" height="15" fill="rgb(236,106,22)" fg:x="279551" fg:w="180"/><text x="100.1442%" y="3439.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (180 samples, 0.06%)</title><rect x="99.8942%" y="3413" width="0.0643%" height="15" fill="rgb(206,121,5)" fg:x="279551" fg:w="180"/><text x="100.1442%" y="3423.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (180 samples, 0.06%)</title><rect x="99.8942%" y="3397" width="0.0643%" height="15" fill="rgb(233,87,28)" fg:x="279551" fg:w="180"/><text x="100.1442%" y="3407.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (180 samples, 0.06%)</title><rect x="99.8942%" y="3381" width="0.0643%" height="15" fill="rgb(236,137,17)" fg:x="279551" fg:w="180"/><text x="100.1442%" y="3391.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (180 samples, 0.06%)</title><rect x="99.8942%" y="3365" width="0.0643%" height="15" fill="rgb(209,183,38)" fg:x="279551" fg:w="180"/><text x="100.1442%" y="3375.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (171 samples, 0.06%)</title><rect x="99.8974%" y="3349" width="0.0611%" height="15" fill="rgb(206,162,44)" fg:x="279560" fg:w="171"/><text x="100.1474%" y="3359.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (171 samples, 0.06%)</title><rect x="99.8974%" y="3333" width="0.0611%" height="15" fill="rgb(237,70,39)" fg:x="279560" fg:w="171"/><text x="100.1474%" y="3343.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (171 samples, 0.06%)</title><rect x="99.8974%" y="3317" width="0.0611%" height="15" fill="rgb(212,176,5)" fg:x="279560" fg:w="171"/><text x="100.1474%" y="3327.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (171 samples, 0.06%)</title><rect x="99.8974%" y="3301" width="0.0611%" height="15" fill="rgb(232,95,16)" fg:x="279560" fg:w="171"/><text x="100.1474%" y="3311.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (171 samples, 0.06%)</title><rect x="99.8974%" y="3285" width="0.0611%" height="15" fill="rgb(219,115,35)" fg:x="279560" fg:w="171"/><text x="100.1474%" y="3295.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (171 samples, 0.06%)</title><rect x="99.8974%" y="3269" width="0.0611%" height="15" fill="rgb(251,67,27)" fg:x="279560" fg:w="171"/><text x="100.1474%" y="3279.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (171 samples, 0.06%)</title><rect x="99.8974%" y="3253" width="0.0611%" height="15" fill="rgb(222,95,40)" fg:x="279560" fg:w="171"/><text x="100.1474%" y="3263.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (171 samples, 0.06%)</title><rect x="99.8974%" y="3237" width="0.0611%" height="15" fill="rgb(250,35,16)" fg:x="279560" fg:w="171"/><text x="100.1474%" y="3247.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (182 samples, 0.07%)</title><rect x="99.8942%" y="3477" width="0.0650%" height="15" fill="rgb(224,86,44)" fg:x="279551" fg:w="182"/><text x="100.1442%" y="3487.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (193 samples, 0.07%)</title><rect x="99.8907%" y="3717" width="0.0690%" height="15" fill="rgb(237,53,53)" fg:x="279541" fg:w="193"/><text x="100.1407%" y="3727.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (193 samples, 0.07%)</title><rect x="99.8907%" y="3701" width="0.0690%" height="15" fill="rgb(208,171,33)" fg:x="279541" fg:w="193"/><text x="100.1407%" y="3711.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (193 samples, 0.07%)</title><rect x="99.8907%" y="3685" width="0.0690%" height="15" fill="rgb(222,64,27)" fg:x="279541" fg:w="193"/><text x="100.1407%" y="3695.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (193 samples, 0.07%)</title><rect x="99.8907%" y="3669" width="0.0690%" height="15" fill="rgb(221,121,35)" fg:x="279541" fg:w="193"/><text x="100.1407%" y="3679.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (193 samples, 0.07%)</title><rect x="99.8907%" y="3653" width="0.0690%" height="15" fill="rgb(228,137,42)" fg:x="279541" fg:w="193"/><text x="100.1407%" y="3663.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (193 samples, 0.07%)</title><rect x="99.8907%" y="3637" width="0.0690%" height="15" fill="rgb(227,54,21)" fg:x="279541" fg:w="193"/><text x="100.1407%" y="3647.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (193 samples, 0.07%)</title><rect x="99.8907%" y="3621" width="0.0690%" height="15" fill="rgb(240,168,33)" fg:x="279541" fg:w="193"/><text x="100.1407%" y="3631.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (187 samples, 0.07%)</title><rect x="99.8928%" y="3605" width="0.0668%" height="15" fill="rgb(243,159,6)" fg:x="279547" fg:w="187"/><text x="100.1428%" y="3615.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (187 samples, 0.07%)</title><rect x="99.8928%" y="3589" width="0.0668%" height="15" fill="rgb(205,211,41)" fg:x="279547" fg:w="187"/><text x="100.1428%" y="3599.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (187 samples, 0.07%)</title><rect x="99.8928%" y="3573" width="0.0668%" height="15" fill="rgb(253,30,1)" fg:x="279547" fg:w="187"/><text x="100.1428%" y="3583.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (187 samples, 0.07%)</title><rect x="99.8928%" y="3557" width="0.0668%" height="15" fill="rgb(226,80,18)" fg:x="279547" fg:w="187"/><text x="100.1428%" y="3567.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (187 samples, 0.07%)</title><rect x="99.8928%" y="3541" width="0.0668%" height="15" fill="rgb(253,156,46)" fg:x="279547" fg:w="187"/><text x="100.1428%" y="3551.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (187 samples, 0.07%)</title><rect x="99.8928%" y="3525" width="0.0668%" height="15" fill="rgb(248,87,27)" fg:x="279547" fg:w="187"/><text x="100.1428%" y="3535.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (187 samples, 0.07%)</title><rect x="99.8928%" y="3509" width="0.0668%" height="15" fill="rgb(227,122,2)" fg:x="279547" fg:w="187"/><text x="100.1428%" y="3519.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (187 samples, 0.07%)</title><rect x="99.8928%" y="3493" width="0.0668%" height="15" fill="rgb(229,94,39)" fg:x="279547" fg:w="187"/><text x="100.1428%" y="3503.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (199 samples, 0.07%)</title><rect x="99.8889%" y="3845" width="0.0711%" height="15" fill="rgb(225,173,31)" fg:x="279536" fg:w="199"/><text x="100.1389%" y="3855.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (199 samples, 0.07%)</title><rect x="99.8889%" y="3829" width="0.0711%" height="15" fill="rgb(239,176,30)" fg:x="279536" fg:w="199"/><text x="100.1389%" y="3839.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (199 samples, 0.07%)</title><rect x="99.8889%" y="3813" width="0.0711%" height="15" fill="rgb(212,104,21)" fg:x="279536" fg:w="199"/><text x="100.1389%" y="3823.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (199 samples, 0.07%)</title><rect x="99.8889%" y="3797" width="0.0711%" height="15" fill="rgb(240,209,40)" fg:x="279536" fg:w="199"/><text x="100.1389%" y="3807.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (199 samples, 0.07%)</title><rect x="99.8889%" y="3781" width="0.0711%" height="15" fill="rgb(234,195,5)" fg:x="279536" fg:w="199"/><text x="100.1389%" y="3791.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (199 samples, 0.07%)</title><rect x="99.8889%" y="3765" width="0.0711%" height="15" fill="rgb(238,213,1)" fg:x="279536" fg:w="199"/><text x="100.1389%" y="3775.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (199 samples, 0.07%)</title><rect x="99.8889%" y="3749" width="0.0711%" height="15" fill="rgb(235,182,54)" fg:x="279536" fg:w="199"/><text x="100.1389%" y="3759.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (194 samples, 0.07%)</title><rect x="99.8907%" y="3733" width="0.0693%" height="15" fill="rgb(229,50,46)" fg:x="279541" fg:w="194"/><text x="100.1407%" y="3743.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (206 samples, 0.07%)</title><rect x="99.8867%" y="3973" width="0.0736%" height="15" fill="rgb(219,145,13)" fg:x="279530" fg:w="206"/><text x="100.1367%" y="3983.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (206 samples, 0.07%)</title><rect x="99.8867%" y="3957" width="0.0736%" height="15" fill="rgb(220,226,10)" fg:x="279530" fg:w="206"/><text x="100.1367%" y="3967.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (206 samples, 0.07%)</title><rect x="99.8867%" y="3941" width="0.0736%" height="15" fill="rgb(248,47,30)" fg:x="279530" fg:w="206"/><text x="100.1367%" y="3951.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (206 samples, 0.07%)</title><rect x="99.8867%" y="3925" width="0.0736%" height="15" fill="rgb(231,209,44)" fg:x="279530" fg:w="206"/><text x="100.1367%" y="3935.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (206 samples, 0.07%)</title><rect x="99.8867%" y="3909" width="0.0736%" height="15" fill="rgb(209,80,30)" fg:x="279530" fg:w="206"/><text x="100.1367%" y="3919.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (206 samples, 0.07%)</title><rect x="99.8867%" y="3893" width="0.0736%" height="15" fill="rgb(232,9,14)" fg:x="279530" fg:w="206"/><text x="100.1367%" y="3903.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (206 samples, 0.07%)</title><rect x="99.8867%" y="3877" width="0.0736%" height="15" fill="rgb(243,91,43)" fg:x="279530" fg:w="206"/><text x="100.1367%" y="3887.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (200 samples, 0.07%)</title><rect x="99.8889%" y="3861" width="0.0715%" height="15" fill="rgb(231,90,52)" fg:x="279536" fg:w="200"/><text x="100.1389%" y="3871.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (212 samples, 0.08%)</title><rect x="99.8849%" y="4117" width="0.0758%" height="15" fill="rgb(253,192,44)" fg:x="279525" fg:w="212"/><text x="100.1349%" y="4127.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (212 samples, 0.08%)</title><rect x="99.8849%" y="4101" width="0.0758%" height="15" fill="rgb(241,66,31)" fg:x="279525" fg:w="212"/><text x="100.1349%" y="4111.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (212 samples, 0.08%)</title><rect x="99.8849%" y="4085" width="0.0758%" height="15" fill="rgb(235,81,37)" fg:x="279525" fg:w="212"/><text x="100.1349%" y="4095.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (212 samples, 0.08%)</title><rect x="99.8849%" y="4069" width="0.0758%" height="15" fill="rgb(223,221,9)" fg:x="279525" fg:w="212"/><text x="100.1349%" y="4079.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (212 samples, 0.08%)</title><rect x="99.8849%" y="4053" width="0.0758%" height="15" fill="rgb(242,180,7)" fg:x="279525" fg:w="212"/><text x="100.1349%" y="4063.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (212 samples, 0.08%)</title><rect x="99.8849%" y="4037" width="0.0758%" height="15" fill="rgb(243,78,19)" fg:x="279525" fg:w="212"/><text x="100.1349%" y="4047.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (212 samples, 0.08%)</title><rect x="99.8849%" y="4021" width="0.0758%" height="15" fill="rgb(233,23,17)" fg:x="279525" fg:w="212"/><text x="100.1349%" y="4031.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (212 samples, 0.08%)</title><rect x="99.8849%" y="4005" width="0.0758%" height="15" fill="rgb(252,122,45)" fg:x="279525" fg:w="212"/><text x="100.1349%" y="4015.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (207 samples, 0.07%)</title><rect x="99.8867%" y="3989" width="0.0740%" height="15" fill="rgb(247,108,20)" fg:x="279530" fg:w="207"/><text x="100.1367%" y="3999.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (236 samples, 0.08%)</title><rect x="99.8767%" y="4485" width="0.0843%" height="15" fill="rgb(235,84,21)" fg:x="279502" fg:w="236"/><text x="100.1267%" y="4495.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (236 samples, 0.08%)</title><rect x="99.8767%" y="4469" width="0.0843%" height="15" fill="rgb(247,129,10)" fg:x="279502" fg:w="236"/><text x="100.1267%" y="4479.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (236 samples, 0.08%)</title><rect x="99.8767%" y="4453" width="0.0843%" height="15" fill="rgb(208,173,14)" fg:x="279502" fg:w="236"/><text x="100.1267%" y="4463.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (236 samples, 0.08%)</title><rect x="99.8767%" y="4437" width="0.0843%" height="15" fill="rgb(236,31,38)" fg:x="279502" fg:w="236"/><text x="100.1267%" y="4447.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (236 samples, 0.08%)</title><rect x="99.8767%" y="4421" width="0.0843%" height="15" fill="rgb(232,65,17)" fg:x="279502" fg:w="236"/><text x="100.1267%" y="4431.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (236 samples, 0.08%)</title><rect x="99.8767%" y="4405" width="0.0843%" height="15" fill="rgb(224,45,49)" fg:x="279502" fg:w="236"/><text x="100.1267%" y="4415.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (236 samples, 0.08%)</title><rect x="99.8767%" y="4389" width="0.0843%" height="15" fill="rgb(225,2,53)" fg:x="279502" fg:w="236"/><text x="100.1267%" y="4399.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (226 samples, 0.08%)</title><rect x="99.8803%" y="4373" width="0.0808%" height="15" fill="rgb(248,210,53)" fg:x="279512" fg:w="226"/><text x="100.1303%" y="4383.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (226 samples, 0.08%)</title><rect x="99.8803%" y="4357" width="0.0808%" height="15" fill="rgb(211,1,30)" fg:x="279512" fg:w="226"/><text x="100.1303%" y="4367.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (226 samples, 0.08%)</title><rect x="99.8803%" y="4341" width="0.0808%" height="15" fill="rgb(224,96,15)" fg:x="279512" fg:w="226"/><text x="100.1303%" y="4351.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (226 samples, 0.08%)</title><rect x="99.8803%" y="4325" width="0.0808%" height="15" fill="rgb(252,45,11)" fg:x="279512" fg:w="226"/><text x="100.1303%" y="4335.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (226 samples, 0.08%)</title><rect x="99.8803%" y="4309" width="0.0808%" height="15" fill="rgb(220,125,38)" fg:x="279512" fg:w="226"/><text x="100.1303%" y="4319.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (226 samples, 0.08%)</title><rect x="99.8803%" y="4293" width="0.0808%" height="15" fill="rgb(243,161,33)" fg:x="279512" fg:w="226"/><text x="100.1303%" y="4303.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (226 samples, 0.08%)</title><rect x="99.8803%" y="4277" width="0.0808%" height="15" fill="rgb(248,197,34)" fg:x="279512" fg:w="226"/><text x="100.1303%" y="4287.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (226 samples, 0.08%)</title><rect x="99.8803%" y="4261" width="0.0808%" height="15" fill="rgb(228,165,23)" fg:x="279512" fg:w="226"/><text x="100.1303%" y="4271.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (221 samples, 0.08%)</title><rect x="99.8821%" y="4245" width="0.0790%" height="15" fill="rgb(236,94,38)" fg:x="279517" fg:w="221"/><text x="100.1321%" y="4255.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (221 samples, 0.08%)</title><rect x="99.8821%" y="4229" width="0.0790%" height="15" fill="rgb(220,13,23)" fg:x="279517" fg:w="221"/><text x="100.1321%" y="4239.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (221 samples, 0.08%)</title><rect x="99.8821%" y="4213" width="0.0790%" height="15" fill="rgb(234,26,39)" fg:x="279517" fg:w="221"/><text x="100.1321%" y="4223.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (221 samples, 0.08%)</title><rect x="99.8821%" y="4197" width="0.0790%" height="15" fill="rgb(205,117,44)" fg:x="279517" fg:w="221"/><text x="100.1321%" y="4207.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (221 samples, 0.08%)</title><rect x="99.8821%" y="4181" width="0.0790%" height="15" fill="rgb(250,42,2)" fg:x="279517" fg:w="221"/><text x="100.1321%" y="4191.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (221 samples, 0.08%)</title><rect x="99.8821%" y="4165" width="0.0790%" height="15" fill="rgb(223,83,14)" fg:x="279517" fg:w="221"/><text x="100.1321%" y="4175.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (221 samples, 0.08%)</title><rect x="99.8821%" y="4149" width="0.0790%" height="15" fill="rgb(241,147,50)" fg:x="279517" fg:w="221"/><text x="100.1321%" y="4159.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (221 samples, 0.08%)</title><rect x="99.8821%" y="4133" width="0.0790%" height="15" fill="rgb(218,90,6)" fg:x="279517" fg:w="221"/><text x="100.1321%" y="4143.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (240 samples, 0.09%)</title><rect x="99.8756%" y="4613" width="0.0858%" height="15" fill="rgb(210,191,5)" fg:x="279499" fg:w="240"/><text x="100.1256%" y="4623.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (240 samples, 0.09%)</title><rect x="99.8756%" y="4597" width="0.0858%" height="15" fill="rgb(225,139,19)" fg:x="279499" fg:w="240"/><text x="100.1256%" y="4607.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (240 samples, 0.09%)</title><rect x="99.8756%" y="4581" width="0.0858%" height="15" fill="rgb(210,1,33)" fg:x="279499" fg:w="240"/><text x="100.1256%" y="4591.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (240 samples, 0.09%)</title><rect x="99.8756%" y="4565" width="0.0858%" height="15" fill="rgb(213,50,3)" fg:x="279499" fg:w="240"/><text x="100.1256%" y="4575.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (240 samples, 0.09%)</title><rect x="99.8756%" y="4549" width="0.0858%" height="15" fill="rgb(234,227,4)" fg:x="279499" fg:w="240"/><text x="100.1256%" y="4559.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (240 samples, 0.09%)</title><rect x="99.8756%" y="4533" width="0.0858%" height="15" fill="rgb(246,63,5)" fg:x="279499" fg:w="240"/><text x="100.1256%" y="4543.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (240 samples, 0.09%)</title><rect x="99.8756%" y="4517" width="0.0858%" height="15" fill="rgb(245,136,27)" fg:x="279499" fg:w="240"/><text x="100.1256%" y="4527.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (237 samples, 0.08%)</title><rect x="99.8767%" y="4501" width="0.0847%" height="15" fill="rgb(247,199,27)" fg:x="279502" fg:w="237"/><text x="100.1267%" y="4511.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (241 samples, 0.09%)</title><rect x="99.8756%" y="4629" width="0.0861%" height="15" fill="rgb(252,158,49)" fg:x="279499" fg:w="241"/><text x="100.1256%" y="4639.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (254 samples, 0.09%)</title><rect x="99.8714%" y="4885" width="0.0908%" height="15" fill="rgb(254,73,1)" fg:x="279487" fg:w="254"/><text x="100.1214%" y="4895.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (254 samples, 0.09%)</title><rect x="99.8714%" y="4869" width="0.0908%" height="15" fill="rgb(248,93,19)" fg:x="279487" fg:w="254"/><text x="100.1214%" y="4879.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (254 samples, 0.09%)</title><rect x="99.8714%" y="4853" width="0.0908%" height="15" fill="rgb(206,67,5)" fg:x="279487" fg:w="254"/><text x="100.1214%" y="4863.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (254 samples, 0.09%)</title><rect x="99.8714%" y="4837" width="0.0908%" height="15" fill="rgb(209,210,4)" fg:x="279487" fg:w="254"/><text x="100.1214%" y="4847.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (254 samples, 0.09%)</title><rect x="99.8714%" y="4821" width="0.0908%" height="15" fill="rgb(214,185,36)" fg:x="279487" fg:w="254"/><text x="100.1214%" y="4831.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (254 samples, 0.09%)</title><rect x="99.8714%" y="4805" width="0.0908%" height="15" fill="rgb(233,191,26)" fg:x="279487" fg:w="254"/><text x="100.1214%" y="4815.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (254 samples, 0.09%)</title><rect x="99.8714%" y="4789" width="0.0908%" height="15" fill="rgb(248,94,17)" fg:x="279487" fg:w="254"/><text x="100.1214%" y="4799.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (254 samples, 0.09%)</title><rect x="99.8714%" y="4773" width="0.0908%" height="15" fill="rgb(250,64,4)" fg:x="279487" fg:w="254"/><text x="100.1214%" y="4783.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (248 samples, 0.09%)</title><rect x="99.8735%" y="4757" width="0.0886%" height="15" fill="rgb(218,41,53)" fg:x="279493" fg:w="248"/><text x="100.1235%" y="4767.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (248 samples, 0.09%)</title><rect x="99.8735%" y="4741" width="0.0886%" height="15" fill="rgb(251,176,28)" fg:x="279493" fg:w="248"/><text x="100.1235%" y="4751.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (248 samples, 0.09%)</title><rect x="99.8735%" y="4725" width="0.0886%" height="15" fill="rgb(247,22,9)" fg:x="279493" fg:w="248"/><text x="100.1235%" y="4735.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (248 samples, 0.09%)</title><rect x="99.8735%" y="4709" width="0.0886%" height="15" fill="rgb(218,201,14)" fg:x="279493" fg:w="248"/><text x="100.1235%" y="4719.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (248 samples, 0.09%)</title><rect x="99.8735%" y="4693" width="0.0886%" height="15" fill="rgb(218,94,10)" fg:x="279493" fg:w="248"/><text x="100.1235%" y="4703.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (248 samples, 0.09%)</title><rect x="99.8735%" y="4677" width="0.0886%" height="15" fill="rgb(222,183,52)" fg:x="279493" fg:w="248"/><text x="100.1235%" y="4687.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (248 samples, 0.09%)</title><rect x="99.8735%" y="4661" width="0.0886%" height="15" fill="rgb(242,140,25)" fg:x="279493" fg:w="248"/><text x="100.1235%" y="4671.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (248 samples, 0.09%)</title><rect x="99.8735%" y="4645" width="0.0886%" height="15" fill="rgb(235,197,38)" fg:x="279493" fg:w="248"/><text x="100.1235%" y="4655.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (263 samples, 0.09%)</title><rect x="99.8685%" y="4997" width="0.0940%" height="15" fill="rgb(237,136,15)" fg:x="279479" fg:w="263"/><text x="100.1185%" y="5007.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (263 samples, 0.09%)</title><rect x="99.8685%" y="4981" width="0.0940%" height="15" fill="rgb(223,44,49)" fg:x="279479" fg:w="263"/><text x="100.1185%" y="4991.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (263 samples, 0.09%)</title><rect x="99.8685%" y="4965" width="0.0940%" height="15" fill="rgb(227,71,15)" fg:x="279479" fg:w="263"/><text x="100.1185%" y="4975.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (263 samples, 0.09%)</title><rect x="99.8685%" y="4949" width="0.0940%" height="15" fill="rgb(225,153,20)" fg:x="279479" fg:w="263"/><text x="100.1185%" y="4959.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (263 samples, 0.09%)</title><rect x="99.8685%" y="4933" width="0.0940%" height="15" fill="rgb(210,190,26)" fg:x="279479" fg:w="263"/><text x="100.1185%" y="4943.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (263 samples, 0.09%)</title><rect x="99.8685%" y="4917" width="0.0940%" height="15" fill="rgb(223,147,5)" fg:x="279479" fg:w="263"/><text x="100.1185%" y="4927.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (263 samples, 0.09%)</title><rect x="99.8685%" y="4901" width="0.0940%" height="15" fill="rgb(207,14,23)" fg:x="279479" fg:w="263"/><text x="100.1185%" y="4911.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (275 samples, 0.10%)</title><rect x="99.8646%" y="5253" width="0.0983%" height="15" fill="rgb(211,195,53)" fg:x="279468" fg:w="275"/><text x="100.1146%" y="5263.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (275 samples, 0.10%)</title><rect x="99.8646%" y="5237" width="0.0983%" height="15" fill="rgb(237,75,46)" fg:x="279468" fg:w="275"/><text x="100.1146%" y="5247.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (275 samples, 0.10%)</title><rect x="99.8646%" y="5221" width="0.0983%" height="15" fill="rgb(254,55,14)" fg:x="279468" fg:w="275"/><text x="100.1146%" y="5231.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (275 samples, 0.10%)</title><rect x="99.8646%" y="5205" width="0.0983%" height="15" fill="rgb(230,185,30)" fg:x="279468" fg:w="275"/><text x="100.1146%" y="5215.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (275 samples, 0.10%)</title><rect x="99.8646%" y="5189" width="0.0983%" height="15" fill="rgb(220,14,11)" fg:x="279468" fg:w="275"/><text x="100.1146%" y="5199.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (275 samples, 0.10%)</title><rect x="99.8646%" y="5173" width="0.0983%" height="15" fill="rgb(215,169,44)" fg:x="279468" fg:w="275"/><text x="100.1146%" y="5183.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (275 samples, 0.10%)</title><rect x="99.8646%" y="5157" width="0.0983%" height="15" fill="rgb(253,203,20)" fg:x="279468" fg:w="275"/><text x="100.1146%" y="5167.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (269 samples, 0.10%)</title><rect x="99.8667%" y="5141" width="0.0961%" height="15" fill="rgb(229,225,17)" fg:x="279474" fg:w="269"/><text x="100.1167%" y="5151.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (269 samples, 0.10%)</title><rect x="99.8667%" y="5125" width="0.0961%" height="15" fill="rgb(236,76,26)" fg:x="279474" fg:w="269"/><text x="100.1167%" y="5135.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (269 samples, 0.10%)</title><rect x="99.8667%" y="5109" width="0.0961%" height="15" fill="rgb(234,15,30)" fg:x="279474" fg:w="269"/><text x="100.1167%" y="5119.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (269 samples, 0.10%)</title><rect x="99.8667%" y="5093" width="0.0961%" height="15" fill="rgb(211,113,48)" fg:x="279474" fg:w="269"/><text x="100.1167%" y="5103.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (269 samples, 0.10%)</title><rect x="99.8667%" y="5077" width="0.0961%" height="15" fill="rgb(221,31,36)" fg:x="279474" fg:w="269"/><text x="100.1167%" y="5087.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (269 samples, 0.10%)</title><rect x="99.8667%" y="5061" width="0.0961%" height="15" fill="rgb(215,118,52)" fg:x="279474" fg:w="269"/><text x="100.1167%" y="5071.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (269 samples, 0.10%)</title><rect x="99.8667%" y="5045" width="0.0961%" height="15" fill="rgb(241,151,27)" fg:x="279474" fg:w="269"/><text x="100.1167%" y="5055.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (269 samples, 0.10%)</title><rect x="99.8667%" y="5029" width="0.0961%" height="15" fill="rgb(253,51,3)" fg:x="279474" fg:w="269"/><text x="100.1167%" y="5039.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (264 samples, 0.09%)</title><rect x="99.8685%" y="5013" width="0.0943%" height="15" fill="rgb(216,201,24)" fg:x="279479" fg:w="264"/><text x="100.1185%" y="5023.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (285 samples, 0.10%)</title><rect x="99.8614%" y="5509" width="0.1018%" height="15" fill="rgb(231,107,4)" fg:x="279459" fg:w="285"/><text x="100.1114%" y="5519.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (285 samples, 0.10%)</title><rect x="99.8614%" y="5493" width="0.1018%" height="15" fill="rgb(243,97,54)" fg:x="279459" fg:w="285"/><text x="100.1114%" y="5503.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (285 samples, 0.10%)</title><rect x="99.8614%" y="5477" width="0.1018%" height="15" fill="rgb(221,32,51)" fg:x="279459" fg:w="285"/><text x="100.1114%" y="5487.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (285 samples, 0.10%)</title><rect x="99.8614%" y="5461" width="0.1018%" height="15" fill="rgb(218,171,35)" fg:x="279459" fg:w="285"/><text x="100.1114%" y="5471.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (285 samples, 0.10%)</title><rect x="99.8614%" y="5445" width="0.1018%" height="15" fill="rgb(214,20,53)" fg:x="279459" fg:w="285"/><text x="100.1114%" y="5455.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (285 samples, 0.10%)</title><rect x="99.8614%" y="5429" width="0.1018%" height="15" fill="rgb(239,9,52)" fg:x="279459" fg:w="285"/><text x="100.1114%" y="5439.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (285 samples, 0.10%)</title><rect x="99.8614%" y="5413" width="0.1018%" height="15" fill="rgb(215,114,45)" fg:x="279459" fg:w="285"/><text x="100.1114%" y="5423.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (279 samples, 0.10%)</title><rect x="99.8635%" y="5397" width="0.0997%" height="15" fill="rgb(208,118,9)" fg:x="279465" fg:w="279"/><text x="100.1135%" y="5407.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (279 samples, 0.10%)</title><rect x="99.8635%" y="5381" width="0.0997%" height="15" fill="rgb(235,7,39)" fg:x="279465" fg:w="279"/><text x="100.1135%" y="5391.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (279 samples, 0.10%)</title><rect x="99.8635%" y="5365" width="0.0997%" height="15" fill="rgb(243,225,15)" fg:x="279465" fg:w="279"/><text x="100.1135%" y="5375.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (279 samples, 0.10%)</title><rect x="99.8635%" y="5349" width="0.0997%" height="15" fill="rgb(225,216,18)" fg:x="279465" fg:w="279"/><text x="100.1135%" y="5359.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (279 samples, 0.10%)</title><rect x="99.8635%" y="5333" width="0.0997%" height="15" fill="rgb(233,36,38)" fg:x="279465" fg:w="279"/><text x="100.1135%" y="5343.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (279 samples, 0.10%)</title><rect x="99.8635%" y="5317" width="0.0997%" height="15" fill="rgb(239,88,23)" fg:x="279465" fg:w="279"/><text x="100.1135%" y="5327.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (279 samples, 0.10%)</title><rect x="99.8635%" y="5301" width="0.0997%" height="15" fill="rgb(219,181,35)" fg:x="279465" fg:w="279"/><text x="100.1135%" y="5311.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (279 samples, 0.10%)</title><rect x="99.8635%" y="5285" width="0.0997%" height="15" fill="rgb(215,18,46)" fg:x="279465" fg:w="279"/><text x="100.1135%" y="5295.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (276 samples, 0.10%)</title><rect x="99.8646%" y="5269" width="0.0986%" height="15" fill="rgb(241,38,11)" fg:x="279468" fg:w="276"/><text x="100.1146%" y="5279.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (297 samples, 0.11%)</title><rect x="99.8574%" y="5893" width="0.1061%" height="15" fill="rgb(248,169,45)" fg:x="279448" fg:w="297"/><text x="100.1074%" y="5903.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (297 samples, 0.11%)</title><rect x="99.8574%" y="5877" width="0.1061%" height="15" fill="rgb(239,50,49)" fg:x="279448" fg:w="297"/><text x="100.1074%" y="5887.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (297 samples, 0.11%)</title><rect x="99.8574%" y="5861" width="0.1061%" height="15" fill="rgb(231,96,31)" fg:x="279448" fg:w="297"/><text x="100.1074%" y="5871.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (297 samples, 0.11%)</title><rect x="99.8574%" y="5845" width="0.1061%" height="15" fill="rgb(224,193,37)" fg:x="279448" fg:w="297"/><text x="100.1074%" y="5855.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (297 samples, 0.11%)</title><rect x="99.8574%" y="5829" width="0.1061%" height="15" fill="rgb(227,153,50)" fg:x="279448" fg:w="297"/><text x="100.1074%" y="5839.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (297 samples, 0.11%)</title><rect x="99.8574%" y="5813" width="0.1061%" height="15" fill="rgb(249,228,3)" fg:x="279448" fg:w="297"/><text x="100.1074%" y="5823.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (297 samples, 0.11%)</title><rect x="99.8574%" y="5797" width="0.1061%" height="15" fill="rgb(219,164,43)" fg:x="279448" fg:w="297"/><text x="100.1074%" y="5807.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (296 samples, 0.11%)</title><rect x="99.8578%" y="5781" width="0.1058%" height="15" fill="rgb(216,45,41)" fg:x="279449" fg:w="296"/><text x="100.1078%" y="5791.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (296 samples, 0.11%)</title><rect x="99.8578%" y="5765" width="0.1058%" height="15" fill="rgb(210,226,51)" fg:x="279449" fg:w="296"/><text x="100.1078%" y="5775.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (296 samples, 0.11%)</title><rect x="99.8578%" y="5749" width="0.1058%" height="15" fill="rgb(209,117,49)" fg:x="279449" fg:w="296"/><text x="100.1078%" y="5759.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (296 samples, 0.11%)</title><rect x="99.8578%" y="5733" width="0.1058%" height="15" fill="rgb(206,196,24)" fg:x="279449" fg:w="296"/><text x="100.1078%" y="5743.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (296 samples, 0.11%)</title><rect x="99.8578%" y="5717" width="0.1058%" height="15" fill="rgb(253,218,3)" fg:x="279449" fg:w="296"/><text x="100.1078%" y="5727.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (296 samples, 0.11%)</title><rect x="99.8578%" y="5701" width="0.1058%" height="15" fill="rgb(252,166,2)" fg:x="279449" fg:w="296"/><text x="100.1078%" y="5711.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (296 samples, 0.11%)</title><rect x="99.8578%" y="5685" width="0.1058%" height="15" fill="rgb(236,218,26)" fg:x="279449" fg:w="296"/><text x="100.1078%" y="5695.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (296 samples, 0.11%)</title><rect x="99.8578%" y="5669" width="0.1058%" height="15" fill="rgb(254,84,19)" fg:x="279449" fg:w="296"/><text x="100.1078%" y="5679.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (288 samples, 0.10%)</title><rect x="99.8606%" y="5653" width="0.1029%" height="15" fill="rgb(219,137,29)" fg:x="279457" fg:w="288"/><text x="100.1106%" y="5663.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (288 samples, 0.10%)</title><rect x="99.8606%" y="5637" width="0.1029%" height="15" fill="rgb(227,47,52)" fg:x="279457" fg:w="288"/><text x="100.1106%" y="5647.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (288 samples, 0.10%)</title><rect x="99.8606%" y="5621" width="0.1029%" height="15" fill="rgb(229,167,24)" fg:x="279457" fg:w="288"/><text x="100.1106%" y="5631.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (288 samples, 0.10%)</title><rect x="99.8606%" y="5605" width="0.1029%" height="15" fill="rgb(233,164,1)" fg:x="279457" fg:w="288"/><text x="100.1106%" y="5615.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (288 samples, 0.10%)</title><rect x="99.8606%" y="5589" width="0.1029%" height="15" fill="rgb(218,88,48)" fg:x="279457" fg:w="288"/><text x="100.1106%" y="5599.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (288 samples, 0.10%)</title><rect x="99.8606%" y="5573" width="0.1029%" height="15" fill="rgb(226,214,24)" fg:x="279457" fg:w="288"/><text x="100.1106%" y="5583.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (288 samples, 0.10%)</title><rect x="99.8606%" y="5557" width="0.1029%" height="15" fill="rgb(233,29,12)" fg:x="279457" fg:w="288"/><text x="100.1106%" y="5567.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (288 samples, 0.10%)</title><rect x="99.8606%" y="5541" width="0.1029%" height="15" fill="rgb(219,120,34)" fg:x="279457" fg:w="288"/><text x="100.1106%" y="5551.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (286 samples, 0.10%)</title><rect x="99.8614%" y="5525" width="0.1022%" height="15" fill="rgb(226,78,44)" fg:x="279459" fg:w="286"/><text x="100.1114%" y="5535.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (319 samples, 0.11%)</title><rect x="99.8499%" y="6677" width="0.1140%" height="15" fill="rgb(240,15,48)" fg:x="279427" fg:w="319"/><text x="100.0999%" y="6687.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (319 samples, 0.11%)</title><rect x="99.8499%" y="6661" width="0.1140%" height="15" fill="rgb(253,176,7)" fg:x="279427" fg:w="319"/><text x="100.0999%" y="6671.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (319 samples, 0.11%)</title><rect x="99.8499%" y="6645" width="0.1140%" height="15" fill="rgb(206,166,28)" fg:x="279427" fg:w="319"/><text x="100.0999%" y="6655.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (319 samples, 0.11%)</title><rect x="99.8499%" y="6629" width="0.1140%" height="15" fill="rgb(241,53,51)" fg:x="279427" fg:w="319"/><text x="100.0999%" y="6639.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (319 samples, 0.11%)</title><rect x="99.8499%" y="6613" width="0.1140%" height="15" fill="rgb(249,112,30)" fg:x="279427" fg:w="319"/><text x="100.0999%" y="6623.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (319 samples, 0.11%)</title><rect x="99.8499%" y="6597" width="0.1140%" height="15" fill="rgb(217,85,30)" fg:x="279427" fg:w="319"/><text x="100.0999%" y="6607.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (319 samples, 0.11%)</title><rect x="99.8499%" y="6581" width="0.1140%" height="15" fill="rgb(233,49,7)" fg:x="279427" fg:w="319"/><text x="100.0999%" y="6591.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (319 samples, 0.11%)</title><rect x="99.8499%" y="6565" width="0.1140%" height="15" fill="rgb(234,109,9)" fg:x="279427" fg:w="319"/><text x="100.0999%" y="6575.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (318 samples, 0.11%)</title><rect x="99.8503%" y="6549" width="0.1136%" height="15" fill="rgb(253,95,22)" fg:x="279428" fg:w="318"/><text x="100.1003%" y="6559.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (318 samples, 0.11%)</title><rect x="99.8503%" y="6533" width="0.1136%" height="15" fill="rgb(233,176,25)" fg:x="279428" fg:w="318"/><text x="100.1003%" y="6543.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (318 samples, 0.11%)</title><rect x="99.8503%" y="6517" width="0.1136%" height="15" fill="rgb(236,33,39)" fg:x="279428" fg:w="318"/><text x="100.1003%" y="6527.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (318 samples, 0.11%)</title><rect x="99.8503%" y="6501" width="0.1136%" height="15" fill="rgb(223,226,42)" fg:x="279428" fg:w="318"/><text x="100.1003%" y="6511.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (318 samples, 0.11%)</title><rect x="99.8503%" y="6485" width="0.1136%" height="15" fill="rgb(216,99,33)" fg:x="279428" fg:w="318"/><text x="100.1003%" y="6495.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (318 samples, 0.11%)</title><rect x="99.8503%" y="6469" width="0.1136%" height="15" fill="rgb(235,84,23)" fg:x="279428" fg:w="318"/><text x="100.1003%" y="6479.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (318 samples, 0.11%)</title><rect x="99.8503%" y="6453" width="0.1136%" height="15" fill="rgb(232,2,27)" fg:x="279428" fg:w="318"/><text x="100.1003%" y="6463.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (318 samples, 0.11%)</title><rect x="99.8503%" y="6437" width="0.1136%" height="15" fill="rgb(241,23,22)" fg:x="279428" fg:w="318"/><text x="100.1003%" y="6447.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (312 samples, 0.11%)</title><rect x="99.8524%" y="6421" width="0.1115%" height="15" fill="rgb(211,73,27)" fg:x="279434" fg:w="312"/><text x="100.1024%" y="6431.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (312 samples, 0.11%)</title><rect x="99.8524%" y="6405" width="0.1115%" height="15" fill="rgb(235,109,49)" fg:x="279434" fg:w="312"/><text x="100.1024%" y="6415.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (312 samples, 0.11%)</title><rect x="99.8524%" y="6389" width="0.1115%" height="15" fill="rgb(230,99,29)" fg:x="279434" fg:w="312"/><text x="100.1024%" y="6399.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (312 samples, 0.11%)</title><rect x="99.8524%" y="6373" width="0.1115%" height="15" fill="rgb(245,199,7)" fg:x="279434" fg:w="312"/><text x="100.1024%" y="6383.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (312 samples, 0.11%)</title><rect x="99.8524%" y="6357" width="0.1115%" height="15" fill="rgb(217,179,10)" fg:x="279434" fg:w="312"/><text x="100.1024%" y="6367.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (312 samples, 0.11%)</title><rect x="99.8524%" y="6341" width="0.1115%" height="15" fill="rgb(254,99,47)" fg:x="279434" fg:w="312"/><text x="100.1024%" y="6351.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (312 samples, 0.11%)</title><rect x="99.8524%" y="6325" width="0.1115%" height="15" fill="rgb(251,121,7)" fg:x="279434" fg:w="312"/><text x="100.1024%" y="6335.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (312 samples, 0.11%)</title><rect x="99.8524%" y="6309" width="0.1115%" height="15" fill="rgb(250,177,26)" fg:x="279434" fg:w="312"/><text x="100.1024%" y="6319.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (310 samples, 0.11%)</title><rect x="99.8531%" y="6293" width="0.1108%" height="15" fill="rgb(232,88,15)" fg:x="279436" fg:w="310"/><text x="100.1031%" y="6303.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (310 samples, 0.11%)</title><rect x="99.8531%" y="6277" width="0.1108%" height="15" fill="rgb(251,54,54)" fg:x="279436" fg:w="310"/><text x="100.1031%" y="6287.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (310 samples, 0.11%)</title><rect x="99.8531%" y="6261" width="0.1108%" height="15" fill="rgb(208,177,15)" fg:x="279436" fg:w="310"/><text x="100.1031%" y="6271.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (310 samples, 0.11%)</title><rect x="99.8531%" y="6245" width="0.1108%" height="15" fill="rgb(205,97,32)" fg:x="279436" fg:w="310"/><text x="100.1031%" y="6255.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (310 samples, 0.11%)</title><rect x="99.8531%" y="6229" width="0.1108%" height="15" fill="rgb(217,192,13)" fg:x="279436" fg:w="310"/><text x="100.1031%" y="6239.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (310 samples, 0.11%)</title><rect x="99.8531%" y="6213" width="0.1108%" height="15" fill="rgb(215,163,41)" fg:x="279436" fg:w="310"/><text x="100.1031%" y="6223.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (310 samples, 0.11%)</title><rect x="99.8531%" y="6197" width="0.1108%" height="15" fill="rgb(246,83,29)" fg:x="279436" fg:w="310"/><text x="100.1031%" y="6207.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (310 samples, 0.11%)</title><rect x="99.8531%" y="6181" width="0.1108%" height="15" fill="rgb(219,2,45)" fg:x="279436" fg:w="310"/><text x="100.1031%" y="6191.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (305 samples, 0.11%)</title><rect x="99.8549%" y="6165" width="0.1090%" height="15" fill="rgb(242,215,33)" fg:x="279441" fg:w="305"/><text x="100.1049%" y="6175.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (305 samples, 0.11%)</title><rect x="99.8549%" y="6149" width="0.1090%" height="15" fill="rgb(217,1,6)" fg:x="279441" fg:w="305"/><text x="100.1049%" y="6159.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (305 samples, 0.11%)</title><rect x="99.8549%" y="6133" width="0.1090%" height="15" fill="rgb(207,85,52)" fg:x="279441" fg:w="305"/><text x="100.1049%" y="6143.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (305 samples, 0.11%)</title><rect x="99.8549%" y="6117" width="0.1090%" height="15" fill="rgb(231,171,19)" fg:x="279441" fg:w="305"/><text x="100.1049%" y="6127.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (305 samples, 0.11%)</title><rect x="99.8549%" y="6101" width="0.1090%" height="15" fill="rgb(207,128,4)" fg:x="279441" fg:w="305"/><text x="100.1049%" y="6111.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (305 samples, 0.11%)</title><rect x="99.8549%" y="6085" width="0.1090%" height="15" fill="rgb(219,208,4)" fg:x="279441" fg:w="305"/><text x="100.1049%" y="6095.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (305 samples, 0.11%)</title><rect x="99.8549%" y="6069" width="0.1090%" height="15" fill="rgb(235,161,42)" fg:x="279441" fg:w="305"/><text x="100.1049%" y="6079.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (305 samples, 0.11%)</title><rect x="99.8549%" y="6053" width="0.1090%" height="15" fill="rgb(247,218,18)" fg:x="279441" fg:w="305"/><text x="100.1049%" y="6063.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (302 samples, 0.11%)</title><rect x="99.8560%" y="6037" width="0.1079%" height="15" fill="rgb(232,114,51)" fg:x="279444" fg:w="302"/><text x="100.1060%" y="6047.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (302 samples, 0.11%)</title><rect x="99.8560%" y="6021" width="0.1079%" height="15" fill="rgb(222,95,3)" fg:x="279444" fg:w="302"/><text x="100.1060%" y="6031.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (302 samples, 0.11%)</title><rect x="99.8560%" y="6005" width="0.1079%" height="15" fill="rgb(240,65,29)" fg:x="279444" fg:w="302"/><text x="100.1060%" y="6015.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (302 samples, 0.11%)</title><rect x="99.8560%" y="5989" width="0.1079%" height="15" fill="rgb(249,209,20)" fg:x="279444" fg:w="302"/><text x="100.1060%" y="5999.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (302 samples, 0.11%)</title><rect x="99.8560%" y="5973" width="0.1079%" height="15" fill="rgb(241,48,37)" fg:x="279444" fg:w="302"/><text x="100.1060%" y="5983.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (302 samples, 0.11%)</title><rect x="99.8560%" y="5957" width="0.1079%" height="15" fill="rgb(230,140,42)" fg:x="279444" fg:w="302"/><text x="100.1060%" y="5967.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (302 samples, 0.11%)</title><rect x="99.8560%" y="5941" width="0.1079%" height="15" fill="rgb(230,176,45)" fg:x="279444" fg:w="302"/><text x="100.1060%" y="5951.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (302 samples, 0.11%)</title><rect x="99.8560%" y="5925" width="0.1079%" height="15" fill="rgb(245,112,21)" fg:x="279444" fg:w="302"/><text x="100.1060%" y="5935.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (298 samples, 0.11%)</title><rect x="99.8574%" y="5909" width="0.1065%" height="15" fill="rgb(207,183,35)" fg:x="279448" fg:w="298"/><text x="100.1074%" y="5919.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (327 samples, 0.12%)</title><rect x="99.8474%" y="6805" width="0.1168%" height="15" fill="rgb(227,44,33)" fg:x="279420" fg:w="327"/><text x="100.0974%" y="6815.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (327 samples, 0.12%)</title><rect x="99.8474%" y="6789" width="0.1168%" height="15" fill="rgb(246,120,21)" fg:x="279420" fg:w="327"/><text x="100.0974%" y="6799.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (327 samples, 0.12%)</title><rect x="99.8474%" y="6773" width="0.1168%" height="15" fill="rgb(235,57,52)" fg:x="279420" fg:w="327"/><text x="100.0974%" y="6783.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (327 samples, 0.12%)</title><rect x="99.8474%" y="6757" width="0.1168%" height="15" fill="rgb(238,84,10)" fg:x="279420" fg:w="327"/><text x="100.0974%" y="6767.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (327 samples, 0.12%)</title><rect x="99.8474%" y="6741" width="0.1168%" height="15" fill="rgb(251,200,32)" fg:x="279420" fg:w="327"/><text x="100.0974%" y="6751.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (327 samples, 0.12%)</title><rect x="99.8474%" y="6725" width="0.1168%" height="15" fill="rgb(247,159,13)" fg:x="279420" fg:w="327"/><text x="100.0974%" y="6735.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (327 samples, 0.12%)</title><rect x="99.8474%" y="6709" width="0.1168%" height="15" fill="rgb(238,64,4)" fg:x="279420" fg:w="327"/><text x="100.0974%" y="6719.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (327 samples, 0.12%)</title><rect x="99.8474%" y="6693" width="0.1168%" height="15" fill="rgb(221,131,51)" fg:x="279420" fg:w="327"/><text x="100.0974%" y="6703.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (336 samples, 0.12%)</title><rect x="99.8446%" y="7061" width="0.1201%" height="15" fill="rgb(242,5,29)" fg:x="279412" fg:w="336"/><text x="100.0946%" y="7071.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (336 samples, 0.12%)</title><rect x="99.8446%" y="7045" width="0.1201%" height="15" fill="rgb(214,130,32)" fg:x="279412" fg:w="336"/><text x="100.0946%" y="7055.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (336 samples, 0.12%)</title><rect x="99.8446%" y="7029" width="0.1201%" height="15" fill="rgb(244,210,16)" fg:x="279412" fg:w="336"/><text x="100.0946%" y="7039.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (336 samples, 0.12%)</title><rect x="99.8446%" y="7013" width="0.1201%" height="15" fill="rgb(234,48,26)" fg:x="279412" fg:w="336"/><text x="100.0946%" y="7023.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (336 samples, 0.12%)</title><rect x="99.8446%" y="6997" width="0.1201%" height="15" fill="rgb(231,82,38)" fg:x="279412" fg:w="336"/><text x="100.0946%" y="7007.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (336 samples, 0.12%)</title><rect x="99.8446%" y="6981" width="0.1201%" height="15" fill="rgb(254,128,41)" fg:x="279412" fg:w="336"/><text x="100.0946%" y="6991.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (336 samples, 0.12%)</title><rect x="99.8446%" y="6965" width="0.1201%" height="15" fill="rgb(212,73,49)" fg:x="279412" fg:w="336"/><text x="100.0946%" y="6975.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (336 samples, 0.12%)</title><rect x="99.8446%" y="6949" width="0.1201%" height="15" fill="rgb(205,62,54)" fg:x="279412" fg:w="336"/><text x="100.0946%" y="6959.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (331 samples, 0.12%)</title><rect x="99.8463%" y="6933" width="0.1183%" height="15" fill="rgb(228,0,8)" fg:x="279417" fg:w="331"/><text x="100.0963%" y="6943.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (331 samples, 0.12%)</title><rect x="99.8463%" y="6917" width="0.1183%" height="15" fill="rgb(251,28,17)" fg:x="279417" fg:w="331"/><text x="100.0963%" y="6927.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (331 samples, 0.12%)</title><rect x="99.8463%" y="6901" width="0.1183%" height="15" fill="rgb(238,105,27)" fg:x="279417" fg:w="331"/><text x="100.0963%" y="6911.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (331 samples, 0.12%)</title><rect x="99.8463%" y="6885" width="0.1183%" height="15" fill="rgb(237,216,33)" fg:x="279417" fg:w="331"/><text x="100.0963%" y="6895.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (331 samples, 0.12%)</title><rect x="99.8463%" y="6869" width="0.1183%" height="15" fill="rgb(229,228,25)" fg:x="279417" fg:w="331"/><text x="100.0963%" y="6879.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (331 samples, 0.12%)</title><rect x="99.8463%" y="6853" width="0.1183%" height="15" fill="rgb(233,75,23)" fg:x="279417" fg:w="331"/><text x="100.0963%" y="6863.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (331 samples, 0.12%)</title><rect x="99.8463%" y="6837" width="0.1183%" height="15" fill="rgb(231,207,16)" fg:x="279417" fg:w="331"/><text x="100.0963%" y="6847.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (331 samples, 0.12%)</title><rect x="99.8463%" y="6821" width="0.1183%" height="15" fill="rgb(231,191,45)" fg:x="279417" fg:w="331"/><text x="100.0963%" y="6831.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (342 samples, 0.12%)</title><rect x="99.8428%" y="7301" width="0.1222%" height="15" fill="rgb(224,133,17)" fg:x="279407" fg:w="342"/><text x="100.0928%" y="7311.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (342 samples, 0.12%)</title><rect x="99.8428%" y="7285" width="0.1222%" height="15" fill="rgb(209,178,27)" fg:x="279407" fg:w="342"/><text x="100.0928%" y="7295.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (342 samples, 0.12%)</title><rect x="99.8428%" y="7269" width="0.1222%" height="15" fill="rgb(218,37,11)" fg:x="279407" fg:w="342"/><text x="100.0928%" y="7279.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (342 samples, 0.12%)</title><rect x="99.8428%" y="7253" width="0.1222%" height="15" fill="rgb(251,226,25)" fg:x="279407" fg:w="342"/><text x="100.0928%" y="7263.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (342 samples, 0.12%)</title><rect x="99.8428%" y="7237" width="0.1222%" height="15" fill="rgb(209,222,27)" fg:x="279407" fg:w="342"/><text x="100.0928%" y="7247.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (342 samples, 0.12%)</title><rect x="99.8428%" y="7221" width="0.1222%" height="15" fill="rgb(238,22,21)" fg:x="279407" fg:w="342"/><text x="100.0928%" y="7231.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (342 samples, 0.12%)</title><rect x="99.8428%" y="7205" width="0.1222%" height="15" fill="rgb(233,161,25)" fg:x="279407" fg:w="342"/><text x="100.0928%" y="7215.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (338 samples, 0.12%)</title><rect x="99.8442%" y="7189" width="0.1208%" height="15" fill="rgb(226,122,53)" fg:x="279411" fg:w="338"/><text x="100.0942%" y="7199.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (338 samples, 0.12%)</title><rect x="99.8442%" y="7173" width="0.1208%" height="15" fill="rgb(220,123,17)" fg:x="279411" fg:w="338"/><text x="100.0942%" y="7183.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (338 samples, 0.12%)</title><rect x="99.8442%" y="7157" width="0.1208%" height="15" fill="rgb(230,224,35)" fg:x="279411" fg:w="338"/><text x="100.0942%" y="7167.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (338 samples, 0.12%)</title><rect x="99.8442%" y="7141" width="0.1208%" height="15" fill="rgb(246,83,8)" fg:x="279411" fg:w="338"/><text x="100.0942%" y="7151.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (338 samples, 0.12%)</title><rect x="99.8442%" y="7125" width="0.1208%" height="15" fill="rgb(230,214,17)" fg:x="279411" fg:w="338"/><text x="100.0942%" y="7135.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (338 samples, 0.12%)</title><rect x="99.8442%" y="7109" width="0.1208%" height="15" fill="rgb(222,97,18)" fg:x="279411" fg:w="338"/><text x="100.0942%" y="7119.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (338 samples, 0.12%)</title><rect x="99.8442%" y="7093" width="0.1208%" height="15" fill="rgb(206,79,1)" fg:x="279411" fg:w="338"/><text x="100.0942%" y="7103.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (338 samples, 0.12%)</title><rect x="99.8442%" y="7077" width="0.1208%" height="15" fill="rgb(214,121,34)" fg:x="279411" fg:w="338"/><text x="100.0942%" y="7087.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (343 samples, 0.12%)</title><rect x="99.8428%" y="7317" width="0.1226%" height="15" fill="rgb(249,199,46)" fg:x="279407" fg:w="343"/><text x="100.0928%" y="7327.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (347 samples, 0.12%)</title><rect x="99.8417%" y="7445" width="0.1240%" height="15" fill="rgb(214,222,46)" fg:x="279404" fg:w="347"/><text x="100.0917%" y="7455.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (347 samples, 0.12%)</title><rect x="99.8417%" y="7429" width="0.1240%" height="15" fill="rgb(248,168,30)" fg:x="279404" fg:w="347"/><text x="100.0917%" y="7439.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (347 samples, 0.12%)</title><rect x="99.8417%" y="7413" width="0.1240%" height="15" fill="rgb(226,14,28)" fg:x="279404" fg:w="347"/><text x="100.0917%" y="7423.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (347 samples, 0.12%)</title><rect x="99.8417%" y="7397" width="0.1240%" height="15" fill="rgb(253,123,1)" fg:x="279404" fg:w="347"/><text x="100.0917%" y="7407.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (347 samples, 0.12%)</title><rect x="99.8417%" y="7381" width="0.1240%" height="15" fill="rgb(225,24,42)" fg:x="279404" fg:w="347"/><text x="100.0917%" y="7391.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (347 samples, 0.12%)</title><rect x="99.8417%" y="7365" width="0.1240%" height="15" fill="rgb(216,161,37)" fg:x="279404" fg:w="347"/><text x="100.0917%" y="7375.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (347 samples, 0.12%)</title><rect x="99.8417%" y="7349" width="0.1240%" height="15" fill="rgb(251,164,26)" fg:x="279404" fg:w="347"/><text x="100.0917%" y="7359.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (347 samples, 0.12%)</title><rect x="99.8417%" y="7333" width="0.1240%" height="15" fill="rgb(219,177,3)" fg:x="279404" fg:w="347"/><text x="100.0917%" y="7343.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (353 samples, 0.13%)</title><rect x="99.8399%" y="7573" width="0.1261%" height="15" fill="rgb(222,65,0)" fg:x="279399" fg:w="353"/><text x="100.0899%" y="7583.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (353 samples, 0.13%)</title><rect x="99.8399%" y="7557" width="0.1261%" height="15" fill="rgb(223,69,54)" fg:x="279399" fg:w="353"/><text x="100.0899%" y="7567.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (353 samples, 0.13%)</title><rect x="99.8399%" y="7541" width="0.1261%" height="15" fill="rgb(235,30,27)" fg:x="279399" fg:w="353"/><text x="100.0899%" y="7551.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (353 samples, 0.13%)</title><rect x="99.8399%" y="7525" width="0.1261%" height="15" fill="rgb(220,183,50)" fg:x="279399" fg:w="353"/><text x="100.0899%" y="7535.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (353 samples, 0.13%)</title><rect x="99.8399%" y="7509" width="0.1261%" height="15" fill="rgb(248,198,15)" fg:x="279399" fg:w="353"/><text x="100.0899%" y="7519.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (353 samples, 0.13%)</title><rect x="99.8399%" y="7493" width="0.1261%" height="15" fill="rgb(222,211,4)" fg:x="279399" fg:w="353"/><text x="100.0899%" y="7503.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (353 samples, 0.13%)</title><rect x="99.8399%" y="7477" width="0.1261%" height="15" fill="rgb(214,102,34)" fg:x="279399" fg:w="353"/><text x="100.0899%" y="7487.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (353 samples, 0.13%)</title><rect x="99.8399%" y="7461" width="0.1261%" height="15" fill="rgb(245,92,5)" fg:x="279399" fg:w="353"/><text x="100.0899%" y="7471.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (356 samples, 0.13%)</title><rect x="99.8392%" y="7685" width="0.1272%" height="15" fill="rgb(252,72,51)" fg:x="279397" fg:w="356"/><text x="100.0892%" y="7695.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (356 samples, 0.13%)</title><rect x="99.8392%" y="7669" width="0.1272%" height="15" fill="rgb(252,208,19)" fg:x="279397" fg:w="356"/><text x="100.0892%" y="7679.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (356 samples, 0.13%)</title><rect x="99.8392%" y="7653" width="0.1272%" height="15" fill="rgb(211,69,7)" fg:x="279397" fg:w="356"/><text x="100.0892%" y="7663.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (356 samples, 0.13%)</title><rect x="99.8392%" y="7637" width="0.1272%" height="15" fill="rgb(211,27,16)" fg:x="279397" fg:w="356"/><text x="100.0892%" y="7647.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (356 samples, 0.13%)</title><rect x="99.8392%" y="7621" width="0.1272%" height="15" fill="rgb(219,216,14)" fg:x="279397" fg:w="356"/><text x="100.0892%" y="7631.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (356 samples, 0.13%)</title><rect x="99.8392%" y="7605" width="0.1272%" height="15" fill="rgb(219,71,8)" fg:x="279397" fg:w="356"/><text x="100.0892%" y="7615.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (356 samples, 0.13%)</title><rect x="99.8392%" y="7589" width="0.1272%" height="15" fill="rgb(223,170,53)" fg:x="279397" fg:w="356"/><text x="100.0892%" y="7599.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (362 samples, 0.13%)</title><rect x="99.8385%" y="7813" width="0.1294%" height="15" fill="rgb(246,21,26)" fg:x="279395" fg:w="362"/><text x="100.0885%" y="7823.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (362 samples, 0.13%)</title><rect x="99.8385%" y="7797" width="0.1294%" height="15" fill="rgb(248,20,46)" fg:x="279395" fg:w="362"/><text x="100.0885%" y="7807.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (362 samples, 0.13%)</title><rect x="99.8385%" y="7781" width="0.1294%" height="15" fill="rgb(252,94,11)" fg:x="279395" fg:w="362"/><text x="100.0885%" y="7791.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (362 samples, 0.13%)</title><rect x="99.8385%" y="7765" width="0.1294%" height="15" fill="rgb(236,163,8)" fg:x="279395" fg:w="362"/><text x="100.0885%" y="7775.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (362 samples, 0.13%)</title><rect x="99.8385%" y="7749" width="0.1294%" height="15" fill="rgb(217,221,45)" fg:x="279395" fg:w="362"/><text x="100.0885%" y="7759.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (362 samples, 0.13%)</title><rect x="99.8385%" y="7733" width="0.1294%" height="15" fill="rgb(238,38,17)" fg:x="279395" fg:w="362"/><text x="100.0885%" y="7743.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (362 samples, 0.13%)</title><rect x="99.8385%" y="7717" width="0.1294%" height="15" fill="rgb(242,210,23)" fg:x="279395" fg:w="362"/><text x="100.0885%" y="7727.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (360 samples, 0.13%)</title><rect x="99.8392%" y="7701" width="0.1286%" height="15" fill="rgb(250,86,53)" fg:x="279397" fg:w="360"/><text x="100.0892%" y="7711.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (376 samples, 0.13%)</title><rect x="99.8338%" y="8325" width="0.1344%" height="15" fill="rgb(223,168,25)" fg:x="279382" fg:w="376"/><text x="100.0838%" y="8335.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (376 samples, 0.13%)</title><rect x="99.8338%" y="8309" width="0.1344%" height="15" fill="rgb(251,189,4)" fg:x="279382" fg:w="376"/><text x="100.0838%" y="8319.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (376 samples, 0.13%)</title><rect x="99.8338%" y="8293" width="0.1344%" height="15" fill="rgb(245,19,28)" fg:x="279382" fg:w="376"/><text x="100.0838%" y="8303.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (376 samples, 0.13%)</title><rect x="99.8338%" y="8277" width="0.1344%" height="15" fill="rgb(207,10,34)" fg:x="279382" fg:w="376"/><text x="100.0838%" y="8287.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (376 samples, 0.13%)</title><rect x="99.8338%" y="8261" width="0.1344%" height="15" fill="rgb(235,153,31)" fg:x="279382" fg:w="376"/><text x="100.0838%" y="8271.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (376 samples, 0.13%)</title><rect x="99.8338%" y="8245" width="0.1344%" height="15" fill="rgb(228,72,37)" fg:x="279382" fg:w="376"/><text x="100.0838%" y="8255.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (376 samples, 0.13%)</title><rect x="99.8338%" y="8229" width="0.1344%" height="15" fill="rgb(215,15,16)" fg:x="279382" fg:w="376"/><text x="100.0838%" y="8239.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (375 samples, 0.13%)</title><rect x="99.8342%" y="8213" width="0.1340%" height="15" fill="rgb(250,119,29)" fg:x="279383" fg:w="375"/><text x="100.0842%" y="8223.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (375 samples, 0.13%)</title><rect x="99.8342%" y="8197" width="0.1340%" height="15" fill="rgb(214,59,1)" fg:x="279383" fg:w="375"/><text x="100.0842%" y="8207.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (375 samples, 0.13%)</title><rect x="99.8342%" y="8181" width="0.1340%" height="15" fill="rgb(223,109,25)" fg:x="279383" fg:w="375"/><text x="100.0842%" y="8191.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (375 samples, 0.13%)</title><rect x="99.8342%" y="8165" width="0.1340%" height="15" fill="rgb(230,198,22)" fg:x="279383" fg:w="375"/><text x="100.0842%" y="8175.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (375 samples, 0.13%)</title><rect x="99.8342%" y="8149" width="0.1340%" height="15" fill="rgb(245,184,46)" fg:x="279383" fg:w="375"/><text x="100.0842%" y="8159.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (375 samples, 0.13%)</title><rect x="99.8342%" y="8133" width="0.1340%" height="15" fill="rgb(253,73,16)" fg:x="279383" fg:w="375"/><text x="100.0842%" y="8143.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (375 samples, 0.13%)</title><rect x="99.8342%" y="8117" width="0.1340%" height="15" fill="rgb(206,94,45)" fg:x="279383" fg:w="375"/><text x="100.0842%" y="8127.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (375 samples, 0.13%)</title><rect x="99.8342%" y="8101" width="0.1340%" height="15" fill="rgb(236,83,27)" fg:x="279383" fg:w="375"/><text x="100.0842%" y="8111.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (371 samples, 0.13%)</title><rect x="99.8356%" y="8085" width="0.1326%" height="15" fill="rgb(220,196,8)" fg:x="279387" fg:w="371"/><text x="100.0856%" y="8095.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (371 samples, 0.13%)</title><rect x="99.8356%" y="8069" width="0.1326%" height="15" fill="rgb(254,185,14)" fg:x="279387" fg:w="371"/><text x="100.0856%" y="8079.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (371 samples, 0.13%)</title><rect x="99.8356%" y="8053" width="0.1326%" height="15" fill="rgb(226,50,22)" fg:x="279387" fg:w="371"/><text x="100.0856%" y="8063.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (371 samples, 0.13%)</title><rect x="99.8356%" y="8037" width="0.1326%" height="15" fill="rgb(253,147,0)" fg:x="279387" fg:w="371"/><text x="100.0856%" y="8047.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (371 samples, 0.13%)</title><rect x="99.8356%" y="8021" width="0.1326%" height="15" fill="rgb(252,46,33)" fg:x="279387" fg:w="371"/><text x="100.0856%" y="8031.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (371 samples, 0.13%)</title><rect x="99.8356%" y="8005" width="0.1326%" height="15" fill="rgb(242,22,54)" fg:x="279387" fg:w="371"/><text x="100.0856%" y="8015.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (371 samples, 0.13%)</title><rect x="99.8356%" y="7989" width="0.1326%" height="15" fill="rgb(223,178,32)" fg:x="279387" fg:w="371"/><text x="100.0856%" y="7999.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (371 samples, 0.13%)</title><rect x="99.8356%" y="7973" width="0.1326%" height="15" fill="rgb(214,106,53)" fg:x="279387" fg:w="371"/><text x="100.0856%" y="7983.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (367 samples, 0.13%)</title><rect x="99.8371%" y="7957" width="0.1311%" height="15" fill="rgb(232,65,50)" fg:x="279391" fg:w="367"/><text x="100.0871%" y="7967.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (367 samples, 0.13%)</title><rect x="99.8371%" y="7941" width="0.1311%" height="15" fill="rgb(231,110,28)" fg:x="279391" fg:w="367"/><text x="100.0871%" y="7951.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (367 samples, 0.13%)</title><rect x="99.8371%" y="7925" width="0.1311%" height="15" fill="rgb(216,71,40)" fg:x="279391" fg:w="367"/><text x="100.0871%" y="7935.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (367 samples, 0.13%)</title><rect x="99.8371%" y="7909" width="0.1311%" height="15" fill="rgb(229,89,53)" fg:x="279391" fg:w="367"/><text x="100.0871%" y="7919.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (367 samples, 0.13%)</title><rect x="99.8371%" y="7893" width="0.1311%" height="15" fill="rgb(210,124,14)" fg:x="279391" fg:w="367"/><text x="100.0871%" y="7903.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (367 samples, 0.13%)</title><rect x="99.8371%" y="7877" width="0.1311%" height="15" fill="rgb(236,213,6)" fg:x="279391" fg:w="367"/><text x="100.0871%" y="7887.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (367 samples, 0.13%)</title><rect x="99.8371%" y="7861" width="0.1311%" height="15" fill="rgb(228,41,5)" fg:x="279391" fg:w="367"/><text x="100.0871%" y="7871.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (367 samples, 0.13%)</title><rect x="99.8371%" y="7845" width="0.1311%" height="15" fill="rgb(221,167,25)" fg:x="279391" fg:w="367"/><text x="100.0871%" y="7855.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (363 samples, 0.13%)</title><rect x="99.8385%" y="7829" width="0.1297%" height="15" fill="rgb(228,144,37)" fg:x="279395" fg:w="363"/><text x="100.0885%" y="7839.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (377 samples, 0.13%)</title><rect x="99.8338%" y="8341" width="0.1347%" height="15" fill="rgb(227,189,38)" fg:x="279382" fg:w="377"/><text x="100.0838%" y="8351.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$21::extend(alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;tuple$ (380 samples, 0.14%)</title><rect x="99.8331%" y="8469" width="0.1358%" height="15" fill="rgb(218,8,2)" fg:x="279380" fg:w="380"/><text x="100.0831%" y="8479.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$17::into_iter(alloc::vec::Vec&lt;tuple$ (380 samples, 0.14%)</title><rect x="99.8331%" y="8453" width="0.1358%" height="15" fill="rgb(209,61,28)" fg:x="279380" fg:w="380"/><text x="100.0831%" y="8463.50"></text></g><g><title>neural_network.exe`alloc::vec::impl$8::deref(alloc::vec::Vec&lt;tuple$ (380 samples, 0.14%)</title><rect x="99.8331%" y="8437" width="0.1358%" height="15" fill="rgb(233,140,39)" fg:x="279380" fg:w="380"/><text x="100.0831%" y="8447.50"></text></g><g><title>neural_network.exe`alloc::vec::Vec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::as_ptr (380 samples, 0.14%)</title><rect x="99.8331%" y="8421" width="0.1358%" height="15" fill="rgb(251,66,48)" fg:x="279380" fg:w="380"/><text x="100.0831%" y="8431.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVec&lt;tuple$&lt;usize,usize&gt;,alloc::alloc::Global&gt;::ptr (380 samples, 0.14%)</title><rect x="99.8331%" y="8405" width="0.1358%" height="15" fill="rgb(210,44,45)" fg:x="279380" fg:w="380"/><text x="100.0831%" y="8415.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (380 samples, 0.14%)</title><rect x="99.8331%" y="8389" width="0.1358%" height="15" fill="rgb(214,136,46)" fg:x="279380" fg:w="380"/><text x="100.0831%" y="8399.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (380 samples, 0.14%)</title><rect x="99.8331%" y="8373" width="0.1358%" height="15" fill="rgb(207,130,50)" fg:x="279380" fg:w="380"/><text x="100.0831%" y="8383.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (380 samples, 0.14%)</title><rect x="99.8331%" y="8357" width="0.1358%" height="15" fill="rgb(228,102,49)" fg:x="279380" fg:w="380"/><text x="100.0831%" y="8367.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_solution (279,685 samples, 99.94%)</title><rect x="0.0300%" y="8613" width="99.9421%" height="15" fill="rgb(253,55,1)" fg:x="84" fg:w="279685"/><text x="0.2800%" y="8623.50">neural_network.exe`neural_network::flow::flow_ai::generate_solution</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::find_reachable(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$ (399 samples, 0.14%)</title><rect x="99.8295%" y="8597" width="0.1426%" height="15" fill="rgb(238,222,9)" fg:x="279370" fg:w="399"/><text x="100.0795%" y="8607.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;tuple$ (393 samples, 0.14%)</title><rect x="99.8317%" y="8581" width="0.1404%" height="15" fill="rgb(246,99,6)" fg:x="279376" fg:w="393"/><text x="100.0817%" y="8591.50"></text></g><g><title>neural_network.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;tuple$ (393 samples, 0.14%)</title><rect x="99.8317%" y="8565" width="0.1404%" height="15" fill="rgb(219,110,26)" fg:x="279376" fg:w="393"/><text x="100.0817%" y="8575.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;tuple$ (393 samples, 0.14%)</title><rect x="99.8317%" y="8549" width="0.1404%" height="15" fill="rgb(239,160,33)" fg:x="279376" fg:w="393"/><text x="100.0817%" y="8559.50"></text></g><g><title>neural_network.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (393 samples, 0.14%)</title><rect x="99.8317%" y="8533" width="0.1404%" height="15" fill="rgb(220,202,23)" fg:x="279376" fg:w="393"/><text x="100.0817%" y="8543.50"></text></g><g><title>neural_network.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (393 samples, 0.14%)</title><rect x="99.8317%" y="8517" width="0.1404%" height="15" fill="rgb(208,80,26)" fg:x="279376" fg:w="393"/><text x="100.0817%" y="8527.50"></text></g><g><title>neural_network.exe`alloc::alloc::dealloc (393 samples, 0.14%)</title><rect x="99.8317%" y="8501" width="0.1404%" height="15" fill="rgb(243,85,7)" fg:x="279376" fg:w="393"/><text x="100.0817%" y="8511.50"></text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::flood_fill(ndarray::ArrayBase&lt;ndarray::data_repr::OwnedRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;array$&lt;usize,2&gt; &gt; &gt;*, tuple$&lt;usize,usize&gt;*, alloc::vec::Vec&lt;tuple$ (393 samples, 0.14%)</title><rect x="99.8317%" y="8485" width="0.1404%" height="15" fill="rgb(228,77,47)" fg:x="279376" fg:w="393"/><text x="100.0817%" y="8495.50"></text></g><g><title>`0x7FF97DFB257D (279,774 samples, 99.97%)</title><rect x="0.0011%" y="8837" width="99.9739%" height="15" fill="rgb(212,226,8)" fg:x="3" fg:w="279774"/><text x="0.2511%" y="8847.50">`0x7FF97DFB257D</text></g><g><title>neural_network.exe`std::sys::pal::windows::thread::impl$0::new::thread_start (279,731 samples, 99.96%)</title><rect x="0.0164%" y="8821" width="99.9585%" height="15" fill="rgb(241,120,54)" fg:x="46" fg:w="279731"/><text x="0.2664%" y="8831.50">neural_network.exe`std::sys::pal::windows::thread::impl$0::new::thread_start</text></g><g><title>neural_network.exe`alloc::boxed::impl$48::call_once (279,731 samples, 99.96%)</title><rect x="0.0164%" y="8805" width="99.9585%" height="15" fill="rgb(226,80,16)" fg:x="46" fg:w="279731"/><text x="0.2664%" y="8815.50">neural_network.exe`alloc::boxed::impl$48::call_once</text></g><g><title>neural_network.exe`alloc::boxed::impl$48::call_once (279,728 samples, 99.96%)</title><rect x="0.0175%" y="8789" width="99.9575%" height="15" fill="rgb(240,76,13)" fg:x="49" fg:w="279728"/><text x="0.2675%" y="8799.50">neural_network.exe`alloc::boxed::impl$48::call_once</text></g><g><title>neural_network.exe`alloc::boxed::impl$8::drop (279,728 samples, 99.96%)</title><rect x="0.0175%" y="8773" width="99.9575%" height="15" fill="rgb(252,74,8)" fg:x="49" fg:w="279728"/><text x="0.2675%" y="8783.50">neural_network.exe`alloc::boxed::impl$8::drop</text></g><g><title>neural_network.exe`core::alloc::layout::Layout::for_value_raw (279,728 samples, 99.96%)</title><rect x="0.0175%" y="8757" width="99.9575%" height="15" fill="rgb(244,155,2)" fg:x="49" fg:w="279728"/><text x="0.2675%" y="8767.50">neural_network.exe`core::alloc::layout::Layout::for_value_raw</text></g><g><title>neural_network.exe`core::mem::size_of_val_raw (279,728 samples, 99.96%)</title><rect x="0.0175%" y="8741" width="99.9575%" height="15" fill="rgb(215,81,35)" fg:x="49" fg:w="279728"/><text x="0.2675%" y="8751.50">neural_network.exe`core::mem::size_of_val_raw</text></g><g><title>neural_network.exe`core::ops::function::FnOnce::call_once&lt;std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;neural_network::flow::flow_ai::generate_puzzles_3d::closure_env$0,tuple$&lt;&gt; &gt;,tuple$&lt;&gt; &gt;(std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;neural_network::flow::flow_ai::generate_puzzles_3d::closure_env$0,tuple$ (279,728 samples, 99.96%)</title><rect x="0.0175%" y="8725" width="99.9575%" height="15" fill="rgb(206,55,2)" fg:x="49" fg:w="279728"/><text x="0.2675%" y="8735.50">neural_network.exe`core::ops::function::FnOnce::call_once&lt;std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;neural_network::flow::flow_ai::generate_puzzles_3d::clos..</text></g><g><title>neural_network.exe`std::thread::impl$0::spawn_unchecked_::closure$1(std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;neural_network::flow::flow_ai::generate_puzzles_3d::closure_env$0,tuple$ (279,727 samples, 99.96%)</title><rect x="0.0179%" y="8709" width="99.9571%" height="15" fill="rgb(231,2,34)" fg:x="50" fg:w="279727"/><text x="0.2679%" y="8719.50">neural_network.exe`std::thread::impl$0::spawn_unchecked_::closure$1(std::thread::impl$0::spawn_unchecked_::closure_env$1&lt;neural_network::flow::flow_ai::generate_puzzle..</text></g><g><title>neural_network.exe`alloc::sync::impl$29::deref(alloc::sync::Arc&lt;std::thread::Packet&lt;tuple$ (279,727 samples, 99.96%)</title><rect x="0.0179%" y="8693" width="99.9571%" height="15" fill="rgb(242,176,48)" fg:x="50" fg:w="279727"/><text x="0.2679%" y="8703.50">neural_network.exe`alloc::sync::impl$29::deref(alloc::sync::Arc&lt;std::thread::Packet&lt;tuple$</text></g><g><title>neural_network.exe`alloc::sync::Arc&lt;std::thread::Packet&lt;tuple$&lt;&gt; &gt;,alloc::alloc::Global&gt;::inner (279,727 samples, 99.96%)</title><rect x="0.0179%" y="8677" width="99.9571%" height="15" fill="rgb(249,31,36)" fg:x="50" fg:w="279727"/><text x="0.2679%" y="8687.50">neural_network.exe`alloc::sync::Arc&lt;std::thread::Packet&lt;tuple$&lt;&gt; &gt;,alloc::alloc::Global&gt;::inner</text></g><g><title>neural_network.exe`core::ptr::non_null::NonNull&lt;alloc::sync::ArcInner&lt;std::thread::Packet&lt;tuple$&lt;&gt; &gt; &gt; &gt;::as_ref (279,727 samples, 99.96%)</title><rect x="0.0179%" y="8661" width="99.9571%" height="15" fill="rgb(205,18,17)" fg:x="50" fg:w="279727"/><text x="0.2679%" y="8671.50">neural_network.exe`core::ptr::non_null::NonNull&lt;alloc::sync::ArcInner&lt;std::thread::Packet&lt;tuple$&lt;&gt; &gt; &gt; &gt;::as_ref</text></g><g><title>neural_network.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;neural_network::flow::flow_ai::generate_puzzles_3d::closure_env$0,tuple$&lt;&gt; &gt; (279,727 samples, 99.96%)</title><rect x="0.0179%" y="8645" width="99.9571%" height="15" fill="rgb(254,130,5)" fg:x="50" fg:w="279727"/><text x="0.2679%" y="8655.50">neural_network.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;neural_network::flow::flow_ai::generate_puzzles_3d::closure_env$0,tuple$&lt;&gt; &gt;</text></g><g><title>neural_network.exe`neural_network::flow::flow_ai::generate_puzzles_3d::closure$0 (279,727 samples, 99.96%)</title><rect x="0.0179%" y="8629" width="99.9571%" height="15" fill="rgb(229,42,45)" fg:x="50" fg:w="279727"/><text x="0.2679%" y="8639.50">neural_network.exe`neural_network::flow::flow_ai::generate_puzzles_3d::closure$0</text></g><g><title>`0x7FF97E64AF28 (279,785 samples, 99.98%)</title><rect x="0.0011%" y="8853" width="99.9778%" height="15" fill="rgb(245,95,25)" fg:x="3" fg:w="279785"/><text x="0.2511%" y="8863.50">`0x7FF97E64AF28</text></g><g><title>`0x7FF97E66444F (38 samples, 0.01%)</title><rect x="99.9803%" y="8821" width="0.0136%" height="15" fill="rgb(249,193,38)" fg:x="279792" fg:w="38"/><text x="100.2303%" y="8831.50"></text></g><g><title>all (279,847 samples, 100%)</title><rect x="0.0000%" y="8869" width="100.0000%" height="15" fill="rgb(241,140,43)" fg:x="0" fg:w="279847"/><text x="0.2500%" y="8879.50"></text></g><g><title>`0x7FF97E6642AE (55 samples, 0.02%)</title><rect x="99.9803%" y="8853" width="0.0197%" height="15" fill="rgb(245,78,48)" fg:x="279792" fg:w="55"/><text x="100.2303%" y="8863.50"></text></g><g><title>`0x7FF97E664383 (55 samples, 0.02%)</title><rect x="99.9803%" y="8837" width="0.0197%" height="15" fill="rgb(214,92,39)" fg:x="279792" fg:w="55"/><text x="100.2303%" y="8847.50"></text></g></svg></svg>