<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="502" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="485.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="485.00"> </text><svg id="frames" x="10" width="1180" total_samples="23000"><g><title>`0x10 (18 samples, 0.08%)</title><rect x="0.0000%" y="437" width="0.0783%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="18"/><text x="0.2500%" y="447.50"></text></g><g><title>neural_network.exe`_ZN14matrixmultiply12sgemm_kernel17kernel_target_fma17h60f801d0d7a890adE (18 samples, 0.08%)</title><rect x="0.0000%" y="421" width="0.0783%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="18"/><text x="0.2500%" y="431.50"></text></g><g><title>`0x7FF97E60128B (4 samples, 0.02%)</title><rect x="0.1000%" y="357" width="0.0174%" height="15" fill="rgb(221,193,54)" fg:x="23" fg:w="4"/><text x="0.3500%" y="367.50"></text></g><g><title>`0x7FF97E625E66 (8 samples, 0.03%)</title><rect x="0.1000%" y="405" width="0.0348%" height="15" fill="rgb(248,212,6)" fg:x="23" fg:w="8"/><text x="0.3500%" y="415.50"></text></g><g><title>`0x7FF97E65289A (8 samples, 0.03%)</title><rect x="0.1000%" y="389" width="0.0348%" height="15" fill="rgb(208,68,35)" fg:x="23" fg:w="8"/><text x="0.3500%" y="399.50"></text></g><g><title>`0x7FF97E6011CB (8 samples, 0.03%)</title><rect x="0.1000%" y="373" width="0.0348%" height="15" fill="rgb(232,128,0)" fg:x="23" fg:w="8"/><text x="0.3500%" y="383.50"></text></g><g><title>`0x7FF97E601390 (4 samples, 0.02%)</title><rect x="0.1174%" y="357" width="0.0174%" height="15" fill="rgb(207,160,47)" fg:x="27" fg:w="4"/><text x="0.3674%" y="367.50"></text></g><g><title>`0x7FF97BF5BEA8 (4 samples, 0.02%)</title><rect x="0.1348%" y="373" width="0.0174%" height="15" fill="rgb(228,23,34)" fg:x="31" fg:w="4"/><text x="0.3848%" y="383.50"></text></g><g><title>`0x7FF97BF68FB1 (4 samples, 0.02%)</title><rect x="0.1348%" y="357" width="0.0174%" height="15" fill="rgb(218,30,26)" fg:x="31" fg:w="4"/><text x="0.3848%" y="367.50"></text></g><g><title>`0x7FF97BF61C03 (4 samples, 0.02%)</title><rect x="0.1348%" y="341" width="0.0174%" height="15" fill="rgb(220,122,19)" fg:x="31" fg:w="4"/><text x="0.3848%" y="351.50"></text></g><g><title>`0x7FF97B93B412 (4 samples, 0.02%)</title><rect x="0.1348%" y="325" width="0.0174%" height="15" fill="rgb(250,228,42)" fg:x="31" fg:w="4"/><text x="0.3848%" y="335.50"></text></g><g><title>`0x7FF97E61A73A (4 samples, 0.02%)</title><rect x="0.1348%" y="309" width="0.0174%" height="15" fill="rgb(240,193,28)" fg:x="31" fg:w="4"/><text x="0.3848%" y="319.50"></text></g><g><title>`0x7FF97E6090AC (3 samples, 0.01%)</title><rect x="0.1391%" y="293" width="0.0130%" height="15" fill="rgb(216,20,37)" fg:x="32" fg:w="3"/><text x="0.3891%" y="303.50"></text></g><g><title>`0x7FF97E618DB4 (3 samples, 0.01%)</title><rect x="0.1391%" y="277" width="0.0130%" height="15" fill="rgb(206,188,39)" fg:x="32" fg:w="3"/><text x="0.3891%" y="287.50"></text></g><g><title>`0x7FF97E6012BF (3 samples, 0.01%)</title><rect x="0.1391%" y="261" width="0.0130%" height="15" fill="rgb(217,207,13)" fg:x="32" fg:w="3"/><text x="0.3891%" y="271.50"></text></g><g><title>`0x7FF97BF5C099 (5 samples, 0.02%)</title><rect x="0.1348%" y="389" width="0.0217%" height="15" fill="rgb(231,73,38)" fg:x="31" fg:w="5"/><text x="0.3848%" y="399.50"></text></g><g><title>`0x7FF968D51388 (4 samples, 0.02%)</title><rect x="0.3130%" y="197" width="0.0174%" height="15" fill="rgb(225,20,46)" fg:x="72" fg:w="4"/><text x="0.5630%" y="207.50"></text></g><g><title>`0x7FF97E69CC6F (3 samples, 0.01%)</title><rect x="0.3783%" y="181" width="0.0130%" height="15" fill="rgb(210,31,41)" fg:x="87" fg:w="3"/><text x="0.6283%" y="191.50"></text></g><g><title>`0x7FF97E62AFF1 (10 samples, 0.04%)</title><rect x="0.3522%" y="197" width="0.0435%" height="15" fill="rgb(221,200,47)" fg:x="81" fg:w="10"/><text x="0.6022%" y="207.50"></text></g><g><title>`0x7FF97E62CC9A (3 samples, 0.01%)</title><rect x="0.4261%" y="165" width="0.0130%" height="15" fill="rgb(226,26,5)" fg:x="98" fg:w="3"/><text x="0.6761%" y="175.50"></text></g><g><title>`0x7FF97E62D5E2 (3 samples, 0.01%)</title><rect x="0.4261%" y="149" width="0.0130%" height="15" fill="rgb(249,33,26)" fg:x="98" fg:w="3"/><text x="0.6761%" y="159.50"></text></g><g><title>`0x7FF97E62D68A (3 samples, 0.01%)</title><rect x="0.5000%" y="101" width="0.0130%" height="15" fill="rgb(235,183,28)" fg:x="115" fg:w="3"/><text x="0.7500%" y="111.50"></text></g><g><title>`0x7FF97E62DBBF (14 samples, 0.06%)</title><rect x="0.5391%" y="101" width="0.0609%" height="15" fill="rgb(221,5,38)" fg:x="124" fg:w="14"/><text x="0.7891%" y="111.50"></text></g><g><title>`0x7FF97E631B1F (4 samples, 0.02%)</title><rect x="0.5826%" y="85" width="0.0174%" height="15" fill="rgb(247,18,42)" fg:x="134" fg:w="4"/><text x="0.8326%" y="95.50"></text></g><g><title>`0x7FF97E631CA3 (4 samples, 0.02%)</title><rect x="0.5826%" y="69" width="0.0174%" height="15" fill="rgb(241,131,45)" fg:x="134" fg:w="4"/><text x="0.8326%" y="79.50"></text></g><g><title>`0x7FF97E62CC9A (31 samples, 0.13%)</title><rect x="0.4826%" y="117" width="0.1348%" height="15" fill="rgb(249,31,29)" fg:x="111" fg:w="31"/><text x="0.7326%" y="127.50"></text></g><g><title>`0x7FF97E62DBDD (4 samples, 0.02%)</title><rect x="0.6000%" y="101" width="0.0174%" height="15" fill="rgb(225,111,53)" fg:x="138" fg:w="4"/><text x="0.8500%" y="111.50"></text></g><g><title>`0x7FF97E633505 (40 samples, 0.17%)</title><rect x="0.4565%" y="133" width="0.1739%" height="15" fill="rgb(238,160,17)" fg:x="105" fg:w="40"/><text x="0.7065%" y="143.50"></text></g><g><title>`0x7FF97E633562 (9 samples, 0.04%)</title><rect x="0.6391%" y="133" width="0.0391%" height="15" fill="rgb(214,148,48)" fg:x="147" fg:w="9"/><text x="0.8891%" y="143.50"></text></g><g><title>`0x7FF97E62AFF1 (6 samples, 0.03%)</title><rect x="0.6522%" y="117" width="0.0261%" height="15" fill="rgb(232,36,49)" fg:x="150" fg:w="6"/><text x="0.9022%" y="127.50"></text></g><g><title>`0x7FF97E6322C7 (54 samples, 0.23%)</title><rect x="0.4478%" y="149" width="0.2348%" height="15" fill="rgb(209,103,24)" fg:x="103" fg:w="54"/><text x="0.6978%" y="159.50"></text></g><g><title>`0x7FF97E63218A (59 samples, 0.26%)</title><rect x="0.4435%" y="165" width="0.2565%" height="15" fill="rgb(229,88,8)" fg:x="102" fg:w="59"/><text x="0.6935%" y="175.50"></text></g><g><title>`0x7FF97E632307 (3 samples, 0.01%)</title><rect x="0.6870%" y="149" width="0.0130%" height="15" fill="rgb(213,181,19)" fg:x="158" fg:w="3"/><text x="0.9370%" y="159.50"></text></g><g><title>neural_network.exe`_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17hae972f89b89eaa0eE (69 samples, 0.30%)</title><rect x="0.4043%" y="197" width="0.3000%" height="15" fill="rgb(254,191,54)" fg:x="93" fg:w="69"/><text x="0.6543%" y="207.50"></text></g><g><title>neural_network.exe`_ZN5alloc7raw_vec11finish_grow17hcdd8c185bebeaceaE.llvm.13340812632010285679 (68 samples, 0.30%)</title><rect x="0.4087%" y="181" width="0.2957%" height="15" fill="rgb(241,83,37)" fg:x="94" fg:w="68"/><text x="0.6587%" y="191.50"></text></g><g><title>`0x7FF97E696CD3 (9 samples, 0.04%)</title><rect x="0.7174%" y="117" width="0.0391%" height="15" fill="rgb(233,36,39)" fg:x="165" fg:w="9"/><text x="0.9674%" y="127.50"></text></g><g><title>`0x7FF97E696CD7 (5 samples, 0.02%)</title><rect x="0.7565%" y="117" width="0.0217%" height="15" fill="rgb(226,3,54)" fg:x="174" fg:w="5"/><text x="1.0065%" y="127.50"></text></g><g><title>`0x7FF97E632AFE (22 samples, 0.10%)</title><rect x="0.7087%" y="133" width="0.0957%" height="15" fill="rgb(245,192,40)" fg:x="163" fg:w="22"/><text x="0.9587%" y="143.50"></text></g><g><title>`0x7FF97E696CEB (4 samples, 0.02%)</title><rect x="0.7870%" y="117" width="0.0174%" height="15" fill="rgb(238,167,29)" fg:x="181" fg:w="4"/><text x="1.0370%" y="127.50"></text></g><g><title>neural_network.exe`_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$7reserve21do_reserve_and_handle17h5fb860b30573fefeE.llvm.13340812632010285679 (26 samples, 0.11%)</title><rect x="0.7043%" y="197" width="0.1130%" height="15" fill="rgb(232,182,51)" fg:x="162" fg:w="26"/><text x="0.9543%" y="207.50"></text></g><g><title>neural_network.exe`_ZN5alloc7raw_vec11finish_grow17hcdd8c185bebeaceaE.llvm.13340812632010285679 (26 samples, 0.11%)</title><rect x="0.7043%" y="181" width="0.1130%" height="15" fill="rgb(231,60,39)" fg:x="162" fg:w="26"/><text x="0.9543%" y="191.50"></text></g><g><title>`0x7FF97E63218A (26 samples, 0.11%)</title><rect x="0.7043%" y="165" width="0.1130%" height="15" fill="rgb(208,69,12)" fg:x="162" fg:w="26"/><text x="0.9543%" y="175.50"></text></g><g><title>`0x7FF97E6322C7 (26 samples, 0.11%)</title><rect x="0.7043%" y="149" width="0.1130%" height="15" fill="rgb(235,93,37)" fg:x="162" fg:w="26"/><text x="0.9543%" y="159.50"></text></g><g><title>`0x7FF97E632B11 (3 samples, 0.01%)</title><rect x="0.8043%" y="133" width="0.0130%" height="15" fill="rgb(213,116,39)" fg:x="185" fg:w="3"/><text x="1.0543%" y="143.50"></text></g><g><title>`0x7FF97E62AFF1 (3 samples, 0.01%)</title><rect x="0.8043%" y="117" width="0.0130%" height="15" fill="rgb(222,207,29)" fg:x="185" fg:w="3"/><text x="1.0543%" y="127.50"></text></g><g><title>`0x7FF97E62C324 (3 samples, 0.01%)</title><rect x="0.8043%" y="101" width="0.0130%" height="15" fill="rgb(206,96,30)" fg:x="185" fg:w="3"/><text x="1.0543%" y="111.50"></text></g><g><title>`0x7FF97E62A10C (3 samples, 0.01%)</title><rect x="0.8043%" y="85" width="0.0130%" height="15" fill="rgb(218,138,4)" fg:x="185" fg:w="3"/><text x="1.0543%" y="95.50"></text></g><g><title>`0x7FF97E636AC6 (3 samples, 0.01%)</title><rect x="0.8043%" y="69" width="0.0130%" height="15" fill="rgb(250,191,14)" fg:x="185" fg:w="3"/><text x="1.0543%" y="79.50"></text></g><g><title>`0x7FF97E690364 (3 samples, 0.01%)</title><rect x="0.8043%" y="53" width="0.0130%" height="15" fill="rgb(239,60,40)" fg:x="185" fg:w="3"/><text x="1.0543%" y="63.50"></text></g><g><title>`0x7FF968D51381 (3 samples, 0.01%)</title><rect x="0.8174%" y="181" width="0.0130%" height="15" fill="rgb(206,27,48)" fg:x="188" fg:w="3"/><text x="1.0674%" y="191.50"></text></g><g><title>neural_network.exe`_ZN98_$LT$alloc..vec..Vec$LT$T$GT$$u20$as$u20$alloc..vec..spec_from_iter..SpecFromIter$LT$T$C$I$GT$$GT$9from_iter17h4e52541424a9e6d5E (6 samples, 0.03%)</title><rect x="0.8174%" y="197" width="0.0261%" height="15" fill="rgb(225,35,8)" fg:x="188" fg:w="6"/><text x="1.0674%" y="207.50"></text></g><g><title>`0x7FF97E62CC9A (3 samples, 0.01%)</title><rect x="0.8304%" y="181" width="0.0130%" height="15" fill="rgb(250,213,24)" fg:x="191" fg:w="3"/><text x="1.0804%" y="191.50"></text></g><g><title>`0x7FF97E62DBBF (3 samples, 0.01%)</title><rect x="0.8304%" y="165" width="0.0130%" height="15" fill="rgb(247,123,22)" fg:x="191" fg:w="3"/><text x="1.0804%" y="175.50"></text></g><g><title>`0x7FF97E631921 (3 samples, 0.01%)</title><rect x="0.8304%" y="149" width="0.0130%" height="15" fill="rgb(231,138,38)" fg:x="191" fg:w="3"/><text x="1.0804%" y="159.50"></text></g><g><title>neural_network.exe`_ZN4core3ops8function5impls79_$LT$impl$u20$core..ops..function..FnMut$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$8call_mut17he2210d71eb5f1170E (14 samples, 0.06%)</title><rect x="0.8478%" y="181" width="0.0609%" height="15" fill="rgb(231,145,46)" fg:x="195" fg:w="14"/><text x="1.0978%" y="191.50"></text></g><g><title>`0x7FF97E632AFE (3 samples, 0.01%)</title><rect x="0.9087%" y="117" width="0.0130%" height="15" fill="rgb(251,118,11)" fg:x="209" fg:w="3"/><text x="1.1587%" y="127.50"></text></g><g><title>neural_network.exe`_ZN98_$LT$alloc..vec..Vec$LT$T$GT$$u20$as$u20$alloc..vec..spec_from_iter..SpecFromIter$LT$T$C$I$GT$$GT$9from_iter17h6706756a45adb338E (20 samples, 0.09%)</title><rect x="0.8435%" y="197" width="0.0870%" height="15" fill="rgb(217,147,25)" fg:x="194" fg:w="20"/><text x="1.0935%" y="207.50"></text></g><g><title>neural_network.exe`_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$7reserve21do_reserve_and_handle17h5fb860b30573fefeE.llvm.13340812632010285679 (5 samples, 0.02%)</title><rect x="0.9087%" y="181" width="0.0217%" height="15" fill="rgb(247,81,37)" fg:x="209" fg:w="5"/><text x="1.1587%" y="191.50"></text></g><g><title>neural_network.exe`_ZN5alloc7raw_vec11finish_grow17hcdd8c185bebeaceaE.llvm.13340812632010285679 (5 samples, 0.02%)</title><rect x="0.9087%" y="165" width="0.0217%" height="15" fill="rgb(209,12,38)" fg:x="209" fg:w="5"/><text x="1.1587%" y="175.50"></text></g><g><title>`0x7FF97E63218A (5 samples, 0.02%)</title><rect x="0.9087%" y="149" width="0.0217%" height="15" fill="rgb(227,1,9)" fg:x="209" fg:w="5"/><text x="1.1587%" y="159.50"></text></g><g><title>`0x7FF97E6322C7 (5 samples, 0.02%)</title><rect x="0.9087%" y="133" width="0.0217%" height="15" fill="rgb(248,47,43)" fg:x="209" fg:w="5"/><text x="1.1587%" y="143.50"></text></g><g><title>neural_network.exe`_ZN14neural_network4flow7flow_ai7convert17ha9b74834f40c516fE (167 samples, 0.73%)</title><rect x="0.2130%" y="213" width="0.7261%" height="15" fill="rgb(221,10,30)" fg:x="49" fg:w="167"/><text x="0.4630%" y="223.50"></text></g><g><title>`0x7FF968D511FB (439 samples, 1.91%)</title><rect x="5.3261%" y="197" width="1.9087%" height="15" fill="rgb(210,229,1)" fg:x="1225" fg:w="439"/><text x="5.5761%" y="207.50">`..</text></g><g><title>`0x7FF97BF72B50 (98 samples, 0.43%)</title><rect x="7.2348%" y="197" width="0.4261%" height="15" fill="rgb(222,148,37)" fg:x="1664" fg:w="98"/><text x="7.4848%" y="207.50"></text></g><g><title>`0x7FF97BF72B54 (172 samples, 0.75%)</title><rect x="7.6609%" y="197" width="0.7478%" height="15" fill="rgb(234,67,33)" fg:x="1762" fg:w="172"/><text x="7.9109%" y="207.50"></text></g><g><title>`0x7FF97BF72D50 (13 samples, 0.06%)</title><rect x="8.4087%" y="197" width="0.0565%" height="15" fill="rgb(247,98,35)" fg:x="1934" fg:w="13"/><text x="8.6587%" y="207.50"></text></g><g><title>`0x7FF97BF72D58 (32 samples, 0.14%)</title><rect x="8.4652%" y="197" width="0.1391%" height="15" fill="rgb(247,138,52)" fg:x="1947" fg:w="32"/><text x="8.7152%" y="207.50"></text></g><g><title>`0x7FF97BF72D5B (17 samples, 0.07%)</title><rect x="8.6043%" y="197" width="0.0739%" height="15" fill="rgb(213,79,30)" fg:x="1979" fg:w="17"/><text x="8.8543%" y="207.50"></text></g><g><title>`0x7FF97BF72D64 (101 samples, 0.44%)</title><rect x="8.6783%" y="197" width="0.4391%" height="15" fill="rgb(246,177,23)" fg:x="1996" fg:w="101"/><text x="8.9283%" y="207.50"></text></g><g><title>`0x7FF97BF72D6C (109 samples, 0.47%)</title><rect x="9.1174%" y="197" width="0.4739%" height="15" fill="rgb(230,62,27)" fg:x="2097" fg:w="109"/><text x="9.3674%" y="207.50"></text></g><g><title>`0x7FF97BF72D70 (45 samples, 0.20%)</title><rect x="9.5913%" y="197" width="0.1957%" height="15" fill="rgb(216,154,8)" fg:x="2206" fg:w="45"/><text x="9.8413%" y="207.50"></text></g><g><title>`0x7FF97BF72D78 (39 samples, 0.17%)</title><rect x="9.7870%" y="197" width="0.1696%" height="15" fill="rgb(244,35,45)" fg:x="2251" fg:w="39"/><text x="10.0370%" y="207.50"></text></g><g><title>`0x7FF97BF72D7E (23 samples, 0.10%)</title><rect x="9.9565%" y="197" width="0.1000%" height="15" fill="rgb(251,115,12)" fg:x="2290" fg:w="23"/><text x="10.2065%" y="207.50"></text></g><g><title>`0x7FF97BF72D86 (262 samples, 1.14%)</title><rect x="10.0565%" y="197" width="1.1391%" height="15" fill="rgb(240,54,50)" fg:x="2313" fg:w="262"/><text x="10.3065%" y="207.50"></text></g><g><title>`0x7FF97BF72D8C (46 samples, 0.20%)</title><rect x="11.1957%" y="197" width="0.2000%" height="15" fill="rgb(233,84,52)" fg:x="2575" fg:w="46"/><text x="11.4457%" y="207.50"></text></g><g><title>`0x7FF97BF72D9C (56 samples, 0.24%)</title><rect x="11.3957%" y="197" width="0.2435%" height="15" fill="rgb(207,117,47)" fg:x="2621" fg:w="56"/><text x="11.6457%" y="207.50"></text></g><g><title>`0x7FF97BF72DA4 (20 samples, 0.09%)</title><rect x="11.6391%" y="197" width="0.0870%" height="15" fill="rgb(249,43,39)" fg:x="2677" fg:w="20"/><text x="11.8891%" y="207.50"></text></g><g><title>`0x7FF97BF72DB2 (206 samples, 0.90%)</title><rect x="11.7304%" y="197" width="0.8957%" height="15" fill="rgb(209,38,44)" fg:x="2698" fg:w="206"/><text x="11.9804%" y="207.50"></text></g><g><title>`0x7FF97BF72DBF (45 samples, 0.20%)</title><rect x="12.6261%" y="197" width="0.1957%" height="15" fill="rgb(236,212,23)" fg:x="2904" fg:w="45"/><text x="12.8761%" y="207.50"></text></g><g><title>`0x7FF97BF72DC7 (37 samples, 0.16%)</title><rect x="12.8217%" y="197" width="0.1609%" height="15" fill="rgb(242,79,21)" fg:x="2949" fg:w="37"/><text x="13.0717%" y="207.50"></text></g><g><title>`0x7FF97BF72DCF (21 samples, 0.09%)</title><rect x="12.9826%" y="197" width="0.0913%" height="15" fill="rgb(211,96,35)" fg:x="2986" fg:w="21"/><text x="13.2326%" y="207.50"></text></g><g><title>`0x7FF97BF72DDD (166 samples, 0.72%)</title><rect x="13.0739%" y="197" width="0.7217%" height="15" fill="rgb(253,215,40)" fg:x="3007" fg:w="166"/><text x="13.3239%" y="207.50"></text></g><g><title>`0x7FF97BF72DE0 (40 samples, 0.17%)</title><rect x="13.7957%" y="197" width="0.1739%" height="15" fill="rgb(211,81,21)" fg:x="3173" fg:w="40"/><text x="14.0457%" y="207.50"></text></g><g><title>`0x7FF97BF72DE8 (70 samples, 0.30%)</title><rect x="13.9696%" y="197" width="0.3043%" height="15" fill="rgb(208,190,38)" fg:x="3213" fg:w="70"/><text x="14.2196%" y="207.50"></text></g><g><title>`0x7FF97BF72DFB (46 samples, 0.20%)</title><rect x="14.2739%" y="197" width="0.2000%" height="15" fill="rgb(235,213,38)" fg:x="3283" fg:w="46"/><text x="14.5239%" y="207.50"></text></g><g><title>`0x7FF97BF72E01 (64 samples, 0.28%)</title><rect x="14.4739%" y="197" width="0.2783%" height="15" fill="rgb(237,122,38)" fg:x="3329" fg:w="64"/><text x="14.7239%" y="207.50"></text></g><g><title>`0x7FF97BF72E12 (31 samples, 0.13%)</title><rect x="14.7522%" y="197" width="0.1348%" height="15" fill="rgb(244,218,35)" fg:x="3393" fg:w="31"/><text x="15.0022%" y="207.50"></text></g><g><title>`0x7FF97BF72E16 (140 samples, 0.61%)</title><rect x="14.8870%" y="197" width="0.6087%" height="15" fill="rgb(240,68,47)" fg:x="3424" fg:w="140"/><text x="15.1370%" y="207.50"></text></g><g><title>`0x7FF97BF72E2C (56 samples, 0.24%)</title><rect x="15.4957%" y="197" width="0.2435%" height="15" fill="rgb(210,16,53)" fg:x="3564" fg:w="56"/><text x="15.7457%" y="207.50"></text></g><g><title>`0x7FF97BF72E31 (53 samples, 0.23%)</title><rect x="15.7391%" y="197" width="0.2304%" height="15" fill="rgb(235,124,12)" fg:x="3620" fg:w="53"/><text x="15.9891%" y="207.50"></text></g><g><title>`0x7FF97BF72E36 (138 samples, 0.60%)</title><rect x="15.9696%" y="197" width="0.6000%" height="15" fill="rgb(224,169,11)" fg:x="3673" fg:w="138"/><text x="16.2196%" y="207.50"></text></g><g><title>`0x7FF97BF72E3E (3 samples, 0.01%)</title><rect x="16.5696%" y="197" width="0.0130%" height="15" fill="rgb(250,166,2)" fg:x="3811" fg:w="3"/><text x="16.8196%" y="207.50"></text></g><g><title>`0x7FF97BF72E4A (85 samples, 0.37%)</title><rect x="16.5826%" y="197" width="0.3696%" height="15" fill="rgb(242,216,29)" fg:x="3814" fg:w="85"/><text x="16.8326%" y="207.50"></text></g><g><title>`0x7FF97BF72E4E (240 samples, 1.04%)</title><rect x="16.9522%" y="197" width="1.0435%" height="15" fill="rgb(230,116,27)" fg:x="3899" fg:w="240"/><text x="17.2022%" y="207.50"></text></g><g><title>`0x7FF97BF72E60 (40 samples, 0.17%)</title><rect x="17.9957%" y="197" width="0.1739%" height="15" fill="rgb(228,99,48)" fg:x="4139" fg:w="40"/><text x="18.2457%" y="207.50"></text></g><g><title>`0x7FF97BF72E68 (28 samples, 0.12%)</title><rect x="18.1696%" y="197" width="0.1217%" height="15" fill="rgb(253,11,6)" fg:x="4179" fg:w="28"/><text x="18.4196%" y="207.50"></text></g><g><title>`0x7FF97BF72E70 (23 samples, 0.10%)</title><rect x="18.2913%" y="197" width="0.1000%" height="15" fill="rgb(247,143,39)" fg:x="4207" fg:w="23"/><text x="18.5413%" y="207.50"></text></g><g><title>`0x7FF97BF72E74 (25 samples, 0.11%)</title><rect x="18.3913%" y="197" width="0.1087%" height="15" fill="rgb(236,97,10)" fg:x="4230" fg:w="25"/><text x="18.6413%" y="207.50"></text></g><g><title>`0x7FF97BF72E78 (81 samples, 0.35%)</title><rect x="18.5000%" y="197" width="0.3522%" height="15" fill="rgb(233,208,19)" fg:x="4255" fg:w="81"/><text x="18.7500%" y="207.50"></text></g><g><title>`0x7FF97BF72E7C (23 samples, 0.10%)</title><rect x="18.8522%" y="197" width="0.1000%" height="15" fill="rgb(216,164,2)" fg:x="4336" fg:w="23"/><text x="19.1022%" y="207.50"></text></g><g><title>`0x7FF97BF72E84 (31 samples, 0.13%)</title><rect x="18.9522%" y="197" width="0.1348%" height="15" fill="rgb(220,129,5)" fg:x="4359" fg:w="31"/><text x="19.2022%" y="207.50"></text></g><g><title>`0x7FF97BF72E88 (83 samples, 0.36%)</title><rect x="19.0870%" y="197" width="0.3609%" height="15" fill="rgb(242,17,10)" fg:x="4390" fg:w="83"/><text x="19.3370%" y="207.50"></text></g><g><title>`0x7FF97BF72E99 (15 samples, 0.07%)</title><rect x="19.4478%" y="197" width="0.0652%" height="15" fill="rgb(242,107,0)" fg:x="4473" fg:w="15"/><text x="19.6978%" y="207.50"></text></g><g><title>`0x7FF97BF72E9E (35 samples, 0.15%)</title><rect x="19.5130%" y="197" width="0.1522%" height="15" fill="rgb(251,28,31)" fg:x="4488" fg:w="35"/><text x="19.7630%" y="207.50"></text></g><g><title>`0x7FF97BF72EA2 (33 samples, 0.14%)</title><rect x="19.6652%" y="197" width="0.1435%" height="15" fill="rgb(233,223,10)" fg:x="4523" fg:w="33"/><text x="19.9152%" y="207.50"></text></g><g><title>`0x7FF97E634F99 (3 samples, 0.01%)</title><rect x="19.8217%" y="149" width="0.0130%" height="15" fill="rgb(215,21,27)" fg:x="4559" fg:w="3"/><text x="20.0717%" y="159.50"></text></g><g><title>`0x7FF97E636893 (3 samples, 0.01%)</title><rect x="19.8348%" y="133" width="0.0130%" height="15" fill="rgb(232,23,21)" fg:x="4562" fg:w="3"/><text x="20.0848%" y="143.50"></text></g><g><title>`0x7FF97E636988 (138 samples, 0.60%)</title><rect x="19.8478%" y="117" width="0.6000%" height="15" fill="rgb(244,5,23)" fg:x="4565" fg:w="138"/><text x="20.0978%" y="127.50"></text></g><g><title>`0x7FF97E636AC6 (138 samples, 0.60%)</title><rect x="19.8478%" y="101" width="0.6000%" height="15" fill="rgb(226,81,46)" fg:x="4565" fg:w="138"/><text x="20.0978%" y="111.50"></text></g><g><title>`0x7FF97E690364 (138 samples, 0.60%)</title><rect x="19.8478%" y="85" width="0.6000%" height="15" fill="rgb(247,70,30)" fg:x="4565" fg:w="138"/><text x="20.0978%" y="95.50"></text></g><g><title>`0x7FF97E6368DA (140 samples, 0.61%)</title><rect x="19.8478%" y="133" width="0.6087%" height="15" fill="rgb(212,68,19)" fg:x="4565" fg:w="140"/><text x="20.0978%" y="143.50"></text></g><g><title>`0x7FF97E629C08 (148 samples, 0.64%)</title><rect x="19.8217%" y="165" width="0.6435%" height="15" fill="rgb(240,187,13)" fg:x="4559" fg:w="148"/><text x="20.0717%" y="175.50"></text></g><g><title>`0x7FF97E634FFB (145 samples, 0.63%)</title><rect x="19.8348%" y="149" width="0.6304%" height="15" fill="rgb(223,113,26)" fg:x="4562" fg:w="145"/><text x="20.0848%" y="159.50"></text></g><g><title>`0x7FF97E629E2F (14 samples, 0.06%)</title><rect x="20.4652%" y="165" width="0.0609%" height="15" fill="rgb(206,192,2)" fg:x="4707" fg:w="14"/><text x="20.7152%" y="175.50"></text></g><g><title>`0x7FF97E6367AA (14 samples, 0.06%)</title><rect x="20.4652%" y="149" width="0.0609%" height="15" fill="rgb(241,108,4)" fg:x="4707" fg:w="14"/><text x="20.7152%" y="159.50"></text></g><g><title>`0x7FF97E6902A4 (14 samples, 0.06%)</title><rect x="20.4652%" y="133" width="0.0609%" height="15" fill="rgb(247,173,49)" fg:x="4707" fg:w="14"/><text x="20.7152%" y="143.50"></text></g><g><title>`0x7FF97E62C324 (169 samples, 0.73%)</title><rect x="19.8130%" y="181" width="0.7348%" height="15" fill="rgb(224,114,35)" fg:x="4557" fg:w="169"/><text x="20.0630%" y="191.50"></text></g><g><title>`0x7FF97E629E8C (5 samples, 0.02%)</title><rect x="20.5261%" y="165" width="0.0217%" height="15" fill="rgb(245,159,27)" fg:x="4721" fg:w="5"/><text x="20.7761%" y="175.50"></text></g><g><title>`0x7FF97E6367AA (4 samples, 0.02%)</title><rect x="20.5304%" y="149" width="0.0174%" height="15" fill="rgb(245,172,44)" fg:x="4722" fg:w="4"/><text x="20.7804%" y="159.50"></text></g><g><title>`0x7FF97E6902A4 (4 samples, 0.02%)</title><rect x="20.5304%" y="133" width="0.0174%" height="15" fill="rgb(236,23,11)" fg:x="4722" fg:w="4"/><text x="20.7804%" y="143.50"></text></g><g><title>`0x7FF97E62AFF1 (172 samples, 0.75%)</title><rect x="19.8130%" y="197" width="0.7478%" height="15" fill="rgb(205,117,38)" fg:x="4557" fg:w="172"/><text x="20.0630%" y="207.50"></text></g><g><title>`0x7FF97E62F633 (5 samples, 0.02%)</title><rect x="20.5652%" y="181" width="0.0217%" height="15" fill="rgb(237,72,25)" fg:x="4730" fg:w="5"/><text x="20.8152%" y="191.50"></text></g><g><title>`0x7FF97E62D239 (8 samples, 0.03%)</title><rect x="20.5652%" y="197" width="0.0348%" height="15" fill="rgb(244,70,9)" fg:x="4730" fg:w="8"/><text x="20.8152%" y="207.50"></text></g><g><title>`0x7FF968D511FB (790 samples, 3.43%)</title><rect x="20.6043%" y="181" width="3.4348%" height="15" fill="rgb(217,125,39)" fg:x="4739" fg:w="790"/><text x="20.8543%" y="191.50">`0x..</text></g><g><title>`0x7FF97E634850 (3 samples, 0.01%)</title><rect x="24.0478%" y="117" width="0.0130%" height="15" fill="rgb(235,36,10)" fg:x="5531" fg:w="3"/><text x="24.2978%" y="127.50"></text></g><g><title>`0x7FF97E63471A (3 samples, 0.01%)</title><rect x="24.0478%" y="101" width="0.0130%" height="15" fill="rgb(251,123,47)" fg:x="5531" fg:w="3"/><text x="24.2978%" y="111.50"></text></g><g><title>`0x7FF97E634F99 (5 samples, 0.02%)</title><rect x="24.0435%" y="133" width="0.0217%" height="15" fill="rgb(221,13,13)" fg:x="5530" fg:w="5"/><text x="24.2935%" y="143.50"></text></g><g><title>`0x7FF97E636988 (122 samples, 0.53%)</title><rect x="24.0739%" y="101" width="0.5304%" height="15" fill="rgb(238,131,9)" fg:x="5537" fg:w="122"/><text x="24.3239%" y="111.50"></text></g><g><title>`0x7FF97E636AC6 (121 samples, 0.53%)</title><rect x="24.0783%" y="85" width="0.5261%" height="15" fill="rgb(211,50,8)" fg:x="5538" fg:w="121"/><text x="24.3283%" y="95.50"></text></g><g><title>`0x7FF97E690364 (121 samples, 0.53%)</title><rect x="24.0783%" y="69" width="0.5261%" height="15" fill="rgb(245,182,24)" fg:x="5538" fg:w="121"/><text x="24.3283%" y="79.50"></text></g><g><title>`0x7FF97E6368DA (123 samples, 0.53%)</title><rect x="24.0739%" y="117" width="0.5348%" height="15" fill="rgb(242,14,37)" fg:x="5537" fg:w="123"/><text x="24.3239%" y="127.50"></text></g><g><title>`0x7FF97E629C08 (131 samples, 0.57%)</title><rect x="24.0435%" y="149" width="0.5696%" height="15" fill="rgb(246,228,12)" fg:x="5530" fg:w="131"/><text x="24.2935%" y="159.50"></text></g><g><title>`0x7FF97E634FFB (126 samples, 0.55%)</title><rect x="24.0652%" y="133" width="0.5478%" height="15" fill="rgb(213,55,15)" fg:x="5535" fg:w="126"/><text x="24.3152%" y="143.50"></text></g><g><title>`0x7FF97E629E2F (6 samples, 0.03%)</title><rect x="24.6130%" y="149" width="0.0261%" height="15" fill="rgb(209,9,3)" fg:x="5661" fg:w="6"/><text x="24.8630%" y="159.50"></text></g><g><title>`0x7FF97E6367AA (6 samples, 0.03%)</title><rect x="24.6130%" y="133" width="0.0261%" height="15" fill="rgb(230,59,30)" fg:x="5661" fg:w="6"/><text x="24.8630%" y="143.50"></text></g><g><title>`0x7FF97E6902A4 (6 samples, 0.03%)</title><rect x="24.6130%" y="117" width="0.0261%" height="15" fill="rgb(209,121,21)" fg:x="5661" fg:w="6"/><text x="24.8630%" y="127.50"></text></g><g><title>`0x7FF97E62AFF1 (139 samples, 0.60%)</title><rect x="24.0391%" y="181" width="0.6043%" height="15" fill="rgb(220,109,13)" fg:x="5529" fg:w="139"/><text x="24.2891%" y="191.50"></text></g><g><title>`0x7FF97E62C324 (139 samples, 0.60%)</title><rect x="24.0391%" y="165" width="0.6043%" height="15" fill="rgb(232,18,1)" fg:x="5529" fg:w="139"/><text x="24.2891%" y="175.50"></text></g><g><title>`0x7FF97E62F633 (9 samples, 0.04%)</title><rect x="24.6435%" y="165" width="0.0391%" height="15" fill="rgb(215,41,42)" fg:x="5668" fg:w="9"/><text x="24.8935%" y="175.50"></text></g><g><title>`0x7FF97E62D239 (17 samples, 0.07%)</title><rect x="24.6435%" y="181" width="0.0739%" height="15" fill="rgb(224,123,36)" fg:x="5668" fg:w="17"/><text x="24.8935%" y="191.50"></text></g><g><title>`0x7FF97E62FCFE (5 samples, 0.02%)</title><rect x="24.6957%" y="165" width="0.0217%" height="15" fill="rgb(240,125,3)" fg:x="5680" fg:w="5"/><text x="24.9457%" y="175.50"></text></g><g><title>`0x7FF97E6367AA (4 samples, 0.02%)</title><rect x="24.7000%" y="149" width="0.0174%" height="15" fill="rgb(205,98,50)" fg:x="5681" fg:w="4"/><text x="24.9500%" y="159.50"></text></g><g><title>`0x7FF97E6902A4 (4 samples, 0.02%)</title><rect x="24.7000%" y="133" width="0.0174%" height="15" fill="rgb(205,185,37)" fg:x="5681" fg:w="4"/><text x="24.9500%" y="143.50"></text></g><g><title>`0x7FF97BF71560 (78 samples, 0.34%)</title><rect x="27.0478%" y="165" width="0.3391%" height="15" fill="rgb(238,207,15)" fg:x="6221" fg:w="78"/><text x="27.2978%" y="175.50"></text></g><g><title>`0x7FF97BF716D0 (39 samples, 0.17%)</title><rect x="27.3957%" y="165" width="0.1696%" height="15" fill="rgb(213,199,42)" fg:x="6301" fg:w="39"/><text x="27.6457%" y="175.50"></text></g><g><title>`0x7FF97BF716D8 (30 samples, 0.13%)</title><rect x="27.5739%" y="165" width="0.1304%" height="15" fill="rgb(235,201,11)" fg:x="6342" fg:w="30"/><text x="27.8239%" y="175.50"></text></g><g><title>`0x7FF97BF716DE (65 samples, 0.28%)</title><rect x="27.7043%" y="165" width="0.2826%" height="15" fill="rgb(207,46,11)" fg:x="6372" fg:w="65"/><text x="27.9543%" y="175.50"></text></g><g><title>`0x7FF97BF716F8 (40 samples, 0.17%)</title><rect x="27.9957%" y="165" width="0.1739%" height="15" fill="rgb(241,35,35)" fg:x="6439" fg:w="40"/><text x="28.2457%" y="175.50"></text></g><g><title>`0x7FF97BF716FE (39 samples, 0.17%)</title><rect x="28.1696%" y="165" width="0.1696%" height="15" fill="rgb(243,32,47)" fg:x="6479" fg:w="39"/><text x="28.4196%" y="175.50"></text></g><g><title>`0x7FF97BF71706 (86 samples, 0.37%)</title><rect x="28.3391%" y="165" width="0.3739%" height="15" fill="rgb(247,202,23)" fg:x="6518" fg:w="86"/><text x="28.5891%" y="175.50"></text></g><g><title>`0x7FF97BF71720 (36 samples, 0.16%)</title><rect x="28.7261%" y="165" width="0.1565%" height="15" fill="rgb(219,102,11)" fg:x="6607" fg:w="36"/><text x="28.9761%" y="175.50"></text></g><g><title>`0x7FF97BF7172B (32 samples, 0.14%)</title><rect x="28.8826%" y="165" width="0.1391%" height="15" fill="rgb(243,110,44)" fg:x="6643" fg:w="32"/><text x="29.1326%" y="175.50"></text></g><g><title>`0x7FF97BF7172D (63 samples, 0.27%)</title><rect x="29.0217%" y="165" width="0.2739%" height="15" fill="rgb(222,74,54)" fg:x="6675" fg:w="63"/><text x="29.2717%" y="175.50"></text></g><g><title>`0x7FF97BF7173E (6 samples, 0.03%)</title><rect x="29.3000%" y="165" width="0.0261%" height="15" fill="rgb(216,99,12)" fg:x="6739" fg:w="6"/><text x="29.5500%" y="175.50"></text></g><g><title>`0x7FF97BF71742 (43 samples, 0.19%)</title><rect x="29.3261%" y="165" width="0.1870%" height="15" fill="rgb(226,22,26)" fg:x="6745" fg:w="43"/><text x="29.5761%" y="175.50"></text></g><g><title>`0x7FF97BF71750 (20 samples, 0.09%)</title><rect x="29.5174%" y="165" width="0.0870%" height="15" fill="rgb(217,163,10)" fg:x="6789" fg:w="20"/><text x="29.7674%" y="175.50"></text></g><g><title>`0x7FF97BF71757 (27 samples, 0.12%)</title><rect x="29.6043%" y="165" width="0.1174%" height="15" fill="rgb(213,25,53)" fg:x="6809" fg:w="27"/><text x="29.8543%" y="175.50"></text></g><g><title>`0x7FF97BF71761 (39 samples, 0.17%)</title><rect x="29.7217%" y="165" width="0.1696%" height="15" fill="rgb(252,105,26)" fg:x="6836" fg:w="39"/><text x="29.9717%" y="175.50"></text></g><g><title>`0x7FF97BF71766 (4 samples, 0.02%)</title><rect x="29.8913%" y="165" width="0.0174%" height="15" fill="rgb(220,39,43)" fg:x="6875" fg:w="4"/><text x="30.1413%" y="175.50"></text></g><g><title>`0x7FF97BF7176F (57 samples, 0.25%)</title><rect x="29.9130%" y="165" width="0.2478%" height="15" fill="rgb(229,68,48)" fg:x="6880" fg:w="57"/><text x="30.1630%" y="175.50"></text></g><g><title>`0x7FF97BF71773 (4 samples, 0.02%)</title><rect x="30.1609%" y="165" width="0.0174%" height="15" fill="rgb(252,8,32)" fg:x="6937" fg:w="4"/><text x="30.4109%" y="175.50"></text></g><g><title>neural_network.exe`_ZN14neural_network7helpers20activation_functions21activation_derivative17hc2b9676b470cd2b3E (1,301 samples, 5.66%)</title><rect x="24.7174%" y="181" width="5.6565%" height="15" fill="rgb(223,20,43)" fg:x="5685" fg:w="1301"/><text x="24.9674%" y="191.50">neural_..</text></g><g><title>neural_network.exe`expf (45 samples, 0.20%)</title><rect x="30.1783%" y="165" width="0.1957%" height="15" fill="rgb(229,81,49)" fg:x="6941" fg:w="45"/><text x="30.4283%" y="175.50"></text></g><g><title>`0x7FF97E62AFF1 (4 samples, 0.02%)</title><rect x="30.3739%" y="165" width="0.0174%" height="15" fill="rgb(236,28,36)" fg:x="6986" fg:w="4"/><text x="30.6239%" y="175.50"></text></g><g><title>`0x7FF97E62C324 (4 samples, 0.02%)</title><rect x="30.3739%" y="149" width="0.0174%" height="15" fill="rgb(249,185,26)" fg:x="6986" fg:w="4"/><text x="30.6239%" y="159.50"></text></g><g><title>`0x7FF97E62F633 (6 samples, 0.03%)</title><rect x="30.3957%" y="149" width="0.0261%" height="15" fill="rgb(249,174,33)" fg:x="6991" fg:w="6"/><text x="30.6457%" y="159.50"></text></g><g><title>`0x7FF97E62D239 (15 samples, 0.07%)</title><rect x="30.3913%" y="165" width="0.0652%" height="15" fill="rgb(233,201,37)" fg:x="6990" fg:w="15"/><text x="30.6413%" y="175.50"></text></g><g><title>`0x7FF97E62FCFE (7 samples, 0.03%)</title><rect x="30.4261%" y="149" width="0.0304%" height="15" fill="rgb(221,78,26)" fg:x="6998" fg:w="7"/><text x="30.6761%" y="159.50"></text></g><g><title>`0x7FF97E6367AA (7 samples, 0.03%)</title><rect x="30.4261%" y="133" width="0.0304%" height="15" fill="rgb(250,127,30)" fg:x="6998" fg:w="7"/><text x="30.6761%" y="143.50"></text></g><g><title>`0x7FF97E6902A4 (7 samples, 0.03%)</title><rect x="30.4261%" y="117" width="0.0304%" height="15" fill="rgb(230,49,44)" fg:x="6998" fg:w="7"/><text x="30.6761%" y="127.50"></text></g><g><title>neural_network.exe`_ZN14matrixmultiply7packing9pack_avx217h13c2011a146f2013E (672 samples, 2.92%)</title><rect x="30.4609%" y="149" width="2.9217%" height="15" fill="rgb(229,67,23)" fg:x="7006" fg:w="672"/><text x="30.7109%" y="159.50">ne..</text></g><g><title>neural_network.exe`_ZN14matrixmultiply9threading27RangeChunkParallel$LT$G$GT$8for_each17he6ffb7600a8fb58eE (2,007 samples, 8.73%)</title><rect x="33.3826%" y="149" width="8.7261%" height="15" fill="rgb(249,83,47)" fg:x="7678" fg:w="2007"/><text x="33.6326%" y="159.50">neural_netwo..</text></g><g><title>neural_network.exe`_ZN14matrixmultiply12sgemm_kernel17kernel_target_fma17h60f801d0d7a890adE (1,998 samples, 8.69%)</title><rect x="33.4217%" y="133" width="8.6870%" height="15" fill="rgb(215,43,3)" fg:x="7687" fg:w="1998"/><text x="33.6717%" y="143.50">neural_netwo..</text></g><g><title>`0x7FF97E62F633 (12 samples, 0.05%)</title><rect x="42.1087%" y="85" width="0.0522%" height="15" fill="rgb(238,154,13)" fg:x="9685" fg:w="12"/><text x="42.3587%" y="95.50"></text></g><g><title>neural_network.exe`Unknown (2,695 samples, 11.72%)</title><rect x="30.4565%" y="165" width="11.7174%" height="15" fill="rgb(219,56,2)" fg:x="7005" fg:w="2695"/><text x="30.7065%" y="175.50">neural_network.ex..</text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_alloc (15 samples, 0.07%)</title><rect x="42.1087%" y="149" width="0.0652%" height="15" fill="rgb(233,0,4)" fg:x="9685" fg:w="15"/><text x="42.3587%" y="159.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::alloc (15 samples, 0.07%)</title><rect x="42.1087%" y="133" width="0.0652%" height="15" fill="rgb(235,30,7)" fg:x="9685" fg:w="15"/><text x="42.3587%" y="143.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::allocate (15 samples, 0.07%)</title><rect x="42.1087%" y="117" width="0.0652%" height="15" fill="rgb(250,79,13)" fg:x="9685" fg:w="15"/><text x="42.3587%" y="127.50"></text></g><g><title>`0x7FF97E62D239 (15 samples, 0.07%)</title><rect x="42.1087%" y="101" width="0.0652%" height="15" fill="rgb(211,146,34)" fg:x="9685" fg:w="15"/><text x="42.3587%" y="111.50"></text></g><g><title>neural_network.exe`_ZN247_$LT$ndarray..ArrayBase$LT$S$C$ndarray..dimension..dim..Dim$LT$$u5b$usize$u3b$$u20$2$u5d$$GT$$GT$$u20$as$u20$ndarray..linalg..impl_linalg..Dot$LT$ndarray..ArrayBase$LT$S2$C$ndarray..dimension..dim..Dim$LT$$u5b$usize$u3b$$u20$2$u5d$$GT$$GT$$GT$$GT$3dot17h5868e790f09ad45eE (2,715 samples, 11.80%)</title><rect x="30.3739%" y="181" width="11.8043%" height="15" fill="rgb(228,22,38)" fg:x="6986" fg:w="2715"/><text x="30.6239%" y="191.50">neural_network.exe..</text></g><g><title>`0x7FF97E62F633 (6 samples, 0.03%)</title><rect x="42.1913%" y="149" width="0.0261%" height="15" fill="rgb(235,168,5)" fg:x="9704" fg:w="6"/><text x="42.4413%" y="159.50"></text></g><g><title>`0x7FF97E62D239 (14 samples, 0.06%)</title><rect x="42.1913%" y="165" width="0.0609%" height="15" fill="rgb(221,155,16)" fg:x="9704" fg:w="14"/><text x="42.4413%" y="175.50"></text></g><g><title>`0x7FF97E62FCFE (5 samples, 0.02%)</title><rect x="42.2304%" y="149" width="0.0217%" height="15" fill="rgb(215,215,53)" fg:x="9713" fg:w="5"/><text x="42.4804%" y="159.50"></text></g><g><title>`0x7FF97E6367AA (5 samples, 0.02%)</title><rect x="42.2304%" y="133" width="0.0217%" height="15" fill="rgb(223,4,10)" fg:x="9713" fg:w="5"/><text x="42.4804%" y="143.50"></text></g><g><title>`0x7FF97E6902A4 (5 samples, 0.02%)</title><rect x="42.2304%" y="117" width="0.0217%" height="15" fill="rgb(234,103,6)" fg:x="9713" fg:w="5"/><text x="42.4804%" y="127.50"></text></g><g><title>neural_network.exe`_ZN14matrixmultiply7packing9pack_avx217h13c2011a146f2013E (387 samples, 1.68%)</title><rect x="42.2652%" y="149" width="1.6826%" height="15" fill="rgb(227,97,0)" fg:x="9721" fg:w="387"/><text x="42.5152%" y="159.50"></text></g><g><title>neural_network.exe`_ZN14matrixmultiply9threading27RangeChunkParallel$LT$G$GT$8for_each17he6ffb7600a8fb58eE (2,733 samples, 11.88%)</title><rect x="43.9478%" y="149" width="11.8826%" height="15" fill="rgb(234,150,53)" fg:x="10108" fg:w="2733"/><text x="44.1978%" y="159.50">neural_network.exe..</text></g><g><title>neural_network.exe`_ZN14matrixmultiply12sgemm_kernel17kernel_target_fma17h60f801d0d7a890adE (2,723 samples, 11.84%)</title><rect x="43.9913%" y="133" width="11.8391%" height="15" fill="rgb(228,201,54)" fg:x="10118" fg:w="2723"/><text x="44.2413%" y="143.50">neural_network.exe..</text></g><g><title>`0x7FF97E62F633 (7 samples, 0.03%)</title><rect x="55.8348%" y="85" width="0.0304%" height="15" fill="rgb(222,22,37)" fg:x="12842" fg:w="7"/><text x="56.0848%" y="95.50"></text></g><g><title>neural_network.exe`_ZN247_$LT$ndarray..ArrayBase$LT$S$C$ndarray..dimension..dim..Dim$LT$$u5b$usize$u3b$$u20$2$u5d$$GT$$GT$$u20$as$u20$ndarray..linalg..impl_linalg..Dot$LT$ndarray..ArrayBase$LT$S2$C$ndarray..dimension..dim..Dim$LT$$u5b$usize$u3b$$u20$2$u5d$$GT$$GT$$GT$$GT$3dot17h91cec0a105d9df62E (3,151 samples, 13.70%)</title><rect x="42.1783%" y="181" width="13.7000%" height="15" fill="rgb(237,53,32)" fg:x="9701" fg:w="3151"/><text x="42.4283%" y="191.50">neural_network.exe`_Z..</text></g><g><title>neural_network.exe`Unknown (3,134 samples, 13.63%)</title><rect x="42.2522%" y="165" width="13.6261%" height="15" fill="rgb(233,25,53)" fg:x="9718" fg:w="3134"/><text x="42.5022%" y="175.50">neural_network.exe`Un..</text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_alloc (11 samples, 0.05%)</title><rect x="55.8304%" y="149" width="0.0478%" height="15" fill="rgb(210,40,34)" fg:x="12841" fg:w="11"/><text x="56.0804%" y="159.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::alloc (11 samples, 0.05%)</title><rect x="55.8304%" y="133" width="0.0478%" height="15" fill="rgb(241,220,44)" fg:x="12841" fg:w="11"/><text x="56.0804%" y="143.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::allocate (11 samples, 0.05%)</title><rect x="55.8304%" y="117" width="0.0478%" height="15" fill="rgb(235,28,35)" fg:x="12841" fg:w="11"/><text x="56.0804%" y="127.50"></text></g><g><title>`0x7FF97E62D239 (11 samples, 0.05%)</title><rect x="55.8304%" y="101" width="0.0478%" height="15" fill="rgb(210,56,17)" fg:x="12841" fg:w="11"/><text x="56.0804%" y="111.50"></text></g><g><title>`0x7FF97E62AFF1 (4 samples, 0.02%)</title><rect x="55.8826%" y="165" width="0.0174%" height="15" fill="rgb(224,130,29)" fg:x="12853" fg:w="4"/><text x="56.1326%" y="175.50"></text></g><g><title>`0x7FF97E62C324 (4 samples, 0.02%)</title><rect x="55.8826%" y="149" width="0.0174%" height="15" fill="rgb(235,212,8)" fg:x="12853" fg:w="4"/><text x="56.1326%" y="159.50"></text></g><g><title>`0x7FF97E62F633 (8 samples, 0.03%)</title><rect x="55.9000%" y="149" width="0.0348%" height="15" fill="rgb(223,33,50)" fg:x="12857" fg:w="8"/><text x="56.1500%" y="159.50"></text></g><g><title>`0x7FF97E62D239 (14 samples, 0.06%)</title><rect x="55.9000%" y="165" width="0.0609%" height="15" fill="rgb(219,149,13)" fg:x="12857" fg:w="14"/><text x="56.1500%" y="175.50"></text></g><g><title>`0x7FF97E62FCFE (3 samples, 0.01%)</title><rect x="55.9478%" y="149" width="0.0130%" height="15" fill="rgb(250,156,29)" fg:x="12868" fg:w="3"/><text x="56.1978%" y="159.50"></text></g><g><title>`0x7FF97E6367AA (3 samples, 0.01%)</title><rect x="55.9478%" y="133" width="0.0130%" height="15" fill="rgb(216,193,19)" fg:x="12868" fg:w="3"/><text x="56.1978%" y="143.50"></text></g><g><title>`0x7FF97E6902A4 (3 samples, 0.01%)</title><rect x="55.9478%" y="117" width="0.0130%" height="15" fill="rgb(216,135,14)" fg:x="12868" fg:w="3"/><text x="56.1978%" y="127.50"></text></g><g><title>neural_network.exe`_ZN14matrixmultiply7packing9pack_avx217h13c2011a146f2013E (335 samples, 1.46%)</title><rect x="55.9696%" y="149" width="1.4565%" height="15" fill="rgb(241,47,5)" fg:x="12873" fg:w="335"/><text x="56.2196%" y="159.50"></text></g><g><title>neural_network.exe`_ZN14matrixmultiply9threading27RangeChunkParallel$LT$G$GT$8for_each17he6ffb7600a8fb58eE (2,663 samples, 11.58%)</title><rect x="57.4261%" y="149" width="11.5783%" height="15" fill="rgb(233,42,35)" fg:x="13208" fg:w="2663"/><text x="57.6761%" y="159.50">neural_network.ex..</text></g><g><title>neural_network.exe`_ZN14matrixmultiply12sgemm_kernel17kernel_target_fma17h60f801d0d7a890adE (2,641 samples, 11.48%)</title><rect x="57.5217%" y="133" width="11.4826%" height="15" fill="rgb(231,13,6)" fg:x="13230" fg:w="2641"/><text x="57.7717%" y="143.50">neural_network.ex..</text></g><g><title>`0x7FF97E62F633 (4 samples, 0.02%)</title><rect x="69.0043%" y="85" width="0.0174%" height="15" fill="rgb(207,181,40)" fg:x="15871" fg:w="4"/><text x="69.2543%" y="95.50"></text></g><g><title>neural_network.exe`_ZN247_$LT$ndarray..ArrayBase$LT$S$C$ndarray..dimension..dim..Dim$LT$$u5b$usize$u3b$$u20$2$u5d$$GT$$GT$$u20$as$u20$ndarray..linalg..impl_linalg..Dot$LT$ndarray..ArrayBase$LT$S2$C$ndarray..dimension..dim..Dim$LT$$u5b$usize$u3b$$u20$2$u5d$$GT$$GT$$GT$$GT$3dot17ha48444b8d47a9be3E (3,026 samples, 13.16%)</title><rect x="55.8783%" y="181" width="13.1565%" height="15" fill="rgb(254,173,49)" fg:x="12852" fg:w="3026"/><text x="56.1283%" y="191.50">neural_network.exe`_..</text></g><g><title>neural_network.exe`Unknown (3,007 samples, 13.07%)</title><rect x="55.9609%" y="165" width="13.0739%" height="15" fill="rgb(221,1,38)" fg:x="12871" fg:w="3007"/><text x="56.2109%" y="175.50">neural_network.exe`U..</text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_alloc (7 samples, 0.03%)</title><rect x="69.0043%" y="149" width="0.0304%" height="15" fill="rgb(206,124,46)" fg:x="15871" fg:w="7"/><text x="69.2543%" y="159.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::alloc (7 samples, 0.03%)</title><rect x="69.0043%" y="133" width="0.0304%" height="15" fill="rgb(249,21,11)" fg:x="15871" fg:w="7"/><text x="69.2543%" y="143.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::allocate (7 samples, 0.03%)</title><rect x="69.0043%" y="117" width="0.0304%" height="15" fill="rgb(222,201,40)" fg:x="15871" fg:w="7"/><text x="69.2543%" y="127.50"></text></g><g><title>`0x7FF97E62D239 (7 samples, 0.03%)</title><rect x="69.0043%" y="101" width="0.0304%" height="15" fill="rgb(235,61,29)" fg:x="15871" fg:w="7"/><text x="69.2543%" y="111.50"></text></g><g><title>`0x7FF97E62F70D (3 samples, 0.01%)</title><rect x="69.0217%" y="85" width="0.0130%" height="15" fill="rgb(219,207,3)" fg:x="15875" fg:w="3"/><text x="69.2717%" y="95.50"></text></g><g><title>`0x7FF97E63471A (3 samples, 0.01%)</title><rect x="69.0217%" y="69" width="0.0130%" height="15" fill="rgb(222,56,46)" fg:x="15875" fg:w="3"/><text x="69.2717%" y="79.50"></text></g><g><title>neural_network.exe`_ZN7ndarray12impl_methods49_$LT$impl$u20$ndarray..ArrayBase$LT$S$C$D$GT$$GT$11map_inplace17hea25d574dc7654f1E (19 samples, 0.08%)</title><rect x="69.0348%" y="181" width="0.0826%" height="15" fill="rgb(239,76,54)" fg:x="15878" fg:w="19"/><text x="69.2848%" y="191.50"></text></g><g><title>neural_network.exe`_ZN7ndarray12impl_methods49_$LT$impl$u20$ndarray..ArrayBase$LT$S$C$D$GT$$GT$23zip_mut_with_same_shape17hdc7d221622627cf8E (51 samples, 0.22%)</title><rect x="69.1261%" y="181" width="0.2217%" height="15" fill="rgb(231,124,27)" fg:x="15899" fg:w="51"/><text x="69.3761%" y="191.50"></text></g><g><title>neural_network.exe`_ZN7ndarray7numeric12impl_numeric49_$LT$impl$u20$ndarray..ArrayBase$LT$S$C$D$GT$$GT$8sum_axis17h0d8c9ebe2a969f6eE (97 samples, 0.42%)</title><rect x="69.3478%" y="181" width="0.4217%" height="15" fill="rgb(249,195,6)" fg:x="15950" fg:w="97"/><text x="69.5978%" y="191.50"></text></g><g><title>`0x7FF97E62F633 (9 samples, 0.04%)</title><rect x="69.7696%" y="133" width="0.0391%" height="15" fill="rgb(237,174,47)" fg:x="16047" fg:w="9"/><text x="70.0196%" y="143.50"></text></g><g><title>`0x7FF97E62D239 (14 samples, 0.06%)</title><rect x="69.7696%" y="149" width="0.0609%" height="15" fill="rgb(206,201,31)" fg:x="16047" fg:w="14"/><text x="70.0196%" y="159.50"></text></g><g><title>neural_network.exe`_ZN14neural_network6layers11dense_layer10DenseLayer13backpropagate17hbf1e808169a22d5fE (12,030 samples, 52.30%)</title><rect x="20.6000%" y="197" width="52.3043%" height="15" fill="rgb(231,57,52)" fg:x="4738" fg:w="12030"/><text x="20.8500%" y="207.50">neural_network.exe`_ZN14neural_network6layers11dense_layer10DenseLayer13backpropagate1..</text></g><g><title>neural_network.exe`_ZN7ndarray8impl_ops14arithmetic_ops131_$LT$impl$u20$core..ops..arith..Mul$LT$$RF$ndarray..ArrayBase$LT$S2$C$E$GT$$GT$$u20$for$u20$$RF$ndarray..ArrayBase$LT$S$C$D$GT$$GT$3mul17hcb7ca4666222db91E (721 samples, 3.13%)</title><rect x="69.7696%" y="181" width="3.1348%" height="15" fill="rgb(248,177,22)" fg:x="16047" fg:w="721"/><text x="70.0196%" y="191.50">neu..</text></g><g><title>neural_network.exe`_ZN7ndarray17impl_constructors49_$LT$impl$u20$ndarray..ArrayBase$LT$S$C$D$GT$$GT$12build_uninit17h9e4133037fcd4b9bE (721 samples, 3.13%)</title><rect x="69.7696%" y="165" width="3.1348%" height="15" fill="rgb(215,211,37)" fg:x="16047" fg:w="721"/><text x="70.0196%" y="175.50">neu..</text></g><g><title>neural_network.exe`_ZN7ndarray3zip38Zip$LT$$LP$P1$C$P2$C$PLast$RP$$C$D$GT$20collect_with_partial17h863a0b7799f5e811E (707 samples, 3.07%)</title><rect x="69.8304%" y="149" width="3.0739%" height="15" fill="rgb(241,128,51)" fg:x="16061" fg:w="707"/><text x="70.0804%" y="159.50">neu..</text></g><g><title>`0x7FF968D511FB (421 samples, 1.83%)</title><rect x="72.9043%" y="181" width="1.8304%" height="15" fill="rgb(227,165,31)" fg:x="16768" fg:w="421"/><text x="73.1543%" y="191.50">`..</text></g><g><title>`0x7FF97E62F633 (8 samples, 0.03%)</title><rect x="74.7348%" y="165" width="0.0348%" height="15" fill="rgb(228,167,24)" fg:x="17189" fg:w="8"/><text x="74.9848%" y="175.50"></text></g><g><title>`0x7FF97E62D239 (11 samples, 0.05%)</title><rect x="74.7348%" y="181" width="0.0478%" height="15" fill="rgb(228,143,12)" fg:x="17189" fg:w="11"/><text x="74.9848%" y="191.50"></text></g><g><title>`0x7FF97E62FCFE (3 samples, 0.01%)</title><rect x="74.7696%" y="165" width="0.0130%" height="15" fill="rgb(249,149,8)" fg:x="17197" fg:w="3"/><text x="75.0196%" y="175.50"></text></g><g><title>`0x7FF97E6367AA (3 samples, 0.01%)</title><rect x="74.7696%" y="149" width="0.0130%" height="15" fill="rgb(243,35,44)" fg:x="17197" fg:w="3"/><text x="75.0196%" y="159.50"></text></g><g><title>`0x7FF97E6902A4 (3 samples, 0.01%)</title><rect x="74.7696%" y="133" width="0.0130%" height="15" fill="rgb(246,89,9)" fg:x="17197" fg:w="3"/><text x="75.0196%" y="143.50"></text></g><g><title>`0x7FF97E62AFF1 (3 samples, 0.01%)</title><rect x="74.7826%" y="165" width="0.0130%" height="15" fill="rgb(233,213,13)" fg:x="17200" fg:w="3"/><text x="75.0326%" y="175.50"></text></g><g><title>`0x7FF97BF71564 (6 samples, 0.03%)</title><rect x="83.2435%" y="149" width="0.0261%" height="15" fill="rgb(233,141,41)" fg:x="19146" fg:w="6"/><text x="83.4935%" y="159.50"></text></g><g><title>`0x7FF97BF7156B (30 samples, 0.13%)</title><rect x="83.2696%" y="149" width="0.1304%" height="15" fill="rgb(239,167,4)" fg:x="19152" fg:w="30"/><text x="83.5196%" y="159.50"></text></g><g><title>`0x7FF97BF716D4 (15 samples, 0.07%)</title><rect x="83.4043%" y="149" width="0.0652%" height="15" fill="rgb(209,217,16)" fg:x="19183" fg:w="15"/><text x="83.6543%" y="159.50"></text></g><g><title>`0x7FF97BF716D8 (54 samples, 0.23%)</title><rect x="83.4696%" y="149" width="0.2348%" height="15" fill="rgb(219,88,35)" fg:x="19198" fg:w="54"/><text x="83.7196%" y="159.50"></text></g><g><title>`0x7FF97BF716E8 (3 samples, 0.01%)</title><rect x="83.7087%" y="149" width="0.0130%" height="15" fill="rgb(220,193,23)" fg:x="19253" fg:w="3"/><text x="83.9587%" y="159.50"></text></g><g><title>`0x7FF97BF716F0 (31 samples, 0.13%)</title><rect x="83.7217%" y="149" width="0.1348%" height="15" fill="rgb(230,90,52)" fg:x="19256" fg:w="31"/><text x="83.9717%" y="159.50"></text></g><g><title>`0x7FF97BF716F8 (29 samples, 0.13%)</title><rect x="83.8565%" y="149" width="0.1261%" height="15" fill="rgb(252,106,19)" fg:x="19287" fg:w="29"/><text x="84.1065%" y="159.50"></text></g><g><title>`0x7FF97BF716FE (39 samples, 0.17%)</title><rect x="83.9826%" y="149" width="0.1696%" height="15" fill="rgb(206,74,20)" fg:x="19316" fg:w="39"/><text x="84.2326%" y="159.50"></text></g><g><title>`0x7FF97BF7170C (4 samples, 0.02%)</title><rect x="84.1522%" y="149" width="0.0174%" height="15" fill="rgb(230,138,44)" fg:x="19355" fg:w="4"/><text x="84.4022%" y="159.50"></text></g><g><title>`0x7FF97BF71717 (29 samples, 0.13%)</title><rect x="84.1696%" y="149" width="0.1261%" height="15" fill="rgb(235,182,43)" fg:x="19359" fg:w="29"/><text x="84.4196%" y="159.50"></text></g><g><title>`0x7FF97BF71720 (38 samples, 0.17%)</title><rect x="84.2957%" y="149" width="0.1652%" height="15" fill="rgb(242,16,51)" fg:x="19388" fg:w="38"/><text x="84.5457%" y="159.50"></text></g><g><title>`0x7FF97BF7172B (55 samples, 0.24%)</title><rect x="84.4609%" y="149" width="0.2391%" height="15" fill="rgb(248,9,4)" fg:x="19426" fg:w="55"/><text x="84.7109%" y="159.50"></text></g><g><title>`0x7FF97BF7173E (34 samples, 0.15%)</title><rect x="84.7043%" y="149" width="0.1478%" height="15" fill="rgb(210,31,22)" fg:x="19482" fg:w="34"/><text x="84.9543%" y="159.50"></text></g><g><title>`0x7FF97BF71742 (31 samples, 0.13%)</title><rect x="84.8522%" y="149" width="0.1348%" height="15" fill="rgb(239,54,39)" fg:x="19516" fg:w="31"/><text x="85.1022%" y="159.50"></text></g><g><title>`0x7FF97BF71750 (31 samples, 0.13%)</title><rect x="84.9957%" y="149" width="0.1348%" height="15" fill="rgb(230,99,41)" fg:x="19549" fg:w="31"/><text x="85.2457%" y="159.50"></text></g><g><title>`0x7FF97BF7175B (17 samples, 0.07%)</title><rect x="85.1304%" y="149" width="0.0739%" height="15" fill="rgb(253,106,12)" fg:x="19580" fg:w="17"/><text x="85.3804%" y="159.50"></text></g><g><title>`0x7FF97BF71766 (3 samples, 0.01%)</title><rect x="85.2043%" y="149" width="0.0130%" height="15" fill="rgb(213,46,41)" fg:x="19597" fg:w="3"/><text x="85.4543%" y="159.50"></text></g><g><title>`0x7FF97BF7176B (30 samples, 0.13%)</title><rect x="85.2174%" y="149" width="0.1304%" height="15" fill="rgb(215,133,35)" fg:x="19600" fg:w="30"/><text x="85.4674%" y="159.50"></text></g><g><title>`0x7FF97BF7176F (46 samples, 0.20%)</title><rect x="85.3478%" y="149" width="0.2000%" height="15" fill="rgb(213,28,5)" fg:x="19630" fg:w="46"/><text x="85.5978%" y="159.50"></text></g><g><title>`0x7FF97BF71773 (24 samples, 0.10%)</title><rect x="85.5478%" y="149" width="0.1043%" height="15" fill="rgb(215,77,49)" fg:x="19676" fg:w="24"/><text x="85.7978%" y="159.50"></text></g><g><title>neural_network.exe`_ZN14neural_network7helpers20activation_functions8activate17ha305ebebb7dcf567E (2,532 samples, 11.01%)</title><rect x="74.7957%" y="165" width="11.0087%" height="15" fill="rgb(248,100,22)" fg:x="17203" fg:w="2532"/><text x="75.0457%" y="175.50">neural_network.e..</text></g><g><title>neural_network.exe`expf (35 samples, 0.15%)</title><rect x="85.6522%" y="149" width="0.1522%" height="15" fill="rgb(208,67,9)" fg:x="19700" fg:w="35"/><text x="85.9022%" y="159.50"></text></g><g><title>`0x7FF97E629C08 (3 samples, 0.01%)</title><rect x="85.8087%" y="117" width="0.0130%" height="15" fill="rgb(219,133,21)" fg:x="19736" fg:w="3"/><text x="86.0587%" y="127.50"></text></g><g><title>`0x7FF97E634F99 (3 samples, 0.01%)</title><rect x="85.8087%" y="101" width="0.0130%" height="15" fill="rgb(246,46,29)" fg:x="19736" fg:w="3"/><text x="86.0587%" y="111.50"></text></g><g><title>`0x7FF97E62AFF1 (5 samples, 0.02%)</title><rect x="85.8043%" y="149" width="0.0217%" height="15" fill="rgb(246,185,52)" fg:x="19735" fg:w="5"/><text x="86.0543%" y="159.50"></text></g><g><title>`0x7FF97E62C324 (5 samples, 0.02%)</title><rect x="85.8043%" y="133" width="0.0217%" height="15" fill="rgb(252,136,11)" fg:x="19735" fg:w="5"/><text x="86.0543%" y="143.50"></text></g><g><title>`0x7FF97E62F633 (9 samples, 0.04%)</title><rect x="85.8304%" y="133" width="0.0391%" height="15" fill="rgb(219,138,53)" fg:x="19741" fg:w="9"/><text x="86.0804%" y="143.50"></text></g><g><title>`0x7FF97E62D239 (16 samples, 0.07%)</title><rect x="85.8261%" y="149" width="0.0696%" height="15" fill="rgb(211,51,23)" fg:x="19740" fg:w="16"/><text x="86.0761%" y="159.50"></text></g><g><title>`0x7FF97E62FCFE (3 samples, 0.01%)</title><rect x="85.8826%" y="133" width="0.0130%" height="15" fill="rgb(247,221,28)" fg:x="19753" fg:w="3"/><text x="86.1326%" y="143.50"></text></g><g><title>`0x7FF97E6367AA (3 samples, 0.01%)</title><rect x="85.8826%" y="117" width="0.0130%" height="15" fill="rgb(251,222,45)" fg:x="19753" fg:w="3"/><text x="86.1326%" y="127.50"></text></g><g><title>`0x7FF97E6902A4 (3 samples, 0.01%)</title><rect x="85.8826%" y="101" width="0.0130%" height="15" fill="rgb(217,162,53)" fg:x="19753" fg:w="3"/><text x="86.1326%" y="111.50"></text></g><g><title>neural_network.exe`_ZN14matrixmultiply7packing9pack_avx217h13c2011a146f2013E (467 samples, 2.03%)</title><rect x="85.9000%" y="133" width="2.0304%" height="15" fill="rgb(229,93,14)" fg:x="19757" fg:w="467"/><text x="86.1500%" y="143.50">n..</text></g><g><title>neural_network.exe`_ZN14matrixmultiply9threading27RangeChunkParallel$LT$G$GT$8for_each17he6ffb7600a8fb58eE (2,571 samples, 11.18%)</title><rect x="87.9304%" y="133" width="11.1783%" height="15" fill="rgb(209,67,49)" fg:x="20224" fg:w="2571"/><text x="88.1804%" y="143.50">neural_network.e..</text></g><g><title>neural_network.exe`_ZN14matrixmultiply12sgemm_kernel17kernel_target_fma17h60f801d0d7a890adE (2,560 samples, 11.13%)</title><rect x="87.9783%" y="117" width="11.1304%" height="15" fill="rgb(213,87,29)" fg:x="20235" fg:w="2560"/><text x="88.2283%" y="127.50">neural_network.e..</text></g><g><title>`0x7FF97E62F633 (11 samples, 0.05%)</title><rect x="99.1087%" y="69" width="0.0478%" height="15" fill="rgb(205,151,52)" fg:x="22795" fg:w="11"/><text x="99.3587%" y="79.50"></text></g><g><title>neural_network.exe`Unknown (3,062 samples, 13.31%)</title><rect x="85.8957%" y="149" width="13.3130%" height="15" fill="rgb(253,215,39)" fg:x="19756" fg:w="3062"/><text x="86.1457%" y="159.50">neural_network.exe`U..</text></g><g><title>neural_network.exe`std::alloc::__default_lib_allocator::__rdl_alloc (23 samples, 0.10%)</title><rect x="99.1087%" y="133" width="0.1000%" height="15" fill="rgb(221,220,41)" fg:x="22795" fg:w="23"/><text x="99.3587%" y="143.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::impl$0::alloc (23 samples, 0.10%)</title><rect x="99.1087%" y="117" width="0.1000%" height="15" fill="rgb(218,133,21)" fg:x="22795" fg:w="23"/><text x="99.3587%" y="127.50"></text></g><g><title>neural_network.exe`std::sys::pal::windows::alloc::allocate (23 samples, 0.10%)</title><rect x="99.1087%" y="101" width="0.1000%" height="15" fill="rgb(221,193,43)" fg:x="22795" fg:w="23"/><text x="99.3587%" y="111.50"></text></g><g><title>`0x7FF97E62D239 (23 samples, 0.10%)</title><rect x="99.1087%" y="85" width="0.1000%" height="15" fill="rgb(240,128,52)" fg:x="22795" fg:w="23"/><text x="99.3587%" y="95.50"></text></g><g><title>`0x7FF97E62FCFE (7 samples, 0.03%)</title><rect x="99.1783%" y="69" width="0.0304%" height="15" fill="rgb(253,114,12)" fg:x="22811" fg:w="7"/><text x="99.4283%" y="79.50"></text></g><g><title>`0x7FF97E6367AA (7 samples, 0.03%)</title><rect x="99.1783%" y="53" width="0.0304%" height="15" fill="rgb(215,223,47)" fg:x="22811" fg:w="7"/><text x="99.4283%" y="63.50"></text></g><g><title>`0x7FF97E6902A4 (7 samples, 0.03%)</title><rect x="99.1783%" y="37" width="0.0304%" height="15" fill="rgb(248,225,23)" fg:x="22811" fg:w="7"/><text x="99.4283%" y="47.50"></text></g><g><title>neural_network.exe`_ZN247_$LT$ndarray..ArrayBase$LT$S$C$ndarray..dimension..dim..Dim$LT$$u5b$usize$u3b$$u20$2$u5d$$GT$$GT$$u20$as$u20$ndarray..linalg..impl_linalg..Dot$LT$ndarray..ArrayBase$LT$S2$C$ndarray..dimension..dim..Dim$LT$$u5b$usize$u3b$$u20$2$u5d$$GT$$GT$$GT$$GT$3dot17h91cec0a105d9df62E (3,085 samples, 13.41%)</title><rect x="85.8043%" y="165" width="13.4130%" height="15" fill="rgb(250,108,0)" fg:x="19735" fg:w="3085"/><text x="86.0543%" y="175.50">neural_network.exe`_..</text></g><g><title>neural_network.exe`_ZN14neural_network6layers11dense_layer10DenseLayer4pass17hcf0349855d98ec71E (5,687 samples, 24.73%)</title><rect x="74.7826%" y="181" width="24.7261%" height="15" fill="rgb(228,208,7)" fg:x="17200" fg:w="5687"/><text x="75.0326%" y="191.50">neural_network.exe`_ZN14neural_network6..</text></g><g><title>neural_network.exe`_ZN7ndarray3zip16Zip$LT$P$C$D$GT$5inner17ha42f7877ef98ea72E.llvm.7293305447528590825 (67 samples, 0.29%)</title><rect x="99.2174%" y="165" width="0.2913%" height="15" fill="rgb(244,45,10)" fg:x="22820" fg:w="67"/><text x="99.4674%" y="175.50"></text></g><g><title>neural_network.exe`_ZN14neural_network8networks9dense_net8DenseNet12forward_pass17hd1a206657b28ada8E.llvm.2714673056069680590 (6,120 samples, 26.61%)</title><rect x="72.9043%" y="197" width="26.6087%" height="15" fill="rgb(207,125,25)" fg:x="16768" fg:w="6120"/><text x="73.1543%" y="207.50">neural_network.exe`_ZN14neural_network8netw..</text></g><g><title>neural_network.exe`_ZN7ndarray12impl_methods49_$LT$impl$u20$ndarray..ArrayBase$LT$S$C$D$GT$$GT$23zip_mut_with_same_shape17hfec367b60d2de7a1E (40 samples, 0.17%)</title><rect x="99.5130%" y="197" width="0.1739%" height="15" fill="rgb(210,195,18)" fg:x="22888" fg:w="40"/><text x="99.7630%" y="207.50"></text></g><g><title>neural_network.exe`_ZN14neural_network8networks9dense_net8DenseNet13backpropagate17hcc982577da8adfd9E (22,744 samples, 98.89%)</title><rect x="0.9478%" y="213" width="98.8870%" height="15" fill="rgb(249,80,12)" fg:x="218" fg:w="22744"/><text x="1.1978%" y="223.50">neural_network.exe`_ZN14neural_network8networks9dense_net8DenseNet13backpropagate17hcc982577da8adfd9E</text></g><g><title>neural_network.exe`logf (34 samples, 0.15%)</title><rect x="99.6870%" y="197" width="0.1478%" height="15" fill="rgb(221,65,9)" fg:x="22928" fg:w="34"/><text x="99.9370%" y="207.50"></text></g><g><title>neural_network.exe`_ZN14neural_network7helpers20activation_functions8activate17ha305ebebb7dcf567E (7 samples, 0.03%)</title><rect x="99.8478%" y="165" width="0.0304%" height="15" fill="rgb(235,49,36)" fg:x="22965" fg:w="7"/><text x="100.0978%" y="175.50"></text></g><g><title>neural_network.exe`_ZN247_$LT$ndarray..ArrayBase$LT$S$C$ndarray..dimension..dim..Dim$LT$$u5b$usize$u3b$$u20$2$u5d$$GT$$GT$$u20$as$u20$ndarray..linalg..impl_linalg..Dot$LT$ndarray..ArrayBase$LT$S2$C$ndarray..dimension..dim..Dim$LT$$u5b$usize$u3b$$u20$2$u5d$$GT$$GT$$GT$$GT$3dot17h91cec0a105d9df62E (8 samples, 0.03%)</title><rect x="99.8783%" y="165" width="0.0348%" height="15" fill="rgb(225,32,20)" fg:x="22972" fg:w="8"/><text x="100.1283%" y="175.50"></text></g><g><title>neural_network.exe`Unknown (7 samples, 0.03%)</title><rect x="99.8826%" y="149" width="0.0304%" height="15" fill="rgb(215,141,46)" fg:x="22973" fg:w="7"/><text x="100.1326%" y="159.50"></text></g><g><title>neural_network.exe`_ZN14matrixmultiply9threading27RangeChunkParallel$LT$G$GT$8for_each17he6ffb7600a8fb58eE (7 samples, 0.03%)</title><rect x="99.8826%" y="133" width="0.0304%" height="15" fill="rgb(250,160,47)" fg:x="22973" fg:w="7"/><text x="100.1326%" y="143.50"></text></g><g><title>neural_network.exe`_ZN14matrixmultiply12sgemm_kernel17kernel_target_fma17h60f801d0d7a890adE (7 samples, 0.03%)</title><rect x="99.8826%" y="117" width="0.0304%" height="15" fill="rgb(216,222,40)" fg:x="22973" fg:w="7"/><text x="100.1326%" y="127.50"></text></g><g><title>neural_network.exe`_ZN14neural_network8networks9dense_net8DenseNet7predict17h62ebcdd77e5e2ea7E (19 samples, 0.08%)</title><rect x="99.8348%" y="213" width="0.0826%" height="15" fill="rgb(234,217,39)" fg:x="22962" fg:w="19"/><text x="100.0848%" y="223.50"></text></g><g><title>neural_network.exe`_ZN14neural_network8networks9dense_net8DenseNet12forward_pass17hd1a206657b28ada8E.llvm.2714673056069680590 (18 samples, 0.08%)</title><rect x="99.8391%" y="197" width="0.0783%" height="15" fill="rgb(207,178,40)" fg:x="22963" fg:w="18"/><text x="100.0891%" y="207.50"></text></g><g><title>neural_network.exe`_ZN14neural_network6layers11dense_layer10DenseLayer4pass17hcf0349855d98ec71E (16 samples, 0.07%)</title><rect x="99.8478%" y="181" width="0.0696%" height="15" fill="rgb(221,136,13)" fg:x="22965" fg:w="16"/><text x="100.0978%" y="191.50"></text></g><g><title>`0x7FF97E64AF28 (22,959 samples, 99.82%)</title><rect x="0.1000%" y="437" width="99.8217%" height="15" fill="rgb(249,199,10)" fg:x="23" fg:w="22959"/><text x="0.3500%" y="447.50">`0x7FF97E64AF28</text></g><g><title>`0x7FF97DFB257D (22,959 samples, 99.82%)</title><rect x="0.1000%" y="421" width="99.8217%" height="15" fill="rgb(249,222,13)" fg:x="23" fg:w="22959"/><text x="0.3500%" y="431.50">`0x7FF97DFB257D</text></g><g><title>neural_network.exe`__scrt_common_main_seh() (22,951 samples, 99.79%)</title><rect x="0.1348%" y="405" width="99.7870%" height="15" fill="rgb(244,185,38)" fg:x="31" fg:w="22951"/><text x="0.3848%" y="415.50">neural_network.exe`__scrt_common_main_seh()</text></g><g><title>neural_network.exe`invoke_main() (22,946 samples, 99.77%)</title><rect x="0.1565%" y="389" width="99.7652%" height="15" fill="rgb(236,202,9)" fg:x="36" fg:w="22946"/><text x="0.4065%" y="399.50">neural_network.exe`invoke_main()</text></g><g><title>neural_network.exe`main (22,946 samples, 99.77%)</title><rect x="0.1565%" y="373" width="99.7652%" height="15" fill="rgb(250,229,37)" fg:x="36" fg:w="22946"/><text x="0.4065%" y="383.50">neural_network.exe`main</text></g><g><title>neural_network.exe`std::rt::lang_start_internal (22,946 samples, 99.77%)</title><rect x="0.1565%" y="357" width="99.7652%" height="15" fill="rgb(206,174,23)" fg:x="36" fg:w="22946"/><text x="0.4065%" y="367.50">neural_network.exe`std::rt::lang_start_internal</text></g><g><title>neural_network.exe`std::panic::catch_unwind (22,946 samples, 99.77%)</title><rect x="0.1565%" y="341" width="99.7652%" height="15" fill="rgb(211,33,43)" fg:x="36" fg:w="22946"/><text x="0.4065%" y="351.50">neural_network.exe`std::panic::catch_unwind</text></g><g><title>neural_network.exe`std::panicking::try (22,946 samples, 99.77%)</title><rect x="0.1565%" y="325" width="99.7652%" height="15" fill="rgb(245,58,50)" fg:x="36" fg:w="22946"/><text x="0.4065%" y="335.50">neural_network.exe`std::panicking::try</text></g><g><title>neural_network.exe`std::panicking::try::do_call (22,946 samples, 99.77%)</title><rect x="0.1565%" y="309" width="99.7652%" height="15" fill="rgb(244,68,36)" fg:x="36" fg:w="22946"/><text x="0.4065%" y="319.50">neural_network.exe`std::panicking::try::do_call</text></g><g><title>neural_network.exe`std::rt::lang_start_internal::closure$2 (22,946 samples, 99.77%)</title><rect x="0.1565%" y="293" width="99.7652%" height="15" fill="rgb(232,229,15)" fg:x="36" fg:w="22946"/><text x="0.4065%" y="303.50">neural_network.exe`std::rt::lang_start_internal::closure$2</text></g><g><title>neural_network.exe`std::panic::catch_unwind (22,946 samples, 99.77%)</title><rect x="0.1565%" y="277" width="99.7652%" height="15" fill="rgb(254,30,23)" fg:x="36" fg:w="22946"/><text x="0.4065%" y="287.50">neural_network.exe`std::panic::catch_unwind</text></g><g><title>neural_network.exe`_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17hdc86edc552b1cd09E.llvm.2714673056069680590 (22,946 samples, 99.77%)</title><rect x="0.1565%" y="261" width="99.7652%" height="15" fill="rgb(235,160,14)" fg:x="36" fg:w="22946"/><text x="0.4065%" y="271.50">neural_network.exe`_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17hdc86edc552b1cd09E.llvm.2714673056069680590</text></g><g><title>neural_network.exe`_ZN3std3sys9backtrace28__rust_begin_short_backtrace17h63251156b8c324b6E (22,946 samples, 99.77%)</title><rect x="0.1565%" y="245" width="99.7652%" height="15" fill="rgb(212,155,44)" fg:x="36" fg:w="22946"/><text x="0.4065%" y="255.50">neural_network.exe`_ZN3std3sys9backtrace28__rust_begin_short_backtrace17h63251156b8c324b6E</text></g><g><title>neural_network.exe`Unknown (22,946 samples, 99.77%)</title><rect x="0.1565%" y="229" width="99.7652%" height="15" fill="rgb(226,2,50)" fg:x="36" fg:w="22946"/><text x="0.4065%" y="239.50">neural_network.exe`Unknown</text></g><g><title>`0x7FF97E618D96 (3 samples, 0.01%)</title><rect x="99.9348%" y="341" width="0.0130%" height="15" fill="rgb(234,177,6)" fg:x="22985" fg:w="3"/><text x="100.1848%" y="351.50"></text></g><g><title>`0x7FF97E61E289 (3 samples, 0.01%)</title><rect x="99.9348%" y="325" width="0.0130%" height="15" fill="rgb(217,24,9)" fg:x="22985" fg:w="3"/><text x="100.1848%" y="335.50"></text></g><g><title>`0x7FF97E61D309 (3 samples, 0.01%)</title><rect x="99.9348%" y="309" width="0.0130%" height="15" fill="rgb(220,13,46)" fg:x="22985" fg:w="3"/><text x="100.1848%" y="319.50"></text></g><g><title>`0x7FF97E61C8D8 (3 samples, 0.01%)</title><rect x="99.9348%" y="293" width="0.0130%" height="15" fill="rgb(239,221,27)" fg:x="22985" fg:w="3"/><text x="100.1848%" y="303.50"></text></g><g><title>`0x7FF97E6CE713 (7 samples, 0.03%)</title><rect x="99.9348%" y="389" width="0.0304%" height="15" fill="rgb(222,198,25)" fg:x="22985" fg:w="7"/><text x="100.1848%" y="399.50"></text></g><g><title>`0x7FF97E61A73A (7 samples, 0.03%)</title><rect x="99.9348%" y="373" width="0.0304%" height="15" fill="rgb(211,99,13)" fg:x="22985" fg:w="7"/><text x="100.1848%" y="383.50"></text></g><g><title>`0x7FF97E6090AC (7 samples, 0.03%)</title><rect x="99.9348%" y="357" width="0.0304%" height="15" fill="rgb(232,111,31)" fg:x="22985" fg:w="7"/><text x="100.1848%" y="367.50"></text></g><g><title>`0x7FF97E618E20 (4 samples, 0.02%)</title><rect x="99.9478%" y="341" width="0.0174%" height="15" fill="rgb(245,82,37)" fg:x="22988" fg:w="4"/><text x="100.1978%" y="351.50"></text></g><g><title>`0x7FF97E61DB0D (4 samples, 0.02%)</title><rect x="99.9478%" y="325" width="0.0174%" height="15" fill="rgb(227,149,46)" fg:x="22988" fg:w="4"/><text x="100.1978%" y="335.50"></text></g><g><title>`0x7FF97E65D340 (4 samples, 0.02%)</title><rect x="99.9478%" y="309" width="0.0174%" height="15" fill="rgb(218,36,50)" fg:x="22988" fg:w="4"/><text x="100.1978%" y="319.50"></text></g><g><title>`0x7FF97E65D2CE (4 samples, 0.02%)</title><rect x="99.9478%" y="293" width="0.0174%" height="15" fill="rgb(226,80,48)" fg:x="22988" fg:w="4"/><text x="100.1978%" y="303.50"></text></g><g><title>`0x7FF97E65D51D (4 samples, 0.02%)</title><rect x="99.9478%" y="277" width="0.0174%" height="15" fill="rgb(238,224,15)" fg:x="22988" fg:w="4"/><text x="100.1978%" y="287.50"></text></g><g><title>`0x7FF97E618B7F (4 samples, 0.02%)</title><rect x="99.9478%" y="261" width="0.0174%" height="15" fill="rgb(241,136,10)" fg:x="22988" fg:w="4"/><text x="100.1978%" y="271.50"></text></g><g><title>`0x7FF97E6CEA43 (3 samples, 0.01%)</title><rect x="99.9696%" y="389" width="0.0130%" height="15" fill="rgb(208,32,45)" fg:x="22993" fg:w="3"/><text x="100.2196%" y="399.50"></text></g><g><title>`0x7FF97E614B9B (3 samples, 0.01%)</title><rect x="99.9696%" y="373" width="0.0130%" height="15" fill="rgb(207,135,9)" fg:x="22993" fg:w="3"/><text x="100.2196%" y="383.50"></text></g><g><title>`0x7FF97E614DE6 (3 samples, 0.01%)</title><rect x="99.9696%" y="357" width="0.0130%" height="15" fill="rgb(206,86,44)" fg:x="22993" fg:w="3"/><text x="100.2196%" y="367.50"></text></g><g><title>`0x7FF97E615DA4 (3 samples, 0.01%)</title><rect x="99.9696%" y="341" width="0.0130%" height="15" fill="rgb(245,177,15)" fg:x="22993" fg:w="3"/><text x="100.2196%" y="351.50"></text></g><g><title>`0x7FF97E61D309 (3 samples, 0.01%)</title><rect x="99.9696%" y="325" width="0.0130%" height="15" fill="rgb(206,64,50)" fg:x="22993" fg:w="3"/><text x="100.2196%" y="335.50"></text></g><g><title>`0x7FF97E664383 (17 samples, 0.07%)</title><rect x="99.9217%" y="421" width="0.0739%" height="15" fill="rgb(234,36,40)" fg:x="22982" fg:w="17"/><text x="100.1717%" y="431.50"></text></g><g><title>`0x7FF97E6BA86E (17 samples, 0.07%)</title><rect x="99.9217%" y="405" width="0.0739%" height="15" fill="rgb(213,64,8)" fg:x="22982" fg:w="17"/><text x="100.1717%" y="415.50"></text></g><g><title>`0x7FF97E6CEBC9 (3 samples, 0.01%)</title><rect x="99.9826%" y="389" width="0.0130%" height="15" fill="rgb(210,75,36)" fg:x="22996" fg:w="3"/><text x="100.2326%" y="399.50"></text></g><g><title>`0x7FF97E65D340 (3 samples, 0.01%)</title><rect x="99.9826%" y="373" width="0.0130%" height="15" fill="rgb(229,88,21)" fg:x="22996" fg:w="3"/><text x="100.2326%" y="383.50"></text></g><g><title>all (23,000 samples, 100%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(252,204,47)" fg:x="0" fg:w="23000"/><text x="0.2500%" y="463.50"></text></g><g><title>`0x7FF97E6642AE (18 samples, 0.08%)</title><rect x="99.9217%" y="437" width="0.0783%" height="15" fill="rgb(208,77,27)" fg:x="22982" fg:w="18"/><text x="100.1717%" y="447.50"></text></g></svg></svg>